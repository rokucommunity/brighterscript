{"https://developer.roku.com/api/v1/get-dev-cms-doc?filePath=left-nav%2Freferences.json&locale=en-us":"{\n  \"content\": \"{\\n  \\\"Reference overview\\\":\\\"/docs/references/references-overview.md\\\",\\n\\n  \\\"SceneGraph\\\":{\\n     \\\"Component functions\\\":{\\n        \\\"init()\\\":\\\"/docs/references/scenegraph/component-functions/init.md\\\",\\n        \\\"onKeyEvent()\\\":\\\"/docs/references/scenegraph/component-functions/onkeyevent.md\\\"\\n     },\\n     \\\"XML elements\\\":{\\n        \\\"<component>\\\":\\\"/docs/references/scenegraph/xml-elements/component.md\\\",\\n        \\\"<interface>\\\":\\\"/docs/references/scenegraph/xml-elements/interface.md\\\",\\n        \\\"<script>\\\":\\\"/docs/references/scenegraph/xml-elements/script.md\\\",\\n        \\\"<children>\\\":\\\"/docs/references/scenegraph/xml-elements/children.md\\\"\\n     },\\n    \\\"Node\\\":\\\"/docs/references/scenegraph/node.md\\\",\\n    \\\"Scene\\\":\\\"/docs/references/scenegraph/scene.md\\\",\\n    \\\"Abstract Nodes\\\":{\\n        \\\"AnimationBase\\\":\\\"/docs/references/scenegraph/abstract-nodes/animationbase.md\\\",\\n        \\\"ArrayGrid\\\":\\\"/docs/references/scenegraph/abstract-nodes/arraygrid.md\\\"\\n     },\\n     \\\"Renderable Nodes\\\":{\\n        \\\"Poster\\\":\\\"/docs/references/scenegraph/renderable-nodes/poster.md\\\",\\n        \\\"Rectangle\\\":\\\"/docs/references/scenegraph/renderable-nodes/rectangle.md\\\",\\n        \\\"SimpleLabel\\\":\\\"/docs/references/scenegraph/renderable-nodes/simplelabel.md\\\"\\n     },\\n     \\t\\\"Label Nodes\\\":{\\n     \\t\\t\\\"LabelBase\\\":\\\"/docs/references/scenegraph/label-nodes/label-base.md\\\",\\n     \\t\\t\\\"MultiStyleLabel\\\":\\\"/docs/references/scenegraph/label-nodes/multi-style-label.md\\\",\\n     \\t\\t\\\"Label\\\":\\\"/docs/references/scenegraph/label-nodes/label.md\\\",\\n     \\t\\t\\\"InfoPane\\\":\\\"/docs/references/scenegraph/label-nodes/info-pane.md\\\"\\n     },\\n     \\\"Animation Nodes\\\":{\\n        \\\"Overview\\\":\\\"/docs/references/scenegraph/animation-nodes/overview.md\\\",\\n        \\\"Animation\\\":\\\"/docs/references/scenegraph/animation-nodes/animation.md\\\",\\n        \\\"SequentialAnimation\\\":\\\"/docs/references/scenegraph/animation-nodes/sequentialanimation.md\\\",\\n        \\\"ParallelAnimation\\\":\\\"/docs/references/scenegraph/animation-nodes/parallelanimation.md\\\",\\n        \\\"ColorFieldInterpolator\\\":\\\"/docs/references/scenegraph/animation-nodes/colorfieldinterpolator.md\\\",\\n        \\\"FloatFieldInterpolator\\\":\\\"/docs/references/scenegraph/animation-nodes/floatfieldinterpolator.md\\\",\\n        \\\"Vector2DfieldInterpolator\\\":\\\"/docs/references/scenegraph/animation-nodes/vector2dfieldinterpolator.md\\\"\\n     },\\n     \\\"Typographic Nodes\\\":{\\n        \\\"Overview\\\":\\\"/docs/references/scenegraph/typographic-nodes/overview.md\\\",\\n        \\\"Font\\\":\\\"/docs/references/scenegraph/typographic-nodes/font.md\\\",\\n        \\\"ScrollingLabel\\\":\\\"/docs/references/scenegraph/typographic-nodes/scrollinglabel.md\\\",\\n        \\\"ScrollableText\\\":\\\"/docs/references/scenegraph/typographic-nodes/scrollabletext.md\\\"\\n     },\\n     \\\"Control Nodes\\\":{\\n        \\\"ContentNode\\\":\\\"/docs/references/scenegraph/control-nodes/contentnode.md\\\",\\n        \\\"Task\\\":\\\"/docs/references/scenegraph/control-nodes/task.md\\\",\\n        \\\"MaskGroup\\\":\\\"/docs/references/scenegraph/control-nodes/maskgroup.md\\\",\\n        \\\"Timer\\\":\\\"/docs/references/scenegraph/control-nodes/timer.md\\\",\\n        \\\"ComponentLibrary\\\":\\\"/docs/references/scenegraph/control-nodes/componentlibrary.md\\\",\\n        \\\"ChannelStore\\\":\\\"/docs/references/scenegraph/control-nodes/channelstore.md\\\"\\n     },\\n     \\\"Layout/Group Nodes\\\":{\\n        \\\"Group\\\":\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\",\\n        \\\"ButtonGroup\\\":\\\"/docs/references/scenegraph/layout-group-nodes/buttongroup.md\\\",\\n        \\\"LayoutGroup\\\":\\\"/docs/references/scenegraph/layout-group-nodes/layoutgroup.md\\\",\\n        \\\"TargetGroup\\\":\\\"/docs/references/scenegraph/layout-group-nodes/targetgroup.md\\\"\\n     },\\n     \\\"Voice Keyboard Nodes\\\":{\\n        \\\"DynamicKeyboardBase\\\": \\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\",\\n        \\\"DynamicKeyboard\\\": \\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard.md\\\",\\n\\t\\t\\\"DynamicPinPad\\\": \\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-pinpad.md\\\",\\n        \\\"DynamicMiniKeyboard\\\": \\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-mini-keyboard.md\\\",\\n        \\\"DynamicCustomKeyboard\\\": \\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-custom-keyboard.md\\\",\\n        \\\"DynamicKeyGrid\\\": \\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-key-grid.md\\\",\\n        \\\"VoiceTextEditBox\\\": \\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/voice-text-edit-box.md\\\",\\n        \\\"KeyDefinitionFile\\\": \\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/key-defintion-file.md\\\"\\n    }, \\n     \\\"StandardDialog Nodes\\\":{\\n        \\\"Overview\\\": \\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-dialog-framework-overview.md\\\",\\n        \\\"StandardDialog\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-dialog.md\\\",\\n        \\\"StandardMessageDialog\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-message-dialog.md\\\",\\n        \\\"StandardKeyboardDialog\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-keyboard-dialog.md\\\",\\n        \\\"StandardPinPadDialog\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-pinpad-dialog.md\\\",\\n        \\\"StandardProgressDialog\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-progress-dialog.md\\\",\\n        \\\"StdDlgAreaBase\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-area-base.md\\\",\\n        \\\"StdDlgTitleArea\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-title-area.md\\\",\\n        \\\"StdDlgContentArea\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-content-area.md\\\",\\n        \\\"StdDlgButtonArea\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-button-area.md\\\",\\n        \\\"StdDlgSideCardArea\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-side-card-area.md\\\",        \\n        \\\"StdDlgButton\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-button.md\\\",\\n        \\\"StdDlgItemBase\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\",\\n        \\\"StdDlgItemGroup\\\": \\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-group.md\\\",\\n        \\\"StdDlgActionCardItem\\\": \\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-action-card-item.md\\\", \\n        \\\"StdDlgBulletTextItem\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-bullet-text-item.md\\\",\\n        \\\"StdDlgDeterminateProgressItem\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-determinate-progress-item.md\\\",\\n        \\\"StdDlgGraphicItem\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-graphic-item.md\\\",\\n        \\\"StdDlgKeyboardItem\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-keyboard-item.md\\\",\\n        \\\"StdDlgMultiStyleTextItem\\\": \\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-multi-style-text-item.md\\\",\\n        \\\"StdDlgProgressItem\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-progress-item.md\\\",\\n        \\\"StdDlgTextItem\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-text-item.md\\\",\\n        \\\"StdDlgCustomItem\\\":\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-custom-item.md\\\" \\n     },\\n     \\\"Dialog Nodes\\\":{\\n        \\\"Dialog\\\":\\\"/docs/references/scenegraph/dialog-nodes/dialog.md\\\",\\n        \\\"KeyboardDialog\\\":\\\"/docs/references/scenegraph/dialog-nodes/keyboarddialog.md\\\",\\n        \\\"PinDialog\\\":\\\"/docs/references/scenegraph/dialog-nodes/pindialog.md\\\",\\n        \\\"ProgressDialog\\\":\\\"/docs/references/scenegraph/dialog-nodes/progressdialog.md\\\"\\n     },\\n     \\\"Widget Nodes\\\":{\\n        \\\"Button\\\":\\\"/docs/references/scenegraph/widget-nodes/button.md\\\",\\n        \\\"TextEditBox\\\":\\\"/docs/references/scenegraph/widget-nodes/texteditbox.md\\\",\\n        \\\"Pinpad\\\":\\\"/docs/references/scenegraph/widget-nodes/pinpad.md\\\",\\n        \\\"Keyboard\\\":\\\"/docs/references/scenegraph/widget-nodes/keyboard.md\\\",\\n        \\\"MiniKeyboard\\\":\\\"/docs/references/scenegraph/widget-nodes/minikeyboard.md\\\",\\n        \\\"BusySpinner\\\":\\\"/docs/references/scenegraph/widget-nodes/busyspinner.md\\\",\\n        \\\"ParentalControlPinpad\\\":\\\"/docs/references/scenegraph/widget-nodes/parentalcontrolpinpad.md\\\"\\n     },\\n     \\\"List and Grid Nodes\\\":{\\n        \\\"Overview\\\":\\\"/docs/references/scenegraph/list-and-grid-nodes/overview.md\\\",\\n        \\\"LabelList\\\":\\\"/docs/references/scenegraph/list-and-grid-nodes/labellist.md\\\",\\n        \\\"MarkupList\\\":\\\"/docs/references/scenegraph/list-and-grid-nodes/markuplist.md\\\",\\n        \\\"PosterGrid\\\":\\\"/docs/references/scenegraph/list-and-grid-nodes/postergrid.md\\\",\\n        \\\"MarkupGrid\\\":\\\"/docs/references/scenegraph/list-and-grid-nodes/markupgrid.md\\\",\\n        \\\"RowList\\\":\\\"/docs/references/scenegraph/list-and-grid-nodes/rowlist.md\\\",\\n        \\\"CheckList\\\":\\\"/docs/references/scenegraph/list-and-grid-nodes/checklist.md\\\",\\n        \\\"RadioButtonList\\\":\\\"/docs/references/scenegraph/list-and-grid-nodes/radiobuttonlist.md\\\",\\n        \\\"TargetList\\\":\\\"/docs/references/scenegraph/list-and-grid-nodes/targetlist.md\\\",\\n        \\\"TargetSet\\\":\\\"/docs/references/scenegraph/list-and-grid-nodes/targetset.md\\\",\\n        \\\"ZoomRowList\\\":\\\"/docs/references/scenegraph/list-and-grid-nodes/zoomrowlist.md\\\",\\n        \\\"TimeGrid\\\":\\\"/docs/references/scenegraph/list-and-grid-nodes/timegrid.md\\\"\\n     },\\n     \\\"Sliding Panel Nodes\\\":{\\n        \\\"Overview\\\":\\\"/docs/references/scenegraph/sliding-panels-nodes/overview.md\\\",\\n        \\\"OverhangPanelSetScene\\\":\\\"/docs/references/scenegraph/sliding-panels-nodes/overhangpanelsetscene.md\\\",\\n        \\\"Overhang\\\":\\\"/docs/references/scenegraph/sliding-panels-nodes/overhang.md\\\",\\n        \\\"PanelSet\\\":\\\"/docs/references/scenegraph/sliding-panels-nodes/panelset.md\\\",\\n        \\\"Panel\\\":\\\"/docs/references/scenegraph/sliding-panels-nodes/panel.md\\\",\\n        \\\"ListPanel\\\":\\\"/docs/references/scenegraph/sliding-panels-nodes/listpanel.md\\\",\\n        \\\"GridPanel\\\":\\\"/docs/references/scenegraph/sliding-panels-nodes/gridpanel.md\\\"\\n     },\\n     \\\"Media Playback Nodes\\\":{\\n        \\\"Audio\\\":\\\"/docs/references/scenegraph/media-playback-nodes/audio.md\\\",\\n        \\\"SoundEffect\\\":\\\"/docs/references/scenegraph/media-playback-nodes/soundeffect.md\\\",\\n        \\\"Video\\\":\\\"/docs/references/scenegraph/media-playback-nodes/video.md\\\"\\n     }\\n  },\\n\\n      \\\"BrightScript\\\":{\\n\\n        \\\"Language\\\":{\\n             \\\"Language reference\\\":\\\"/docs/references/brightscript/language/brightscript-language-reference.md\\\",\\n             \\\"Statement summary\\\":\\\"/docs/references/brightscript/language/statement-summary.md\\\",\\n             \\\"Expressions, variables, and types\\\":\\\"/docs/references/brightscript/language/expressions-variables-types.md\\\",\\n             \\\"Component architecture\\\":\\\"/docs/references/brightscript/language/component-architecture.md\\\",\\n             \\\"Program statements\\\":\\\"/docs/references/brightscript/language/program-statements.md\\\",\\n             \\\"Runtime functions\\\":\\\"/docs/references/brightscript/language/runtime-functions.md\\\",\\n             \\\"Error handling facilities\\\":\\\"/docs/references/brightscript/language/error-handling.md\\\",\\n             \\\"Global utility functions\\\":\\\"/docs/references/brightscript/language/global-utility-functions.md\\\",\\n             \\\"Global string functions\\\":\\\"/docs/references/brightscript/language/global-string-functions.md\\\",\\n             \\\"Global math functions\\\":\\\"/docs/references/brightscript/language/global-math-functions.md\\\",\\n             \\\"Reserved words\\\":\\\"/docs/references/brightscript/language/reserved-words.md\\\",\\n             \\\"Conditional compilation\\\":\\\"/docs/references/brightscript/language/conditional-compilation.md\\\"\\n          },\\n\\n         \\\"Components\\\":{\\n            \\\"roAppInfo\\\":\\\"/docs/references/brightscript/components/roappinfo.md\\\",\\n            \\\"roAppManager\\\":\\\"/docs/references/brightscript/components/roappmanager.md\\\",\\n            \\\"roAppMemoryMonitor\\\": \\\"/docs/references/brightscript/components/roappmemorymonitor.md\\\", \\n            \\\"roArray\\\":\\\"/docs/references/brightscript/components/roarray.md\\\",\\n            \\\"roAssociativeArray\\\":\\\"/docs/references/brightscript/components/roassociativearray.md\\\",\\n            \\\"roAudioGuide\\\":\\\"/docs/references/brightscript/components/roaudioguide.md\\\",\\n            \\\"roAudioMetadata\\\":\\\"/docs/references/brightscript/components/roaudiometadata.md\\\",\\n            \\\"roAudioPlayer\\\":\\\"/docs/references/brightscript/components/roaudioplayer.md\\\",\\n            \\\"roAudioResource\\\":\\\"/docs/references/brightscript/components/roaudioresource.md\\\",\\n            \\\"roBitmap\\\":\\\"/docs/references/brightscript/components/robitmap.md\\\",\\n            \\\"roBoolean\\\":\\\"/docs/references/brightscript/components/roboolean.md\\\",\\n            \\\"roByteArray\\\":\\\"/docs/references/brightscript/components/robytearray.md\\\",\\n            \\\"toCECStatus\\\":\\\"/docs/references/brightscript/components/rocecstatus.md\\\",\\n            \\\"roChannelStore\\\":\\\"/docs/references/brightscript/components/rochannelstore.md\\\",\\n            \\\"roCompositor\\\":\\\"/docs/references/brightscript/components/rocompositor.md\\\",\\n            \\\"roDataGramSocket\\\":\\\"/docs/references/brightscript/components/rodatagramsocket.md\\\",\\n            \\\"roDateTime\\\":\\\"/docs/references/brightscript/components/rodatetime.md\\\",\\n            \\\"roDeviceInfo\\\":\\\"/docs/references/brightscript/components/rodeviceinfo.md\\\",\\n            \\\"roDouble\\\":\\\"/docs/references/brightscript/components/rodouble.md\\\",\\n            \\\"roDeviceCrypto\\\":\\\"/docs/references/brightscript/components/rodevicecrypto.md\\\",\\n            \\\"roDsa\\\": \\\"/docs/references/brightscript/components/rodsa.md\\\",\\n            \\\"roEVPCipher\\\":\\\"/docs/references/brightscript/components/roevpcipher.md\\\",\\n            \\\"roEVPDigest\\\":\\\"/docs/references/brightscript/components/roevpdigest.md\\\",\\n            \\\"roFileSystem\\\":\\\"/docs/references/brightscript/components/rofilesystem.md\\\",\\n            \\\"roFloat\\\":\\\"/docs/references/brightscript/components/rofloat.md\\\",\\n            \\\"roFont\\\":\\\"/docs/references/brightscript/components/rofont.md\\\",\\n            \\\"roFontRegistry\\\":\\\"/docs/references/brightscript/components/rofontregistry.md\\\",\\n            \\\"roFunction\\\":\\\"/docs/references/brightscript/components/rofunction.md\\\",\\n            \\\"roHdmiStatus\\\":\\\"/docs/references/brightscript/components/rohdmistatus.md\\\",\\n            \\\"roHMAC\\\":\\\"/docs/references/brightscript/components/rohmac.md\\\",\\n            \\\"roHttpAgent\\\":\\\"/docs/references/brightscript/components/rohttpagent.md\\\",\\n            \\\"roImageMetaData\\\":\\\"/docs/references/brightscript/components/roimagemetadata.md\\\",\\n            \\\"roInput\\\":\\\"/docs/references/brightscript/components/roinput.md\\\",\\n            \\\"roInt\\\":\\\"/docs/references/brightscript/components/roint.md\\\",\\n            \\\"roInvalid\\\":\\\"/docs/references/brightscript/components/roinvalid.md\\\",\\n            \\\"roList\\\":\\\"/docs/references/brightscript/components/rolist.md\\\",\\n            \\\"roLocalization\\\":\\\"/docs/references/brightscript/components/rolocalization.md\\\",\\n            \\\"roLongInteger\\\":\\\"/docs/references/brightscript/components/rolonginteger.md\\\",\\n            \\\"roMessagePort\\\":\\\"/docs/references/brightscript/components/romessageport.md\\\",\\n            \\\"roMicrophone\\\":\\\"/docs/references/brightscript/components/romicrophone.md\\\",\\n            \\\"roPath\\\":\\\"/docs/references/brightscript/components/ropath.md\\\",\\n            \\\"roProgramGuide\\\":\\\"/docs/references/brightscript/components/roprogramguide.md\\\",\\n            \\\"roRegex\\\":\\\"/docs/references/brightscript/components/roregex.md\\\",\\n            \\\"roRegion\\\":\\\"/docs/references/brightscript/components/roregion.md\\\",\\n            \\\"roRegistry\\\":\\\"/docs/references/brightscript/components/roregistry.md\\\",\\n            \\\"roRegistrySection\\\":\\\"/docs/references/brightscript/components/roregistrysection.md\\\",\\n            \\\"roRemoteInfo\\\":\\\"/docs/references/brightscript/components/roremoteinfo.md\\\",\\n            \\\"roRSA\\\":\\\"/docs/references/brightscript/components/rorsa.md\\\",\\n            \\\"roScreen\\\":\\\"/docs/references/brightscript/components/roscreen.md\\\",\\n            \\\"roSGNode\\\":\\\"/docs/references/brightscript/components/rosgnode.md\\\",\\n            \\\"roSGScreen\\\":\\\"/docs/references/brightscript/components/rosgscreen.md\\\",\\n            \\\"roSocketAddress\\\":\\\"/docs/references/brightscript/components/rosocketaddress.md\\\",\\n            \\\"roSprite\\\":\\\"/docs/references/brightscript/components/rosprite.md\\\",\\n            \\\"roStreamSocket\\\":\\\"/docs/references/brightscript/components/rostreamsocket.md\\\",\\n            \\\"roString\\\":\\\"/docs/references/brightscript/components/rostring.md\\\",\\n            \\\"roSystemlog\\\":\\\"/docs/references/brightscript/components/rosystemlog.md\\\",\\n            \\\"roTextToSpeech\\\":\\\"/docs/references/brightscript/components/rotexttospeech.md\\\",\\n            \\\"roTextureManager\\\":\\\"/docs/references/brightscript/components/rotexturemanager.md\\\",\\n            \\\"roTextureRequest\\\":\\\"/docs/references/brightscript/components/rotexturerequest.md\\\",\\n            \\\"roTimespan\\\":\\\"/docs/references/brightscript/components/rotimespan.md\\\",\\n            \\\"roUrlTransfer\\\":\\\"/docs/references/brightscript/components/rourltransfer.md\\\",\\n            \\\"roVideoPlayer\\\":\\\"/docs/references/brightscript/components/rovideoplayer.md\\\",\\n            \\\"roXMLElement\\\":\\\"/docs/references/brightscript/components/roxmlelement.md\\\",\\n            \\\"roXMLList\\\":\\\"/docs/references/brightscript/components/roxmllist.md\\\"\\n         },\\n\\n         \\\"Interfaces\\\":{\\n\\n            \\\"ifAppInfo\\\":\\\"/docs/references/brightscript/interfaces/ifappinfo.md\\\",\\n            \\\"ifAppManager\\\":\\\"/docs/references/brightscript/interfaces/ifappmanager.md\\\",\\n            \\\"ifAppMemoryMonitor\\\":\\\"/docs/references/brightscript/interfaces/ifappmemorymonitor.md\\\",\\n            \\\"ifArray\\\":\\\"/docs/references/brightscript/interfaces/ifarray.md\\\",\\n            \\\"ifArrayGet\\\":\\\"/docs/references/brightscript/interfaces/ifarrayget.md\\\",\\n            \\\"ifArrayJoin\\\":\\\"/docs/references/brightscript/interfaces/ifarrayjoin.md\\\",\\n            \\\"ifArraySet\\\":\\\"/docs/references/brightscript/interfaces/ifarrayset.md\\\",\\n            \\\"ifArraySort\\\":\\\"/docs/references/brightscript/interfaces/ifarraysort.md\\\",\\n            \\\"ifAssociativeArray\\\":\\\"/docs/references/brightscript/interfaces/ifassociativearray.md\\\",\\n            \\\"ifAudioGuide\\\":\\\"/docs/references/brightscript/interfaces/ifaudioguide.md\\\",\\n            \\\"ifAudioMetaData\\\":\\\"/docs/references/brightscript/interfaces/ifaudiometadata.md\\\",\\n            \\\"ifAudioPlayer\\\":\\\"/docs/references/brightscript/interfaces/ifaudioplayer.md\\\",\\n            \\\"ifAudioResource\\\":\\\"/docs/references/brightscript/interfaces/ifaudioresource.md\\\",\\n            \\\"ifBoolean\\\":\\\"/docs/references/brightscript/interfaces/ifboolean.md\\\",\\n            \\\"ifByteArray\\\":\\\"/docs/references/brightscript/interfaces/ifbytearray.md\\\",\\n            \\\"ifCECStatus\\\":\\\"/docs/references/brightscript/interfaces/ifcecstatus.md\\\",\\n            \\\"ifChannelStore\\\":\\\"/docs/references/brightscript/interfaces/ifchannelstore.md\\\",\\n            \\\"ifCompositor\\\":\\\"/docs/references/brightscript/interfaces/ifcompositor.md\\\",\\n            \\\"ifDateTime\\\":\\\"/docs/references/brightscript/interfaces/ifdatetime.md\\\",\\n            \\\"ifDeviceInfo\\\":\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md\\\",\\n            \\\"ifDeviceCrypto\\\":\\\"/docs/references/brightscript/interfaces/ifdevicecrypto.md\\\",\\n            \\\"ifDouble\\\":\\\"/docs/references/brightscript/interfaces/ifdouble.md\\\",\\n            \\\"ifDraw2D\\\":\\\"/docs/references/brightscript/interfaces/ifdraw2d.md\\\",\\n            \\\"ifDsa\\\":\\\"/docs/references/brightscript/interfaces/ifdsa.md\\\",            \\n            \\\"ifEnum\\\":\\\"/docs/references/brightscript/interfaces/ifenum.md\\\",\\n            \\\"ifEVPCipher\\\":\\\"/docs/references/brightscript/interfaces/ifevpcipher.md\\\",\\n            \\\"ifEVPDigest\\\":\\\"/docs/references/brightscript/interfaces/ifevpdigest.md\\\",\\n            \\\"ifFileSystem\\\":\\\"/docs/references/brightscript/interfaces/iffilesystem.md\\\",\\n            \\\"ifFloat\\\":\\\"/docs/references/brightscript/interfaces/iffloat.md\\\",\\n            \\\"ifFont\\\":\\\"/docs/references/brightscript/interfaces/iffont.md\\\",\\n            \\\"ifFontRegistry\\\":\\\"/docs/references/brightscript/interfaces/iffontregistry.md\\\",\\n            \\\"ifFunction\\\":\\\"/docs/references/brightscript/interfaces/iffunction.md\\\",\\n            \\\"ifGetMessagePort\\\":\\\"/docs/references/brightscript/interfaces/ifgetmessageport.md\\\",\\n            \\\"ifHdmiStatus\\\":\\\"/docs/references/brightscript/interfaces/ifhdmistatus.md\\\",\\n            \\\"ifHMAC\\\":\\\"/docs/references/brightscript/interfaces/ifhmac.md\\\",\\n            \\\"ifHttpAgent\\\":\\\"/docs/references/brightscript/interfaces/ifhttpagent.md\\\",\\n            \\\"ifImageMetaData\\\":\\\"/docs/references/brightscript/interfaces/ifimagemetadata.md\\\",\\n            \\\"ifInput\\\":\\\"/docs/references/brightscript/interfaces/ifinput.md\\\",\\n            \\\"ifInt\\\":\\\"/docs/references/brightscript/interfaces/ifint.md\\\",\\n            \\\"ifIntOps\\\":\\\"/docs/references/brightscript/interfaces/ifintops.md\\\",\\n            \\\"ifList\\\":\\\"/docs/references/brightscript/interfaces/iflist.md\\\",\\n            \\\"ifListToArray\\\":\\\"/docs/references/brightscript/interfaces/iflisttoarray.md\\\",\\n            \\\"ifLocalization\\\":\\\"/docs/references/brightscript/interfaces/iflocalization.md\\\",\\n            \\\"ifLongInt\\\":\\\"/docs/references/brightscript/interfaces/iflongint.md\\\",\\n            \\\"ifMessagePort\\\":\\\"/docs/references/brightscript/interfaces/ifmessageport.md\\\",\\n            \\\"ifMicrophone\\\":\\\"/docs/references/brightscript/interfaces/ifmicrophone.md\\\",\\n            \\\"ifPath\\\":\\\"/docs/references/brightscript/interfaces/ifpath.md\\\",\\n            \\\"ifProgramGuide\\\":\\\"/docs/references/brightscript/interfaces/ifprogramguide.md\\\",\\n            \\\"ifRegex\\\":\\\"/docs/references/brightscript/interfaces/ifregex.md\\\",\\n            \\\"ifRegion\\\":\\\"/docs/references/brightscript/interfaces/ifregion.md\\\",\\n            \\\"ifRegistry\\\":\\\"/docs/references/brightscript/interfaces/ifregistry.md\\\",\\n            \\\"ifRegistrySection\\\":\\\"/docs/references/brightscript/interfaces/ifregistrysection.md\\\",\\n            \\\"ifRemoteInfo\\\":\\\"/docs/references/brightscript/interfaces/ifremoteinfo.md\\\",\\n            \\\"ifSGScreen\\\":\\\"/docs/references/brightscript/interfaces/ifsgscreen.md\\\",\\n            \\\"ifRSA\\\":\\\"/docs/references/brightscript/interfaces/ifrsa.md\\\",\\n            \\\"ifScreen\\\":\\\"/docs/references/brightscript/interfaces/ifscreen.md\\\",\\n            \\\"ifSetMessagePort\\\":\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\",\\n            \\\"ifSGNodeBoundingRect\\\":\\\"/docs/references/brightscript/interfaces/ifsgnodeboundingrect.md\\\",\\n            \\\"ifSGNodeChildren\\\":\\\"/docs/references/brightscript/interfaces/ifsgnodechildren.md\\\",\\n            \\\"ifSGNodeDict\\\":\\\"/docs/references/brightscript/interfaces/ifsgnodedict.md\\\",\\n            \\\"ifSGNodeField\\\":\\\"/docs/references/brightscript/interfaces/ifsgnodefield.md\\\",\\n            \\\"ifSGNodeFocus\\\":\\\"/docs/references/brightscript/interfaces/ifsgnodefocus.md\\\",\\n            \\\"ifSGNodeHttpAgentAccess\\\":\\\"/docs/references/brightscript/interfaces/ifsgnodehttpagentaccess.md\\\",\\n            \\\"ifSocket\\\":\\\"/docs/references/brightscript/interfaces/ifsocket.md\\\",\\n            \\\"ifSocketAddress\\\":\\\"/docs/references/brightscript/interfaces/ifsocketaddress.md\\\",\\n            \\\"ifSocketAsync\\\":\\\"/docs/references/brightscript/interfaces/ifsocketasync.md\\\",\\n            \\\"ifSocketCastOption\\\":\\\"/docs/references/brightscript/interfaces/ifsocketcastoption.md\\\",\\n            \\\"ifSocketConnection\\\":\\\"/docs/references/brightscript/interfaces/ifsocketconnection.md\\\",\\n            \\\"ifSocketConnectionoption\\\":\\\"/docs/references/brightscript/interfaces/ifsocketconnectionoption.md\\\",\\n            \\\"ifSocketConnectionstatus\\\":\\\"/docs/references/brightscript/interfaces/ifsocketconnectionstatus.md\\\",\\n            \\\"ifSocketOption\\\":\\\"/docs/references/brightscript/interfaces/ifsocketoption.md\\\",\\n            \\\"ifSocketStatus\\\":\\\"/docs/references/brightscript/interfaces/ifsocketstatus.md\\\",\\n            \\\"ifSourceIdentity\\\":\\\"/docs/references/brightscript/interfaces/ifsourceidentity.md\\\",\\n            \\\"ifSprite\\\":\\\"/docs/references/brightscript/interfaces/ifsprite.md\\\",\\n            \\\"ifString\\\":\\\"/docs/references/brightscript/interfaces/ifstring.md\\\",\\n            \\\"ifStringOps\\\":\\\"/docs/references/brightscript/interfaces/ifstringops.md\\\",\\n            \\\"ifSystemLog\\\":\\\"/docs/references/brightscript/interfaces/ifsystemlog.md\\\",\\n            \\\"ifTextToSpeech\\\":\\\"/docs/references/brightscript/interfaces/iftexttospeech.md\\\",\\n            \\\"ifTextureManager\\\":\\\"/docs/references/brightscript/interfaces/iftexturemanager.md\\\",\\n            \\\"ifTextureRequest\\\":\\\"/docs/references/brightscript/interfaces/iftexturerequest.md\\\",\\n            \\\"ifTimeSpan\\\":\\\"/docs/references/brightscript/interfaces/iftimespan.md\\\",\\n            \\\"ifToStr\\\":\\\"/docs/references/brightscript/interfaces/iftostr.md\\\",\\n            \\\"ifUrlTransfer\\\":\\\"/docs/references/brightscript/interfaces/ifurltransfer.md\\\",\\n            \\\"ifVideoPlayer\\\":\\\"/docs/references/brightscript/interfaces/ifvideoplayer.md\\\",\\n            \\\"ifXMLElement\\\":\\\"/docs/references/brightscript/interfaces/ifxmlelement.md\\\",\\n            \\\"ifXMLList\\\":\\\"/docs/references/brightscript/interfaces/ifxmllist.md\\\"\\n         },\\n\\n         \\\"Events\\\":{\\n\\t\\t\\t\\\"roAppMemoryMonitorEvent\\\":\\\"/docs/references/brightscript/events/roappmemorymonitorevent.md\\\",\\n            \\\"roAudioPlayerEvent\\\":\\\"/docs/references/brightscript/events/roaudioplayerevent.md\\\",\\n            \\\"roCECStatusEvent\\\":\\\"/docs/references/brightscript/events/rocecstatusevent.md\\\",\\n            \\\"roChannelStoreEvent\\\":\\\"/docs/references/brightscript/events/rochannelstoreevent.md\\\",\\n            \\\"roDeviceInfoEvent\\\":\\\"/docs/references/brightscript/events/rodeviceinfoevent.md\\\",\\n            \\\"roFileSystemEvent\\\":\\\"/docs/references/brightscript/events/rofilesystemevent.md\\\",\\n            \\\"roHdmiStatusEvent\\\":\\\"/docs/references/brightscript/events/rohdmistatusevent.md\\\",\\n            \\\"roInputEvent\\\":\\\"/docs/references/brightscript/events/roinputevent.md\\\",\\n            \\\"roMicrophoneEvent\\\":\\\"/docs/references/brightscript/events/romicrophoneevent.md\\\",\\n            \\\"roSGNodeEvent\\\":\\\"/docs/references/brightscript/events/rosgnodeevent.md\\\",\\n            \\\"roSGScreenEvent\\\":\\\"/docs/references/brightscript/events/rosgscreenevent.md\\\",\\n            \\\"roSocketEvent\\\":\\\"/docs/references/brightscript/events/rosocketevent.md\\\",\\n            \\\"roSystemLogEvent\\\":\\\"/docs/references/brightscript/events/rosystemlogevent.md\\\",\\n            \\\"roTextToSpeechEvent\\\":\\\"/docs/references/brightscript/events/rotexttospeechevent.md\\\",\\n            \\\"roTextureRequestEvent\\\":\\\"/docs/references/brightscript/events/rotexturerequestevent.md\\\",\\n            \\\"roUniversalControlEvent\\\":\\\"/docs/references/brightscript/events/rouniversalcontrolevent.md\\\",\\n            \\\"roUrlEvent\\\":\\\"/docs/references/brightscript/events/rourlevent.md\\\",\\n            \\\"roVideoPlayerEvent\\\":\\\"/docs/references/brightscript/events/rovideoplayerevent.md\\\"\\n         }\\n      },\\n\\n      \\\"Deprecated APIs\\\":\\\"/docs/references/deprecated-apis.md\\\"\\n}\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roappinfo.md":"{\n  \"content\": \"<h1 id=\\\"roappinfo\\\">roAppInfo</h1>\\n<p>roAppInfo retrieves the developer ID, which can be useful during development. It also retrieves manifest values, such as the title and version number, avoiding the need to parse the manifest file from BrightScript.\\nThis object is created with no parameters.</p>\\n<h4 id=\\\"example\\\">Example</h4>\\n<p><strong>Implementation</strong></p>\\n<pre><code>brush: vb; gutter: false; theme: Confluence\\nappInfo = CreateObject(\\\"roAppInfo\\\")\\n\\nprint \\\"     ID: \\\" ; appInfo.GetID()\\nprint \\\"  IsDev: \\\" ; appInfo.IsDev()\\nprint \\\"  DevID: \\\" ; appInfo.GetDevID()\\nprint \\\"  Title: \\\" ; appInfo.GetTitle()\\nprint \\\"Version: \\\" ; appInfo.GetVersion()\\nprint \\\"MajVers: \\\" ; appInfo.GetValue(\\\"major_version\\\")\\n</code></pre>\\n<p><strong>Output</strong></p>\\n<pre><code>brush: plain; gutter: false; theme: Confluence\\n'      ID: 41089_bd3a\\n'   IsDev: false\\n'   DevID: 990df3584920876b7e74fe7b29e1f505f148373b\\n'   Title: BrightScript Test\\n' Version: 1.0.0\\n' MajVers: 1 \\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifappinfo.md\\\" title=\\\"ifAppInfo\\\">ifAppInfo</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roappmanager.md":"{\n  \"content\": \"<h1 id=\\\"roappmanager\\\">roAppManager</h1>\\n<p>The roAppManager component is used to returns information about the channel application.</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifappmanager.md\\\" title=\\\"ifAppManager\\\">ifAppManager</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roappmemorymonitor.md":"{\n  \"content\": \"<h1 id=\\\"roappmemorymonitor\\\">roAppMemoryMonitor</h1>\\n<p><em>Available since Roku OS 10.5</em></p>\\n<p>The <strong>roAppMemoryMonitor</strong> component is used to subscribe channels to low-memory notifications. When a channel is subscribed, it receives a <a href=\\\"/docs/references/brightscript/events/roappmemorymonitorevent.md\\\">roAppMemoryMonitorEvent </a>when it reaches a specific percentage of the per-channel memory limit (80%).</p>\\n<blockquote>\\n<p>To use the roAppMemoryMonitor functions, you must add the <strong>run_as_process=1</strong> attribute to the <a href=\\\"/docs/developer-program/getting-started/architecture/channel-manifest.md\\\">channel manifest</a>.</p>\\n<p>This feature is only supported on <a href=\\\"/docs/specs/hardware.md#current-roku-models\\\">current Roku device models</a>.</p>\\n</blockquote>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifappmemorymonitor.md\\\">ifAppMemoryMonitor</a></li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/roappmemorymonitorevent.md\\\">roAppMemoryMonitorEvent</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roarray.md":"{\n  \"content\": \"<h1 id=\\\"roarray\\\">roArray</h1>\\n<p>An array stores an indexed collection of BrightScript objects. Each entry of an array can be a different type, or they may all of the same type.</p>\\n<p>An roArray is created with two parameters:</p>\\n<p><strong>CreateObject(\\\"roArray\\\", size as Integer, resize as Boolean)</strong></p>\\n<p>Size is the initial number of elements allocated for the array. If resize is true, the array will be resized if needed to accommodate more elements. If the array is large, this might be slow.\\nThe \\\"dim\\\" statement may be used instead of CreateObject to allocate a new array. Dim has the advantage in that it automatically creates arrays of arrays for multi-dimensional arrays.</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifarray.md\\\" title=\\\"ifArray\\\">ifArray</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifarrayget.md\\\" title=\\\"ifArrayGet\\\">ifArrayGet</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifarrayset.md\\\" title=\\\"ifArraySet\\\">ifArraySet</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifenum.md\\\" title=\\\"ifEnum\\\">ifEnum</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifarrayjoin.md\\\" title=\\\"ifArrayJoin\\\">ifArrayJoin</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifarraysort.md\\\" title=\\\"ifArraySort\\\">ifArraySort</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roassociativearray.md":"{\n  \"content\": \"<h1 id=\\\"roassociativearray\\\">roAssociativeArray</h1>\\n<p>An associative array (also known as a map, dictionary or hash table) allows objects to be associated with string keys. Associative arrays are built into the language. They can be accessed implicitly by using the dot or bracket operators, or by calling functions from the <a href=\\\"/docs/references/brightscript/interfaces/ifassociativearray.md\\\" title=\\\"ifAssociativeArray\\\">ifAssociativeArray</a> interface. For example, the last three lines in this example are equivalent:</p>\\n<pre><code>aa = { one : 1, two : 2, three : 3 }\\nx = aa[\\\"two\\\"]\\nx = aa.two\\nx = aa.Lookup(\\\"two\\\")\\n</code></pre>\\n<p>This object is created with no parameters:</p>\\n<pre><code>CreateObject(\\\"roAssociativeArray\\\")\\n</code></pre>\\n<p>It can also be created implicitly by using an Associative Array literal.</p>\\n<p>Starting from Roku OS 8, the quoted keys in Associative Array literals are now case-preserving. This change improves the readability of your code and is compatible with JSON usage.</p>\\n<p><strong>Example</strong></p>\\n<pre><code>' Creation of associative arrays\\n\\naa1 = CreateObject(\\\"roAssociativeArray\\\")   ' Explicitly \\naa2 = {}                                   ' Implicitly\\naa3 = {                                    ' With some initial values\\n   foo : 12,\\n   bar : 13\\n}\\n\\n' Assigning values\\n\\naa1.AddReplace(\\\"Bright\\\", \\\"Script\\\")  ' With explicit function calls\\naa1.AddReplace(\\\"TMOL\\\", 42)\\naa1.boo = 112                       ' With dot operator\\naa1[\\\"baz\\\"] = \\\"abcdefg\\\"              ' With bracket operator\\n\\n' Accessing values\\n\\nprint aa1.Bright           ' With dot operator (will print 'Script')\\nprint aa1.Lookup(\\\"TMOL\\\")   ' With function call (will print 42)\\nprint aa1[\\\"boo\\\"]           ' With bracket operator (will print 112)\\n\\n' Using ifEnum interface to walk through keys in an associative array\\nfor each key in aa1\\n\\n    print \\\"  \\\" key \\\"=\\\" aa1[key]\\n\\nend for\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifassociativearray.md\\\">ifAssociativeArray</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifenum.md\\\">ifEnum</a>             </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roaudioguide.md":"{\n  \"content\": \"<h1 id=\\\"roaudioguide\\\">roAudioGuide</h1>\\n<blockquote>\\n<p>This component is only available on the following devices: Roku Streaming Stick (3600X), Roku Express (3700X) and Express+ (3710X), Roku Premiere (4620X) and Premiere+ (4630X), Roku Ultra (4640X), and any Roku TV running Roku OS version 7.5 and later.</p>\\n</blockquote>\\n<p>The roAudioGuide component provides screen reader support for applications that require custom speech beyond what is provided by the automatic screen reader in SDK and Scene Graph components.</p>\\n<p>Though some of the roAudioGuide API is similar to <a href=\\\"/docs/references/brightscript/components/rotexttospeech.md\\\" title=\\\"roTextToSpeech\\\">roTextToSpeech</a>, roAudioGuide provides support specific to screen reader, including:</p>\\n<ul>\\n<li>Speaks when the screen reader is enabled, and doesn't speak if it isn't.</li>\\n<li>Automatically splits up text to reduce lag.</li>\\n<li>Uses the correct voice, language, volume, and speech rate for the screen reader.</li>\\n<li>Tries to be \\\"smart\\\" by pre-processing the text for correct pronunciation of things like currency, email addresses, acronyms, media-related names and titles, etc.</li>\\n</ul>\\n<p>Usually, roAudioGuide would be used on its own, but it can be used in conjunction with <a href=\\\"/docs/references/brightscript/components/rotexttospeech.md\\\" title=\\\"roTextToSpeech\\\">roTextToSpeech</a>.</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifaudioguide.md\\\" title=\\\"ifAudioGuide\\\">ifAudioGuide</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roaudiometadata.md":"{\n  \"content\": \"<h1 id=\\\"roaudiometadata\\\">roAudioMetadata</h1>\\n<p>The roAudioMetadata component provides developers access to audio file metadata included in many audio files. This should enable some audiofiles to deliver the information needed to fill out an roSpringboard screen without passing the info in a separate xml feed. roAudioMetadata currently only works with local file URLs. </p>\\n<p>The component requires the use of a dynamically loaded library that is not part of the initially booted image. Therefore, an entry must be added to the manifest of any applications that use the roAudioMetadata component so it can be loaded when the channel is launched. Here's the manifest entry:</p>\\n<p><em>requires_audiometadata=1</em></p>\\n<p>This object is created without any arguments:</p>\\n<p><code>CreateObject(\\\"roAudioMetadata\\\")</code></p>\\n<p><strong>Example</strong></p>\\n<pre><code>REM printAA() is from generalUtils.brs in our sample apps\\nREM and used to print an associative Array\\n\\nSub SaveCoverArtFile(filename As String)\\n    meta = CreateObject(\\\"roAudioMetadata\\\")\\n    meta.SetUrl(filename)\\n    print \\\"------------- GetTags() -------------------------\\\"\\n    tags = meta.GetTags()\\n    printAA(tags)\\n    print \\\"------------- GetAudioProperties() --------------\\\"\\n    properties = meta.GetAudioProperties()\\n    printAA(properties)\\n    print \\\"------------- GetCoverArt() ---------------------\\\"\\n    thumbnail = meta.GetCoverArt()\\n    if (thumbnail &#x3C;> invalid) then\\n            if (thumbnail.bytes = invalid) then\\n            return\\n        end if\\n        imgtype = thumbnail.type\\n        image_ext=\\\"\\\"\\n        if (imgtype = \\\"image/jpeg\\\" or imgtype = \\\"jpg\\\") then\\n            image_ext = \\\"jpg\\\"\\n        else if (imgtype = \\\"image/png\\\" or imgtype = \\\"png\\\") then\\n            image_ext = \\\"png\\\"\\n        else\\n            image_ext = \\\"jpg\\\"\\n        end if\\n        tmp_img = \\\"tmp:/CoverArtImage\\\" + \\\".\\\" + image_ext\\n        if (tmp_img &#x3C;> invalid) then\\n            DeleteFile(tmp_img)\\n        end if\\n        thumbnail.bytes.Writefile(tmp_img)\\n    end if\\nEnd Sub\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifaudiometadata.md\\\" title=\\\"ifAudioMetadata\\\">ifAudioMetadata</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roaudioplayer.md":"{\n  \"content\": \"<h1 id=\\\"roaudioplayer\\\">roAudioPlayer</h1>\\n<p>The Audio Player object provides the ability to setup the playing of a series of audio streams. The object accepts an array of content meta-data objects, describing the audio and providing URLs for accessing each stream. The component understands the following streamformat values: \\\"mp3\\\", \\\"wma\\\", \\\"mp4\\\", \\\"hls\\\", \\\"es.aac-adts\\\", \\\"flac.\\\"</p>\\n<p>This object does not provide an interface to a screen. In order to get events both from the screen you are using and the Audio Player, you should use the same Message Port for both objects. </p>\\n<p>This object is created with no parameters:</p>\\n<p><code>CreateObject(\\\"roAudioPlayer\\\")</code></p>\\n<p><strong>Example</strong></p>\\n<pre><code>Sub Main()\\n    audioPlayer = CreateObject(\\\"roAudioPlayer\\\")\\n    port = CreateObject(\\\"roMessagePort\\\")\\n    audioPlayer.SetMessagePort(port)\\n    song = CreateObject(\\\"roAssociativeArray\\\")\\n    song.url = \\\"http://www.theflute.co.uk/media/BachCPE_SonataAmin_1.wma\\\"\\n    audioplayer.addcontent(song)\\n    audioplayer.setloop(false)\\n    audioPlayer.play()\\n    while true\\n            msg = wait(0, port)\\n            if type(msg) = \\\"roAudioPlayerEvent\\\"\\n                    if msg.isStatusMessage() then\\n                        print \\\"roAudioPlayerEvent: \\\"; msg.getmessage()\\n                        if msg.getmessage() = \\\"end of playlist\\\" return\\n                    endif\\n            endif\\n        end while\\nEnd Sub\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifaudioplayer.md\\\" title=\\\"ifAudioPlayer\\\">ifAudioPlayer</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifhttpagent.md\\\" title=\\\"ifHttpAgent\\\">ifHttpAgent</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\" title=\\\"ifSetMessagePort\\\">ifSetMessagePort</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifgetmessageport.md\\\" title=\\\"ifGetMessagePort\\\">ifGetMessagePort</a></li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/roaudioplayerevent.md\\\" title=\\\"roAudioPlayerEvent\\\">roAudioPlayerEvent</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roaudioresource.md":"{\n  \"content\": \"<h1 id=\\\"roaudioresource\\\">roAudioResource</h1>\\n<p>The roAudioResouce allows .wav files to be cached to memory and quickly played at any time. roAudioResource is intended to support short audio clips which need to be played with very little latency. The system caches the entire wav file in memory so that playback can begin very quickly.</p>\\n<p>On Roku \\\"Classic\\\" models, roAudioResource does not support mixing of sounds. So when you play a sound effect, any background music is paused while the sound effect plays and then resumes after the sound effect ends. On later models, sound effects are mixed with background music. See the <a href=\\\"/docs/specs/hardware.md#current-models\\\">Hardware specifications document</a> for a list of Current and Classic models.</p>\\n<p>This object is created with a filename parameter that is a path to the sound resource file:</p>\\n<p><code>CreateObject(\\\"roAudioResource\\\", filename)</code></p>\\n<p>The filename must be the name of a local file and cannot be a URL. To use a URL, you may download the file to the application's \\\"tmp:\\\" file system using <a href=\\\"/docs/references/brightscript/components/rourltransfer.md\\\">roUrlTransfer</a> and pass a filename of the form \\\"tmp:/file.wav\\\" to CreateObject.</p>\\n<pre><code>sound = CreateObject(\\\"roAudioResource\\\", \\\"pkg:/sounds/beep1.wav\\\")\\nsound.Trigger(75)\\n</code></pre>\\n<p>An object can also be created using the name of a system sound effect:</p>\\n<ul>\\n<li>\\\"select\\\" - the sound effect to be played when a selection is made, e.g. when OK is pressed.</li>\\n<li>\\\"navsingle\\\" - the sound effect to be played when navigating a list or grid, e.g. when left or right is pressed.</li>\\n<li>\\\"navmulti\\\" - the sound effect to be played when paging through a list or grid, e.g. when rewind or fast-forward is pressed.</li>\\n<li>\\\"deadend\\\" - the sound effect to be played when a button press could not be processed.</li>\\n</ul>\\n<p>Note that system sound effects are played at the volume selected in the user's settings, or not played at all if the user has turned sound effects off, regardless of the volume value passed to Trigger.</p>\\n<pre><code>sound = CreateObject(\\\"roAudioResource\\\", \\\"select\\\")\\nsound.Trigger(50)\\n</code></pre>\\n<p>Mult\\niple sounds can be mixed and played at the same time:</p>\\n<pre><code>sound1 = CreateObject(\\\"roAudioResource\\\", \\\"pkg:/sounds/beep1.wav\\\")\\nsound2 = CreateObject(\\\"roAudioResource\\\", \\\"select\\\")\\nsound1.Trigger(50, 0)\\nif sound2.maxSimulStreams() > 1\\n  sound2.Trigger(50, 1)\\nend if\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported Interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifaudioresource.md\\\">ifAudioResource</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/robitmap.md":"{\n  \"content\": \"<h1 id=\\\"robitmap\\\">roBitmap</h1>\\n<p>The roBitmap component contains image data and provides an interface (ifDraw2D) for drawing. Bitmaps can be used for a variety of purposes, such as for sprites, compositing, or as double buffers.</p>\\n<p>It stores four color channels: red, green, blue, and alpha, with 32-bits per pixel. They can be any arbitrary size up to 2048x2048. However, the maximum size bitmap uses 16MB of memory, so there are practical memory limitations which would compel smaller bitmap sizes.  Coordinates (x,y) for 2D bitmaps have an origin (0,0) at the top left. roBitmap is always offscreen. The top roScreen is the only ifDraw2D surface which is displayed. roBitmap represents something that can be drawn onto, as well as something that can be drawn.</p>\\n<p>Drawing operations into a roBitmap (or other surface with ifDraw2D interface, such as an <a href=\\\"/docs/references/brightscript/components/roscreen.md\\\" title=\\\"roScreen\\\">roScreen</a>) are clipped so the only the part that is within its bounds is rendered. X,Y coordinates that specify a location in a bitmap to render to (for example, as used by DrawObject() or DrawText() ) may be positive or negative. Negative implies that the left and top of the rendered object will be clipped.The same bitmap cannot be used as a source and a destination in a single DrawObject() call.</p>\\n<p>There are limitations when using the onscreen bitmap as a source. For example, Alpha blending may not work.</p>\\n<p>An empty roBitmap object can be created with CreateObject():</p>\\n<p><code>CreateObject(\\\"roBitmap\\\", bitmapProps As Object)</code></p>\\n<p>bitmapProps is an roAssociativeArray with Integers width (Integer), height (Integer), and AlphaEnable (Boolean), and name (String) parameters. The contents of an empty RoBitmap are initialized to zero (transparent black).</p>\\n<p>Example: <code>CreateObject(\\\"roBitmap\\\", {width:10, height:10, AlphaEnable:false, name:\\\"MyBitmapName\\\"})</code></p>\\n<p>An roBitmap can also load its image data from a file:</p>\\n<p><code>CreateObject(\\\"roBitmap\\\", String filename)</code></p>\\n<p><strong>Example</strong></p>\\n<pre><code>' Draw three bitmaps as fast as we can\\n'\\nScreen=CreateObject(\\\"roScreen\\\")\\nbm1=CreateObject(\\\"roBitmap\\\", \\\"pkg:/images/myphoto1.jpg\\\")\\nbm2=CreateObject(\\\"roBitmap\\\", \\\"pkg:/images/myphoto2.jpg\\\")\\nbm3=CreateObject(\\\"roBitmap\\\", \\\"pkg:/images/myphoto3.jpg\\\")\\nbmarray=[bm1, bm2, bm3]\\nWhile true\\n    For each bitmap in bmarray\\n        Screen.DrawObject(0,0, bitmap)\\n        Screen.Finish()\\n    End for\\nEnd While\\n</code></pre>\\n<p><strong>Example: Double buffering with roBitmap</strong></p>\\n<pre><code>screen1=CreateObject(\\\"roScreen\\\")\\noff=CreateObject(\\\"roBitmap\\\", {width:1280, height:720, AlphaEnable:false})\\noff.Clear(white)\\ndfDrawImage(off, \\\"pkg:/images/myimage.png\\\", 50, 50)\\noff.DrawRect(150, 150, 200, 200, &#x26;hFF) ' black, alpha: all source\\nscreen1.DrawObject(0, 0, off)\\nScreen1.Finish()\\n</code></pre>\\n<h2 id=\\\"supported-image-formats\\\">Supported image formats</h2>\\n<p>See the <a href=\\\"/docs/specs/media/streaming-specifications.md#supported-image-formats\\\">Roku streaming specification</a> for the image formats supported by this component. </p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifdraw2d.md\\\" title=\\\"ifDraw2D\\\">ifDraw2D</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roboolean.md":"{\n  \"content\": \"<h1 id=\\\"roboolean\\\">roBoolean</h1>\\n<p>roBoolean is the object equivalent for intrinsic type Boolean. </p>\\n<p>This is useful in the following situations:</p>\\n<ul>\\n<li>When an object is needed, instead of an intrinsic value. For example, \\\"roList\\\" maintains a list of objects. If an Boolean is added to roList, it will be automatically wrapped in an roBoolean by the language interpreter. When a function that expects a BrightScript Component as a parameter is passed a boolean, BrightScript automatically creates the equivalent BrightScript Component.</li>\\n<li>If any object exposes the ifBoolean interface, that object can be used in any expression that expects an intrinsic value.</li>\\n</ul>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifboolean.md\\\" title=\\\"ifBoolean\\\">ifBoolean</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iftostr.md\\\" title=\\\"ifToStr\\\">ifToStr</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/robytearray.md":"{\n  \"content\": \"<h1 id=\\\"robytearray\\\">roByteArray</h1>\\n<p>The byte array component is used to contain and manipulate an arbitrary array of bytes. </p>\\n<p>This object contains functions to convert strings to or from a byte array, as well as to or from ascii hex or ascii base 64. Note that if you are converting a byte array to a string, and the byte array contains a zero, the string conversion will end at that point. roByteArray will autosize to become larger as needed. If you wish to turn off this behavior, then use the SetResize() function. If you read an uninitialized index, \\\"invalid\\\" is returned.\\nroByteArray supports the <a href=\\\"/docs/references/brightscript/interfaces/ifarray.md\\\" title=\\\"ifArray\\\">ifArray</a> interface, and so can be accessed with the array [] operator. The byte array is always accessed as unsigned bytes when using this interface. roByteArray also supports the ifEnum interface, and so can be used with a \\\"for each\\\" statement.</p>\\n<p><strong>Example</strong></p>\\n<pre><code>ba=CreateObject(\\\"roByteArray\\\")\\nba.FromAsciiString(\\\"leasure.\\\")\\nif ba.ToBase64String()&#x3C;>\\\"bGVhc3VyZS4=\\\" then stop\\n\\nba=CreateObject(\\\"roByteArray\\\")\\nba.fromhexstring(\\\"00FF1001\\\")\\nif ba[0]&#x3C;>0 or ba[1]&#x3C;>255 or ba[2]&#x3C;>16 or ba[3]&#x3C;>1 then stop\\n\\nba=CreateObject(\\\"roByteArray\\\")\\nfor x=0 to 4000\\n    ba.push(x)\\nend for\\n\\nba.WriteFile(\\\"tmp:/ByteArrayTestFile\\\")\\nba2=CreateObject(\\\"roByteArray\\\")\\nba2.ReadFile(\\\"tmp:/ByteArrayTestFile\\\")\\nif ba.Count()&#x3C;>ba2.Count() then stop\\nfor x=0 to 4000\\n    if ba[x]&#x3C;>ba2[x] then stop\\nend for\\n\\nba2.ReadFile(\\\"tmp:/ByteArrayTestFile\\\", 10, 100)\\nif ba2.count()&#x3C;>100 then stop\\nfor x=10 to 100\\n    if ba2[x-10]&#x3C;>x then stop\\nend for\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifbytearray.md\\\" title=\\\"ifByteArray\\\">ifByteArray</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifarray.md\\\" title=\\\"ifArray\\\">ifArray</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifarrayget.md\\\" title=\\\"ifArrayGet\\\">ifArrayGet</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifarrayset.md\\\" title=\\\"ifArraySet\\\">ifArraySet</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifenum.md\\\" title=\\\"ifEnum\\\">ifEnum</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rocecstatus.md":"{\n  \"content\": \"<h1 id=\\\"rocecstatus\\\">roCECStatus</h1>\\n<p>The roCECStatus component enables channels to identify the active-source status for set boxes. </p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifcecstatus.md\\\" title=\\\"ifCECstatus\\\">ifCECStatus</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifmessageport.md\\\">ifMessagePort</a></li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/rocecstatusevent.md\\\" title=\\\"*roCECStatusEvent*\\\">roCECStatusEvent</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rochannelstore.md":"{\n  \"content\": \"<h1 id=\\\"rochannelstore\\\">roChannelStore</h1>\\n<p>The roChannelStore component allows the application to perform a purchase of an In-Channel Product or upgrade a channel. Most of the purchase flow, screens and messaging associated with the financial transaction are handled by the Roku OS outside of control or monitoring by BrightScript code. The BrightScript code merely initiates the purchase and receives a final result. This will engender trust with users and give them confidence that they are dealing with the Roku Channel Store.</p>\\n<p>The roChannelStore component allows purchasing only those In-Channel Products which are associated with the running channel. Please see <a href=\\\"/docs/developer-program/roku-pay/quickstart/in-channel-products.md\\\" title=\\\"Adding in-channel products\\\">Adding in-channel products</a> for details on how to create an In-Channel Product and associate it with a channel. After one or Products are created, GetCatalog() can be used to retrieve a list of Products and their attributes. DoOrder() can be called to initiate a purchase of one or more of the Products.</p>\\n<p>This object is created without any arguments:</p>\\n<p><code>CreateObject(\\\"roChannelStore\\\")</code></p>\\n<blockquote>\\n<p>Because <a href=\\\"/docs/references/brightscript/interfaces/ifchannelstore.md#doorder-as-boolean\\\" title=\\\"ifChannelStore.DoOrder()\\\">ifChannelStore.DoOrder()</a> needs to read the product type returned by GetCatalog(), only one instance of roChannelStore should ever be used for a complete purchase flow - you should never create a separate roChannelStore object to complete a purchase that was initiated by a different instance of roChannelStore.</p>\\n</blockquote>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifchannelstore.md\\\" title=\\\"ifChannelStore\\\">ifChannelStore</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\" title=\\\"ifSetMessagePort\\\">ifSetMessagePort</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifgetmessageport.md\\\" title=\\\"ifGetMessagePort \\\">ifGetMessagePort </a></li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/rochannelstoreevent.md\\\" title=\\\"roChannelStoreEvento\\\">roChannelStoreEvent</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rocompositor.md":"{\n  \"content\": \"<h1 id=\\\"rocompositor\\\">roCompositor</h1>\\n<p>The roCompositor allows the composition and animation of multiple roBitmaps and roRegions.</p>\\n<p>This object can create and manage roSprites in a z-ordered list. The sprites can be of arbitrary size and can be thought of as planes. The compositor can manage collision detection between the sprites, support scrolling the sprite bitmap source, and support animated sprites (multi-frame sprites with frame-flipping animation). You may have multiple roCompositor components, and they can composite onto the same or separate bitmaps. That said, the most common scenario is to have a single roCompositor.</p>\\n<p><strong>Example: Scrolling a bitmap</strong></p>\\n<pre><code>Library \\\"v30/bslCore.brs\\\"\\nFunction main()\\n        black=&#x26;hFF'RGBA\\n        screen=CreateObject(\\\"roScreen\\\")\\n        compositor=CreateObject(\\\"roCompositor\\\")\\n        compositor.SetDrawTo(screen, black)\\n        http = CreateObject(\\\"roUrlTransfer\\\")\\n        http.SetMessagePort(CreateObject(\\\"roMessagePort\\\"))\\n        http.SetUrl(\\\"http://rokudev.roku.com/rokudev/examples/scroll/VeryBigPng.png\\\")\\n        http.AsyncGetToFile(\\\"tmp:/VeryBigPng.png\\\")\\n        wait(0, http.GetPort())\\n        bigbm=CreateObject(\\\"roBitmap\\\",\\\"tmp:/VeryBigPng.png\\\")\\n        region=CreateObject(\\\"roRegion\\\", bigbm, 0, 0, 1280, 720)\\n        region.SetWrap(True)\\n\\n        view_sprite=compositor.NewSprite(0, 0, region)\\n        compositor.draw()\\n        screen.SwapBuffers()\\n        msgport = CreateObject(\\\"roMessagePort\\\")\\n        screen.SetMessagePort(msgport)\\n        codes = bslUniversalControlEventCodes()\\n        While True\\n                msg=wait(0, msgport) ' wait for a button\\n                print \\\"Msg: \\\"; type(msg); \\\" event: \\\"; msg.GetInt()\\n                If type(msg)=\\\"roUniversalControlEvent\\\" Then\\n                        If msg.GetInt()=codes.BUTTON_UP_PRESSED Then\\n                                Zip(screen, view_sprite, compositor, 0,-4) 'up\\n                        Else If msg.GetInt()=codes.BUTTON_DOWN_PRESSED Then\\n                                Zip(screen, view_sprite, compositor, 0,+4) ' down\\n                        Else If msg.GetInt()=codes.BUTTON_RIGHT_PRESSED Then\\n                                Zip(screen, view_sprite, compositor, +4,0) ' right\\n                        Else If msg.GetInt()=codes.BUTTON_LEFT_PRESSED Then\\n                                Zip(screen, view_sprite, compositor, -4, 0) ' left\\n                        Else If msg.GetInt() = codes.BUTTON_BACK_PRESSED ' back button\\n                                Exit While\\n                        End If\\n                End If\\n        End While\\nEnd Function\\nFunction Zip(screen, view_sprite, compositor, xd, yd)\\n        For x=1 To 60\\n                view_sprite.OffsetRegion(xd, yd, 0, 0)\\n                compositor.draw()\\n                screen.SwapBuffers()\\n        End For\\nEnd Function\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifcompositor.md\\\" title=\\\"ifCompositor\\\">ifCompositor</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rodatagramsocket.md":"{\n  \"content\": \"<h1 id=\\\"rodatagramsocket\\\">roDataGramSocket</h1>\\n<p>The roDataGramSocket component enables Brightscript apps to send and receive UDP packets. The interface is modeled on and works much like standard Berkeley sockets.</p>\\n<p>This object is created without any arguments:</p>\\n<p><code>CreateObject(\\\"roDataGramSocket\\\")</code></p>\\n<p><strong>Example</strong></p>\\n<pre><code>' UDP 2-way peer-to-peer asynchronous comm on port 54321\\n' periodically sends out a message to a specific address and port\\n' prints any message it receives\\nFunction UDPPeer()\\n    msgPort = createobject(\\\"roMessagePort\\\")\\n    udp = createobject(\\\"roDatagramSocket\\\")\\n    udp.setMessagePort(msgPort) 'notifications for udp come to msgPort\\n    addr = createobject(\\\"roSocketAddress\\\")\\n    addr.setPort(54321)\\n    udp.setAddress(addr) ' bind to all host addresses on port 54321\\n    addr.SetHostName(\\\"10.1.1.1\\\")\\n    udp.setSendToAddress(addr) ' peer IP and port\\n    udp.notifyReadable(true)\\n    timeout = 1 * 10 * 1000 ' ten seconds in milliseconds\\n    deviceName = Createobject(\\\"roDeviceInfo\\\").GetFriendlyName()\\n    message = \\\"Datagram from \\\" + deviceName\\n    udp.sendStr(message)\\n    continue = udp.eOK()\\n    While continue\\n        event = wait(timeout, msgPort)\\n        If type(event)=\\\"roSocketEvent\\\"\\n        If event.getSocketID()=udp.getID()\\n                If udp.isReadable()\\n                    message = udp.receiveStr(512) ' max 512 characters\\n                    print \\\"Received message: '\\\"; message; \\\"'\\\"\\n                End If\\n            End If\\n        Else If event=invalid\\n            print \\\"Timeout\\\"\\n            udp.sendStr(message) ' periodic send\\n        End If\\n    End While\\n    udp.close() ' would happen automatically as udp goes out of scope\\n\\nEnd Function\\n</code></pre>\\n<blockquote>\\n<p>GetDeviceUniqueId() was deprecated in Spring OS 2019.</p>\\n</blockquote>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsocket.md\\\" title=\\\"ifSocket\\\">ifSocket</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsocketasync.md\\\" title=\\\"ifSocketAsync\\\">ifSocketAsync</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsocketstatus.md\\\" title=\\\"ifSocketStatus\\\">ifSocketStatus</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsocketoption.md\\\" title=\\\"ifSocketOption\\\">ifSocketOption</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsocketcastoption.md\\\" title=\\\"ifSocketCastOption \\\">ifSocketCastOption </a></li>\\n</ul>\\n<blockquote>\\n<p>Some legacy Roku OS versions may implement ifSocketCastOption as ifSocketCast.</p>\\n</blockquote>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/rosocketevent.md\\\" title=\\\"roSocketEvent \\\">roSocketEvent</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rodatetime.md":"{\n  \"content\": \"<h1 id=\\\"rodatetime\\\">roDateTime</h1>\\n<p>The roDateTime provides an interface to obtain the current date/time for the player and manipulate date/times.</p>\\n<p>This component provides several options for obtaining attributes about the date/time. All times are GMT unless they are converted to the system timezone with a call to the method: toLocalTime(). </p>\\n<p>This object is created with no parameters:</p>\\n<p><code>CreateObject(\\\"roDateTime\\\")</code></p>\\n<p>The date/time of the object is set to the current system time when the object is created.  The date/time represented by the object can be changed by calling Mark(), FromSeconds(), or FromISO8601String().</p>\\n<p><strong>Example</strong></p>\\n<pre><code>date = CreateObject(\\\"roDateTime\\\")\\nprint \\\"The date is now \\\"; date.AsDateString(\\\"long-date\\\")\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifdatetime.md\\\" title=\\\"ifDateTime\\\">ifDateTime</a></li>\\n</ul>\\n<blockquote>\\n<p>Some Roku OS versions may implement ifDateTime as ifRoDateTime</p>\\n</blockquote>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rodeviceinfo.md":"{\n  \"content\": \"<h1 id=\\\"rodeviceinfo\\\">roDeviceInfo</h1>\\n<p>The Device Info provides an interface to obtain attributes about the device.</p>\\n<p>These attributes are not changeable by the script, but may be queried to obtain values for the player. It is common for scripts to need access to the serial number and model info for negotiating with backend services.</p>\\n<p>This object is created with no parameters:</p>\\n<p><code>CreateObject(\\\"roDeviceInfo\\\")</code></p>\\n<p><strong>Example</strong></p>\\n<pre><code>di = CreateObject(\\\"roDeviceInfo\\\")\\nprint di.GetModel()\\nprint di.GetVersion()\\nprint di.GetChannelClientId()\\n</code></pre>\\n<p><strong>Output</strong></p>\\n<p>The output from the above code would like the following:</p>\\n<pre><code> N1000\\n 999.99E99999X\\n 20E825000036\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md\\\" title=\\\"ifDeviceInfo \\\">ifDeviceInfo</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\" title=\\\"ifSetMessagePort\\\">ifSetMessagePort</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifgetmessageport.md\\\" title=\\\"ifGetMessagePort\\\">ifGetMessagePort</a></li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/rodeviceinfoevent.md\\\" title=\\\"roDeviceInfoEvent\\\">roDeviceInfoEvent</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rodouble.md":"{\n  \"content\": \"<h1 id=\\\"rodouble\\\">roDouble</h1>\\n<p>roDouble is the object equivalent for intrinsic type 'Double'.</p>\\n<p>It is a legacy object name, corresponding to the intrinsic Double object.  Applications should use Double literal values and/or Double-typed variables directly.</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifdouble.md\\\" title=\\\"ifDouble\\\">ifDouble</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iftostr.md\\\" title=\\\"ifToStr\\\">ifToStr</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rodevicecrypto.md":"{\n  \"content\": \"<h1 id=\\\"rodevicecrypto\\\">roDeviceCrypto</h1>\\n<p>The roDeviceCrypto component enables you to encrypt and decrypt data on a device using a key that is unique per channel, device, or model. Using a channel key for example, you can encrypt data for a channel so that it may only be decrypted by that same channel. In this case, you could provision credentials or an API key from the cloud to devices securely. With a device key for example, you could implement a secure-storage like algorithm.</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifdevicecrypto.md\\\">ifDeviceCrypto</a></li>\\n</ul>\\n<h2 id=\\\"description\\\">Description</h2>\\n<p>roDeviceCrypto has two methods: <code>Encrypt()</code> and <code>Decrypt()</code>. Both methods take a <code>roByteArray</code> and the encryption key type (<code>encType</code>), which is a string that may be set to \\\"channel\\\", \\\"device\\\", or \\\"model\\\".  </p>\\n<p>Both methods return a <code>roByteArray</code> so that you can encrypt plaintext on a Roku device\\nand then decode it, as demonstrated in the following example:  </p>\\n<pre><code>  ' store plaintext to be encrypted in an roByteArray\\n  ba = CreateObject(\\\"roByteArray\\\")\\n  ba.FromAsciiString(\\\"plain text1\\\")  \\n\\n  ' create roDeviceCrypto object and specify a device key\\n  dc = CreateObject(\\\"roDeviceCrypto\\\")\\n  encType = \\\"device\\\"\\n\\n  ' encrypt plaintext using the device key and store the encoded data in an roByteArray\\n  encrypted = dc.Encrypt(ba, encType)\\n\\n  ' decode the encrypted data and store the decrypted data in an roByteArray\\n  if encrypted &#x3C;> invalid then\\n    decrypted = dc.Decrypt(encrypted,encType)\\n  end if\\n</code></pre>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rodsa.md":"{\n  \"content\": \"<h1 id=\\\"rodsa\\\">roDsa</h1>\\n<p><em>Available since Roku OS 10.5</em></p>\\n<p>The DSA component provides support for the ECDSA and EdDSA (with Ed25519 form) digital signature algorithms. It is used to provide cryptographically signed evidence that an ad request originated from an actual Roku device.</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifdsa.md\\\">ifDsa</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roevpcipher.md":"{\n  \"content\": \"<h1 id=\\\"roevpcipher\\\">roEVPCipher</h1>\\n<p>The EVP Cipher component provides an interface to the OpenSSL EVP library of symmetric cipher commands. The EVP library provides a high-level interface to cryptographic functions to implement digital \\\"envelopes\\\".</p>\\n<p>These commands allow data to be encrypted or decrypted using various block and stream ciphers using keys based on passwords or explicitly provided. </p>\\n<p>Some of the ciphers do not have large keys and others have security implications if not used correctly. A beginner is advised to just use a strong block cipher in CBC mode such as bf or des3. All the block ciphers normally use PKCS#5 padding also known as standard block padding. If padding is disabled then the input data must be a multiple of the cipher block length.</p>\\n<blockquote>\\n<p>For additional information on the OpenSSL library of symmetric ciphers see: <a href=\\\"https://www.openssl.org/docs/manmaster/man1/enc.html\\\">https://www.openssl.org/docs/manmaster/man1/enc.html</a>.</p>\\n</blockquote>\\n<p><strong>List of supported ciphers</strong></p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Cipher</th>\\n<th>Key size (bits)</th>\\n<th>Block size (bits)</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>bf-cbc</td>\\n<td>Blowfish in CBC mode</td>\\n<td>128</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>bf</td>\\n<td>Alias for bf-cbc</td>\\n<td>128</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>bf-cfb</td>\\n<td>Blowfish in CFB mode</td>\\n<td>128</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>bf-ecb</td>\\n<td>Blowfish in ECB mode</td>\\n<td>128</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>bf-ofb</td>\\n<td>Blowfish in OFB mode</td>\\n<td>128</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>des-cbc</td>\\n<td>DES in CBC mode</td>\\n<td>56</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>des</td>\\n<td>Alias for des-cbc</td>\\n<td>56</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>des-cfb</td>\\n<td>DES in CBC mode</td>\\n<td>56</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>des-ecb</td>\\n<td>DES in ECB mode</td>\\n<td>56</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>des-ofb</td>\\n<td>DES in OFB mode</td>\\n<td>56</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>des-ede-cbc</td>\\n<td>Two key triple DES EDE in CBC mode</td>\\n<td>80</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>des-ede</td>\\n<td>Two key triple DES EDE in ECB mode</td>\\n<td>80</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>des-ede-cfb</td>\\n<td>Two key triple DES EDE in CFB mode</td>\\n<td>80</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>des-ede-ofb</td>\\n<td>Two key triple DES EDE in OFB mode</td>\\n<td>80</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>des-ede3-cbc</td>\\n<td>Three key triple DES EDE in CBC mode</td>\\n<td>112</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>des-ede3</td>\\n<td>Three key triple DES EDE in ECB mode</td>\\n<td>112</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>des3</td>\\n<td>Alias for des-ede3-cbc</td>\\n<td>112</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>des-ede3-cfb</td>\\n<td>Three key triple DES EDE in CFB mode</td>\\n<td>112</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>des-ede3-ofb</td>\\n<td>Three key triple DES EDE in OFB mode</td>\\n<td>112</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>desx</td>\\n<td>DESX algorithm</td>\\n<td>approx. 119</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>desx-cbc</td>\\n<td>DESX in CBC mode</td>\\n<td>approx. 119</td>\\n<td>64</td>\\n</tr>\\n<tr>\\n<td>aes-[128/192/256]-cbc</td>\\n<td>128/192/256 bit AES in CBC mode</td>\\n<td>128,192,256</td>\\n<td>128</td>\\n</tr>\\n<tr>\\n<td>aes-[128/192/256]</td>\\n<td>Alias for aes-[128/192/256]-cbc</td>\\n<td>128,192,256</td>\\n<td>128</td>\\n</tr>\\n<tr>\\n<td>aes-[128/192/256]-cfb</td>\\n<td>128/192/256 bit AES in 128 bit CFB mode</td>\\n<td>128,192,256</td>\\n<td>128</td>\\n</tr>\\n<tr>\\n<td>aes-[128/192/256]-cfb1</td>\\n<td>128/192/256 bit AES in 1 bit CFB mode</td>\\n<td>128,192,256</td>\\n<td>128</td>\\n</tr>\\n<tr>\\n<td>aes-[128/192/256]-cfb8</td>\\n<td>128/192/256 bit AES in 8 bit CFB mode</td>\\n<td>128,192,256</td>\\n<td>128</td>\\n</tr>\\n<tr>\\n<td>aes-[128/192/256]-ecb</td>\\n<td>128/192/256 bit AES in ECB mode</td>\\n<td>128,192,256</td>\\n<td>128</td>\\n</tr>\\n<tr>\\n<td>aes-[128/192/256]-ofb</td>\\n<td>128/192/256 bit AES in OFB mode</td>\\n<td>128,192,256</td>\\n<td>128</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifevpcipher.md\\\" title=\\\"ifEVPCipher\\\">ifEVPCipher</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roevpdigest.md":"{\n  \"content\": \"<h1 id=\\\"roevpdigest\\\">roEVPDigest</h1>\\n<p>The EVP Digest component provides an interface to the OpenSSL EVP library of message digest algorithms. The EVP library provides a high-level interface to cryptographic hash functions.</p>\\n<p>roEVPDigest processes an arbitrary amount of data and generates a hash of the data, using a selected algorithm.</p>\\n<blockquote>\\n<p>For additional information on the OpenSSL library of message digest algorithms see: <a href=\\\"http://www.openssl.org/docs/apps/dgst.html\\\">http://www.openssl.org/docs/apps/dgst.html</a></p>\\n</blockquote>\\n<p><strong>List of Supported Digest Algorithms</strong></p>\\n<ul>\\n<li>md5 - MD5 message digest algorithm (default)</li>\\n<li>sha1 - SHA-1 message digest algorithm</li>\\n<li>sha224 - SHA-2, 224 bit variant</li>\\n<li>sha256 - SHA-2, 256 bit variant</li>\\n<li>sha384 - SHA-2, 384 bit variant</li>\\n<li>sha512 - SHA-2, 512 bit variant</li>\\n</ul>\\n<p><strong>Example: SHA1 Message Digest with roEVPDigest</strong></p>\\n<pre><code>ba = CreateObject(\\\"roByteArray\\\")\\n' ...populate bytearray...\\ndigest = CreateObject(\\\"roEVPDigest\\\")\\ndigest.Setup(\\\"sha1\\\")\\nresult = digest.Process(ba)\\nprint result\\n</code></pre>\\n<p><strong>Example: MD5 Message Digest with roEVPDigest</strong></p>\\n<pre><code>ba1 = CreateOjbect(\\\"roByteArray\\\")\\n' ...populate ba1...\\nba2 = CreateObject(\\\"roByteArray\\\")\\nba2.FromAsciiString(somestring)\\ndigest = CreateObject(\\\"roEVPDigest\\\")\\ndigest.Setup(\\\"md5\\\")\\ndigest.Update(ba1)\\ndigest.Update(ba2)\\nresult = digest.Final()\\nprint result\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifevpdigest.md\\\" title=\\\"ifEVPDigest\\\">ifEVPDigest</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rofilesystem.md":"{\n  \"content\": \"<h1 id=\\\"rofilesystem\\\">roFileSystem</h1>\\n<p>The roFilesystem component implements common filesystem inspection and modificationroutines.</p>\\n<p>All paths are matched case-insensitively, regardless of the case-sensitivity of the underlying filesystem. The supported character set is limited to only those characters supported by vfat filesystems (valid Windows characters). The usbplayer sample application is a good example of roFileSystem usage. USB devices with VFAT, NTFS, HFS, and HFS Plus filesystems are supported. The USB filesystems are currently mounted read only. </p>\\n<p>This object is created with no parameters:</p>\\n<p><code>CreateObject(\\\"roFileSystem\\\")</code></p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iffilesystem.md\\\" title=\\\"ifFileSystem\\\">ifFileSystem</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\" title=\\\"ifSetMessagePort\\\">ifSetMessagePort</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifgetmessageport.md\\\" title=\\\"ifGetMessagePort\\\">ifGetMessagePort</a></li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/rofilesystemevent.md\\\" title=\\\"roFileSystemEvent\\\">roFileSystemEvent</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rofloat.md":"{\n  \"content\": \"<h1 id=\\\"rofloat\\\">roFloat</h1>\\n<p>roFloat is the object equivalent for intrinsic type 'Float'.</p>\\n<p>This is useful in the following situations:</p>\\n<ul>\\n<li>If any object exposes the ifFloat interface, that object can be used in any expression that expects an intrinsic value.</li>\\n</ul>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iffloat.md\\\" title=\\\"ifFloat\\\">ifFloat</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iftostr.md\\\" title=\\\"ifToStr\\\">ifToStr</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rofont.md":"{\n  \"content\": \"<h1 id=\\\"rofont\\\">roFont</h1>\\n<p>roFont represents a particular font, from a font-family (eg. Arial), with a particular pixel size (e.g 20), and a particular boldness or italicness. </p>\\n<p>It is used in conjunction with <a href=\\\"/docs/references/brightscript/components/rofontregistry.md\\\" title=\\\"roFontRegistry\\\">roFontRegistry</a> to create and manage fonts. Font files are registered with roFontRegistry and then various methods in roFontRegistry can be used to create roFont objects.  Applications should not create roFonts with CreateObject() but should always use roFontRegistry to create them. roFont objects in turn can be used with <a href=\\\"/docs/references/brightscript/interfaces/ifdraw2d.md#drawtextrgba-as-integer-x-as-integer-y-as-integer-text-as-string-font-as-object-as-boolean\\\" title=\\\"ifDraw2D.DrawText\\\">ifDraw2D.DrawText</a> to draw text on the screen or into bitmaps.</p>\\n<p><strong>Example</strong></p>\\n<pre><code>screen = CreateObject(\\\"roScreen\\\")\\nwhite = &#x26;hFFFFFFFF\\nblue = &#x26;h0000FFFF\\nfont_registry = CreateObject(\\\"roFontRegistry\\\")\\nfont = font_registry.GetDefaultFont()\\n\\n' Draw white text in a blue rectangle\\ntext = \\\"Hello world\\\"\\nw = font.GetOneLineWidth(text, screen.GetWidth())\\nh = font.GetOneLineHeight()\\nx = 200\\ny = 100\\nborder = 8\\nscreen.DrawRect(x, y, w + 2*border, h + 2*border, blue)\\nscreen.DrawText(text, x+border, y+border, white, font)\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iffont.md\\\" title=\\\"ifFont\\\">ifFont</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rofontregistry.md":"{\n  \"content\": \"<h1 id=\\\"rofontregistry\\\">roFontRegistry</h1>\\n<p>The roFontRegistry object allows you to create roFont objects, either using the default font or using fonts in TrueType or OpenType files packaged with your application.</p>\\n<p>This object is created with no parameters:</p>\\n<p><code>CreateObject(\\\"roFontRegistry\\\")</code></p>\\n<p><strong>Example</strong></p>\\n<pre><code>reg = CreateObject(\\\"roFontRegistry\\\")\\nfont = reg.GetDefaultFont(30, false, false)\\nscreen = CreateObject(\\\"roScreen\\\")\\nscreen.DrawText(\\\"hello world\\\", 100, 100, &#x26;hFFFFFFFF, font)\\n</code></pre>\\n<p><strong>Example using a font file</strong></p>\\n<pre><code>reg.Register(\\\"pkg:/fonts/myfont.ttf\\\")\\nfont = reg.GetFont(\\\"MyFont\\\", 30, false, false)\\nscreen = CreateObject(\\\"roScreen\\\")\\nscreen.DrawText(\\\"hello world\\\", 100, 100, &#x26;hFFFFFFFF, font)\\n</code></pre>\\n<p>Font files can quickly get very large, so be conscious of the size of the font files you include with your application. You should be able to find very good font files that are 50k or less. Anything larger is probably too big.</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iffontregistry.md\\\" title=\\\"ifFontRegistry\\\">ifFontRegistry</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rofunction.md":"{\n  \"content\": \"<h1 id=\\\"rofunction\\\">roFunction</h1>\\n<p>roFunction is the object equivalent for intrinsic type Function.</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iffunction.md\\\" title=\\\"ifFunction\\\">ifFunction</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iftostr.md\\\" title=\\\"ifToStr\\\">ifToStr</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rohdmistatus.md":"{\n  \"content\": \"<h1 id=\\\"rohdmistatus\\\">roHdmiStatus</h1>\\n<p>The HDMI status component provides an interface to the current HDMI operational status.</p>\\n<p>This component allows you to query the status of the HDMI connection for the device through the ifHdmiStatus interface functions.</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifhdmistatus.md\\\" title=\\\"ifHdmiStatus\\\">ifHdmiStatus</a>                  </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\" title=\\\"ifSetMessagePort\\\">ifSetMessagePort</a>              </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rohmac.md":"{\n  \"content\": \"<h1 id=\\\"rohmac\\\">roHMAC</h1>\\n<p>The HMAC component provides an interface to the OpenSSL HMAC functions. These functions generate a Message Authentication Code (MAC) based on a key, in such a way that no one without the key could plausibly generate the MAC. HMAC uses a digest (hash) algorithm to generate the MAC.</p>\\n<blockquote>\\n<p>For additional information on the OpenSSL HMAC functions, please see: <a href=\\\"http://www.openssl.org/docs/crypto/hmac.html\\\">http://www.openssl.org/docs/crypto/hmac.html</a></p>\\n</blockquote>\\n<p><strong>Supported Digest Algorithms</strong></p>\\n<p>The supported digest algorithms are the same as those supported by <a href=\\\"/docs/references/brightscript/components/roevpdigest.md\\\" title=\\\"roEVPDigest\\\">roEVPDigest</a>.</p>\\n<p><strong>Example</strong></p>\\n<pre><code>hmac = CreateObject(\\\"roHMAC\\\")\\nsignature_key = CreateObject(\\\"roByteArray\\\")\\nsignature_key.fromAsciiString(getKey())\\nIf hmac.setup(\\\"sha1\\\", signature_key) = 0\\n    message = CreateObject(\\\"roByteArray\\\")\\n    message.fromAsciiString(getMessage())\\n    result = hmac.process(message)\\n    print result.toBase64String()\\nEnd If\\n\\n\\nhmac = CreateObject(\\\"roHMAC\\\")\\nsignature_key = CreateObject(\\\"roByteArray\\\")\\nsignature_key.fromAsciiString(getKey())\\nIf hmac.setup(\\\"sha1\\\", signature_key) = 0\\n    message1 = CreateObject(\\\"roByteArray\\\")\\n    message1.fromAsciiString(getMessage1())\\n    hmac.update(message1)\\n    message2 = CreateObject(\\\"roByteArray\\\")\\n    message2.fromAsciiString(getMessage2())\\n    hmac.update(message2)\\n    result = hmac.final()\\n    print result.toBase64String()\\nEnd If\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifhmac.md\\\" title=\\\"ifHMAC\\\">ifHMAC</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rohttpagent.md":"{\n  \"content\": \"<h1 id=\\\"rohttpagent\\\">roHttpAgent</h1>\\n<p>All SceneGraph nodes can use the roHttpAgent component to support cookies, custom HTTP headers, and support secure HTTP file transfer protocols, such as passing certificates to the server as part of a URL transfer. An roHttpAgent component object is created by default for all SceneGraph nodes for this purpose. The roHttpAgent object supports the <a href=\\\"/docs/references/brightscript/interfaces/ifhttpagent.md\\\" title=\\\"ifHttpAgent\\\">ifHttpAgent</a> interface used by many BrightScript components to allow secure HTTP file transfer protocols. Child nodes of a SceneGraph node automatically inherit the parent roHttpAgent object, unless a new roHttpAgent object is created, or an existing roHttpAgent is set for a child node. There are two roSGNode <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodehttpagentaccess.md\\\" title=\\\"ifSGNodeHttpAgentAccess\\\">ifSGNodeHttpAgentAccess</a> interface methods that allow a specific roHttpAgent object to be selected and set for a specific SceneGraph node.</p>\\n<p>An roHttpAgent object is created automatically for all SceneGraph nodes, or can be created with no parameters:</p>\\n<p><code>CreateObject(\\\"roHttpAgent\\\")</code></p>\\n<blockquote>\\n<p>SceneGraph Audio and Video nodes always create a new roHttpAgent object and do not share it, and can use a different mechanism for HTTPS and cookie support, that involves setting certificates and cookies as Content Meta-Data attributes for the node ContentNode.</p>\\n</blockquote>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifhttpagent.md\\\" title=\\\"ifHttpAgent\\\">ifHttpAgent</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roimagemetadata.md":"{\n  \"content\": \"<h1 id=\\\"roimagemetadata\\\">roImageMetadata</h1>\\n<p>The roImageMetadata component provides developers access to image file metadata included in many .jpg EXIF headers.</p>\\n<p>roImageMetadata currently only works with local file Urls. </p>\\n<p>This object is created without any arguments:</p>\\n<p><code>CreateObject(\\\"roImageMetadata\\\")</code></p>\\n<h4 id=\\\"exif-background\\\">EXIF Background</h4>\\n<p>Each EXIF tag represents one piece of metadata. Each tag is uniquely identified by a tag number and the IFD in which it was found. All the tags are grouped into a small set of IFDs (Image File Directory). The EXIF specification describes 5 IFDs:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Number</th>\\n<th>Name</th>\\n<th>Notes</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>0</td>\\n<td>image</td>\\n<td>Tags related to image structure and some additional basic information</td>\\n</tr>\\n<tr>\\n<td>1</td>\\n<td>thumbnail</td>\\n<td>Tags related to the thumbnail image structure</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td>exif</td>\\n<td>Tags related to non-image structure data. I know this is an odd name. Usually stuff like ApertureValue that a digital camera would write</td>\\n</tr>\\n<tr>\\n<td>3</td>\\n<td>gps</td>\\n<td>Tags related to GPS</td>\\n</tr>\\n<tr>\\n<td>4</td>\\n<td>interoperability</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>The associative array returned by GetRawExif() function on the roImageMetadata component is organized as a tree where the first level consists of the IFDs, the second level is the tag name, and the third (leaf) level is tag associative array. </p>\\n<p>Each tag associative array contains the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Number</th>\\n<th>Name</th>\\n<th>Notes</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Tag</td>\\n<td>Integer</td>\\n<td>The tag number</td>\\n</tr>\\n<tr>\\n<td>Value</td>\\n<td>String</td>\\n<td>This is a string representation of the data regardless of the underlying data type</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Tag values can be one of several types (string, bytes, rational, enum, etc.) We are using a that converts most values to a string. In the future or time permitting, we may add more values to the tag aa to give access to raw bytes. </p>\\n<p>The best way to illustrate how the EXIF data is accessed is through some concrete examples using the data in the reference section below. Assume that the associative array aa contains the results of the GetRawExif() function.</p>\\n<ul>\\n<li>To get the camera model: aa.image.model.value</li>\\n<li>To get the gps latitude: aa.gps.GPSLatitude.value</li>\\n</ul>\\n<h4 id=\\\"reference\\\">Reference</h4>\\n<p>For reference here are all the fields from an image taken from my camera (with the addition of GPS attributes I added using Picasa). </p>\\n<p>The format is IFD#, Tag#[Tag Name], Data Format, Value. The Value is a string representation of data. </p>\\n<pre><code>0, 272[ Model], ASCII,Canon PowerShot SD700 IS\\n0, 274[ Orientation], Short,top - left\\n0, 283[ YResolution], Rational,180.00\\n0, 296[ ResolutionUnit], Short,Inch\\n0, 305[ Software], ASCII,Picasa 3.0\\n0, 306[ DateTime], ASCII,2007:08:14 10:06:48\\n0, 531[ YCbCrPositioning], Short,centered\\n0, 282[ XResolution], Rational,72.00\\n1, 259[ Compression], Short,JPEG compression\\n1, 282[ XResolution], Rational,180.00\\n1, 283[ YResolution], Rational,180.00\\n1, 296[ ResolutionUnit], Short,Inch\\n2,33434[ ExposureTime], Rational,1/320 sec.\\n2,33437[ FNumber], Rational,f/2.8\\n2,36864[ ExifVersion], Undefined,Exif Version 2.2\\n2,36867[ DateTimeOriginal], ASCII,2007:08:14 10:06:48\\n2,36868[ DateTimeDigitized], ASCII,2007:08:14 10:06:48\\n2,37121[ ComponentsConfiguration], Undefined,Y Cb Cr -\\n2,37122[ CompressedBitsPerPixel], Rational,5.00\\n2,37377[ ShutterSpeedValue], SRational,8.31 EV (1/317 sec.)\\n2,37378[ ApertureValue], Rational,2.97 EV (f/2.8)\\n2,37380[ ExposureBiasValue], SRational,0.00 EV\\n2,37381[ MaxApertureValue], Rational,2.97 EV (f/2.8)\\n2,37383[ MeteringMode], Short,Pattern\\n2,37385[ Flash], Short,Flash did not fire, auto mode\\n2,37386[ FocalLength], Rational,5.8 mm\\n2,37500[ MakerNote], Undefined,1838 bytes undefined data\\n2,37510[ UserComment], Undefined,\\n2,40960[ FlashPixVersion], Undefined,FlashPix Version 1.0\\n2,40961[ ColorSpace], Short,sRGB\\n2,40962[ PixelXDimension], Short,2816\\n2,40963[ PixelYDimension], Short,2112\\n2,41486[ FocalPlaneXResolution], Rational,12515.56\\n2,41487[ FocalPlaneYResolution], Rational,12497.04\\n2,41488[ FocalPlaneResolutionUnit], Short,Inch\\n2,41495[ SensingMethod], Short,One-chip color area sensor\\n2,41728[ FileSource], Undefined,DSC\\n2,41985[ CustomRendered], Short,Normal process\\n2,41986[ ExposureMode], Short,Auto exposure\\n2,41987[ WhiteBalance], Short,Auto white balance\\n2,41988[ DigitalZoomRatio], Rational,1.00\\n2,41990[ SceneCaptureType], Short,Standard\\n2,42016[ ImageUniqueID], ASCII,ba6ad9a9d88ffd9576ea6155afa6c6ef\\n3, 0[ GPSVersionID], Byte,2.2.0.0\\n3, 1[ GPSLatitudeRef], ASCII,N\\n3, 2[ GPSLatitude], Rational,40.00, 12.00, 44.79\\n3, 3[ GPSLongitudeRef], ASCII,W\\n3, 4[ GPSLongitude], Rational,75.00, 37.00, 47.58\\n3, 5[ GPSAltitudeRef], Byte,Sea level\\n4, 1[ InteroperabilityIndex], ASCII,R98\\n4, 2[ InteroperabilityVersion], Undefined,0100\\n4, 4097[ RelatedImageWidth], Short,2816\\n4, 4098[ RelatedImageLength], Short,2112\\n</code></pre>\\n<p><strong>Example</strong></p>\\n<pre><code>REM printAA() is from generalUtils.brs in our sample apps\\nREM and used to print an associative Array\\nSub SaveExifImage(filename As String)\\n    meta = CreateObject(\\\"roImageMetadata\\\")\\n    meta.SetUrl(filename)\\n    print \\\"------------- GetRawExif() ----------------------\\\"\\n    allexif = meta.GetRawExif()\\n    printAA(allexif)\\n    print \\\"------------- GetMetadata() ---------------------\\\"\\n    simple = meta.GetMetadata()\\n    printAA(simple)\\n    print \\\"------------- GetRawExifTag() -------------------\\\"\\n    rawexiftag = meta.GetRawExifTag(2,36868)\\n    printAA(rawexiftag)\\n    print \\\"------------- GetThumbnail() --------------------\\\"\\n    thumbnail = meta.GetThumbnail()\\n    if (thumbnail &#x3C;> invalid) then\\n        if (thumbnail.bytes = invalid) then\\n            return\\n        end if\\n        imgtype = thumbnail.type\\n        image_ext=\\\"\\\"\\n        if (imgtype = \\\"image/jpeg\\\" or imgtype = \\\"jpg\\\") then\\n            image_ext = \\\"jpg\\\"\\n        else if (imgtype = \\\"image/png\\\" or imgtype = \\\"png\\\") then\\n            image_ext = \\\"png\\\"\\n        else\\n            image_ext = \\\"jpg\\\"\\n        end if\\n        tmp_img = \\\"tmp:/TmpExifImage\\\" + \\\".\\\" + image_ext\\n        if (tmp_img &#x3C;> invalid) then\\n            DeleteFile(tmp_img)\\n        end if\\n        thumbnail.bytes.Writefile(tmp_img)\\n    end if\\nEnd Sub\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifimagemetadata.md\\\" title=\\\"ifImageMetadata\\\">ifImageMetadata</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roinput.md":"{\n  \"content\": \"<h1 id=\\\"roinput\\\">roInput</h1>\\n<p>An roInput object can be used to receive events sent from a network client using the External Control Protocol (ECP), as described in <a href=\\\"/docs/developer-program/debugging/external-control-api.md\\\" title=\\\"External Control API\\\">External Control API</a>.</p>\\n<blockquote>\\n<p>The <a href=\\\"/docs/developer-program/getting-started/architecture/channel-manifest.md#launch-requirement-attributes\\\">supports_input_launch manifest flag</a> must be set for channels to accept deep linking parameters when already running. This flag enables deep linking into content without relaunching the channel. See the <a href=\\\"https://github.com/rokudev/deep-Linking-samples\\\">Deep Linking sample channel</a> for how to use roInput to handle deep links into content while the channel is already running.</p>\\n</blockquote>\\n<p>Refer to <a href=\\\"/docs/developer-program/debugging/external-control-api.md#external-control-service-commands\\\" title=\\\"External Control Service Commands\\\">External Control Service Commands</a> for information about the ECP input command.</p>\\n<p>This object is created without any arguments:</p>\\n<p><code>CreateObject(\\\"roInput\\\")</code></p>\\n<p><strong>Example</strong></p>\\n<p>The following prints information received from an external device in JSON format. If the external device sends the following input command:</p>\\n<pre><code>curl -d '' '&#x3C;roku_target_device>:8060/input?my_event=My%20Test&#x26;x=100&#x26;y=200&#x26;action=start'\\n</code></pre>\\n<p>The following will be printed:</p>\\n<pre><code>{\\\"action\\\":\\\"start\\\",\\\"my_event\\\":\\\"My Test\\\",\\\"x\\\":\\\"100\\\",\\\"y\\\":\\\"200\\\"}\\n</code></pre>\\n<p><strong>roInput Example</strong></p>\\n<pre><code>msgPort = CreateObject(\\\"roMessagePort\\\")\\n\\ninput = CreateObject(\\\"roInput\\\")\\ninput.SetMessagePort(msgPort)\\n\\nprint \\\"Waiting for messages...\\\"\\nwhile true\\n  msg = wait(0, msgPort)\\n  if type(msg) = \\\"roInputEvent\\\"\\n    if msg.IsInput()\\n      info = msg.GetInfo()\\n      print \\\"Received input: \\\"; FormatJSON(info)\\n    end if\\n  end if\\nend while\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifinput.md\\\" title=\\\"ifInput\\\">ifInput</a></li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/roinputevent.md\\\" title=\\\"roInputEvent\\\">roInputEvent</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roint.md":"{\n  \"content\": \"<h1 id=\\\"roint\\\">roInt</h1>\\n<p>roInt is the object equivalent for intrinsic type Integer.</p>\\n<p>This is useful in the following situations:</p>\\n<ul>\\n<li>When an object is needed, instead of an intrinsic value. For example, \\\"roList\\\" maintains a list of objects. If an Integer is added to roList, it will be automatically wrapped in an roInt by the language interpreter. When a function that expects a BrightScript Component as a parameter is passed an int, BrightScript automatically creates the equivalent BrightScript Component.</li>\\n<li>If any object exposes the ifInt interface, that object can be used in any expression that expects an intrinsic value. For example, in this way an roTouchEvent can be used as an integer whose value is the userid of the roTouchEvent.</li>\\n</ul>\\n<blockquote>\\n<p>If o is an roInt, then the following statements have the following effects</p>\\n<p>print o ' prints o.GetInt()</p>\\n<p>i%=o ' assigns the integer i% the value of o.GetInt()</p>\\n<p>k=o 'presumably k is dynamic typed, so it becomes another reference to the roInt o</p>\\n<p>o=5 'this is NOT the same as o.SetInt(5). Instead it releases o, and 'changes the type of o to Integer (o is dynamically typed). And assigns it to 5.</p>\\n</blockquote>\\n<p><strong>Example</strong></p>\\n<pre><code>BrightScript> o=CreateObject(\\\"roInt\\\")\\nBrightScript> o.SetInt(555)\\nBrightScript> print o\\n555\\nBrightScript> print o.GetInt()\\n555\\nBrightScript> print o-55\\n500\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifint.md\\\" title=\\\"ifInt\\\">ifInt</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifintops.md\\\" title=\\\"ifIntOps\\\">ifIntOps</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iftostr.md\\\" title=\\\"ifToStr\\\">ifToStr</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roinvalid.md":"{\n  \"content\": \"<h1 id=\\\"roinvalid\\\">roInvalid</h1>\\n<p>roInvalid is the object equivalent for intrinsic type 'Invalid'.</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iftostr.md\\\" title=\\\"ifToStr\\\">ifToStr</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rolist.md":"{\n  \"content\": \"<h1 id=\\\"rolist\\\">roList</h1>\\n<p>The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members. The array operator [ ] can be used to access any element in the ordered list.</p>\\n<p><strong>Example</strong></p>\\n<p>Implementation:</p>\\n<pre><code>list = CreateObject(\\\"roList\\\")\\nlist.AddTail(\\\"a\\\")\\nlist.AddTail(\\\"b\\\")\\nlist.AddTail(\\\"c\\\")\\nlist.AddTail(\\\"d\\\")\\nlist.ResetIndex()\\nx= list.GetIndex()\\nwhile x &#x3C;> invalid\\n    print x\\n    x = list.GetIndex()\\nend while\\n\\n\\nprint list[2]\\n</code></pre>\\n<p>Output:</p>\\n<pre><code>a\\nb\\nc\\nd\\nc \\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported Interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iflist.md\\\" title=\\\"ifList\\\">ifList</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifarray.md\\\" title=\\\"ifArray\\\">ifArray</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifarrayget.md\\\" title=\\\"ifArrayGet\\\">ifArrayGet</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifarrayset.md\\\" title=\\\"ifArraySet\\\">ifArraySet</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifenum.md\\\" title=\\\"ifEnum\\\">ifEnum</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iflisttoarray.md\\\" title=\\\"ifListToArray\\\">ifListToArray</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rolocalization.md":"{\n  \"content\": \"<h1 id=\\\"rolocalization\\\">roLocalization</h1>\\n<p>The roLocalization object provides functions to assist in localization. This object provides functions to assist in localization.</p>\\n<p>It is created with no parameters:</p>\\n<p><code>CreateObject(\\\"roLocalization\\\")</code></p>\\n<p><strong>Example</strong></p>\\n<pre><code>loc = CreateObject(\\\"roLocalization\\\")\\nimage = loc.GetLocalizedAsset(\\\"images\\\", \\\"splash.png\\\")\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iflocalization.md\\\" title=\\\"ifLocalization\\\">ifLocalization</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rolonginteger.md":"{\n  \"content\": \"<h1 id=\\\"rolonginteger\\\">roLongInteger</h1>\\n<p>roLongInteger is the object name corresponding to the intrinsic LongInteger object.</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iflongint.md\\\" title=\\\"ifLongInt\\\">ifLongInt</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iftostr.md\\\" title=\\\"ifToStr\\\">ifToStr</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/romessageport.md":"{\n  \"content\": \"<h1 id=\\\"romessageport\\\">roMessagePort</h1>\\n<p>A Message Port is the place messages (<a href=\\\"/docs/developer-program/core-concepts/event-loops.md\\\">events</a>) are sent. </p>\\n<p>When using BrightScript, you would not call these functions directly. Instead, use the \\\"Wait\\\" BrightScript statement.  </p>\\n<p>This object is created with no parameters:</p>\\n<p><code>CreateObject(\\\"roMessagePort\\\")</code></p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifmessageport.md\\\" title=\\\"ifMessagePort\\\">ifMessagePort</a> </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/romicrophone.md":"{\n  \"content\": \"<h1 id=\\\"romicrophone\\\">roMicrophone</h1>\\n<p>The roMicrophone API allows channel applications to receive audio data from the user’s microphone-supported remote control device or mobile phone. When a user initiates recording on their remote control device or mobile phone (via the Roku Mobile App) for the first time within the application, the application will request the user’s permission for the application to access the microphone by displaying a UI dialog box.</p>\\n<p>The application will only receive microphone access if the permission is granted by the user.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/microphone-access.jpg\\\" alt=\\\"roku815px - microphone-access\\\" title=\\\"microphone-access\\\"></p>\\n<p>After the permission is granted, whenever a user activates the microphone, the application will display a notice informing the user that the microphone is currently being used by the application.</p>\\n<p>From the settings menu (Settings > Privacy > Microphone), the user can revoke microphone permissions from individual applications, at which time the particular application will not be able to access the microphone unless the user re-enables microphone permissions.</p>\\n<p>From the settings menu, the user may also:</p>\\n<ul>\\n<li>(a) enable universal microphone access permissions for all applications (thereby eliminating the need to request microphone permission on an application by application basis), and</li>\\n<li>(b) prohibit all applications from accessing the microphone.</li>\\n</ul>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/microphone-setting.jpg\\\" alt=\\\"roku815px - microphone-setting\\\" title=\\\"microphone-setting\\\"></p>\\n<p>When integrating the roMicrophone API, you acknowledge and agree to the following:</p>\\n<ul>\\n<li>(i) that you will notify your users of your collection, use, and disclosure of any voice recordings or other derived data that you receive through the roMicrophone API;</li>\\n<li>(ii) you will not modify, circumvent, obscure, or otherwise diminish the notices provided by the roMicrophone API to users when they activate or enable microphone recording from their remote control device or mobile phone;</li>\\n<li>(iii) you will not collect any information from, or otherwise activate, the microphone on any remote control device or mobile phone using the roMicrophone API feature without receiving the requisite permissions from the user;</li>\\n<li>(iv) you have and will maintain a legally adequate privacy policy;</li>\\n<li>(v) you have and will maintain all necessary rights and consents from users to use the roMicrophone API features; and</li>\\n<li>(vi) your use of the roMicrophone API features will comply with all applicable laws, rules, and regulations.</li>\\n</ul>\\n<p>YOU FURTHER AGREE YOU WILL NOT USE THE roMicrophone API AND FEATURES IN CONNECTION WITH CONTENT OR CHANNELS DIRECTED TOWARD CHILDREN OR IN CONNECTION WITH USERS KNOWN TO BE CHILDREN. If Roku discovers or determines that you are using the roMicrophone API and features in connection with content or channels directed toward children or with users known to be children, Roku reserves the right to disable or otherwise limit your access to the roMicrophone API feature and related functionality.</p>\\n<p>YOU MAY NOT ENABLE THE roMicrophone API FEATURES IF YOU DO NOT AGREE TO ABOVE. PLEASE CONTACT ROKU FOR FURTHER INFORMATION.\\nImplementation</p>\\n<p>The application should display a focusable button or indicator in the UI that the user selects by pressing and holding the OK button. In response to the OK press event, the application can call:</p>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifmicrophone.md\\\" title=\\\"StartRecording\\\">StartRecording()</a> - to receive streamed audio data from the microphone asynchronously or</li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifmicrophone.md\\\" title=\\\"RecordToFile()\\\">RecordToFile()</a> - to have the audio data directly captured to a WAV format output file.</li>\\n</ul>\\n<blockquote>\\n<p>Roku OS will display a HUD to let the user initially consent to be recorded and to subsequently be informed when the microphone is being used. Recording is performed as long as the user holds down the OK button, or until a limit is reached or if an error should occur.</p>\\n</blockquote>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifmicrophone.md\\\" title=\\\"ifMicrophone\\\">ifMicrophone</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\" title=\\\"ifSetMessagePort\\\">ifSetMessagePort</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifgetmessageport.md\\\" title=\\\"ifGetMessagePort\\\">ifGetMessagePort</a></li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/romicrophoneevent.md\\\" title=\\\"roMicrophoneEvent\\\">roMicrophoneEvent</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/ropath.md":"{\n  \"content\": \"<h1 id=\\\"ropath\\\">roPath</h1>\\n<p>The roPath component provides developers an easy way to create valid file system paths. </p>\\n<p>The roPath component is a convenience class that implements <a href=\\\"/docs/references/brightscript/interfaces/ifstring.md\\\" title=\\\"ifString\\\">ifString</a> while providing additional validation and path inspection functionality. See <a href=\\\"/docs/developer-program/getting-started/architecture/file-system.md\\\" title=\\\"File System\\\">File System</a> for more information about valid path names.</p>\\n<p>This object is created with a string that represents the initial path:</p>\\n<p><code>CreateObject(\\\"roPath\\\", \\\"ext1:/vid\\\")</code></p>\\n<p><strong>Example</strong></p>\\n<pre><code>path = CreateObject(\\\"roPath\\\", filename)\\nparts = path.Split()\\nif parts.phy = \\\"tmp:\\\" then print \\\"this is a temp file\\\"\\nif parts.extension = \\\".bmp\\\" then print \\\"this is a bitmap file\\\"\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifpath.md\\\" title=\\\"ifPath\\\">ifPath</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifstring.md\\\" title=\\\"ifString\\\">ifString</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roprogramguide.md":"{\n  \"content\": \"<h1 id=\\\"roprogramguide\\\">roProgramGuide</h1>\\n<p>Represents Electronic Program Guide (EPG) information from the tuner. </p>\\n<p>Some Roku devices incorporate a tuner giving access to broadcast TV and radio received over an antenna or cable. In addition to the video and audio data from the tuner, the Roku Player receives electronic program guide (EPG) data about the currently-broadcasting program, and the next few programs to be broadcast. The roProgramGuide object provides access to that guide data.</p>\\n<p>This object can be created with no parameters:</p>\\n<p><code>createObject(\\\"roProgramGuide\\\")</code></p>\\n<h2 id=\\\"supported-interfaces\\\">Supported Interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifprogramguide.md\\\">ifProgramGuide</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roregex.md":"{\n  \"content\": \"<h1 id=\\\"roregex\\\">roRegex</h1>\\n<p>The roRegex component provides the powerful regular expression processing of the PCRE library to Brightscript strings.</p>\\n<blockquote>\\n<p>Please see the PCRE documentation (<a href=\\\"http://www.pcre.org/\\\">http://www.pcre.org/</a>) for documentation on the PCRE library used for regular expression matching.  See the <a href=\\\"http://perldoc.perl.org/perlre.html\\\">perlre documentation</a> for complete documentation of the possible regular expressions this library can parse and match. In general, most Perl compatible regular expressions are supported.</p>\\n</blockquote>\\n<p>This object is created with a string that represents the matching-pattern and a string to indicate flags that modify the behavior of the matching operation(s):</p>\\n<p><code>CreateObject(\\\"roRegex\\\", \\\"[a-z]+\\\", \\\"i\\\")</code></p>\\n<p>The match string (\\\"[a-z]+\\\" in the example above, which matches all lowercase letters) can include most Perl compatible regular expressions documented in the PCRE documentation (<a href=\\\"http://www.pcre.org/\\\">http://www.pcre.org/</a>).</p>\\n<p>Any combination of the following behavior flags (\\\"i\\\" in the example above which modifies to match upper and lowercase letters) is supported:</p>\\n<ul>\\n<li>\\\"i\\\" Case insensitive match</li>\\n<li>\\\"m\\\" Multiline mode. The start of line \\\"^\\\" and end of line \\\"$\\\" constructs match immediately following or before any newline in the subject string as well as the very start and end of the string. Normally, just the start and end of the string would match.</li>\\n<li>\\\"s\\\" Sets dot-all mode that includes newline in the \\\".*\\\" regular expression. This modifier is equivalent to Perl's /s modifier.</li>\\n<li>\\\"x\\\" Sets extended mode that ignores whitespace characters except when escaped or inside a character class. Characters between an unescaped # outside a character a character class and the next newline character, inclusive, are also ignored. This modifier is equivalent to Perl's /x modifier.</li>\\n</ul>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifregex.md\\\" title=\\\"ifRegex\\\">ifRegex</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roregion.md":"{\n  \"content\": \"<h1 id=\\\"roregion\\\">roRegion</h1>\\n<p>The roRegion component is used to represent a subsection of a bitmap.</p>\\n<p>The region is specified with an x,y, width, and height as well as a time field for use with animated sprites and a wrap field which causes the region to wrap during scrolling. The roRegion is a common parameter used by the drawing functions of <a href=\\\"/docs/references/brightscript/components/robitmap.md\\\" title=\\\"roBitmap\\\">roBitmap</a>. Wrap and Time are used by <a href=\\\"/docs/references/brightscript/components/roCompositor.md\\\" title=\\\"roCompositor\\\">roCompositor</a>. roRegion is also used to specify a pretranslation (x,y) for the draw, rotate, and scale operation. The pretranslation is normally used to specify the center of the region. The scaling operation is controlled by the scalemode specified in the region.</p>\\n<p>This object is created with parameters to initialize the x,y coordinates, width, height. If time and wrap are desired, use the SetTime() and SetWrap().</p>\\n<p><code>CreateObject(\\\"roRegion\\\", Object bitmap, Integer x, Integer y, Integer width, Integer height)</code></p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifregion.md\\\" title=\\\"ifRegion\\\">ifRegion</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roregistry.md":"{\n  \"content\": \"<h1 id=\\\"roregistry\\\">roRegistry</h1>\\n<p>The Registry is an area of non-volatile storage where a small number of persistent settings can be stored.</p>\\n<p>The Registry provides a means for an application to write and read small amounts of data such as settings, scores, etc. The data persists even if the user exits the application and even if the player is rebooted.  Registry data is removed only when the application explicitly removes it, the user uninstalls the application, which remove the registry for the application, or the user performs a factory reset, which removes the registry for all applications.</p>\\n<p>Access to the registry is available through the roRegistry object. This object is created with no parameters:</p>\\n<p><code>CreateObject(\\\"roRegistry\\\")</code></p>\\n<p>There is a separate registry for each <a href=\\\"/docs/developer-program/publishing/packaging-channels.md#step-3-run-the-genkey-utility-to-create-a-signing-key\\\" title=\\\"developer ID\\\">developer ID</a>. This allows multiple applications to use the registry without being able to read or modify the registry from other applications. If desired, a single registry can be shared across multiple applications by using the same developer ID to package the applications. This is the conventional way that an \\\"application suite\\\" with shared preferences and other shared information should work.  Each registry is divided into sections which are specified by the developer for organization and grouping of attributes. Methods in ifRegistry are provided to list the sections in the registry and to provide access to the data in each section. </p>\\n<blockquote>\\n<p>The maximum size of each zlib-compressed application registry is <strong>16K bytes</strong>. Channels should minimize the amount of data stored in the registry and the frequency in which they update it.</p>\\n<p>Use the <strong>ifRegistry.GetSpaceAvailable()</strong> function to check the number of bytes available in the registry.</p>\\n</blockquote>\\n<p>The Registry also supports the use of a special transient registry section. A registry section named \\\"Transient\\\" can be used to store attributes that have the lifetime of a single boot. Within a specific boot session, these values will be persistent to the application and stored as any other registry value. Whenever the user reboots the Roku Streaming Player, all \\\"Transient\\\" registry sections are removed and the values no longer persist. This technique is useful for caching data to minimize network access, yet still ensuring that this data is always fresh after a system reboot.</p>\\n<p>The registry is encrypted, and updates are relatively performance intensive and should be used sparingly. Note that all writes to the registry are delayed, and not committed to non-volatile storage until ifRegistry.Flush() or ifRegistrySection.Flush() is explicitly called. The platform may choose opportune times to flush data on its own, but no application is technically correct unless it explicitly calls Flush() at appropriate times. Flushing the registry is a relatively time-consuming operation, so it should be done as infrequently as possible. The Registry data is stored in a fault tolerant manner by preserving a backup for each write which is automatically rolled-back in the event of a failure.</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifregistry.md\\\" title=\\\"ifRegistry\\\">ifRegistry</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roregistrysection.md":"{\n  \"content\": \"<h1 id=\\\"roregistrysection\\\">roRegistrySection</h1>\\n<p>A Registry Section enables the organization of settings within the registry. Different registry sections may have their own keys with the same name. In other words, key names are scoped within the registry section to which they belong.</p>\\n<p>This object must be supplied with a \\\"section\\\" name on creation. If no such section exists, it will be created. Section names are case sensitive, so sections named \\\"Settings\\\" and \\\"settings\\\" are two different sections.</p>\\n<p><code>CreateObject(\\\"roRegistrySection\\\", section as String)</code></p>\\n<p><strong>Example: Get and set some user authentication in the registry</strong></p>\\n<pre><code>Function GetAuthData() As Dynamic\\n     sec = CreateObject(\\\"roRegistrySection\\\", \\\"Authentication\\\")\\n     if sec.Exists(\\\"UserRegistrationToken\\\")\\n         return sec.Read(\\\"UserRegistrationToken\\\")\\n     endif\\n     return invalid\\nEnd Function\\n\\nFunction SetAuthData(userToken As String) As Void\\n    sec = CreateObject(\\\"roRegistrySection\\\", \\\"Authentication\\\")\\n    sec.Write(\\\"UserRegistrationToken\\\", userToken)\\n    sec.Flush()\\nEnd Function\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifregistrysection.md\\\" title=\\\"ifRegistrySection\\\">ifRegistrySection</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roremoteinfo.md":"{\n  \"content\": \"<h1 id=\\\"roremoteinfo\\\">roRemoteInfo</h1>\\n<p>The roRemoteInfo component provides an interface to obtain attributes about the Roku remote control that is currently connected to the Roku device. Note that a Roku remote control device that is paired with a device, may not be the one that is currently connected (a single remote is typically connected to a device at a time). </p>\\n<p>This object is created with no parameters:</p>\\n<p><code>CreateObject(\\\"roRemoteInfo\\\")</code></p>\\n<p><strong>Example</strong></p>\\n<pre><code>remoteInfo = CreateObject(\\\"roRemoteInfo\\\")\\nprint remoteInfo.GetModel(0)\\nprint remoteInfo.IsAwake(0)\\nprint remoteInfo.hasFeature(\\\"voicecapture\\\", 0)\\n</code></pre>\\n<p><strong>Output</strong></p>\\n<p>The output from the above code could be as follows:</p>\\n<pre><code>538\\nfalse\\ntrue\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifremoteinfo.md\\\" title=\\\"ifRemoteInfo\\\">ifRemoteInfo</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rorsa.md":"{\n  \"content\": \"<h1 id=\\\"rorsa\\\">roRSA</h1>\\n<p>The RSA component provides an interface to the OpenSSL RSA library of signing algorithms.</p>\\n<p>This component can be used to sign/verify using RSA.</p>\\n<p>Typically, you would use the roEVPDigest component to create a message digest, then use roRSA to sign it.</p>\\n<p><strong>Example: RSA signing using SHA1</strong></p>\\n<pre><code>ba = CreateObject(\\\"roByteArray\\\")\\n\\n' ...populate bytearray...\\n\\ndigest = CreateObject(\\\"roEVPDigest\\\")\\ndigest.Setup(\\\"sha1\\\")\\nhashString = digest.Process(ba)\\nhashBA = CreateObject(\\\"roByteArray\\\")\\nhashBA.FromHexString(hashString)\\nrsa = CreateObject(\\\"roRSA\\\")\\n\\n' ... save private key to tmp:/privateKey.txt\\n\\nrsa.SetPrivateKey(\\\"tmp:/privateKey.txt\\\")\\nrsa.SetDigestAlgorithm(\\\"sha1\\\")\\nsignature = rsa.Sign(hashBA)\\n</code></pre>\\n<p><strong>Example: RSA verification using SHA1</strong></p>\\n<pre><code>rsa = CreateObject(\\\"roRSA\\\")\\nrsa.SetPublicKey(:tmp:/publicKey.txt\\\")\\nrsa.SetDigestAlgorithm(\\\"sha1\\\")\\n\\n' see hashBA and signature from above example\\n\\nresult = rsa.Verify(hashBA, signature)\\nif (result = 1)\\n    print \\\"Verified\\\"\\nelse\\n    print \\\"Not verified, result = \\\" ; result\\nend if\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifrsa.md\\\" title=\\\"ifRSA\\\">ifRSA</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roscreen.md":"{\n  \"content\": \"<h1 id=\\\"roscreen\\\">roScreen</h1>\\n<p>The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from.</p>\\n<p>You will need at least one roScreen component in your 2D game application to draw on and get events from. The origin (0,0) is the top left corner of the screen. The pixels are always RGBA 32 bits. Multiple roScreen components stack, and like other screen components only the top screen is viewable and gets events. An roScreen that is not the top most screen can still be drawn to. </p>\\n<blockquote>\\n<p>Once an roScreen is created, the display stack enters \\\"Game Mode\\\", and other screen components cannot be used. Screensavers will also be disabled and will appear as a black screen in its place. Other screen components cannot be intermixed with roScreens as the roScreen display stack is maintained independently from the main screen component display stack. When the final roScreen component is closed, other screen components can be used again.</p>\\n</blockquote>\\n<p>When the roScreen constructor is called, an optional double buffer flag, and an optional resolution can be passed. If the screen is double buffered, two buffers are fully allocated when CreateObject() succeeds. If the screen is single buffered only one buffer is allocated and the \\\"front\\\" and \\\"back\\\" buffers in method descriptions below are the same buffer. When a screen is created with a different resolution than the output display, it is scaled automatically to the output display resolution. </p>\\n<p>To maintain proper aspect ratio, and take care of the different pixel aspect ratio in HD vs SD; there is a fixed set of bitmap resolutions that are allowed to be created for screens:</p>\\n<p><strong>HD mode screensizes</strong></p>\\n<ul>\\n<li>1280x720PAR=1:1 (default for HD)</li>\\n<li>854x480 PAR=1:1 useful for higher performance HD games, also for 640x480 games</li>\\n<li>940x480 PAR=1.1:1 used for displaying a RokuSD (720x480) games</li>\\n</ul>\\n<p><strong>SD mode screensizes</strong></p>\\n<ul>\\n<li>720x480 PAR=1.1:1 (default for SD)</li>\\n<li>640x480 PAR=1:1 (used for 640x480 games)</li>\\n<li>854x626 PAR=1:1 (used for 854x480 HD games)</li>\\n</ul>\\n<p>The screen dimensions correspond to the drawable area that applications see. The dimensions were chosen so that applications do not need to compensate for screen aspect ratio or pixel aspect ratio. </p>\\n<p>It's likely that when porting games from other platforms, the active game area may be smaller and correspond to more traditional dimensions. In this case, the application can supply letterbox or pillarbox artwork and use an <a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegion\\\">roRegion</a> to define the active area. The roRegion will translate and clip graphics to the proper area for the game. Similarly, roRegions are used to describe the left and right pillars for an SD game in HD mode, or the upper and lower letterbox regions for an HD game in SD mode. </p>\\n<p>Games that require more performance should use smaller dimensions. Games should run in HD and SD mode. The screensizes HD 854x480 paired with SD 854x626 and HD 940x480 paired with SD 720x480 were designed for this purpose.</p>\\n<p>The game creates a single active game roRegion to do all graphics operations in. roRegions for pillar or letter boxes are used to fill the rest of the screen area depending on if the app is in HD or SD mode. Please refer to the dfSetupDisplayRegions() function in <a href=\\\"/docs/references/brightscript/language/component-architecture.md#v30bslcorebrs\\\" title=\\\"v30/bslDefender.brs\\\">v30/bslDefender.brs</a> for help in setting up the drawable regions in screen scaling. </p>\\n<p>There are some useful rules of thumb to be aware of to get the best performance when rendering your games:</p>\\n<ul>\\n<li>Alpha enabled regions are expensive to render</li>\\n</ul>\\n<p>It is a requirement that the destination be alpha enabled in order for non-rectangular sprites to be properly rendered with transparency. However the sprite used for a background would typically have all pixels be fully nontransparent. Since alpha blending is expensive, a quick way to blit the background in this scenario is to first disable alpha on the screen, manually draw the background, and then enable alpha for the screen before drawing the rest of the sprites.</p>\\n<ul>\\n<li>Use smaller resolution images wherever possible. Scaling a large image down at run time is expensive with no benefit to the user</li>\\n<li>Rendering text with DrawText() is expensive</li>\\n</ul>\\n<p>Fortunately, many of these calls are redundant and can be eliminated. The static text for a particular level can be drawn on the background once and this newly created background can be used for refreshing the screen. This will eliminate almost all text redraws. </p>\\n<p>A screen can be created with one of three constructors. If it is created with no parameters, the screen will be single buffered, and its output resolution will match the current display resolution (if the current resolution is specified in the manifest file ui_resolutions entry, otherwise the size will be 720p).</p>\\n<p><code>CreateObject(\\\"roScreen\\\")</code></p>\\n<p>If a single parameter is passed, it is a Boolean that indicates if the screen is double buffered or not. See SwapBuffers():</p>\\n<p><code>CreateObject(\\\"roScreen\\\", true) ' double buffered screen</code></p>\\n<p>If four parameters are passed, the last two specify the screen's resolution. The dimensions must be one of the screen sizes specified above:</p>\\n<p><code>CreateObject(\\\"roScreen\\\", true, 720, 480) ' db &#x26; SD res</code></p>\\n<p><strong>Example: Display an image</strong></p>\\n<pre><code>Screen=CreateObject(\\\"roScreen\\\")\\ndfDrawImage(screen, \\\"myphoto.jpg\\\",0,0)\\nScreen.Finish()\\n</code></pre>\\n<p><strong>Example: Alpha blending</strong></p>\\n<pre><code>white=&#x26;hFFFFFFFF\\nscreen0=CreateObject(\\\"roScreen\\\")\\nscreen0.SetAlphaEnable(true)\\nscreen0.Clear(white)\\nscreen0.DrawRect(100,100, screen0.GetWidth()-200, screen0.GetHeight()-200, &#x26;h80)\\n' &#x26;h80 is black with a 50% alpha mix (RGBA)\\nscreen0.finish()\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifscreen.md\\\" title=\\\"ifScreen\\\">ifScreen</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifdraw2d.md\\\" title=\\\"ifDraw2D\\\">ifDraw2D</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\" title=\\\"ifSetMessagePort\\\">ifSetMessagePort</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifgetmessageport.md\\\" title=\\\"ifGetMessagePort\\\">ifGetMessagePort</a></li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/rouniversalcontrolevent.md\\\" title=\\\"roUniversalControlEvent\\\">roUniversalControlEvent</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rosgnode.md":"{\n  \"content\": \"<h1 id=\\\"rosgnode\\\">roSGNode</h1>\\n<p>The roSGNode object is the BrightScript equivalent of SceneGraph XML\\nfile node creation. To create an roSGNode object for a specific node\\nclass, call:</p>\\n<p><code>CreateObject(\\\"roSGNode\\\", \\\"nodetype\\\")</code></p>\\n<p>Where nodetype is a string specifying the node class to be created.\\nFor example, the following creates an object of the SceneGraph\\nPoster node class:</p>\\n<p><code>CreateObject(\\\"roSGNode\\\", \\\"Poster\\\")</code></p>\\n<p>Reference information on all SceneGraph node classes can be found in\\n<a href=\\\"/docs/references/scenegraph/node.md\\\">SceneGraph API\\nReference</a>.</p>\\n<p>Prior to creating an roSGScreen object and calling its <code>show()</code>\\nfunction, creating roSGNode objects and using their interfaces is\\nnot guaranteed to work correctly. If you need to create some\\nroSGNode objects and/or use roSGNode interfaces prior to calling\\nan roSGScreen object <code>show()</code> function, you can use an\\nroSGScreen object <code>createScene()</code> function to create an instance of\\na SceneGraph XML component that does any required setup and\\ninitialization prior to the roSGScreen object being displayed.</p>\\n<p>In addition, roSGNode implements the ifAssociativeArray interface as a wrapper for ifSGNodeFIeld so that the convenient node.field notation may be using for setting, getting, and observing fields.</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported Interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifassociativearray.md\\\">ifAssociativeArray</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsgnodechildren.md\\\">ifSGNodeChildren</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefield.md\\\">ifSGNodeField</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsgnodedict.md\\\">ifSGNodeDict</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefocus.md\\\">ifSGNodeFocus</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsgnodeboundingrect.md\\\">ifSGNodeBoundingRect</a></li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsgnodehttpagentaccess.md\\\">ifSGNodeHttpAgentAccess</a></li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported Events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/rosgnodeevent.md\\\">roSGNodeEvent</a></li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rosgscreen.md":"{\n  \"content\": \"<h1 id=\\\"rosgscreen\\\">roSGScreen</h1>\\n<p>The roSGScreen object is a SceneGraph canvas that displays the\\ncontents of a SceneGraph Scene node instance. The object is created\\nby calling:</p>\\n<p><code>CreateObject(\\\"roSGScreen\\\")</code></p>\\n<p><code>CreateScene()</code> takes one argument, the name of the scene component.  A\\nchannel will typically extend Scene to define its own channel specific\\nScene type (such as MyScene, etc.)  This Scene component name is passed\\nto <code>CreateScene().</code></p>\\n<p><strong>roSGScreen typical usage example</strong></p>\\n<pre><code>screen = CreateObject(\\\"roSGScreen\\\")\\nscene  = screen.CreateScene(\\\"Scene\\\")\\nscreen.show()\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsgscreen.md\\\" title=\\\"ifSgScreen\\\">ifSgScreen</a></li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/rosgscreenevent.md\\\" title=\\\"roSGScreenEvent\\\">roSGScreenEvent</a>             </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rosocketaddress.md":"{\n  \"content\": \"<h1 id=\\\"rosocketaddress\\\">roSocketAddress</h1>\\n<p>The roSocketAddress is used by the roStreamSocket and roDataGramSocket components for TCP and UDP traffic respectively.</p>\\n<p>This object is created without any arguments:</p>\\n<p><code>CreateObject(\\\"roSocketAddress\\\")</code></p>\\n<p>Methods in <a href=\\\"/docs/references/brightscript/interfaces/ifsocketaddress.md\\\" title=\\\"ifSocketAddress\\\">ifSocketAddress</a> are used to assign an IP address to the object. roSocketAddress currently supports only IPV4 addresses.</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsocketaddress.md\\\" title=\\\"ifSocketAddress\\\">ifSocketAddress</a>            </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rosprite.md":"{\n  \"content\": \"<h1 id=\\\"rosprite\\\">roSprite</h1>\\n<p>The roSprite object cannot be created directly with a CreateObject() call. It must be associated with a managing roCompositor object. This association is implicitly created by creating an roSprite object with the roCompositor methods NewSprite() or NewAnimatedSprite().</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsprite.md\\\" title=\\\"ifSprite\\\">ifSprite</a>              </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rostreamsocket.md":"{\n  \"content\": \"<h1 id=\\\"rostreamsocket\\\">roStreamSocket</h1>\\n<p>The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them. The interface is modeled on and works much like standard Berkeley sockets.</p>\\n<p>This object is created without any arguments:</p>\\n<p><code>CreateObject(\\\"roStreamSocket\\\")</code></p>\\n<p><strong>Example: Open TCP Connection to Server</strong></p>\\n<pre><code>sendAddress = CreateObject(\\\"roSocketAddress\\\")\\nsendAddress.SetAddress(\\\"www.google.com:80\\\")\\nsocket = CreateObject(\\\"roStreamSocket\\\")\\nsocket.setSendToAddress(sendAddress)\\nIf socket.Connect()\\n    Print \\\"Connected Successfully\\\"\\nEnd If\\n</code></pre>\\n<p><strong>Example: Echo Server</strong></p>\\n<pre><code>function main()\\n    messagePort = CreateObject(\\\"roMessagePort\\\")\\n    connections = {}\\n    buffer = CreateObject(\\\"roByteArray\\\")\\n    buffer[512] = 0\\n    tcpListen = CreateObject(\\\"roStreamSocket\\\")\\n    tcpListen.setMessagePort(messagePort)\\n    addr = CreateObject(\\\"roSocketAddress\\\")\\n    addr.setPort(54321)\\n    tcpListen.setAddress(addr)\\n    tcpListen.notifyReadable(true)\\n    tcpListen.listen(4)\\n    if not tcpListen.eOK()\\n        print \\\"Error creating listen socket\\\"\\n        stop\\n    end if\\n    while True\\n        event = wait(0, messagePort)\\n        if type(event) = \\\"roSocketEvent\\\"\\n            changedID = event.getSocketID()\\n            if changedID = tcpListen.getID() and tcpListen.isReadable()\\n                ' New\\n                newConnection = tcpListen.accept()\\n                if newConnection = Invalid\\n                    print \\\"accept failed\\\"\\n                else\\n                    print \\\"accepted new connection \\\" newConnection.getID()\\n                    newConnection.notifyReadable(true)\\n                    newConnection.setMessagePort(messagePort)\\n                    connections[Stri(newConnection.getID())] = newConnection\\n                end if\\n            else\\n                ' Activity on an open connection\\n                connection = connections[Stri(changedID)]\\n                closed = False\\n                if connection.isReadable()\\n                    received = connection.receive(buffer, 0, 512)\\n                    print \\\"received is \\\" received\\n                    if received > 0\\n                        print \\\"Echo input: '\\\"; buffer.ToAsciiString(); \\\"'\\\"\\n                        ' If we are unable to send, just drop data for now.\\n                        ' You could use notifywritable and buffer data, but that is\\n                        ' omitted for clarity.\\n                        connection.send(buffer, 0, received)\\n                    else if received=0 ' client closed\\n                        closed = True\\n                    end if\\n                end if\\n                if closed or not connection.eOK()\\n                    print \\\"closing connection \\\" changedID\\n                    connection.close()\\n                    connections.delete(Stri(changedID))\\n                end if\\n            end if\\n        end if\\n    end while\\n\\n    print \\\"Main loop exited\\\"\\n    tcpListen.close()\\n    for each id in connections\\n        connections[id].close()\\n    end for\\nEnd Function\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsocketconnection.md\\\" title=\\\"ifSocketConnection\\\">ifSocketConnection</a>                   </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsocket.md\\\" title=\\\"ifSocket\\\">ifSocket</a>                             </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsocketasync.md\\\" title=\\\"ifSocketAsync\\\">ifSocketAsync</a>                   </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsocketstatus.md\\\" title=\\\"ifSocketStatus\\\">ifSocketStatus</a>                        </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsocketconnectionstatus.md\\\" title=\\\"ifSocketConnectionStatus\\\">ifSocketConnectionStatus</a>              </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsocketconnectionoption.md\\\" title=\\\"ifSocketConnectionOption\\\">ifSocketConnectionOption</a>              </li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/rosocketevent.md\\\" title=\\\"roSocketEvent\\\">roSocketEvent</a>           </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rostring.md":"{\n  \"content\": \"<h1 id=\\\"rostring\\\">roString</h1>\\n<p>roString is the object equivalent for intrinsic type 'String'.</p>\\n<p>This is useful in the following situations:</p>\\n<ul>\\n<li>\\n<p>When an object is needed, instead of an intrinsic value. For example, \\\"roList\\\" maintains a list of objects. If an String is added to roList, it will be automatically wrapped in an roString by the language interpreter. When a function that expects a BrightScript Component as a parameter is passed a string, BrightScript automatically creates the equivalent BrightScript Component.</p>\\n</li>\\n<li>\\n<p>If any object exposes the ifString interface, that object can be used in any expression that expects an intrinsic value.</p>\\n</li>\\n</ul>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifstring.md\\\" title=\\\"ifString\\\">ifString</a>                </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifstringops.md\\\" title=\\\"ifStringOps\\\">ifStringOps</a>             </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iftostr.md\\\" title=\\\"ifToStr\\\">ifToStr</a>                 </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rosystemlog.md":"{\n  \"content\": \"<h1 id=\\\"rosystemlog\\\">roSystemLog</h1>\\n<p>The roSystemLog component enables the application to receive events from the Roku Streaming Player that are intended for reporting errors and trends, rather than trigger a response to a user action.</p>\\n<p>All of the log event messages are sent to the roMessagePort that is registered on the <a href=\\\"/docs/references/brightscript/events/rosystemlogevent.md\\\" title=\\\"roSystemLogEvent\\\">roSystemLogEvent</a> object. See roSystemLogEvent for details on the messages.</p>\\n<p>This object is created with no parameters:</p>\\n<p><code>CreateObject(\\\"roSystemLog\\\")</code></p>\\n<p>The roSystemLog component requires specific Design Patterns in your BrightScript Application. Take care to:</p>\\n<ul>\\n<li>Use one roMessagePort throughout the application (instead of creating a new roMessagePort for each screen).</li>\\n<li>Create one roSystemLog instance at startup that remains for the entire lifetime of the application.</li>\\n<li>Pass the global roMessagePort referenced in the first bullet point to SetMessagePort() on the roSystemLog component.</li>\\n<li>Enable the desired log types using EnableType().</li>\\n<li>Handle the <a href=\\\"/docs/references/brightscript/events/rosystemlogevent.md\\\" title=\\\"roSystemLogEvents\\\">roSystemLogEvents</a> in all message loops.</li>\\n</ul>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsystemlog.md\\\" title=\\\"ifSystemLog\\\">ifSystemLog</a>            </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rotexttospeech.md":"{\n  \"content\": \"<h1 id=\\\"rotexttospeech\\\">roTextToSpeech</h1>\\n<blockquote>\\n<p>To implement CVAA/screen reader support in your channel, use the <a href=\\\"/docs/references/brightscript/components/roaudioguide.md\\\">roAudioGuide</a> component object. The roTextToSpeech component object is typically used for book readers and other special-purpose applications.</p>\\n<p>Please note this component is only available on the following devices: Roku Streaming Stick (3600X), Roku Express (3700X) and Express+ (3710X), Roku Premiere (4620X) and Premiere+ (4630X), Roku Ultra (4640X), and any Roku TV running Roku OS version 7.2 and later.</p>\\n</blockquote>\\n<p>The roTextToSpeech component provides text to speech capabilities to applications.</p>\\n<p>An roTextToSpeech component object is created with no parameters:</p>\\n<p><code>CreateObject(\\\"roTextToSpeech\\\")</code></p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iftexttospeech.md\\\" title=\\\"ifTextToSpeech\\\">ifTextToSpeech</a>                 </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\" title=\\\"ifSetMessagePort\\\">ifSetMessagePort</a>               </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifgetmessageport.md\\\" title=\\\"ifGetMessagePort\\\">ifGetMessagePort</a>               </li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/rotexttospeechevent.md\\\" title=\\\"ifTextToSpeechEvent\\\">roTextToSpeechEvent</a>  </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rotexturemanager.md":"{\n  \"content\": \"<h1 id=\\\"rotexturemanager\\\">roTextureManager</h1>\\n<p>The Texture Manager provides a set of API's for managing an roBitmap cache.</p>\\n<p><strong>Example: Requesting an roBitmap from the roTextureManager</strong></p>\\n<pre><code>Sub Main()\\n    mgr = CreateObject(\\\"roTextureManager\\\")\\n    msgport = CreateObject(\\\"roMessagePort\\\")\\n    mgr.SetMessagePort(msgport)\\n\\n    request = CreateObject(\\\"roTextureRequest\\\",\\\"pkg:/assets/comet.jpg\\\")\\n    mgr.RequestTexture(request)\\n\\n    msg=wait(0, msgport)\\n    if type(msg)=\\\"roTextureRequestEvent\\\" then\\n        print \\\"request id\\\";msg.GetId()\\n        print \\\"request state:\\\";msg.GetState()\\n        print \\\"request URI:\\\";msg.GetURI()\\n        state = msg.GetState()\\n        if state = 3 then\\n            bitmap = msg.GetBitmap()\\n            if type(bitmap)&#x3C;>\\\"roBitmap\\\" then\\n                print \\\"Unable to create robitmap\\\"\\n                stop   ' stop exits to the debugger\\n            end if\\n        end if\\n   end if\\nEnd Sub\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iftexturemanager.md\\\" title=\\\"ifTextureManager\\\">ifTextureManager</a>                 </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\" title=\\\"ifSetMessagePort\\\">ifSetMessagePort</a>               </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifgetmessageport.md\\\" title=\\\"ifGetMessagePort\\\">ifGetMessagePort</a>               </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifhttpagent.md\\\" title=\\\"ifHttpAgent\\\">ifHttpAgent</a>   </li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/rotexturerequestevent.md\\\" title=\\\"roVideoPlayerEvent\\\">roTextureRequestEvent</a>  </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rotexturerequest.md":"{\n  \"content\": \"<h1 id=\\\"rotexturerequest\\\">roTextureRequest</h1>\\n<p>An roTextureRequest is used to make requests to the roTextureManager.</p>\\n<p>An roTextureRequest object is created using the CreateObject() method and passing it a URI string:</p>\\n<p><code>CreateObject(\\\"roTextureRequest\\\", \\\"pkg:/assets/comet.jpg\\\")</code></p>\\n<p><strong>Example: Requesting a URL from the roTextureManager</strong></p>\\n<pre><code>Sub Main()\\n    mgr = CreateObject(\\\"roTextureManager\\\")\\n    msgport = CreateObject(\\\"roMessagePort\\\")\\n    mgr.SetMessagePort(msgport)\\n\\n    request = CreateObject(\\\"roTextureRequest\\\",\\\"http://192.168.1.10/ball.png\\\")\\n    mgr.RequestTexture(request)\\n\\n    msg=wait(0, msgport)\\n    if type(msg)=\\\"roTextureRequestEvent\\\" then\\n        print \\\"request id\\\";msg.GetId()\\n        print \\\"request state:\\\";msg.GetState()\\n        print \\\"request URI:\\\";msg.GetURI()\\n        state = msg.GetState()\\n        if state = 3 then\\n            bitmap = msg.GetBitmap()\\n            if type(bitmap)&#x3C;>\\\"roBitmap\\\" then\\n                print \\\"Unable to create robitmap\\\"\\n                stop   ' stop exits to the debugger\\n            end if\\n        end if\\n   end if\\nEnd Sub\\n</code></pre>\\n<p><strong>Example: Requesting a scaled image from the roTextureManager</strong></p>\\n<pre><code>Sub Main()\\n    mgr = CreateObject(\\\"roTextureManager\\\")\\n    msgport = CreateObject(\\\"roMessagePort\\\")\\n    mgr.SetMessagePort(msgport)\\n\\n    request = CreateObject(\\\"roTextureRequest\\\",\\\"pkg:/assets/ball.png\\\")\\n    request.SetSize(100, 100)\\n    request.SetScaleMode(1)\\n    mgr.RequestTexture(request)\\nEnd Sub\\n</code></pre>\\n<p><strong>Example: Making an HTTPS request from the roTextureManager</strong></p>\\n<pre><code>Sub Main()\\n    mgr = CreateObject(\\\"roTextureManager\\\")\\n    msgport = CreateObject(\\\"roMessagePort\\\")\\n    mgr.SetMessagePort(msgport)\\n\\n    request = CreateObject(\\\"roTextureRequest\\\",\\\"https://192.168.1.10/ball.png\\\")\\n    request.SetCertificatesFile(\\\"common:/certs/ca-bundle.crt\\\")\\n    request.InitClientCertificates()\\n\\n    mgr.RequestTexture(request)\\nEnd Sub\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iftexturerequest.md\\\" title=\\\"ifTextureRequest \\\">ifTextureRequest</a>                 </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifhttpagent.md\\\" title=\\\"ifHttpAgent\\\">ifHttpAgent</a>           </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rotimespan.md":"{\n  \"content\": \"<h1 id=\\\"rotimespan\\\">roTimespan</h1>\\n<p>The Timespan object provides an interface to a simple timer for tracking the duration of activities. It's useful for tracking how an action has taken or if a specified time has elapsed from some starting event.</p>\\n<p><strong>Example: Timing an activity</strong></p>\\n<pre><code>REM ******************************************************\\nREM Compute the number of millisecs to perform a task\\nREM ******************************************************\\ntimer = CreateObject(\\\"roTimespan\\\")\\ntimer.Mark()\\nDoTimeConsumingTask()\\nPrint \\\"Task took: \\\" + timer.TotalMilliseconds().ToStr()\\n\\nREM ******************************************************\\nREM Compute how many seconds until rental expires\\nREM ******************************************************\\nFunction secondsLeft(String expirationDate) As Integer\\n    str = expirationDate\\n    if str = invalid return -1\\n    ts = CreateObject(\\\"roTimespan\\\")\\n    seconds = ts.GetSecondsToISO8601Date(str)\\n    print \\\"Expires: \\\" + str + \\\" secs: \\\" + Stri(seconds)\\n    return seconds\\nEnd Function\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iftimespan.md\\\" title=\\\"ifTimespan\\\">ifTimespan</a>             </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rourltransfer.md":"{\n  \"content\": \"<h1 id=\\\"rourltransfer\\\">roUrlTransfer</h1>\\n<p>A roUrlTransfer object transfers data to or from remote servers specified by URLs. It can perform mutual authentication with a web server.</p>\\n<p>This object is created with no parameters:</p>\\n<p><code>CreateObject(\\\"roUrlTransfer\\\")</code></p>\\n<p>If using HTTPS, the developer must specify a certificate file by calling SetCertificatesFile() with a .pem file that includes the certificate authority cert (like Verisign, Thawte, etc., or your own with OpenSSL) that signed the web server certificate. This must be called before making a request. The developer can also use the Roku standard cert bundle (which contains certificates for most common signing authorities) stored in common:/certs/ca-bundle.crt; or download the CA certificate <a href=\\\"https://github.com/rokudev/ca-certificate/blob/master/ca-bundle.crt\\\">here</a>.</p>\\n<p>The web server can authenticate that the requested connection is from a Roku Streaming Player and that the request is from your application by taking the following actions:</p>\\n<ul>\\n<li>Add the Roku CA certificate to the web server's certificate authorities keychain, download the CA certificate.  </li>\\n<li>Configure your web server to reject any connection that does not have a valid client certificate.</li>\\n<li>Check the X-Roku-Reserved-Dev-Id header in the request. It should contain the Developer ID of your application. If it does not, another application on the Roku is attempting to access the server, and the request is rejected.</li>\\n</ul>\\n<p><strong>Example</strong></p>\\n<p>In order for your web server to perform the steps above to authenticate your Roku Streaming Player, your application needs to call the following functions before performing any https requests:</p>\\n<pre><code>object.SetCertificatesFile(\\\"common:/certs/ca-bundle.crt\\\")\\nobject.AddHeader(\\\"X-Roku-Reserved-Dev-Id\\\", \\\"\\\")\\nobject.InitClientCertificates()\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifurltransfer.md\\\" title=\\\"ifUrlTransfer\\\">ifUrlTransfer</a>                 </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifhttpagent.md\\\" title=\\\"ifHttpAgent\\\">ifHttpAgent</a>                    </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\" title=\\\"ifSetMessagePort\\\">ifSetMessagePort</a>               </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifgetmessageport.md\\\" title=\\\"ifGetMessagePort\\\">ifGetMessagePort</a>               </li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/rourlevent.md\\\" title=\\\"roUrlEvent\\\">roUrlEvent</a>  </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/rovideoplayer.md":"{\n  \"content\": \"<h1 id=\\\"rovideoplayer\\\">roVideoPlayer</h1>\\n<p>The roVideoPlayer component implements a video player with programmatic controls.</p>\\n<p>This object is created with no parameters:</p>\\n<p><code>CreateObject(\\\"roVideoPlayer\\\")</code></p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifvideoplayer.md\\\" title=\\\"ifVideoPlayer\\\">ifVideoPlayer</a>                 </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifhttpagent.md\\\" title=\\\"ifHttpAgent\\\">ifHttpAgent</a>                    </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\" title=\\\"ifSetMessagePort\\\">ifSetMessagePort</a>               </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifgetmessageport.md\\\" title=\\\"ifGetMessagePort\\\">ifGetMessagePort</a>               </li>\\n</ul>\\n<h2 id=\\\"supported-events\\\">Supported events</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/events/rovideoplayerevent.md\\\" title=\\\"roVideoPlayerEvent\\\">roVideoPlayerEvent</a>              </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roxmlelement.md":"{\n  \"content\": \"<h1 id=\\\"roxmlelement\\\">roXMLElement</h1>\\n<p>roXMLElement is used to contain an XML tree. </p>\\n<p>For instance,</p>\\n<pre><code>&#x3C;tag1>this is some text&#x3C;/tag1>\\n</code></pre>\\n<p>Would parse such that:</p>\\n<pre><code>    Name = \\\"tag1\\\"\\n    Attributes = invalid\\n    Body = roString with \\\"this is some text\\\"\\n</code></pre>\\n<p><strong>Example</strong></p>\\n<pre><code>&#x3C;emptytag caveman=\\\"barney\\\" /> \\n</code></pre>\\n<p>Would parse such that:</p>\\n<pre><code>    Name = \\\"emptytag\\\"\\n    Attributes = roAssociativeArray, with one entry { caveman: \\\"barney\\\" }\\n    Body = invalid\\n</code></pre>\\n<p>If the tag contains other tags, body will be of type roXMLList. </p>\\n<p>To generate XML, create an roXMLElement, then use functions like SetName(), AddAttribute(), SetBody(), AddElementWithBody(), AddElement(), AddBodyElement(), and AddText() functions to build the XML object hierarchy.</p>\\n<p>Then call GenXML() to return the XML as a string.</p>\\n<p>GenXML() takes one parameter (boolean) that indicates whether the generated xml should have the &#x3C;?xml …> tag at the top.</p>\\n<p><strong>Example: Subroutine to print out the contents of an roXMLElement tree</strong></p>\\n<pre><code>PrintXML(root, 0)\\n\\nSub PrintXML(element As Object, depth As Integer)\\n    print tab(depth*3);\\\"Name: \\\";element.GetName()\\n    if not element.GetAttributes().IsEmpty() then\\n        print tab(depth*3);\\\"Attributes: \\\";\\n        for each a in element.GetAttributes()\\n            print a;\\\"=\\\";left(element.GetAttributes()[a], 20);\\n            if element.GetAttributes().IsNext() then print \\\", \\\";\\n        end for\\n        print\\n    end if\\n    if element.GetText()&#x3C;>invalid then\\n        print tab(depth*3);\\\"Contains Text: \\\";left(element.GetText(), 40)\\n    end if\\n    if element.GetChildElements()&#x3C;>invalid\\n        print tab(depth*3);\\\"Contains roXMLList:\\\"\\n        for each e in element.GetChildElements()\\n            PrintXML(e, depth+1)\\n        end for\\n    end if\\n    print\\nend sub\\n</code></pre>\\n<p><strong>Example: Generating XML</strong></p>\\n<pre><code>root.SetName(\\\"myroot\\\")\\nroot.AddAttribute(\\\"key1\\\", \\\"value1\\\")\\nroot.AddAttribute(\\\"key2\\\", \\\"value2\\\")\\nne = root.AddBodyElement()\\nne.SetName(\\\"sub\\\")\\nne.SetBody(\\\"this is the sub1 text\\\")\\nne = root.AddBodyElement()\\nne.SetName(\\\"subelement2\\\")\\nne.SetBody(\\\"more sub text\\\")\\nne.AddAttribute(\\\"k\\\", \\\"v\\\")\\nne = root.AddElement(\\\"subelement3\\\")\\nne.SetBody(\\\"more sub text 3\\\")\\nroot.AddElementWithBody(\\\"sub\\\", \\\"another sub (#4)\\\")\\nPrintXML(root, 0)\\nprint root.GenXML(false)\\n</code></pre>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifxmlelement.md\\\" title=\\\"ifXMLElement\\\">ifXMLElement</a>        </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/components/roxmllist.md":"{\n  \"content\": \"<h1 id=\\\"roxmllist\\\">roXMLList</h1>\\n<p>Contains a list of roXML objects.</p>\\n<p>Normally roXMLList objects are not created via CreateObject(), but are returned from various ifXMLElement functions such as GetChildElements() and GetBod</p>\\n<h2 id=\\\"supported-interfaces\\\">Supported interfaces</h2>\\n<ul>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iflist.md\\\" title=\\\"ifList\\\">ifList</a>                    </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/ifxmllist.md\\\" title=\\\"ifXMLList\\\">ifXMLList</a>                  </li>\\n<li><a href=\\\"/docs/references/brightscript/interfaces/iflisttoarray.md\\\" title=\\\"ifListToArray\\\">ifListToArray</a>             </li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifappinfo.md":"{\n  \"content\": \"<h1 id=\\\"ifappinfo\\\">ifAppInfo</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roappinfo.md\\\">roAppInfo</a></td>\\n<td>Returns information about the application</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getid-as-string\\\">GetID() As String</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the app's channel ID.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>Channel ID; e.g., \\\"12345\\\" or \\\"dev\\\"</p>\\n<h3 id=\\\"isdev-as-boolean\\\">IsDev() As Boolean</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns true if the application is sideloaded, i.e. the channel ID is \\\"dev\\\".</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>True/ False</p>\\n<h3 id=\\\"getversion-as-string\\\">GetVersion() As String</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns the conglomerate version number from the manifest, as formatted major_version + minor_version + build_version.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>Channel version number. e.g. \\\"1.2.3\\\"</p>\\n<h3 id=\\\"gettitle-as-string\\\">GetTitle() As String</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Returns the title value from the manifest.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>Title of the channel</p>\\n<h3 id=\\\"getsubtitle-as-string\\\">GetSubtitle() As String</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns the subtitle value from the manifest.</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>Possible subtitle configuration</p>\\n<h3 id=\\\"getdevid-as-string\\\">GetDevID() As String</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Returns the app's developer ID, or the keyed developer ID, if the application is sideloaded.</p>\\n<blockquote>\\n<p>If the device has not been keyed, this method returns \\\"34c6fceca75e456f25e7e99531e2425c6c1de443\\\" for sideloaded channels.</p>\\n</blockquote>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>Channel's Developer ID</p>\\n<h3 id=\\\"getvaluekey-as-string-as-string\\\">GetValue(key As String) As String</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns the named manifest value, or an empty string if the entry is does not exist.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Key</td>\\n<td>String</td>\\n<td>The manifest value to be returned.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>Manifest value; empty string</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifappmanager.md":"{\n  \"content\": \"<h1 id=\\\"ifappmanager\\\">ifAppManager</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roappmanager.md\\\" title=\\\"roAppManager\\\">roAppManager</a></td>\\n<td>Returns information about the application</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getuptime-as-object\\\">GetUptime() as Object</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns an <a href=\\\"/docs/references/brightscript/components/rotimespan.md\\\" title=\\\"roTimespan\\\">roTimespan</a> object, which is \\\"marked\\\" when the user clicked on the application button on the home screen.Calling the TotalMilliseconds() method on the returned roTimespan object returns the total number of milliseconds since the application started.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>An <a href=\\\"/docs/references/brightscript/components/rotimespan.md\\\" title=\\\"roTimespan\\\">roTimespan</a> object.</p>\\n<h3 id=\\\"getscreensavertimeout-as-integer\\\">GetScreensaverTimeout() as Integer</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the user's screensaver wait time setting in number of minutes, or zero if the screensaver is disabled.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The number of minutes set for the screensaver wait time.</p>\\n<h3 id=\\\"setusersignedinsignedin-as-boolean-as-void\\\">SetUserSignedIn(signedIn as Boolean) as Void</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>This method allows a channel to tell Roku when the user is signed in or signed out of the channelIf the channel is removed, the Roku OS will call SetUserSignedIn(false) on the channel's behalf.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>signedIn</td>\\n<td>Boolean</td>\\n<td>Set to true to indicate that the user is signed in; set to false to indicate the user is signed out.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setautomaticaudioguideenabledenabled-as-boolean-as-void\\\">SetAutomaticAudioGuideEnabled(enabled as Boolean) as Void</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Enables or disables the automatic screen reader and override any manifest setting.This is useful for channels that want to temporarily turn off the automatic screen reader for specific screens.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enabled</td>\\n<td>Boolean</td>\\n<td>A flag indicating whether to enable or disable the automatic screen reader.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"showchannelstorespringboardchannelid-as-string-as-void\\\">ShowChannelStoreSpringboard(channelID As String) as Void</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Launches the channel store springboard of the specified channel. The channel store springboard contains detailed information about the channel, including ratings, version, date of last update, developer name, and a description.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>channelId</td>\\n<td>String</td>\\n<td>The unique ID of the channel to be launched.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"isappinstalledchannelid-as-string-version-as-string-as-boolean\\\">IsAppInstalled(channelID as String, version As String) as Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>This method returns true if a channel with the specified channelID and the minimum version required is installed.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>channelID</td>\\n<td>String</td>\\n<td>The unique id of the channel.</td>\\n</tr>\\n<tr>\\n<td>version</td>\\n<td>String</td>\\n<td>The minimum version number of the channel to be used for the query.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A boolean indicating whether the specified channel is installed.</p>\\n<h3 id=\\\"setnowplayingcontentmetadatacontentmetadata-as-object-as-void\\\">SetNowPlayingContentMetaData(contentMetaData as Object) as Void</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Updates video or audio <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\">content metadata</a> during playback. This method takes a subset of content metadata parameters to be updated. These values override any previously ones sent to the Roku Media Player, and they are used until this function is called again or until the <a href=\\\"/docs/references/brightscript/components/roappmanager.md\\\"><strong>roAppManager</strong></a> instance is deleted.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>contentMetaData</td>\\n<td>roAssociativeArray</td>\\n<td>The video or audio <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\">content metadata</a> parameters to be updated (for example, the title and contentType)</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"example\\\">Example</h4>\\n<pre><code>appmgr = CreateObject(\\\"roAppManager\\\")\\nappmgr.SetNowPlayingContentMetaData({\\n title: \\\"The Gambler\\\",\\n contentType: \\\"movie\\\"\\n})\\n</code></pre>\\n<p>To revert an update, pass <code>invalid</code> in this method:</p>\\n<pre><code>appmgr.SetNowPlayingContentMetaData(invalid)\\n</code></pre>\\n<h3 id=\\\"startvoiceactionselectionrequest-as-void\\\">StartVoiceActionSelectionRequest() as Void</h3>\\n<p><em>Available since Roku OS 10.5</em></p>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Triggers a voice request for the viewer to select a user profile if the device is paired with a hands-free Roku Voice remote control. This function should be called by channels that support voice commands and display a user profile selection screen upon launch, which is when this method should be called.</p>\\n<p>For example, when the user launches a channel and the profile selection screen is displayed, calling this function will trigger Roku Voice to say and display \\\"Which of these would you like\\\" or \\\"Who's watching?\\\" (if a hands-free Roku Voice remote control is paired with the device).</p>\\n<p>Channels can check the launch parameters to determine whether the channel was launched via a voice command before calling this method. Additionally, channels can call the <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#hasfeaturefeature-as-string-as-boolean\\\">roDeviceInfo.HasFeature(\\\"handsfree_voice\\\")</a> function to check whether a hands-free Roku Voice remote control is paired with the device. If a hands-free remote is not paired with the device or is not active, calling this function has no effect.</p>\\n<h3 id=\\\"setvoiceactionstringsactions-as-object-as-void\\\">SetVoiceActionStrings(actions as Object) as Void</h3>\\n<p><em>Available since Roku OS 10.5</em></p>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Specifies a list of text strings, such as user profile names, that can be matched to voice requests.</p>\\n<p>When there is a match (the name uttered by the user matches the registered text string), it is provided to the channel via an roInput voice command handler. Specifically, the <strong>command</strong> key in the associative array returned by the <a href=\\\"/docs/references/brightscript/events/roinputevent.md#getinfo-as-object\\\"><strong>roInputEvent.GetInfo()</strong></a> method is set to \\\"action\\\", and the <strong>text</strong> key is set to the matched name or other text string.</p>\\n<p><strong>Parameters</strong></p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>actions</td>\\n<td>array of associative arrays</td>\\n<td>The list of text strings to be regsitered. Once a text string is registered, it can be matched to voice requests received by the channel.  Each text string is defined with the following attributes:<ul>\\n<li>a <strong>text</strong> key for storing the name or word to be matched.</li>\\n<li>an optional <strong>link</strong> key for storing a deep link.</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"example-1\\\">Example</h4>\\n<pre><code>appMgr = CreateObject(\\\"roAppManager\\\")\\n\\nprofile1 = { text: \\\"kids\\\", link: \\\"d46ge-i8Y5-192\\\"}\\nprofile2 = { text: \\\"Jane\\\", link: \\\"2a2Nu-u1D4-555\\\"}\\nprofile3 = { text: \\\"John\\\", link: \\\"6Nu70-N37x-901\\\"}\\n\\nactions = [profile1, profile2, profile3]\\n\\nappMgr.SetVoiceActionStrings(actions)\\n</code></pre>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifappmemorymonitor.md":"{\n  \"content\": \"<h1 id=\\\"ifappmemorymonitor\\\">ifAppMemoryMonitor</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roappmemorymonitor.md\\\" title=\\\"roAppMemoryMonitor\\\">roAppMemoryMonitor</a></td>\\n<td>Subscribes channels to low-memory notifications. When a channel is subscribed, it receives a <a href=\\\"/docs/references/brightscript/events/roappmemorymonitorevent.md\\\">roAppMemoryMonitorEvent</a> when it reaches a specific percentage of the per-channel memory limit (80%).</td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>To use the roAppMemoryMonitor functions, you must add the <strong>run_as_process=1</strong> attribute to the <a href=\\\"/docs/developer-program/getting-started/architecture/channel-manifest.md\\\">channel manifest</a>.</p>\\n<p>This feature is only supported on <a href=\\\"/docs/specs/hardware.md#current-roku-models\\\">current device models</a>.</p>\\n</blockquote>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"enablememorywarningeventenable-as-boolean-as-boolean\\\">EnableMemoryWarningEvent(enable as Boolean) as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Enables a channel to be alerted when it has reached 80% of its memory usage limit.</p>\\n<h4 id=\\\"parameter\\\">Parameter</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag that enables or disables memory alerts on the channel.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-values\\\">Return Values</h4>\\n<p>A flag indicating whether memory alerts have been enabled. </p>\\n<h3 id=\\\"getmemorylimitpercent-as-int\\\">GetMemoryLimitPercent() as Int</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the memory limit for the channel.</p>\\n<h4 id=\\\"return-values-1\\\">Return Values</h4>\\n<p>The memory limit for the channel.</p>\\n<h2 id=\\\"example\\\">Example</h2>\\n<pre><code>m.port = CreateObject(\\\"roMessagePort\\\")\\ndeviceInfo = CreateObject(\\\"roAppMemoryMonitor\\\")\\ndeviceInfo.setMessagePort(m.port)\\nret = deviceInfo.EnableMemoryWarningEvent(true)\\nif ret = true\\n    m.global.forCgroup=\\\"true\\\"\\nelse\\n    m.global.forCgroup=\\\"false\\\"\\n    deviceInfo = CreateObject(\\\"roDeviceInfo\\\")\\n    deviceInfo.setMessagePort(m.port)\\n    deviceInfo.enableLowGeneralMemoryEvent(true)\\nend if\\nprint \\\"showChannelSGScreen forCgroup= \\\" m.global.forCgroup\\nwhile(true)\\n    msg = wait(0, m.port)\\n    msgType = type(msg)\\n    if msgType = \\\"roSGScreenEvent\\\"\\n        if msg.isScreenClosed() then return\\n    else if msgType = \\\"roAppMemoryNotificationEvent\\\"\\n        print \\\"Event MemoryUsagePercent = \\\"            \\n        msg.getInfo().lookup(\\\"MemoryUsagePercent\\\")\\n        m.global.getEvent=\\\"true\\\"\\n    else if msgType = \\\"roDeviceInfoEvent\\\"\\n        print \\\"Event generalMemoryLevel = \\\" msg.getInfo().lookup(\\\"generalMemoryLevel\\\")\\n        m.global.getEvent=\\\"true\\\"\\n    end if\\nend while\\n</code></pre>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifarray.md":"{\n  \"content\": \"<h1 id=\\\"ifarray\\\">ifArray</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roarray.md\\\" title=\\\"roArray\\\">roArray</a></td>\\n<td>An array stores an indexed collection of BrightScript objects. Each entry of an array can be a different type, or they may all of the same type</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/robytearray.md\\\" title=\\\"roByteArray\\\">roByteArray</a></td>\\n<td>The byte array component is used to contain and manipulate an arbitrary array of bytes</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rolist.md\\\" title=\\\"roList\\\">roList</a></td>\\n<td>The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roxmllist.md\\\" title=\\\"roXMLList\\\">roXMLList</a></td>\\n<td>Contains a list of roXML objects</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"peek-as-dynamic\\\">Peek() As Dynamic</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the last (highest index) array entry without removing it. If the array is empty, returns invalid</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>Invalid</p>\\n<h3 id=\\\"pop-as-dynamic\\\">Pop() As Dynamic</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the last entry (highest index) from the array and removes it from the array. If the array is empty, returns invalid and does not change the array.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The last (highest index) array entry.</p>\\n<h3 id=\\\"pushtvalue-as-dynamic-as-void\\\">Push(tvalue As Dynamic) As Void</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Adds the specified value to the end of the array.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>tvalue</td>\\n<td>Dynamic</td>\\n<td>The value to be added to the end of the array.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"shift-as-dynamic\\\">Shift() As Dynamic</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Removes the first entry (zero index) from the beginning of the array and shifts the other entries up. This method is similar to the <a href=\\\"#pushtvalue-as-dynamic-as-void\\\">Pop method</a>, but inserts a new first entry in the array instead of adding a last one.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>The first entry (zero index) removed from the array.</p>\\n<h3 id=\\\"unshifttvalue-as-dynamic-as-void\\\">Unshift(tvalue As Dynamic) As Void</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Adds the specified value to the beginning of the array (at the zero index) and shifts the other entries down. This method is similar to the <a href=\\\"#push-as-dynamic\\\">Push method</a>, but inserts a new first entry in the array instead of adding a last one.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>tvalue</td>\\n<td>Dynamic</td>\\n<td>The value to be added to the beginning of the array.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"deleteindex-as-integer-as-boolean\\\">Delete(index as Integer) As Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Deletes the indicated array entry, and shifts all entries up. This decreases the array length by one.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether the specified array entry has been removed.  If the entry was successfully deleted, returns true. If index is out of range, returns false and does not change the array.</p>\\n<h3 id=\\\"count-as-integer\\\">Count() As Integer</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns the length of the array, which is one more than the index of highest entry.</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>The length of the array.</p>\\n<h3 id=\\\"clear-as-void\\\">Clear() As Void</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Deletes all the entries in the array.</p>\\n<h3 id=\\\"appendarray-as-object-as-void\\\">Append(array As Object) As Void</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Appends the entries in one <strong>roArray</strong> to another. If the passed array contains entries that have not been set to a value, they are not appended.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>array</td>\\n<td>Object</td>\\n<td>The <strong>roArray</strong> to be appended to the target array.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifarrayget.md":"{\n  \"content\": \"<h1 id=\\\"ifarrayget\\\">ifArrayGet</h1>\\n<p>The ifArrayGet interface supports the array indexing operator [ ]</p>\\n<p>(See <a href=\\\"/docs/references/brightscript/language/expressions-variables-types.md#effects-of-type-conversions-on-accuracy\\\" title=\\\"Array Operator\\\">Array Operator</a>)</p>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roarray.md\\\" title=\\\"roArray\\\">roArray</a></td>\\n<td>An array stores an indexed collection of BrightScript objects. Each entry of an array can be a different type, or they may all of the same type</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/robytearray.md\\\" title=\\\"roByteArray\\\">roByteArray</a></td>\\n<td>The byte array component is used to contain and manipulate an arbitrary array of bytes</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rolist.md\\\" title=\\\"roList\\\">roList</a></td>\\n<td>The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roxmllist.md\\\" title=\\\"roXMLList\\\">roXMLList</a></td>\\n<td>Contains a list of roXML objects</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getentryindex-as-integer-as-dynamic\\\">GetEntry(index As Integer) As Dynamic</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns an array entry based on the provided index.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>index</td>\\n<td>Integer</td>\\n<td>The index of the array entry to be returned.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The array entry corresponding to the provided index, or invalid if the entry has not been set.  </p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifarrayjoin.md":"{\n  \"content\": \"<h1 id=\\\"ifarrayjoin\\\">ifArrayJoin</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roarray.md\\\" title=\\\"roArray\\\">roArray</a></td>\\n<td>Returns information about the application</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"joinseparator-as-string-as-string\\\">Join(separator as String) as String</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Creates a string by joining all array elements together separated by the specified separator. All elements must be of type string; otherwise, an empty string is returned</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>separator</td>\\n<td>String</td>\\n<td>The string used to separate elements in an array.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A String containing the array elements. </p>\\n<h4 id=\\\"examples\\\">Examples</h4>\\n<pre><code>    a = [\\\"ant\\\",\\\"bat\\\",\\\"cat\\\"] \\n    s = a.Join(\\\",\\\")\\n    print \\\"\\\"\\\"\\\" + s + \\\"\\\"\\\"\\\"\\n    REM \\\"ant,bat,cat\\\"\\n\\n    a = \\\"abc\\\".Split(\\\"\\\")\\n    s = a.Join(\\\"--\\\")\\n    print \\\"\\\"\\\"\\\" + s + \\\"\\\"\\\"\\\"\\n    REM \\\"a--b--c\\\"\\n</code></pre>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifarrayset.md":"{\n  \"content\": \"<h1 id=\\\"ifarrayset\\\">ifArraySet</h1>\\n<p>The ifArraySet interface supports the array indexing operator [].</p>\\n<p>(See ArrayOperator)</p>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roarray.md\\\" title=\\\"roArray\\\">roArray</a></td>\\n<td>An array stores an indexed collection of BrightScript objects. Each entry of an array can be a different type, or they may all of the same type</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/robytearray.md\\\" title=\\\"roByteArray\\\">roByteArray</a></td>\\n<td>The byte array component is used to contain and manipulate an arbitrary array of bytes</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rolist.md\\\" title=\\\"roList\\\">roList</a></td>\\n<td>The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roxmllist.md\\\" title=\\\"roXMLList\\\">roXMLList</a></td>\\n<td>Contains a list of roXML objects</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"setentryindex-as-integer-tvalue-as-dynamic-as-void\\\">SetEntry(index As Integer, tvalue As Dynamic) As Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sets an entry at a given index to the passed value. If index is beyond the bounds of the array, the array is expanded to accommodate it.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>index</td>\\n<td>Integer</td>\\n<td>The entry to be updated.</td>\\n</tr>\\n<tr>\\n<td>tvalue</td>\\n<td>Dynamic</td>\\n<td>The new value for the specified entry.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifarraysort.md":"{\n  \"content\": \"<h1 id=\\\"ifarraysort\\\">ifArraySort</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roarray.md\\\" title=\\\"roArray\\\">roArray</a></td>\\n<td>Returns information about the application</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"sortflags-as-string---as-void\\\">Sort(flags as String = \\\"\\\") as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p> Performs a stable sort on an array. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>flags</td>\\n<td>Dynamic</td>\\n<td>Items are arbitrarily grouped by comparable type of number or string, and are sorted within the group with a logical comparison.<br /><br />If \\\"r\\\" is included in flags, a reverse sort is performed. If \\\"i\\\" is included in flags, a case-insensitive sort is performed. If invalid flags are specified, the sort is not performed.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"examples\\\">Examples</h4>\\n<pre><code>    a=[3, 1, 2] \\n    a.Sort()\\n    print a  \\n    REM sets the array to [1, 2, 3]\\n\\n    a=[3, 1, 2.5] \\n    a.Sort(\\\"r\\\")  REM reverse order sort\\n    print a\\n    REM sets the array to [3, 2.5, 1]\\n\\n    a=[\\\"cat\\\", \\\"DOG\\\", \\\"bee\\\"] \\n    a.Sort()  REM case-sensitive sort by default\\n    print a\\n    REM sets the array to [\\\"DOG\\\", \\\"bee\\\", \\\"cat\\\"]\\n\\n    a=[\\\"cat\\\", \\\"DOG\\\", \\\"bee\\\"]  \\n    a.Sort(\\\"i\\\")  REM case-insensitive sort\\n    print a\\n    REM sets the array to [\\\"bee\\\", \\\"cat\\\", \\\"DOG\\\"]\\n\\n    a=[\\\"cat\\\", \\\"DOG\\\", \\\"bee\\\"]  \\n    a.Sort(\\\"ir\\\")  REM case-insensitive, reverse order sort\\n    print a\\n    REM sets the array to [\\\"DOG\\\", \\\"cat\\\", \\\"bee\\\"]\\n</code></pre>\\n<h3 id=\\\"sortbyfieldname-as-string-flags-as-string---as-void\\\">SortBy(fieldName as String, flags as String = \\\"\\\") as Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Performs a stable sort of an array of associative arrays by value of a common field.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldName</td>\\n<td>String</td>\\n<td>The field to be used for sorting.</td>\\n</tr>\\n<tr>\\n<td>flags</td>\\n<td>Dynamic</td>\\n<td>Items are arbitrarily grouped by comparable type of number or string, and are sorted within the group with a logical comparison.<br /><br />If \\\"r\\\" is included in flags, a reverse sort is performed. If \\\"i\\\" is included in flags, a case-insensitive sort is performed. If invalid flags are specified, the sort is not performed.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"examples-1\\\">Examples</h4>\\n<pre><code>    a=[ {id:3, name:\\\"Betty\\\"}, {id:1, name:\\\"Carol\\\"}, {id:2, name:\\\"Anne\\\"} ]\\n    a.SortBy(\\\"name\\\") \\n    REM sets the array to [ {id:2, name:\\\"Anne\\\"}, {id:3, name:\\\"Betty\\\"}, {id:1, name:\\\"Carol\\\"} ]\\n    a.SortBy(\\\"id\\\") \\n    REM sets the array to [ {id:1, name:\\\"Carol\\\"}, {id:2, name:\\\"Anne\\\"}, {id:3, name:\\\"Betty\\\"} ]\\n    a.SortBy(\\\"name\\\", \\\"r\\\")  REM reverse order sort\\n    REM sets the array to [ {id:1, name:\\\"Carol\\\"}, {id:3, name:\\\"Betty\\\"}, {id:2, name:\\\"Anne\\\"} ]\\n</code></pre>\\n<h3 id=\\\"reverse-as-void\\\">Reverse() as Void</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Reverses the order of elements in an array.</p>\\n<h4 id=\\\"example\\\">Example</h4>\\n<pre><code>    a=[1, \\\"one\\\", 2, \\\"two\\\"] \\n    a.Reverse() \\n    REM sets the array to [\\\"two\\\", 2, \\\"one\\\", 1]\\n</code></pre>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifassociativearray.md":"{\n  \"content\": \"<h1 id=\\\"ifassociativearray\\\">ifAssociativeArray</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roassociativearray.md\\\" title=\\\"roAssociativeArray\\\">roAssociativeArray</a></td>\\n<td>An associative array allows objects to be associated with string keys</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNode\\\">roSGNode</a></td>\\n<td>The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"addreplacekey-as-string-value-as-dynamic-as-void\\\">AddReplace(key as String, value as Dynamic) as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Adds a new entry to the array associating the supplied value with the supplied key string. Only one value may be associated with a key. If the key is already associated with a value, the existing value is discarded.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>value</td>\\n<td>Dynamic</td>\\n<td>The value of the key to be added to the associative array.</td>\\n</tr>\\n<tr>\\n<td>key</td>\\n<td>String</td>\\n<td>The key to be added to the associative array.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"lookupkey-as-string-as-dynamic\\\">Lookup(key as String) as Dynamic</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the value in the array associated with the specified key. The key comparison is case-insensitive, unless the <strong>SetModeCaseSensitive()</strong> method has been called.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>key</td>\\n<td>String</td>\\n<td>The key associated with the value to be retrieved from the associative array.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>Returns the value in the array associated with the specified key. If there is no value associated with the key,   the type \\\"invalid\\\" is returned. </p>\\n<h3 id=\\\"lookupcikey-as-string-as-dynamic\\\">LookupCI(key as String) as Dynamic</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Same as the <a href=\\\"#lookupkey-as-string-as-dynamic\\\">Lookup()</a> method except that the key comparison is always case insensitive, regardless of the case mode.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>key</td>\\n<td>String</td>\\n<td>The key (case-insensitive) associated with the value to be retrieved from the associative array.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>Returns the value in the array associated with the specified key. If there is no value associated with the key,   the type \\\"invalid\\\" is returned. </p>\\n<h3 id=\\\"doesexistkey-as-string-as-boolean\\\">DoesExist(key as String) as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Looks for an entry in the associative array associated with the specified key. </p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>key</td>\\n<td>String</td>\\n<td>The key associated with the entry to be checked.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether an entry is associated with the specified key exists. If there is no associated object then false is returned. If there is such an object then true is returned.</p>\\n<h3 id=\\\"deletekey-as-string-as-boolean\\\">Delete(key as String) as Boolean</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Deletes an entry from an associative array based on the key. </p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>key</td>\\n<td>String</td>\\n<td>The key associated with the entry to be deleted.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether an entry is associated with the specified key exists. If there is no associated object then false is returned. If there is such an object then true is returned.</p>\\n<h3 id=\\\"clear-as-void\\\">Clear() as Void</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Remove all key/values from the associative array. </p>\\n<h3 id=\\\"keys-as-object\\\">Keys() as Object</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns an array containing the associative array keys in lexicographical order. </p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>An array of associative array keys.</p>\\n<h3 id=\\\"items-as-object\\\">Items() as Object</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Returns an array containing the associative array key/value pairs in lexicographical order of key. </p>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>An array of associative array keys/value pairs. </p>\\n<h4 id=\\\"example\\\">Example</h4>\\n<pre><code>    aa = {one:1, two:2, three:3}\\n    for each item in aa.Items()\\n        print item.key, item.value\\n    end for\\n    REM prints \\\"one  1\\\", \\\"three  3\\\", \\\"two  2\\\"\\n</code></pre>\\n<h3 id=\\\"setmodecasesensitive-as-void\\\">SetModeCaseSensitive() as Void</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Makes all subsequent associative array lookups case sensitive (by default, lookups are case insensitive).</p>\\n<h3 id=\\\"appendaa-as-object\\\">Append(aa as Object)</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Appends an associative array to this calling object. If any key in the <strong>aa</strong> parameter is already associated with a value in the calling object, the current value is discarded and is replaced with the value provided in the <strong>aa</strong> parameter. </p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>aa</td>\\n<td>Object</td>\\n<td>The associative array to be appended to the calling object.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"count-as-integer\\\">Count() As Integer</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Returns the number of keys in the associative array. </p>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>The number of keys in the associative array.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifaudioguide.md":"{\n  \"content\": \"<h1 id=\\\"ifaudioguide\\\">ifAudioGuide</h1>\\n<blockquote>\\n<p>Please note this component is only available on the following devices: Roku Streaming Stick (3600X), Roku Express (3700X) and Express+ (3710X), Roku Premiere (4620X) and Premiere+ (4630X), Roku Ultra (4640X), and any Roku TV running Roku OS version 7.5 and later.</p>\\n</blockquote>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roaudioguide.md\\\" title=\\\"roAudioGuide\\\">roAudioGuide</a></td>\\n<td>Returns information about the application</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"saytext-as-string-flushspeech-as-boolean-dontrepeat-as-boolean-as-integer\\\">Say(text as String, flushSpeech as Boolean, dontRepeat as Boolean) as Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns an ID for the spoken string to notify observer callbacks about a specific spoken string. This ID can be used with the <a href=\\\"/docs/references/brightscript/events/rotexttospeechevent.md\\\" title=\\\"roTextToSpeechEvent\\\">roTextToSpeechEvent</a>.This method will automatically split up text to reduce lag. Due to this automatic splitting, the roTextToSpeechEvent 0 (\\\"Started speech\\\") event for the returned ID may not be sent until later than expected. The roTextToSpeechEvents 1 (\\\"Speech has completed\\\") and 2 (\\\"Speech has been flushed\\\") events are sent at the expected times.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>String</td>\\n<td>The string to be spoken.<br /><br />Punctuation such as commas and periods can be used to add pauses to the speech playback.<br /><br />Typically, special characters are generally not spoken; however, you can pass in the appropriate text such as \\\"question mark\\\" to have a special character be spoken (do not use the symbol).</td>\\n</tr>\\n<tr>\\n<td>flushSpeech</td>\\n<td>Boolean</td>\\n<td>Set to true to make the screen reader immediately stop speaking any other speech before speaking. <br /><br />Set to false to make the screen reader wait until any current speech is done before speaking.</td>\\n</tr>\\n<tr>\\n<td>dontRepeat</td>\\n<td>Boolean</td>\\n<td>Set to true to ignore calls to the say() method with the same text.<br /><br />Set to false to speak when calls to the say() method are sent with the same text.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>An ID associated with the spoken string to be used to notify observer callbacks.</p>\\n<h3 id=\\\"flush\\\">Flush()</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Interrupts and stops any current text to speech spoken string, to be used when the application does not want the text to speech to continue.</p>\\n<blockquote>\\n<p>This call is equivalent to the <a href=\\\"/docs/references/brightscript/interfaces/iftexttospeech.md#flush\\\">roTextToSpeech.Flush()</a> method, and stops speech started by the <a href=\\\"#saytext-as-string-flushspeech-as-boolean-dontrepeat-as-boolean-as-integer\\\">roAudioGuide.Say()</a> and <a href=\\\"/docs/references/brightscript/interfaces/iftexttospeech.md#saytext-as-string-as-integer\\\">roTextToSpeech.Say()</a> methods.</p>\\n</blockquote>\\n<h3 id=\\\"silenceduration-as-integer-as-integer\\\">Silence(duration as Integer) as Integer</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>If the screen reader is enabled, causes text to speech to continue to suppress any application background sound for the amount of time specified by duration (in milliseconds).This can be used to add clarity for longer spoken text that may have pauses that might otherwise allow application background sound to be heard. This method does nothing if screen reader is currently disabled.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>duration</td>\\n<td>Integer</td>\\n<td>The number of milliseconds to suppress application background sounds.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The number of milliseconds that the background sound has been silenced.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifaudiometadata.md":"{\n  \"content\": \"<h1 id=\\\"ifaudiometadata\\\">ifAudioMetadata</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roaudiometadata.md\\\" title=\\\"roAudioMetadata\\\">roAudioMetadata</a></td>\\n<td>This component provides developers access to audio file metadata included in many audio files</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"seturlurl-as-string-as-void\\\">SetUrl(url as String) as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sets the URL to the audio file. Only file URLs are initially supported</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>url</td>\\n<td>String</td>\\n<td>The URL of the audio file.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"gettags-as-object\\\">GetTags() as Object</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns an associative array that contains a simple set of tags that are common to most audio formats.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>An associative array that may be set to one of the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Notes</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>title</td>\\n<td>String</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>artist</td>\\n<td>String</td>\\n<td>Returns the first artist found even though many titles have multiple artists</td>\\n</tr>\\n<tr>\\n<td>album</td>\\n<td>String</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>composer</td>\\n<td>String</td>\\n<td>Returns the first composer found even though many titles have multiple composers</td>\\n</tr>\\n<tr>\\n<td>comment</td>\\n<td>String</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>genre</td>\\n<td>String</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>year</td>\\n<td>Integer</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>track</td>\\n<td>Integer</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getaudioproperties-as-object\\\">GetAudioProperties() as Object</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns an associative array with a simple set of audio properties.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>An associative array that may be set to one of the following values (these are values that may involve reading a larger portion of the file and thus may take longer to retrieve than tags):</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>length</td>\\n<td>Integer</td>\\n<td>Duration in seconds</td>\\n</tr>\\n<tr>\\n<td>bitrate</td>\\n<td>Integer</td>\\n<td>In kilobytes per second</td>\\n</tr>\\n<tr>\\n<td>samplerate</td>\\n<td>Integer</td>\\n<td>Samples per second. For example: 44100 for CD sample rate</td>\\n</tr>\\n<tr>\\n<td>channels</td>\\n<td>Integer</td>\\n<td>Number of channels. For example: 2 for stereo</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getcoverart-as-object\\\">GetCoverArt() as Object</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Returns the cover art, if available.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An associative array with two entries: \\\"bytes\\\" and \\\"type\\\".</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifaudioplayer.md":"{\n  \"content\": \"<h1 id=\\\"ifaudioplayer\\\">ifAudioPlayer</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roaudiometadata.md\\\" title=\\\"roAudioMetadata\\\">roAudioMetadata</a></td>\\n<td>The Audio Player object provides the ability to setup the playing of a series of audio streams</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"setcontentlistcontentlist-as-object-as-void\\\">SetContentList(contentList as Object) as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sets the content list to be played by the Audio Player.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<p>An array of associative arrays (Content Meta-Data objects) representing the information for each stream to be played. See <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\" title=\\\" Content Meta-Data\\\">Content Meta-Data</a> for details on the attributes for each element in the array.</p>\\n<h3 id=\\\"addcontentcontentitem-as-object-as-void\\\">AddContent(contentItem as Object) as Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Adds a new ContentMetaData item to the end of the content list for the Audio Player. </p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>contentItem</td>\\n<td>Object</td>\\n<td>The new ContentMetaData item to be added to the content list.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"clearcontent-as-void\\\">ClearContent() as Void</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Clears the content list.</p>\\n<h3 id=\\\"play-as-boolean\\\">Play() as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Puts the Audio Player into play mode starting at the current item in the Content List. This will stop any currently playing content.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the Audio Player was successfully set to play mode. </p>\\n<h3 id=\\\"stop-as-boolean\\\">Stop() as Boolean</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Stops the Audio Player from playing or pausing and cleanup.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether the Audio Player was successfully stopped. </p>\\n<h3 id=\\\"pause-as-boolean\\\">Pause() as Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Puts the Audio Player into pause mode. It is an error to Pause if player is not in play mode.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the Audio Player was successfully set to pause mode.</p>\\n<h3 id=\\\"resume-as-boolean\\\">Resume() as Boolean</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Puts the Audio Player into play mode starting from the pause point. It is an error to Resume if the player is not in pause mode.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether the Audio Player was successfully set to play mode.</p>\\n<h3 id=\\\"setloopenable-as-boolean-as-void\\\">SetLoop(enable as Boolean) as Void</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Enables/disables the automatic replaying of the Content List.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>Set to true to have the Audio Player automatically begin playing the first item in the content list after playing the last item.<br /><br />Set to false to have the Audio Player stop after playing the last item in the content list.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setnextitem-as-integer-as-void\\\">SetNext(item as Integer) as Void</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Sets the next item in the Content List to be played.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>item</td>\\n<td>Integer</td>\\n<td>Item is the zero-based index of the item in the content list. This item will be played after the currently playing item finishes.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"seekoffsetms-as-integer-as-boolean\\\">Seek(offsetMs as Integer) as Boolean</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Set the start point of playback for the current item to offsetMs milliseconds. </p>\\n<ul>\\n<li>If the item is currently playing, playback will be interrupted and will restart at the specified offset. </li>\\n<li>If the item is not currently playing, playback will begin at the specified offset when Play() is called.</li>\\n</ul>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Type</th>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Integer</td>\\n<td>offsetMs</td>\\n<td>The offset to be used to determine the start point of the current content item.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether the Audio Player was successfully set to the specified offset.</p>\\n<h3 id=\\\"settimedmetadataforkeyskeys-as-dynamic-as-void\\\">SetTimedMetaDataForKeys(keys[] as Dynamic) as Void</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Specifies the timedMetaData keys that the channel is interested in receiving from the timedMetaData event.</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>keys[]</td>\\n<td>Dynamic</td>\\n<td>The set of keys to be received from the timedMetaData event.<br /><br />If the keys array is empty, all the timed metadata associated with the current stream is sent with the isTimedMetaData event.<br /><br />If the keys array is invalid, then do not return any keys to the BrightScript channel.<br /><br />Any keys not specified with this method are deleted by the Roku OS and never returned to the BrightScript application.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifaudioresource.md":"{\n  \"content\": \"<h1 id=\\\"ifaudioresource\\\">ifAudioResource</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roaudioresource.md\\\" title=\\\"roAudioResource\\\">roAudioResource</a></td>\\n<td>The roAudioResouce allows .wav files to be cached to memory and quickly played at any time</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"triggervolume-as-integer-as-void\\\">Trigger(volume as Integer) as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>This method triggers the start of the audio resource sound playback. The effect of Trigger(volume) is identical to Trigger(volume, 0).</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>volume</td>\\n<td>Integer</td>\\n<td>The volume is a number between 0 and 100 (percentage of full volume). A value of 50 should be used for normal volume.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"triggervolume-as-integer-index-as-integer-as-void\\\">Trigger(volume as Integer, index as Integer) as Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Triggers the start of the audio resource sound playback. This method will interrupt any playing sound when the index is the same. It will mix with any playing sound if the index is different.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>volume</td>\\n<td>Integer</td>\\n<td>The volume is a number between 0 and 100 (percentage of full volume). 50 should be used for normal volume.</td>\\n</tr>\\n<tr>\\n<td>index</td>\\n<td>Integer</td>\\n<td>The index is a value between 0  and <a href=\\\"#maxsimulstreams-as-integer\\\">MaxSimulStreams()</a> allowing for multiple sounds to be mixed.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"isplaying-as-boolean\\\">IsPlaying() as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Checks whether this audio resource is currently playing.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the calling audio resource is playing. </p>\\n<h3 id=\\\"stop-as-void\\\">Stop() as Void</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Stops playing the audio resource. If the resource is not currently playing, has no effect.</p>\\n<h3 id=\\\"maxsimulstreams-as-integer\\\">MaxSimulStreams() as Integer</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns the device-dependent maximum number of audio streams that can be mixed together and presented simultaneously.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>Typically, 1-2. </p>\\n<h3 id=\\\"getmetadata-as-object\\\">GetMetaData() as Object</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Returns an <a href=\\\"/docs/references/brightscript/components/roassociativearray.md\\\" title=\\\"roAssociativeArray\\\">roAssociativeArray</a> array containing the indicated metadata parameters about the audio resource.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An associative array with the following integer values:</p>\\n<ul>\\n<li>Length (number of samples)</li>\\n<li>SamplesPerSecond</li>\\n<li>NumChannels</li>\\n<li>BitsPerSample</li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifboolean.md":"{\n  \"content\": \"<h1 id=\\\"ifboolean\\\">ifBoolean</h1>\\n<p>Interface equivalent for intrinsic type Boolean.</p>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roboolean.md\\\" title=\\\"roBoolean\\\">roBoolean</a></td>\\n<td>Object equivalent for intrinsic type Boolean</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getboolean-as-boolean\\\">GetBoolean() As Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Gets the boolean value stored in the calling boolean object. </p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The boolean value stored in the calling boolean object. </p>\\n<h3 id=\\\"setbooleanvalue-as-boolean-as-void\\\">SetBoolean(value As Boolean) As Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Sets the calling boolean object to the specified true/false value. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>value</td>\\n<td>Boolean</td>\\n<td>True/false.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifbytearray.md":"{\n  \"content\": \"<h1 id=\\\"ifbytearray\\\">ifByteArray</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/robytearray.md\\\" title=\\\"roByteArray\\\">roByteArray</a></td>\\n<td>The byte array component is used to contain and manipulate an arbitrary array of bytes</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"writefilepath-as-string-as-boolean\\\">WriteFile(path as String) As Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Writes the bytes contained in the Byte Array to the specified file.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The path to the file to which the bytes are to be written.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the bytes were successfully written to the file.</p>\\n<h3 id=\\\"writefilepath-as-string-start_index-as-integer-length-as-integer-as-boolean\\\">WriteFile(path as String, start_index as Integer, length as Integer) As Boolean</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Writes a subset of the bytes contained in the Byte Array to the specified file.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The path to the file to which the bytes are to be written.</td>\\n</tr>\\n<tr>\\n<td>start_index</td>\\n<td>Integer</td>\\n<td>The index of the calling ByteArray from which to start writing bytes.</td>\\n</tr>\\n<tr>\\n<td>length</td>\\n<td>Integer</td>\\n<td>The length of the bytes to be written to the file, starting from the specified index.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether the bytes were successfully written to the file.</p>\\n<h3 id=\\\"readfilepath-as-string-as-boolean\\\">ReadFile(path as String) As Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Reads the specified file into the Byte Array. Any data currently in the Byte Array is discarded.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The path to the file to be read.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the bytes were successfully read into the Byte Array.</p>\\n<h3 id=\\\"readfilepath-as-string-start_pos-as-integer-length-as-integer-as-boolean\\\">ReadFile(path as String, start_pos as Integer, length as Integer) As Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Reads the specified file into the Byte Array. Any data currently in the Byte Array is discarded.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The path to the file to be read.</td>\\n</tr>\\n<tr>\\n<td>start_pos</td>\\n<td>Integer</td>\\n<td>The index of the file from which to start reading bytes.</td>\\n</tr>\\n<tr>\\n<td>length</td>\\n<td>Integer</td>\\n<td>The length of the bytes to be read from the file, starting from the specified starting position.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether the bytes were successfully read into the Byte Array.</p>\\n<h3 id=\\\"appendfilepath-as-string-as-boolean\\\">AppendFile(path as String) As Boolean</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Appends the contents of the Byte Array to the specified file.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The path to the file to be appended to the ByteArray.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether the file was successfully appended to the calling ByteArray.</p>\\n<h3 id=\\\"appendfilepath-as-string-start_pos-as-integer-length-as-integer-as-boolean\\\">AppendFile(path as String, start_pos as Integer, length as Integer) As Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Appends the contents of the Byte Array to the specified file.</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The path to the file to be appended to the Byte Array.</td>\\n</tr>\\n<tr>\\n<td>start_pos</td>\\n<td>Integer</td>\\n<td>The position in the file from which to start appending bytes.</td>\\n</tr>\\n<tr>\\n<td>length</td>\\n<td>Integer</td>\\n<td>The length of the bytes to be appended to the Byte Array, starting from the specified starting position.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A flag indicating whether the file was successfully appended to the calling ByteArray.</p>\\n<h3 id=\\\"setresizemin_size-as-integer-auto_resize-as-boolean-as-void\\\">SetResize(min_size as Integer, auto_resize as Boolean) As Void</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>If the size of the Byte Array is less than min_size, expands the Byte Array to min_size. Also sets the auto-resize attribute of the Byte Array to the specified value.</p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>min_size</td>\\n<td>Integer</td>\\n<td>The minimum size to which the calling Byte Array is to be expanded.</td>\\n</tr>\\n<tr>\\n<td>auto_resize</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether auto resize is enabled on the calling Byte Array.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"tohexstring-as-string\\\">ToHexString() As String</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Returns a hexadecimal string representing the contents of the Byte Array, two digits per byte.</p>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>A hexadecimal string.</p>\\n<h3 id=\\\"fromhexstringhexstring-as-string-as-void\\\">FromHexString(hexstring as String) As Void</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Sets the contents of the Byte Array to the specified value. Any data currently in the Byte Array is discarded.</p>\\n<h4 id=\\\"parameters-7\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>hexstring</td>\\n<td>String</td>\\n<td>An even number of hexadecimal digits. The string must contain valid hexadecimal digits, or the result is undefined</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"tobase64string-as-string\\\">ToBase64String() As String</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Returns a base-64 string representing the contents of the Byte Array.</p>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>A base-64 string representing the contents of the Byte Array.</p>\\n<h3 id=\\\"frombase64strings-as-string-as-void\\\">FromBase64String(s as String) As Void</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Sets the contents of the Byte Array to the specified value. Any data currently in the Byte Array is discarded.</p>\\n<h4 id=\\\"parameters-8\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>s</td>\\n<td>String</td>\\n<td>A valid base-64 encoding</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"toasciistring-as-string\\\">ToAsciiString() As String</h3>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>Returns the contents of the Byte Array as a string. The contents must be valid UTF-8 (or ASCII subset), or the result is undefined</p>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>A String containing the contents of the ByteArray.</p>\\n<h3 id=\\\"fromasciistrings-as-string\\\">FromAsciiString(s as String)</h3>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Sets the contents of the Byte Array to the specified string using UTF-8 encoding. Any data currently in the Byte Array is discarded.</p>\\n<h4 id=\\\"parameters-9\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>s</td>\\n<td>String</td>\\n<td>The string to which the ByteArray is to be set.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getsignedbyteindex-as-integer-as-integer\\\">GetSignedByte(index as Integer) As Integer</h3>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Returns the signed byte at the specified zero-based index in the Byte ArrayUse the <a href=\\\"/docs/references/brightscript/interfaces/ifarrayget.md#getentryindex-as-integer-as-dynamic\\\">ifArrayGet.GetEntry()</a> method or the [ ] array operator to read an unsigned byte in the Byte Array.</p>\\n<h4 id=\\\"parameters-10\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>index</td>\\n<td>Integer</td>\\n<td>The index of the signed byte to be returned.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>The signed byte at the specified zero-based index in the Byte Array.</p>\\n<h3 id=\\\"getsignedlongindex-as-integer-as-integer\\\">GetSignedLong(index as Integer) As Integer</h3>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Returns the signed long (four bytes) starting at the specified zero-based index in the Byte Array.</p>\\n<h4 id=\\\"parameters-11\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>index</td>\\n<td>Integer</td>\\n<td>The index of the ByteArray from which to start retrieving the signed long.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-10\\\">Return Value</h4>\\n<p>A signed long. </p>\\n<h3 id=\\\"getcrc32-as-integer\\\">GetCRC32() as Integer</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>Calculates a CRC-32 of the contents of the Byte Array.</p>\\n<h4 id=\\\"return-value-11\\\">Return Value</h4>\\n<p>The calculated CRC-32 checksum. </p>\\n<h4 id=\\\"example\\\">Example</h4>\\n<pre><code>    ba = CreateObject(\\\"roByteArray\\\") \\n    ba.FromAsciiString(\\\"Hello world!\\\")\\n    n = ba.GetCrc32()\\n    print n, \\\"0x\\\" ; StrI(n, 16)\\n    REM 461707669 0x1b851995\\n</code></pre>\\n<h3 id=\\\"getcrc32start-as-integer-length-as-integer-as-integer\\\">GetCRC32(start as Integer, length as Integer) As Integer</h3>\\n<h4 id=\\\"description-16\\\">Description</h4>\\n<p>Calculates a CRC-32 of a subset of bytes within the Byte Array.</p>\\n<h4 id=\\\"parameters-12\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>start</td>\\n<td>Integer</td>\\n<td>The starting index of the subset of bytes to be used in the CRC-32 calculation.</td>\\n</tr>\\n<tr>\\n<td>length</td>\\n<td>Integer</td>\\n<td>The length of the bytes to be included.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-12\\\">Return Value</h4>\\n<p>The calculated CRC-32 checksum. </p>\\n<h3 id=\\\"islittleendiancpu-as-boolean\\\">IsLittleEndianCPU() As Boolean</h3>\\n<h4 id=\\\"description-17\\\">Description</h4>\\n<p>Returns true if the CPU architecture is little-endian.</p>\\n<h4 id=\\\"return-value-13\\\">Return Value</h4>\\n<p>A flag indicating whether the CPU architecture is little-endian.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifcecstatus.md":"{\n  \"content\": \"<h1 id=\\\"ifcecstatus\\\">ifCECStatus</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rocecstatus.md\\\" title=\\\"roCECStatus\\\">roCECStatus</a></td>\\n<td>Identifies the active source status for set boxes.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"isactivesource-as-boolean\\\">IsActiveSource() As Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Indicates whether the device is the active source.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the device is the active source (true). If the device is not the active source, this flag is set to false.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifchannelstore.md":"{\n  \"content\": \"<h1 id=\\\"ifchannelstore\\\">ifChannelStore</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rochannelstore.md\\\" title=\\\"roChannelStore\\\">roChannelStore</a></td>\\n<td>allows the application to perform a purchase of an In-Channel Product or upgrade a channel</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getidentity-as-integer\\\">GetIdentity() as Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns a unique number for this object that can be used to identify whether a roChannelStoreEvent event originated from this object, by comparing with the roChannelStoreEvent object's GetSourceIdentity() value.</p>\\n<blockquote>\\n<p> The value can be any arbitrary value as assigned by the Roku OS, and should only be used for comparison purposes. For example, the value should not be used as an array index.For use as a look-up key, you can use GetIdentity().ToStr() as an associative array key.</p>\\n</blockquote>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The unique number generated for the object.</p>\\n<h3 id=\\\"getcatalog-as-void\\\">GetCatalog() as Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Requests the list of In-Channel products that are linked to the running channel.</p>\\n<p>If successful, a subsequent <a href=\\\"/docs/references/brightscript/events/rochannelstoreevent.md\\\" title=\\\"roChannelStoreEvent\\\">roChannelStoreEvent</a> will be received that contains an roList of roAssociativeArray items. Each associative array will contain the following parameter names with specified value type:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Parameter</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>code</td>\\n<td>string</td>\\n<td>The <strong>Product Identifier</strong> that was entered in the <a href=\\\"/docs/developer-program/roku-pay/quickstart/in-channel-products.md#product-basics\\\">In-Channel Products page in the Developer Dashboard</a>.</td>\\n</tr>\\n<tr>\\n<td>name</td>\\n<td>string</td>\\n<td>The item name (this name will also be set as the description).</td>\\n</tr>\\n<tr>\\n<td>quantity</td>\\n<td>Integer</td>\\n<td>For one-time purchase/consumable products only. The number of the product purchased (for example \\\"1000\\\" game points, \\\"3\\\" viewings of a movie rental).</td>\\n</tr>\\n<tr>\\n<td>productType</td>\\n<td>string</td>\\n<td>The product type (ex. \\\"MonthlySub\\\")</td>\\n</tr>\\n<tr>\\n<td>cost</td>\\n<td>string</td>\\n<td>Localized cost of the product with local currency symbol</td>\\n</tr>\\n<tr>\\n<td>freeTrialQuantity</td>\\n<td>integer</td>\\n<td>If the product has a free trial offer, the length of the trial period. For example, <strong>1</strong> for a 1-month free trial or <strong>7</strong> for a 7-day free trial.</td>\\n</tr>\\n<tr>\\n<td>freeTrialType</td>\\n<td>string</td>\\n<td>If the product has a free trial offer, the unit of time used by the trial (\\\"Days\\\" or \\\"Months\\\")</td>\\n</tr>\\n<tr>\\n<td>trialCost</td>\\n<td>integer</td>\\n<td>If the product uses introductory pricing, the discounted price.</td>\\n</tr>\\n<tr>\\n<td>trialQuantity</td>\\n<td>integer</td>\\n<td>If the product uses introductory pricing, the number of months the discounted pricing is applicable.</td>\\n</tr>\\n<tr>\\n<td>trialType</td>\\n<td>string</td>\\n<td>Set to \\\"months\\\" for all products. All products using introductory pricing use \\\"months\\\" as the unit of time for the trial.</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>string</td>\\n<td>Indicates whether the product has been \\\"saved\\\" or \\\"approved for sale\\\".</td>\\n</tr>\\n<tr>\\n<td>purchaseDate</td>\\n<td>String</td>\\n<td>The subscription purchase date</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getstorecatalog-as-void\\\">GetStoreCatalog() as Void</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Requests the list of globally available In-Channel products, which are available to all channels.</p>\\n<p>If successful, a subsequent <a href=\\\"/docs/references/brightscript/events/rochannelstoreevent.md\\\" title=\\\"roChannelStoreEvent\\\">roChannelStoreEvent</a> will be received that contains an roList of roAssociativeArray items. Each associative array will contain the following parameter names with specified value type:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Parameter</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>code</td>\\n<td>string</td>\\n<td>The product identifier</td>\\n</tr>\\n<tr>\\n<td>cost</td>\\n<td>String</td>\\n<td>The localized cost of the item with local currency symbol.</td>\\n</tr>\\n<tr>\\n<td>name</td>\\n<td>string</td>\\n<td>The item name</td>\\n</tr>\\n<tr>\\n<td>description</td>\\n<td>String</td>\\n<td>The product description.</td>\\n</tr>\\n<tr>\\n<td>SDPosterUrl</td>\\n<td>string</td>\\n<td>The URL for the standard definition image of the product.</td>\\n</tr>\\n<tr>\\n<td>HDPosterUrl</td>\\n<td>string</td>\\n<td>The URL for the high definition image of the product.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getpurchases-as-void\\\">GetPurchases() as Void</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Requests the list of purchases associated with the current user account.</p>\\n<p>If successful, a subsequent <a href=\\\"/docs/references/brightscript/events/rochannelstoreevent.md\\\" title=\\\"roChannelStoreEvent\\\">roChannelStoreEvent</a> will be received that contains an roList of roAssociativeArray items. Each associative array will contain the following parameter names with specified value type:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Parameter</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>amount</td>\\n<td>string</td>\\n<td>Localized amount of the item purchased (post transaction) with local currency symbol</td>\\n</tr>\\n<tr>\\n<td>code</td>\\n<td>string</td>\\n<td>The <strong>Product Identifier</strong> that was entered in the <a href=\\\"/docs/developer-program/roku-pay/quickstart/in-channel-products.md#product-basics\\\">In-Channel Products page in the Developer Dashboard</a>.</td>\\n</tr>\\n<tr>\\n<td>cost</td>\\n<td>string</td>\\n<td>Localized cost of the item (prior to purchase) with local currency symbol</td>\\n</tr>\\n<tr>\\n<td>expirationDate</td>\\n<td>string</td>\\n<td>The subscription expiration date (<a href=\\\"https://www.iso.org/iso-8601-date-and-time-format.html\\\">ISO 8601</a> format)</td>\\n</tr>\\n<tr>\\n<td>freeTrialQuantity</td>\\n<td>integer</td>\\n<td>The free trial amount associated with the freeTrialType. For example, <strong>1</strong> for a 1-month free trial or <strong>7</strong> for a 7-day free trial.</td>\\n</tr>\\n<tr>\\n<td>freeTrialType</td>\\n<td>string</td>\\n<td>The free trial type (\\\"Days\\\" or \\\"Months\\\")</td>\\n</tr>\\n<tr>\\n<td>inDunning<br /><br /><em>Available since Roku OS 10.5</em></td>\\n<td>string</td>\\n<td>A flag that indicates whether the purchased subscription is past due state because of an invalid method of payment.<br /><br />This flag is set to \\\"true\\\" if the subscription is in the dunning state. In this case, check the <strong>status</strong> field to determine whether to grant the customer access to content:<br /><ul>\\n<li>If the <strong>status</strong> field is set to \\\"Valid\\\", the subscription is in a grace period and the viewer can access content.  </li>\\n<li>If the <strong>status</strong> field is set to \\\"Invalid\\\", the subscription is on hold and the viewer cannot access content. If the viewer adds a valid method of payment, the subscription will be automatically renewed and the status will become \\\"Valid\\\".</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>name</td>\\n<td>string</td>\\n<td>The item name (this name will also be set as the description).</td>\\n</tr>\\n<tr>\\n<td>productType</td>\\n<td>string</td>\\n<td>The product type (ex. \\\"MonthlySub\\\")</td>\\n</tr>\\n<tr>\\n<td>purchaseChannel<br /><br /><em>Available since Roku OS 10.5</em></td>\\n<td>string</td>\\n<td>Indicates where the Roku Pay subscription purchase was made:<br /><ul>\\n<li><strong>web</strong>. Subscription was purchased from <a href=\\\"http://roku.com/\\\">Roku.com</a> (for example, through <a href=\\\"/docs/developer-program/discovery/instant-signup.md\\\">Instant Signup</a> during the device activation).</li>\\n<li><strong>device</strong>. Subscription was purchased on the Roku device (through the on-device sign-up flow).</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>purchaseContext<br /><br /><em>Available since Roku OS 10.5</em></td>\\n<td>string</td>\\n<td>Indicates how the subscription purchase was made:<br /><ul>\\n<li><strong>isu</strong>. Subscription was purchased via <a href=\\\"/docs/developer-program/discovery/instant-signup.md\\\">Instant Signup</a>.</li>\\n<li><strong>iap</strong>. Subscription was purchased via an in-application purchase.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>purchaseDate</td>\\n<td>string</td>\\n<td>The purchase date (<a href=\\\"https://www.iso.org/iso-8601-date-and-time-format.html\\\">ISO 8601</a> format)</td>\\n</tr>\\n<tr>\\n<td>purchaseId</td>\\n<td>string</td>\\n<td>The transaction ID</td>\\n</tr>\\n<tr>\\n<td>qty</td>\\n<td>integer</td>\\n<td>The quantity purchased</td>\\n</tr>\\n<tr>\\n<td>renewalDate</td>\\n<td>string</td>\\n<td>The subscription renewal date (<a href=\\\"https://www.iso.org/iso-8601-date-and-time-format.html\\\">ISO 8601</a> format)</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>string</td>\\n<td>Indicates whether the purchase is for a current subscription (\\\"Valid\\\") or for a subscription that has been canceled, expired, or terminated (\\\"Invalid\\\")</td>\\n</tr>\\n<tr>\\n<td>total</td>\\n<td>string</td>\\n<td>Localized total of the item purchased (including tax if applicable) with local currency symbol</td>\\n</tr>\\n<tr>\\n<td>trialCost</td>\\n<td>integer</td>\\n<td>If the product uses introductory pricing, the discounted price.</td>\\n</tr>\\n<tr>\\n<td>trialQuantity</td>\\n<td>integer</td>\\n<td>If the product uses introductory pricing, the number of months the discounted pricing is applicable.</td>\\n</tr>\\n<tr>\\n<td>trialType</td>\\n<td>string</td>\\n<td>Set to \\\"months\\\" for all products. All products using introductory pricing use \\\"months\\\" as the unit of time for the trial.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setorderorder-as-object-orderinfo-as-object-as-void\\\">SetOrder(order as Object, orderInfo as Object) as Void</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Sets the current Order (shopping cart) to the elements specified in the parameter, which must be an roList of roAssociativeArray items.Passing an empty roList clears the Order, like calling ClearOrder().</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>order</td>\\n<td>roList of roAssociativeArray items</td>\\n<td>Each roAssociativeArray in the roList contains the following fields: <table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>code</td>\\n<td>String</td>\\n<td>The product identifier</td>\\n</tr>\\n<tr>\\n<td>qty</td>\\n<td>Integer</td>\\n<td>The quantity purchased</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>orderInfo</td>\\n<td>roAssociativeArray</td>\\n<td><em>Available since Roku OS 9.3</em><br /><br />This parameter is used for subscription upgrades and downgrades. If it is not specified, the action is a product purchase. It contains the following fields: <table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>action</td>\\n<td>String</td>\\n<td>The action to be performed, which may be one of the following: <ul>\\n<li>\\\"Upgrade\\\": The order is an upgrade from one subscription product to another.</li>\\n<li>\\\"Downgrade\\\": The order is a subscription downgrade.</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table><br /><strong>Example</strong> <pre><code>m.store = CreateObject(\\\"roChannelStore\\\")​\\n' Populate myOrderItems\\nmyOrderInfo.action = \\\"Upgrade\\\"\\nm.store.setOrder(myOrderItems, myOrderInfo)\\n</code></pre><br />See <a href=\\\"/docs/developer-program/roku-pay/implementation/on-device-upgrade-downgrade.md#calling-the-roku-web-service-validate-transaction-api\\\">On-device upgrade and downgrade</a> for how to implement Roku Pay web services for upgrades/downgrades.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"clearorder-as-void\\\">ClearOrder() as Void</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Return Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>ClearOrder</td>\\n<td>Void</td>\\n<td>Clears the current Order (shopping cart). After this call, the Order is empty</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"deltaordercode-as-object-qty-as-integer-as-integer\\\">DeltaOrder(code as Object, qty as Integer) as Integer</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Applies a change in quantity to one item in the current Order (shopping cart).</p>\\n<ul>\\n<li>If the item identified by code is not in the <strong>Order</strong>, it is added with the specified <strong>qty</strong>.</li>\\n<li>If the item already exists in the <strong>Order</strong>, <strong>qty</strong> is added to the quantity of this item in the <strong>Order</strong>.</li>\\n</ul>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>code</td>\\n<td>String</td>\\n<td>The product identifier.</td>\\n</tr>\\n<tr>\\n<td>qty</td>\\n<td>Integer</td>\\n<td>The quantity purchased. This may be a negative number.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-type\\\">Return Type</h4>\\n<p>The quantity of the item remaining in the Order after applying the change. If the returned value is zero or negative, the item is deleted from the Order.</p>\\n<h3 id=\\\"getorder-as-object\\\">GetOrder() as Object</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Retrieves the current Order.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The returned object is an roList of roAssociativeArray items, where each item contains the following parameter names with specified value type:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>code</td>\\n<td>String</td>\\n<td>The product identifier.</td>\\n</tr>\\n<tr>\\n<td>qty</td>\\n<td>Integer</td>\\n<td>The quantity purchased.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"doorder-as-boolean\\\">DoOrder() as Boolean</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Displays the Roku Channel Store Product Purchase Screen populated with information from the current Order.</p>\\n<p>The user can then either approve and complete the purchase, or cancel the purchase. In the case that the user approves, the channel should wait for and respond to the roChannelStoreEvent.isRequestSucceeded event to get the details of the completed transaction.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the user approved the order (true if the order was approved; false otherwise).</p>\\n<h3 id=\\\"fakeserverenable-as-boolean-as-void\\\">FakeServer(enable as Boolean) as Void</h3>\\n<p>It is recommended that developers use <a href=\\\"/docs/developer-program/roku-pay/testing/billing-testing.md\\\">billing testing</a> instead of this method.</p>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>This test mode short circuits communication to the Roku Channel store. It makes other methods get their responses to async queries and operations from configuration files, rather than actual server communication.</p>\\n<blockquote>\\n<p>Do not call this method in a production channel. <a href=\\\"https://blog.roku.com/developer/2013/06/06/supporting-in-app-purchases-in-your-roku-brightscript-channels\\\" title=\\\"Developer Blog, &#x22;Supporting In App Purchases in Your Roku BrightScript Channels\\\">Developer Blog, \\\"Supporting In App Purchases in Your Roku BrightScript Channels\\\"</a> has more information regarding test mode.</p>\\n</blockquote>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>If enable is true, enables a test mode for the roChannelStore component.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getuserdata-as-object\\\">GetUserData() as Object</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>The GetUserData() function provides a way to request user authorization to share the user’s account information with the calling channel.</p>\\n<p>The primary use case of this method is to facilitate partner account creation/updating within channels that have a customer billing relationship with Roku.</p>\\n<p>For example, a developer may have a Roku channel that offers a VOD subscription to users. This subscription may require an account with the content provider. The GetUserData() method could be called to read the user’s account information in order to prepopulate an account registration screen.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>When called, the method presents a dialog screen containing the user’s account information, along with two buttons labeled Share and Don’t Share.</p>\\n<ul>\\n<li>If the user presses the <strong>Cancel</strong> button, GetUserData() returns invalid.</li>\\n<li>\\n<p>If the user presses the <strong>Continue</strong> button, GetUserData() returns an roAssociativeArray containing the following Roku account information for the channel user (all values are Strings):</p>\\n<ul>\\n<li>firstname</li>\\n<li>lastname</li>\\n<li>email</li>\\n<li>street</li>\\n<li>city</li>\\n<li>state</li>\\n<li>zip</li>\\n<li>country</li>\\n<li>phone</li>\\n<li>birth (<em>Available since Roku OS 10.0</em>)</li>\\n<li>gender (<em>Available since Roku OS 10.0</em>)</li>\\n</ul>\\n</li>\\n</ul>\\n<h3 id=\\\"getpartialuserdataproperties-as-string-requestinfo-as-object-as-object\\\">GetPartialUserData(properties as String, requestInfo as Object) as Object</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>This function works like GetUserData(), but allows the caller to specify which user data elements to return. The specified values are also displayed in the user data dialog screen.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>properties</td>\\n<td>String</td>\\n<td>A comma-separated list of the attribute names to be returned. For example, to return only the email address and first name of the user's account, you would call GetPartialUserData(\\\"email, firstname\\\"). The full set of user account properties that can be queried with the function is:<br /><ul>\\n<li>firstname</li>\\n<li>lastname</li>\\n<li>email</li>\\n<li>street</li>\\n<li>city</li>\\n<li>state</li>\\n<li>zip</li>\\n<li>country</li>\\n<li>phone</li>\\n<li>birth (<em>Available since Roku OS 10.0</em>)</li>\\n<li>gender (<em>Available since Roku OS 10.0</em>)</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>requestInfo<br /> (<em>Available since Roku OS 10.0</em>)</td>\\n<td>roAssociativeArray</td>\\n<td>Specifies whether the RFI screen is used for customer sign-ups or sign-ins. This may be one of the following values:<br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>context</td>\\n<td>string</td>\\n<td>\\\"signup\\\"</td>\\n<td>Specifies the context of the RFI screen, which may be one of the following values:<br /><ul>\\n<li>\\\"signup\\\": The RFI screen displays a \\\"Let's create your account\\\" title and lists the customer information specified in the <a href=\\\"#requesteduserdata\\\"><strong>requestedUserData</strong> field</a>. The RFI screen uses the sign-up context by default.</li>\\n<li>\\\"signin: \\\"The RFI screen displays a \\\"Sign in\\\" title and lists only email or phone attributes, if specified in the <a href=\\\"#requesteduserdata\\\"><strong>requestedUserData</strong> field</a>. Other attributes are ignored, even if specified.</li>\\n</ul><br />See the <a href=\\\"#sign-in-example\\\">Sign-in example</a> for how to use this field.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>forceShowData<br />(<em>Available since Roku OS 11.0</em>)</td>\\n<td>Boolean</td>\\n<td>If true, the RFI screen displays the values of the requested customer information to be shared with the channel (for example, Jone Doe, <a href=\\\"mailto:bmsith@roku.com\\\">j</a><a href=\\\"mailto:on.doe@emailaddress.com\\\">on.doe@emailaddress.com</a>). <br /><br />By default, this flag is set to false, which means that the default RFI screen for the region is used. For example, in the US, the RFI screen displays the type of customer information being requested (email address, name, and so on).<br /><br />This flag has no effect if the context field is set to \\\"signin\\\" (the RFI sign-in screen always displays the customer information values). <br /><br /><strong>Example</strong>:<br /><pre><code>store = CreateObject(\\\"roChannelStore\\\")\\n\\n' Doesn't show user data in dialog unless necessary in he user's region.\\nuserData = store.GetPartialUserData(\\\"email,firstname,lastname,gender,birth\\\")\\n' Show user data values in dialog.\\nuserData = store.GetPartialUserData(\\\"email,firstname,lastname,gender,birth\\\", {context: \\\"signup\\\", forceShowData: true})\\n' forceShowData currently has no effect in signin context, as the shared data is always shown.\\nuserData = store.GetPartialUserData(\\\"email\\\", {context: \\\"signin\\\", forceShowData: false})\\n</code></pre></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>An roAssociativeArray containing the Roku account information passed in the method.</p>\\n<h4 id=\\\"sign-up-example\\\">Sign-up example</h4>\\n<pre><code>store = CreateObject(\\\"roChannelStore\\\")\\n\\n' Request user's email, phone, first name, and last name for sign-up\\nuserData = store.GetPartialUserData(\\\"email, phone, firstname, lastname\\\")\\n</code></pre>\\n<h4 id=\\\"sign-in-example\\\">Sign-in example</h4>\\n<pre><code>store = CreateObject(\\\"roChannelStore\\\")\\n\\n' Request user's email for sign-in\\nuserData = store.GetPartialUserData(\\\"email\\\", {context: \\\"signin\\\"})\\n</code></pre>\\n<h3 id=\\\"getuserregiondata-as-object\\\">GetUserRegionData() as Object</h3>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>Retrieves the state, zip code, and country associated with the customer's Roku account. The location information returned by this command can be used to determine a customer's eligibility for regional-specific subscription products and content.</p>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>An associative array that contains the following fields:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>state</td>\\n<td>string</td>\\n<td>The state associated with the customer's Roku account.</td>\\n</tr>\\n<tr>\\n<td>zip</td>\\n<td>string</td>\\n<td>The zip code associated with the customer's Roku account.</td>\\n</tr>\\n<tr>\\n<td>country</td>\\n<td>String</td>\\n<td>The country associated with the customer's Roku account.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"storechannelcreddatadata-as-string-as-object\\\">StoreChannelCredData(data as String) as Object</h3>\\n<p><em>Available since Roku OS 8.1</em></p>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Stores an access token, oAuth token, or other authentication artifact that can be retrieved by calling the <a href=\\\"/docs/references/brightscript/interfaces/ifchannelstore.md#getchannelcred-as-object\\\">GetChannelCred()</a>method. This data is stored securely in the Roku cloud and can be retrieved by other devices linked to the same Roku account. This method can be used to store an authentication artifact with Roku for a signed in user, associating that user with a particular Roku account. For more information, see <a href=\\\"/docs/developer-program/authentication/universal-authentication-protocol-for-single-sign-on.md\\\">Automatic Account Link</a>.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data</td>\\n<td>String</td>\\n<td>An OAuth token, custom token, or other custom data to be stored.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>This command returns an roAssociativeArray with the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>response</td>\\n<td>json</td>\\n<td>A string in JSON format, with the following key-value pairs: <br /><table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>status</td>\\n<td>string</td>\\n<td>The request status, which may be \\\"success\\\" or \\\"failure\\\".</td>\\n</tr>\\n<tr>\\n<td>error</td>\\n<td>string</td>\\n<td>A description of the error (if any). This will be set to \\\"none\\\" for a successful request.</td>\\n</tr>\\n<tr>\\n<td>error_detail</td>\\n<td>string</td>\\n<td>A detailed description of the service error (if any). This value will be null (uninitialized) for a successful request.</td>\\n</tr>\\n</tbody>\\n</table><br /><br />if billing is not enabled for the channel, this field will include a string with a service error message.</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>Integer</td>\\n<td>An integer representing the request status. A successful request will return a status of 0.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getchannelcred-as-object\\\">GetChannelCred() as Object</h3>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Retrieves a Roku Partner Unique Customer Identifier (roku_pucid), or retrieves an access token, oAuth token, or other authentication artifact (channel_data).</p>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>An associative array that contains the following fields:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>channelID</td>\\n<td>string</td>\\n<td>The channel ID (ex. \\\"2213\\\" for Roku Media Player)</td>\\n</tr>\\n<tr>\\n<td>errorCode</td>\\n<td>string</td>\\n<td>A description of the service error (if any). This will be an empty string for a successful request.</td>\\n</tr>\\n<tr>\\n<td>json</td>\\n<td>string</td>\\n<td>A string in JSON format, with the following key-value pairs: <table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>error</td>\\n<td>string</td>\\n<td>A string containing an error message (if any). This value will be <code>null</code> (uninitialized) for a successful request.</td>\\n</tr>\\n<tr>\\n<td>roku_pucid</td>\\n<td>string</td>\\n<td>This is an agnostic ID (in UUID format) representing the user. This value will be identical when retrieved in the same channel across devices linked to the same Roku account.<br /><br />The PUCID can be used in place of requiring the user to enter their email address or username again (for example, when setting up a new device on the same Roku account).</td>\\n</tr>\\n<tr>\\n<td>token_type</td>\\n<td>string</td>\\n<td>Type of the returned token, e.g. <code>\\\"urn:roku:pucid:token_type:pucid_token\\\"</code></td>\\n</tr>\\n<tr>\\n<td>channel_data</td>\\n<td>string</td>\\n<td>The access token, oAuth token, or other authentication artifact stored in the Roku cloud.<br /><br />This field is not returned if the <a href=\\\"#storechannelcreddata\\\">StoreChannelCredData</a> command is not used to store an artifact in the Roku cloud.</td>\\n</tr>\\n</tbody>\\n</table> <br />If the request fails, this json string will be empty.</td>\\n</tr>\\n<tr>\\n<td>publisherDeviceID</td>\\n<td>string</td>\\n<td>A unique identifier of the device.</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>integer</td>\\n<td>An integer representing the request status. A successful request will return a status of 0.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getdeviceattestationnonce-as-string-as-string\\\">GetDeviceAttestation(nonce as String) as String</h3>\\n<p><em>Available since Roku OS 11.5</em></p>\\n<p>Generates a signed JSON web token (JWT) in the Roku cloud and returns it to the channel application. This token can then be used by the publisher's web services to verify that a message originated from a genuine Roku device. The following example demonstrates how to generate the device attestation token:</p>\\n<pre><code>store  = CreateObject(\\\"roChannelStore\\\")\\nnonce = GetRandomHexString(16)\\ntoken = store.GetDeviceAttestation(nonce)\\n</code></pre>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>nonce</td>\\n<td>String</td>\\n<td>A random number used to generate the JWT token. This can be, for example, a hash of the user's account ID that can be verified by the publisher's services.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>The generated JWT token. The following demonstrates a sample JWT that is returned to the channel. Developers can use a <a href=\\\"https://jwt.io/#debugger-io\\\">JWT debugger</a> to decode this token.</p>\\n<pre><code>eyJ4NXUiOiJodHRwczovL2V4YW1wbGUucm9rdS5jb20vc2FtcGxlY2VydCIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJuYmYiOjE2NTYzNzQyNzQsIngtcm9rdS1hdHRlc3RhdGlvbi1kYXRhIjp7Im5vbmNlIjoiNUUwNjkyRTBBMzg5RjRGNiIsImNoYW5uZWxJZCI6ImRldiIsImRldmVsb3BlcklkIjoiY2FhNzNmYmI1ZTc1YTQ2YTRiNjExNGRlNTFhNWFkYTdkNjE2ZTJlZCIsInRpbWVzdGFtcE1zIjoxNjU2Mzc3ODczOTkwfSwiaXNzIjoidXJuOnJva3U6Y2xvdWQtc2VydmljZXM6ZGV2aWNlLWF0dGVzdGF0aW9uIiwiZXhwIjoxNjU2NDY0Mjc0fQ.nywDvSUys27oeaQZ3yXwNBfOnXbO-TUDuekOPZYjSssfZhNhWwRXvPLbJKHcNMR5Z0vFOQLVDFeqEVGauIMxMEke5UFLuCRxhr3ayBJJPt_BPfrEFbAvYjFEGdKkxJqYUhuFE38R8lU2k7dhO0iFxDw1Qq7W4w8_7CjmDy4YFf7IfyhV7Vf2kGiOx5C94Niw5N2td3s21F3z77Rq_bofQ51DOKIwo_cDVuvPQnDyxG-CNEydZKCZZwGPYCKEHMPrIOOXJ-S9ZjArgaEpBUpMXWJibFxnkpVUVzbC22GEaqz_SjOJXFMQU7TaCKkDeCYVKylgKwCvbvHRDlgogf7kqg\\n</code></pre>\\n<h5 id=\\\"verifying-the-jwt\\\">Verifying the JWT</h5>\\n<p>To verify the JWT, developers must <a href=\\\"https://devtools.web.roku.com/device_attestation_token_cert/RokuDeviceAttestationIntermediateCA.cert.pem\\\">download the Roku device attestation token certificate</a> and authenticate that the token is signed by that certificate (see <a href=\\\"https://jwt.io/introduction\\\">https://jwt.io/introduction</a> for more information on JWT verification methods). The decoded JWT contains the following fields</p>\\n<h5 id=\\\"decoded-jwt\\\">Decoded JWT</h5>\\n<p>The decoded JWT contains the following fields:</p>\\n<pre><code>\\\"x-roku-attestation-data\\\": {\\n    \\\"nonce\\\": \\\"5E0692E0A389F4F6\\\",\\n    \\\"channelId\\\": \\\"dev\\\",\\n    \\\"developerId\\\": \\\"caa73fbb5e75a46a4b6114de51a5ada7d616e2ed\\\",\\n    \\\"timestampMs\\\": 1656377873990\\n }\\n</code></pre>\\n<h3 id=\\\"requestpartnerorderorderinfo-as-roassociativearray-productid-as-string-as-object\\\">RequestPartnerOrder(orderInfo as roAssociativeArray, productID as String) as Object</h3>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Checks the user's billing status and is a prerequisite for ConfirmPartnerOrder() when doing transactional purchases.</p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>orderInfo</td>\\n<td>roAssociativeArray</td>\\n<td>Specifies the product to be ordered from a TVOD channel. The order contains the following fields:<br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>priceDisplay</td>\\n<td>string</td>\\n<td>The original price of the product.</td>\\n</tr>\\n<tr>\\n<td>price</td>\\n<td>string</td>\\n<td>The final price of the product, including any discounts.</td>\\n</tr>\\n<tr>\\n<td>title</td>\\n<td>string</td>\\n<td>A description of the product (for example, the name of a rental movie).</td>\\n</tr>\\n<tr>\\n<td>couponCode</td>\\n<td>string</td>\\n<td>An alphanumeric string entered by the customer to receive a discounted price on the product.</td>\\n</tr>\\n<tr>\\n<td>contentKey</td>\\n<td>string</td>\\n<td>The publisher-specific SKU (or other unique identifier) for the product.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>productID</td>\\n<td>String</td>\\n<td>The product identifier as entered on the Developer Dashboard when the product was created</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>If the order is successful, an roAssociativeArray is returned that contains the following keys with string values:</p>\\n<ul>\\n<li><strong>id</strong>.  This ID must be passed in the confirmOrderInfo parameter in ConfirmPartnerOrder() method.</li>\\n<li><strong>status</strong>. Success.</li>\\n<li><strong>tax</strong>. Cost of tax (if applicable).</li>\\n<li><strong>total</strong>. Total cost of transaction.</li>\\n</ul>\\n<p>If the order fails, an roAssociativeArray is returned that contains the following keys with string values:</p>\\n<ul>\\n<li><strong>errorCode</strong>. An error code representing why the transaction failed.</li>\\n<li><strong>errorMessage</strong>. An error message explaining why the transaction failed.</li>\\n<li><strong>failed</strong>. Failure.</li>\\n</ul>\\n<h3 id=\\\"confirmpartnerorderconfirmorderinfo-as-roassociativearray-productid-as-string-as-object\\\">ConfirmPartnerOrder(confirmOrderInfo as roAssociativeArray, productID as String) as Object</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>This function is equivalent to doOrder() for transactional purchases. The user's billing status must first be confirmed with RequestPartnerOrder() prior to calling this function.</p>\\n<h4 id=\\\"parameters-7\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>confirmOrderInfo</td>\\n<td>roAssociativeArray</td>\\n<td>Confirms the product being ordered from a TVOD channel. The order contains the following fields:<br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>orderId</td>\\n<td>string</td>\\n<td>The orderID generated by Roku, which is included in the roAssociativeArray returned by the <a href=\\\"#requestpartnerorderorderinfo-as-roassociativearray-productid-as-string-as-object\\\">RequestPartnerOrder()</a> method.</td>\\n</tr>\\n<tr>\\n<td>priceDisplay</td>\\n<td>string</td>\\n<td>The original price of the product.</td>\\n</tr>\\n<tr>\\n<td>price</td>\\n<td>string</td>\\n<td>The final price of the product, including any discounts.</td>\\n</tr>\\n<tr>\\n<td>title</td>\\n<td>string</td>\\n<td>The name of the product to be displayed on customers' invoices.</td>\\n</tr>\\n<tr>\\n<td>couponCode</td>\\n<td>string</td>\\n<td>An alphanumeric string entered by the customer to receive a discounted price on the product.</td>\\n</tr>\\n<tr>\\n<td>contentKey</td>\\n<td>string</td>\\n<td>The publisher-specific SKU (or other unique identifier) for the product.</td>\\n</tr>\\n</tbody>\\n</table><br />The currency symbol may not be included in the <strong>price</strong> or <strong>priceDisplay</strong> values.</td>\\n</tr>\\n<tr>\\n<td>productID</td>\\n<td>String</td>\\n<td>The product identifier as entered on the Developer Dashboard when the product was created</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-10\\\">Return Value</h4>\\n<p>If the order is successful, an roAssociativeArray is returned that contains the following keys with string values:</p>\\n<ul>\\n<li><strong>purchaseId</strong>.  The transaction ID..</li>\\n<li><strong>status</strong>. Success.</li>\\n</ul>\\n<p>If the order fails, an roAssociativeArray is returned that contains the following keys with string values:</p>\\n<ul>\\n<li><strong>errorCode</strong>. An error code representing why the transaction failed.</li>\\n<li><strong>errorMessage</strong>. An error message explaining why the transaction failed.</li>\\n<li><strong>status</strong>. Failure.</li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifcompositor.md":"{\n  \"content\": \"<h1 id=\\\"ifcompositor\\\">ifCompositor</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rocompositor.md\\\" title=\\\"roCompositor\\\">roCompositor</a></td>\\n<td>The roCompositor allows the composition and animation of multiple roBitmaps and roRegions</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"setdrawtodestbitmap-as-object-rgbabackground-as-integer-as-void\\\">SetDrawTo(destBitmap as Object, rgbaBackground as Integer) as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sets the destBitmap (<a href=\\\"/docs/references/brightscript/components/robitmap.md\\\" title=\\\"roBitmap\\\">roBitmap</a> or <a href=\\\"/docs/references/brightscript/components/roscreen.md\\\" title=\\\"roScreen\\\">roScreen</a>) and the background color.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>destBitmap</td>\\n<td>Object</td>\\n<td>The bitmap to be drawn.</td>\\n</tr>\\n<tr>\\n<td>rgbaBackground</td>\\n<td>Integer</td>\\n<td>The background color to be used.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"draw-as-void\\\">Draw() as Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Draws any dirty sprites (that is, whatever is new or has changed since the last Draw). No compositor or sprite operations will be reflected on the display until Draw() is called. After calling Draw(), you must call Finish() (if single buffered) or SwapBuffers() (if double buffered) before the changes will be user visible</p>\\n<h3 id=\\\"drawall-as-void\\\">DrawAll() as Void</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Redraws all sprites even if not dirty. After calling Draw(), you must call Finish() (if single buffered) or SwapBuffers() (if double buffered) before the changes will be user visible</p>\\n<h3 id=\\\"newspritex-as-integer-y-as-integer-region-as-object-z-as-integer-as-object\\\">NewSprite(x as Integer, y as Integer, region as Object, z as Integer) as Object</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Creates a new sprite, using an roRegion to define the sprite's bitmap. Position the sprite at coordinate x,y. If z is provided, position the sprite in front of all other sprites with equal or lower z value. Sprites with negative z values are not rendered or displayed on the screen.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The x-coordinate of the sprite.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The y-coordinate of the sprite.</td>\\n</tr>\\n<tr>\\n<td>region</td>\\n<td>Object</td>\\n<td>The region to be used to define the sprite's bitmap.</td>\\n</tr>\\n<tr>\\n<td>z</td>\\n<td>Integer</td>\\n<td>The z-coordinate of the sprite.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>Returns an <a href=\\\"/docs/references/brightscript/components/rosprite.md\\\" title=\\\"roSprite\\\">roSprite</a> object.</p>\\n<h3 id=\\\"newanimatedspritex-as-integer-y-as-integer-regionarray-as-object-z-as-integer-as-object\\\">NewAnimatedSprite(x as Integer, y as Integer, regionArray as Object, z as Integer) as Object</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Creates a new sprite that consists of a sequence of frames to be animated. The frames are defined by the regionArray which is an <a href=\\\"/docs/references/brightscript/components/roarray.md\\\" title=\\\"roArray\\\">roArray</a> of <a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegions\\\">roRegions</a>. Position the sprite at coordinate x,y. If z is provided, position the sprite in front of all other sprites with equal or lower z value</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The x-coordinate of the sprite.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The y-coordinate of the sprite.</td>\\n</tr>\\n<tr>\\n<td>regionArray</td>\\n<td>Object</td>\\n<td>The frames to be animated.</td>\\n</tr>\\n<tr>\\n<td>z</td>\\n<td>Integer</td>\\n<td>The z-coordinate of the sprite.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>Returns an <a href=\\\"/docs/references/brightscript/components/rosprite.md\\\" title=\\\"roSprite\\\">roSprite</a> object.</p>\\n<h3 id=\\\"animationtickduration-as-integer-as-void\\\">AnimationTick(duration as Integer) as Void</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Moves all animated sprites. Sprites will not animate unless you call this function regularly.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>duration</td>\\n<td>Integer</td>\\n<td>The number of ms since the last call.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"changematchingregionsoldregion-as-object-newregion-as-object-as-void\\\">ChangeMatchingRegions(oldRegion as Object, newRegion as Object) as Void</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Provides a global search and replace of sprite <a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegions\\\">roRegions</a>. Replaces regions that match oldRegion with newRegion</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>oldRegion</td>\\n<td>Object</td>\\n<td>The sprite roRegion to be replaced.</td>\\n</tr>\\n<tr>\\n<td>newRegion</td>\\n<td>Object</td>\\n<td>The new sprite roRegion to be used.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifdatetime.md":"{\n  \"content\": \"<h1 id=\\\"ifdatetime\\\">ifDateTime</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rodatetime.md\\\" title=\\\"roDateTime\\\">roDateTime</a></td>\\n<td>The roDateTime provides an interface to obtain the current date/time for the player and manipulate date/times</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"mark-as-void\\\">Mark() as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sets the date/time value to the current UTC date and time.</p>\\n<blockquote>\\n<p>roDateTime objects are automatically marked on creation.</p>\\n</blockquote>\\n<h3 id=\\\"tolocaltime-as-void\\\">ToLocalTime() as Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Offsets the date/time value from an assumed UTC date/time to a local date/time using the system time zone setting. This function is not idempotent, and multiple calls will do multiple timezone adjustments to the time yielding an incorrect result.</p>\\n<h3 id=\\\"gettimezoneoffset-as-integer\\\">GetTimeZoneOffset() as Integer</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns the offset in minutes from the system time zone to UTC. For example, if the system time zone is in PDT / UTC-7 the value returned would be 420.</p>\\n<blockquote>\\n<p>The time zone offset is returned for the current date/time, regardless of the object's date/time value.</p>\\n</blockquote>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>Minutes of offset as Integer.</p>\\n<h3 id=\\\"asseconds-as-integer\\\">AsSeconds() as Integer</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Returns the date/time as the number of seconds from the Unix epoch (00:00:00 1/1/1970 GMT).</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>Number of seconds as Integer.</p>\\n<h3 id=\\\"fromsecondsnumseconds-as-integer-as-void\\\">FromSeconds(numSeconds as Integer) as Void</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Sets the date/time value using the number of seconds from the Unix epoch.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>numSeconds</td>\\n<td>Integer</td>\\n<td>The number of seconds from the Unix epoch.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"toisostring-as-string\\\">ToISOString() as String</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Returns an ISO 8601 representation of the date/time value.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>ISO 8601 as String, e.g. \\\"2021-03-25T18:53:03+0000\\\"</p>\\n<h3 id=\\\"toisostringformat-as-string-as-string\\\">ToISOString(format as String) as String</h3>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns an ISO 8601 representation of the date/time value with milliseconds precision.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Format</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>format</td>\\n<td>String</td>\\n<td>millseconds</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>ISO 8601 as String with milliseconds precision, e.g. \\\"2021-03-25T18:53:03.220+0000\\\"</p>\\n<h3 id=\\\"fromiso8601stringdatestring-as-string-as-void\\\">FromISO8601String(dateString as String) as Void</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Sets the date/time using a string in the ISO 8601 format. For example \\\"YYYY-MM-DD HH:MM:SS\\\" e.g \\\"2009-01-01 01:00:00.000\\\" or \\\"2009-01-01T01:00:00.000\\\".</p>\\n<blockquote>\\n<p>This function is unaware of the local time zone, so these time formats are effectively UTC even though the ISO 8601 spec says they should be in local time. The above formats are also the only formats recognized by this function, even though the ISO 8601 spec contains other valid formats.</p>\\n</blockquote>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>dateString</td>\\n<td>String</td>\\n<td>The ISO-8601 string to be used to set the date and time.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"asdatestringformat-as-string-as-string\\\">AsDateString(format as String) as String</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Returns the date/time formatted string.</p>\\n<blockquote>\\n<p> Day names, month names, separators, and order of fields may vary depending on the current locale.</p>\\n</blockquote>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>format</td>\\n<td>String</td>\\n<td><table>\\n<thead>\\n<tr>\\n<th>Format</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>long-date</td>\\n</tr>\\n<tr>\\n<td>short-weekday</td>\\n</tr>\\n<tr>\\n<td>no-weekday</td>\\n</tr>\\n<tr>\\n<td>short-month</td>\\n</tr>\\n<tr>\\n<td>short-month-short-weekday</td>\\n</tr>\\n<tr>\\n<td>short-month-no-weekday</td>\\n</tr>\\n<tr>\\n<td>short-date</td>\\n</tr>\\n<tr>\\n<td>short-date-dashes</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A dateString corresponding to the specified format.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Format</th>\\n<th>Example dateString</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>long-date</td>\\n<td>Tuesday October 9, 2012</td>\\n</tr>\\n<tr>\\n<td>short-weekday</td>\\n<td>Tue October 9, 2012</td>\\n</tr>\\n<tr>\\n<td>no-weekday</td>\\n<td>October 9, 2012</td>\\n</tr>\\n<tr>\\n<td>short-month</td>\\n<td>Tuesday Oct 9, 2012</td>\\n</tr>\\n<tr>\\n<td>short-month-short-weekday</td>\\n<td>Tue Oct 9, 2012</td>\\n</tr>\\n<tr>\\n<td>short-month-no-weekday</td>\\n<td>Oct 9, 2012</td>\\n</tr>\\n<tr>\\n<td>short-date</td>\\n<td>10/9/12</td>\\n</tr>\\n<tr>\\n<td>short-date-dashes</td>\\n<td>10-9-12</td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>The order of the fields in both short-date formats is changed depending on the current locale:</p>\\n</blockquote>\\n<table>\\n<thead>\\n<tr>\\n<th>Locale</th>\\n<th>Field Order</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Canada</td>\\n<td>YYYY/MM/DD</td>\\n</tr>\\n<tr>\\n<td>United States</td>\\n<td>MM/DD/YY</td>\\n</tr>\\n<tr>\\n<td>UK and rest of world</td>\\n<td>DD/MM/YY</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"asdatestringnoparam-as-string\\\">AsDateStringNoParam() as String</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Returns the date/time in long-date format.</p>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A date/time string in long-date format (for example, Tuesday October 9, 2012)</p>\\n<h3 id=\\\"getweekday-as-string\\\">GetWeekday() as String</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Returns the day of the week.</p>\\n<blockquote>\\n<p>This function always returns the canonical English day of week names, regardless of the current locale.  For a locale-independent index, see the <a href=\\\"#getdayofweek-as-integer\\\">GetDayOfWeek()</a> function.</p>\\n</blockquote>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>Week value as a String (e.g. \\\"Monday\\\").</p>\\n<h3 id=\\\"getyear-as-integer\\\">GetYear() as Integer</h3>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Return Type</th>\\n<th>Return Value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>GetYear</td>\\n<td>Integer</td>\\n<td>Year value as an Integer, e.g. 2015</td>\\n<td>Returns the date/time value's year</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getmonth-as-integer\\\">GetMonth() as Integer</h3>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Returns the date/time value's month.</p>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>Month value as an Integer (1=Jan, 12=Dec).</p>\\n<h3 id=\\\"getdayofmonth-as-integer\\\">GetDayOfMonth() as Integer</h3>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Returns the date/time value's day of the month.</p>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>Month value as an Integer (1-31).</p>\\n<h3 id=\\\"gethours-as-integer\\\">GetHours() as Integer</h3>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Returns the date/time value's hour within the day.</p>\\n<h4 id=\\\"return-value-10\\\">Return Value</h4>\\n<p>Hour value as an Integer (0-23)</p>\\n<h3 id=\\\"getminutes-as-integer\\\">GetMinutes() as Integer</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>Returns the date/time value's minute within the hour.</p>\\n<h4 id=\\\"return-value-11\\\">Return Value</h4>\\n<p>Minute value as an Integer (0-59)</p>\\n<h3 id=\\\"getseconds-as-integer\\\">GetSeconds() as Integer</h3>\\n<h4 id=\\\"description-16\\\">Description</h4>\\n<p>Returns the date/time value's second within the minute.</p>\\n<h4 id=\\\"return-value-12\\\">Return Value</h4>\\n<p>Second value as an Integer (0-59).</p>\\n<h3 id=\\\"getmilliseconds-as-integer\\\">GetMilliseconds() as Integer</h3>\\n<h4 id=\\\"description-17\\\">Description</h4>\\n<p>Returns the date/time value's millisecond within the second.</p>\\n<h4 id=\\\"return-value-13\\\">Return Value</h4>\\n<p>Millisecond value as an Integer (0-999).</p>\\n<h3 id=\\\"getlastdayofmonth-as-integer\\\">GetLastDayOfMonth() as Integer</h3>\\n<h4 id=\\\"description-18\\\">Description</h4>\\n<p>Returns the date/time value's last day of the month.</p>\\n<h4 id=\\\"return-value-14\\\">Return Value</h4>\\n<p>Day as an Integer (28-31)</p>\\n<h3 id=\\\"getdayofweek-as-integer\\\">GetDayOfWeek() as Integer</h3>\\n<h4 id=\\\"description-19\\\">Description</h4>\\n<p>Returns the date/time value's day of week.</p>\\n<h4 id=\\\"return-value-15\\\">Return Value</h4>\\n<p>Day value as an Integer (Sunday=0, Monday=1, ..., Saturday=6).</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifdeviceinfo.md":"{\n  \"content\": \"<h1 id=\\\"ifdeviceinfo\\\">ifDeviceInfo</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rodeviceinfo.md\\\">roDeviceInfo</a></td>\\n<td>The roDeviceInfo component provides an interface to obtain attributes about the device</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h4 id=\\\"device-properties\\\">Device properties</h4>\\n<h3 id=\\\"getmodel-as-string\\\">GetModel() as String</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the model name of the Roku device. See the <a href=\\\"/docs/specs/hardware.md\\\">Hardware Specification</a> for the list of the current, updatable, and legacy Roku models.</p>\\n<h4 id=\\\"return-values\\\">Return Values</h4>\\n<p>A five-character alphanumeric string (for example, \\\"3050X\\\") .</p>\\n<h3 id=\\\"getmodeldisplayname-as-string\\\">GetModelDisplayName() as String</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the model display name of the Roku device.</p>\\n<h4 id=\\\"return-values-1\\\">Return Values</h4>\\n<p>The model display name (for example, \\\"Roku 2 XD\\\")</p>\\n<h3 id=\\\"getmodeltype-as-string\\\">GetModelType() as String</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns a string describing the type of device. For future compatibility, the caller should by default assume \\\"STB\\\" when anything other than described value is returned</p>\\n<h4 id=\\\"return-values-2\\\">Return Values</h4>\\n<p>The device type, which may be one of the following values:</p>\\n<ul>\\n<li>\\\"STB\\\": Set-top box.</li>\\n<li>\\\"TV\\\": Roku TV.</li>\\n</ul>\\n<h3 id=\\\"getmodeldetails-as-object\\\">GetModelDetails() as Object</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Returns detailed information about the device model.</p>\\n<h4 id=\\\"return-values-3\\\">Return Values</h4>\\n<p>An associative array containing the following information about the device model:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>VendorName</td>\\n<td>String</td>\\n<td>The model vendor.</td>\\n</tr>\\n<tr>\\n<td>ModelNumber</td>\\n<td>String</td>\\n<td>The model number.</td>\\n</tr>\\n<tr>\\n<td>VendorUSBName</td>\\n<td>String</td>\\n<td>The USB vendor.</td>\\n</tr>\\n<tr>\\n<td>ScreenSize</td>\\n<td>String</td>\\n<td>The size of the Roku TV.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getfriendlyname-as-string\\\">GetFriendlyName() as String</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns a string describing the device that may be used for network device selection.  The string is subject to change and should not be used as a persistent key or ID</p>\\n<h4 id=\\\"return-values-4\\\">Return Values</h4>\\n<p>A user-assigned device name or a description of the device such as model name and/or serial number.</p>\\n<h3 id=\\\"getosversion-as-object\\\">GetOSVersion() As Object</h3>\\n<p><em>Available since Roku OS 9.2</em></p>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Returns an roAssociativeArray containing the <strong>major</strong>, <strong>minor</strong>, <strong>revision</strong>, and <strong>build</strong> numbers of the Roku OS running on the device.</p>\\n<h4 id=\\\"return-values-5\\\">Return Values</h4>\\n<p>An roAssociativeArray containing the following fields:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>major</td>\\n<td>string</td>\\n<td>The major version number (for example, 9)</td>\\n</tr>\\n<tr>\\n<td>minor</td>\\n<td>string</td>\\n<td>The minor version number (for example, 2)</td>\\n</tr>\\n<tr>\\n<td>revision</td>\\n<td>string</td>\\n<td>The firmware revision number (for example, 6)</td>\\n</tr>\\n<tr>\\n<td>build</td>\\n<td>string</td>\\n<td>The build number (for example, 4127)</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getversion-as-string\\\">GetVersion() as String</h3>\\n<blockquote>\\n<p><strong>This method is deprecated</strong>.</p>\\n<p>Developers must update their channels to use <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#getosversion-as-object\\\">GetOSVersion()</a> method to get the current Roku OS version running on a device.</p>\\n</blockquote>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns the version number of the device.</p>\\n<h4 id=\\\"return-values-6\\\">Return Values</h4>\\n<p>A 13-character string (for example \\\"034.08E01185A\\\"). The third through sixth characters are the major/minor version number (\\\"4.08\\\") and the ninth through twelfth are the build number (\\\"1185\\\")</p>\\n<h3 id=\\\"getdeviceuniqueid-as-string\\\">GetDeviceUniqueId() as String</h3>\\n<blockquote>\\n<p> <strong>This method is deprecated</strong>.</p>\\n<p>Developers must update their channels to use the 32-character alphanumeric unique identifier returned by <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#getchannelclientid-as-string\\\">GetChannelClientId()</a>.</p>\\n</blockquote>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Returns a string of 12 zeroes (it no longer returns the unique identifier for the channel on a device).</p>\\n<h4 id=\\\"return-values-7\\\">Return Values</h4>\\n<p>A string of 12 zeros (\\\"000000000000\\\")</p>\\n<h3 id=\\\"getadvertisingid-as-string\\\">GetAdvertisingId() as String</h3>\\n<blockquote>\\n<p><strong>This method is deprecated</strong>.</p>\\n<p>Developers must update their channels to use the <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#getrida-as-string\\\">GetRIDA()</a> method to get the unique identifier.</p>\\n</blockquote>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Returns a unique identifier for the device. This identifier is persistent but can be reset by the user from the device's Settings menu or by performing a factory reset on the device.</p>\\n<p>If the user has disabled Ad ID tracking from the settings menu, then this identifier should not be used for targeted advertising. IsAdIdTrackingDisabled() should be called to check if the user has disabled Ad ID tracking</p>\\n<h4 id=\\\"return-values-8\\\">Return Values</h4>\\n<p>A Universally Unique Identifier (UUID) as specified in IETF-RFC 4122 with 36 characters (32 alphanumeric characters and four hyphens). The characters are grouped in the form 8-4-4-4-12, for example \\\"123e4567-e89b-12d3-a456-426655440000\\\"</p>\\n<h3 id=\\\"getrida-as-string\\\">GetRIDA() as String</h3>\\n<p><em>Available since Roku OS 8.1</em></p>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Returns a unique identifier for the device.</p>\\n<p>If the user has set \\\"Limit ad tracking\\\" from the <strong>Settings</strong> menu (the user has opted out of targeted advertising), the RIDA is set to a temporary ID. This temporary ID is different than the UUID returned if the user has not opted out, and it expires after 30 days. Channels must still pass this temporary ID on ad server requests to support frequency capping.</p>\\n<blockquote>\\n<p> If the user’s country is an EU member country, any data collection must be compliant with the <a href=\\\"/docs/features/legal/compliance.md#gdpr\\\">EU General Data Protection Regulation (GDPR)</a>.</p>\\n</blockquote>\\n<h4 id=\\\"return-values-9\\\">Return Values</h4>\\n<p>A Universally Unique Identifier (UUID). This identifier is persistent, but it can be reset by the user from the device's <strong>Settings</strong> menu or by performing a factory reset on the device</p>\\n<h3 id=\\\"isadidtrackingdisabled-as-boolean\\\">IsAdIdTrackingDisabled() as Boolean</h3>\\n<blockquote>\\n<p> <strong>This method is deprecated</strong>.</p>\\n<p>Developers must update their channels to use <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#isridadisabled-as-boolean\\\">IsRIDADisabled()</a> to get the Ad Id tracking status.</p>\\n</blockquote>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>If Ad Id tracking is disabled, the identifier returned by GetAdvertisingId() should not be used for Ad targeting</p>\\n<h4 id=\\\"return-values-10\\\">Return Values</h4>\\n<p>Returns true if the user has disabled Ad Id tracking by selecting \\\"Limit ad tracking\\\" from the Roku Settings menu, false otherwise.</p>\\n<h3 id=\\\"isridadisabled-as-boolean\\\">IsRIDADisabled() as Boolean</h3>\\n<p><em>Available since Roku OS 8.1</em></p>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>Indicates whether tracking via Roku's ID for Advertisers (RIDA) is disabled on the device.</p>\\n<h4 id=\\\"return-values-11\\\">Return Values</h4>\\n<p>A flag indicating whether RIDA tracking is disabled on the device (RIDA tracking can be disabled by selecting \\\"Limit ad tracking\\\" from the <strong>Settings>Privacy>Advertising</strong> menu). If RIDA tracking is disabled, this returns true; false otherwise.</p>\\n<h3 id=\\\"getclienttrackingid-as-string\\\">GetClientTrackingId() as String</h3>\\n<blockquote>\\n<p><strong>This method is deprecated</strong>.</p>\\n<p>Developers must update their channels to use the <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#getchannelclientid-as-string\\\">GetChannelClientId</a> method to get the unique identifier.</p>\\n</blockquote>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Returns a unique identifier for the device.</p>\\n<h4 id=\\\"return-values-12\\\">Return Values</h4>\\n<p>A unique device identifier. This identifier is different across channels so each channel will get a different identifier when calling this function</p>\\n<h3 id=\\\"getchannelclientid-as-string\\\">GetChannelClientId() as String</h3>\\n<p><em>Available since Roku OS 8.1</em></p>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Returns a unique identifier for the device. The ID is persistent and cannot be reset. This value can be used to manage or identify devices linked to the channel’s content services.</p>\\n<h4 id=\\\"return-values-13\\\">Return Values</h4>\\n<p>A unique device identifier. This identifier is different across channels so each channel will get a different identifier when calling this function</p>\\n<h3 id=\\\"getusercountrycode-as-string\\\">GetUserCountryCode() as String</h3>\\n<p><em>Available since Roku OS 8.1</em></p>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Returns the ISO 3166-1 (2-letter) country code associated with the user's Roku account.</p>\\n<h4 id=\\\"return-values-14\\\">Return Values</h4>\\n<p>An ISO 3166-1 (2-letter) country code.</p>\\n<blockquote>\\n<p>If the channel owner entered into an additional agreement to have the channel published to a curated <a href=\\\"https://www.roku.com/roku-powered\\\">Roku Powered Channel Store</a> instead of the user country, a Roku Powered Channel Store Identifier will instead be returned:</p>\\n</blockquote>\\n<table>\\n<thead>\\n<tr>\\n<th>Roku Powered Channel Store</th>\\n<th>Roku Powered Channel Store Identifier</th>\\n<th>Country</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Econet</td>\\n<td>Econet</td>\\n<td>ZW</td>\\n</tr>\\n<tr>\\n<td>Globe</td>\\n<td>globe</td>\\n<td>PH</td>\\n</tr>\\n<tr>\\n<td>PLDT</td>\\n<td>PLDT</td>\\n<td>PH</td>\\n</tr>\\n<tr>\\n<td>Sky Germany</td>\\n<td>skyde</td>\\n<td>DE</td>\\n</tr>\\n<tr>\\n<td>Sky Spain</td>\\n<td>skyes</td>\\n<td>ES</td>\\n</tr>\\n<tr>\\n<td>Sky Ireland</td>\\n<td>skyie</td>\\n<td>IE</td>\\n</tr>\\n<tr>\\n<td>Sky Italy</td>\\n<td>skyit</td>\\n<td>IT</td>\\n</tr>\\n<tr>\\n<td>Sky UK</td>\\n<td>skyuk</td>\\n<td>UK</td>\\n</tr>\\n<tr>\\n<td>Telstra</td>\\n<td>Telstra</td>\\n<td>AU</td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>A future enhancement to GetUserCountryCode() will return the 2-letter country code instead of the Roku Powered Channel Store Identifier. It is therefore recommended that channels use both to avoid having to update later.</p>\\n</blockquote>\\n<h3 id=\\\"getrandomuuid-as-string\\\">GetRandomUUID() as String</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>Returns a randomly generated unique identifier. Each time this function is called, a different identifier is returned</p>\\n<h4 id=\\\"return-values-15\\\">Return Values</h4>\\n<p>A Universally Unique Identifier (UUID) version 4 as specified in IETF-RFC 4122 with 36 characters (32 alphanumeric characters and four hyphens). The characters are grouped in the form 8-4-4-4-12, for example \\\"123e4567-e89b-12d3-a456-426655440000\\\"</p>\\n<h3 id=\\\"gettimezone-as-string\\\">GetTimeZone() as String</h3>\\n<h4 id=\\\"description-16\\\">Description</h4>\\n<p>Checks for the user's current system time zone setting.</p>\\n<h4 id=\\\"return-values-16\\\">Return Values</h4>\\n<p>A string representing the user's current system time zone setting. For example, this method may return values such as:</p>\\n<ul>\\n<li>\\\"US/Puerto Rico-Virgin Islands\\\"</li>\\n<li>\\\"US/Guam\\\"</li>\\n<li>\\\"US/Samoa\\\"</li>\\n<li>\\\"US/Hawaii\\\"</li>\\n<li>\\\"US/Aleutian\\\"</li>\\n<li>\\\"US/Alaska\\\"</li>\\n<li>\\\"US/Pacific\\\"</li>\\n<li>\\\"US/Arizona\\\"</li>\\n<li>\\\"US/Mountain\\\"</li>\\n<li>\\\"US/Central\\\"</li>\\n<li>\\\"US/Eastern\\\"</li>\\n<li>\\\"Canada/Pacific\\\"</li>\\n<li>\\\"Canada/Mountain\\\"</li>\\n<li>\\\"Canada/Central Standard\\\"</li>\\n<li>\\\"Canada/Central\\\"</li>\\n<li>\\\"Canada/Eastern\\\"</li>\\n<li>\\\"Canada/Atlantic\\\"</li>\\n<li>\\\"Canada/Newfoundland\\\"</li>\\n<li>\\\"Europe/Germany\\\"</li>\\n<li>\\\"Europe/Iceland\\\"</li>\\n<li>\\\"Europe/Ireland\\\"</li>\\n<li>\\\"Europe/United Kingdom\\\"</li>\\n<li>\\\"Europe/Portugal\\\"</li>\\n<li>\\\"Europe/Central European Time\\\"</li>\\n<li>\\\"Europe/Greece/Finland\\\"</li>\\n</ul>\\n<blockquote>\\n<p>Click <a href=\\\"/docs/references/brightscript/interfaces/time-zones.md\\\">here</a> for the complete list of time zones returned by this method.</p>\\n</blockquote>\\n<h3 id=\\\"hasfeaturefeature-as-string-as-boolean\\\">HasFeature(feature as String) as Boolean</h3>\\n<h4 id=\\\"description-17\\\">Description</h4>\\n<p>Checks if the current device/firmware supports the passed in feature string.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>feature</td>\\n<td>String</td>\\n<td>The feature to be checked, which may be one of the following values: <ul>\\n<li>\\\"5.1_surround_sound\\\"</li>\\n<li>\\\"can_output_5.1_surround_sound\\\"</li>\\n<li>\\\"sd_only_hardware\\\"</li>\\n<li>\\\"usb_hardware\\\"</li>\\n<li>\\\"sdcard_hardware\\\"</li>\\n<li>\\\"ethernet_hardware\\\"</li>\\n<li>\\\"gaming_hardware\\\"</li>\\n<li>\\\"energy_star_compliant\\\"</li>\\n<li>\\\"soundbar_hardware\\\" (<em>Available since Roku OS 9.2</em>). Check whether the device has soundbar hardware (for example, speakers).</li>\\n<li>\\\"voice_remote\\\" (<em>Available since Roku OS 10.5</em>). Checks whether a Roku device is paired with a Roku voice remote. This enables developers to tailor the in-channel user experience for viewers with Roku voice remote controls.</li>\\n<li>\\\"handsfree_voice\\\" (<em>Available since Roku OS 10.5</em>). Checks whether a Roku device is paired with a hands-free Roku remote control such as the Roku Voice Remote Pro. This enables developers to tailor the in-channel user experience for viewers with hands-free Roku remote controls (for example, displaying voice tips and tricks in the UI).</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>The \\\"1080p_hardware\\\" argument has been deprecated for Roku OS version 7.0. Channel applications should use the GetVideoMode() and CanDecodeVideo() functions instead</p>\\n</blockquote>\\n<h4 id=\\\"return-values-17\\\">Return Values</h4>\\n<p>A flag indicating whether the current device/firmware supports the passed in feature string.</p>\\n<h3 id=\\\"getcurrentlocale-as-string\\\">GetCurrentLocale() as String</h3>\\n<h4 id=\\\"description-18\\\">Description</h4>\\n<p>Gets the current locale value based on the user's language setting.</p>\\n<h4 id=\\\"return-values-18\\\">Return Values</h4>\\n<p>A string representing the current locale based on the user's language setting. The string is an ISO 639-1 (2-letter) language code followed by an underscore and a ISO 3166-1 (2-letter) country code. This may be one of the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>String</th>\\n<th>Locale</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>\\\"en_US\\\"</td>\\n<td>US English</td>\\n</tr>\\n<tr>\\n<td>\\\"en_GB\\\"</td>\\n<td>British English</td>\\n</tr>\\n<tr>\\n<td>\\\"fr_CA\\\"</td>\\n<td>Canadian French</td>\\n</tr>\\n<tr>\\n<td>\\\"es_ES\\\"</td>\\n<td>International Spanish</td>\\n</tr>\\n<tr>\\n<td>\\\"es_MX\\\"</td>\\n<td>Mexican Spanish</td>\\n</tr>\\n<tr>\\n<td>\\\"de_DE\\\"</td>\\n<td>German</td>\\n</tr>\\n<tr>\\n<td>\\\"it_IT\\\"</td>\\n<td>Italian</td>\\n</tr>\\n<tr>\\n<td>\\\"pt_BR\\\"</td>\\n<td>Brazilian Portuguese</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getcountrycode-as-string\\\">GetCountryCode() as String</h3>\\n<h4 id=\\\"description-19\\\">Description</h4>\\n<p>Checks for the country code of the channel.</p>\\n<h4 id=\\\"return-values-19\\\">Return Values</h4>\\n<p>A value that indicates the Roku Channel Store associated with a user’s Roku account. Typically, the value returned will be an ISO 3166-1 (2-letter) country code representing the country. Alternatively, if the channel owner entered into an additional agreement to have the channel published to a curated <a href=\\\"https://www.roku.com/roku-powered\\\">Roku Powered Channel Store</a> instead of the user country, then a Roku Powered Channel Store Identifier will instead be returned. This may be one of the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Country</th>\\n<th>Roku Powered Channel Store (if applicable)</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>\\\"AR\\\"</td>\\n<td>Argentina</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"BR\\\"</td>\\n<td>Brazil</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"CA\\\"</td>\\n<td>Canada</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"CL\\\"</td>\\n<td>Chile</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"CO\\\"</td>\\n<td>Colombia</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"CR\\\"</td>\\n<td>Costa Rica</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"DE\\\"</td>\\n<td>Germany</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"Econet\\\"</td>\\n<td>Zimbabwe</td>\\n<td>Econet</td>\\n</tr>\\n<tr>\\n<td>\\\"FR\\\"</td>\\n<td>France</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"GB\\\"</td>\\n<td>Great Britain and Northern Ireland</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"globe\\\"</td>\\n<td>Philippines</td>\\n<td>Globe</td>\\n</tr>\\n<tr>\\n<td>\\\"GT\\\"</td>\\n<td>Guatemala</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"HN\\\"</td>\\n<td>Honduras</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"IE\\\"</td>\\n<td>Republic of Ireland</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"MX\\\"</td>\\n<td>Mexico</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"OT\\\"</td>\\n<td>Rest of World</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"PA\\\"</td>\\n<td>Panama</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"PE\\\"</td>\\n<td>Peru</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"PLDT\\\"</td>\\n<td>Philippines</td>\\n<td>PLDT</td>\\n</tr>\\n<tr>\\n<td>\\\"Telstra\\\"</td>\\n<td>Australia</td>\\n<td>Telstra</td>\\n</tr>\\n<tr>\\n<td>\\\"skyde\\\"</td>\\n<td>Germany</td>\\n<td>Sky Germany</td>\\n</tr>\\n<tr>\\n<td>\\\"skyes\\\"</td>\\n<td>Spain</td>\\n<td>Sky Spain</td>\\n</tr>\\n<tr>\\n<td>\\\"skyie\\\"</td>\\n<td>Ireland</td>\\n<td>Sky Ireland</td>\\n</tr>\\n<tr>\\n<td>\\\"skyit\\\"</td>\\n<td>Italy</td>\\n<td>Sky Italy</td>\\n</tr>\\n<tr>\\n<td>\\\"skyuk\\\"</td>\\n<td>United Kingdom</td>\\n<td>Sky UK</td>\\n</tr>\\n<tr>\\n<td>\\\"SV\\\"</td>\\n<td>El Salvador</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>\\\"US\\\"</td>\\n<td>United States</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>This does not necessarily match the physical location of the device, nor does it necessarily match the last two letters of the current locale string.</p>\\n</blockquote>\\n<h3 id=\\\"getpreferredcaptionlanguage-as-string\\\">GetPreferredCaptionLanguage() as String</h3>\\n<h4 id=\\\"description-20\\\">Description</h4>\\n<p>Checks the three-letter ISO 639-2 language terminology code of the preferred caption language set on the Roku device.</p>\\n<h4 id=\\\"return-values-20\\\">Return Values</h4>\\n<p>The three-letter ISO 639-2 language terminology code, which may be one of the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Language</th>\\n<th>Code</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>English</td>\\n<td>eng</td>\\n</tr>\\n<tr>\\n<td>Spanish</td>\\n<td>spa</td>\\n</tr>\\n<tr>\\n<td>French</td>\\n<td>fra</td>\\n</tr>\\n<tr>\\n<td>German</td>\\n<td>deu</td>\\n</tr>\\n<tr>\\n<td>Italian</td>\\n<td>ita</td>\\n</tr>\\n<tr>\\n<td>Portuguese</td>\\n<td>por</td>\\n</tr>\\n<tr>\\n<td>Russian</td>\\n<td>rus</td>\\n</tr>\\n<tr>\\n<td>Turkish</td>\\n<td>tur</td>\\n</tr>\\n<tr>\\n<td>Polish</td>\\n<td>pol</td>\\n</tr>\\n<tr>\\n<td>Ukranian</td>\\n<td>ukr</td>\\n</tr>\\n<tr>\\n<td>Romanian</td>\\n<td>ron</td>\\n</tr>\\n<tr>\\n<td>Dutch</td>\\n<td>nld</td>\\n</tr>\\n<tr>\\n<td>Croatian</td>\\n<td>hrv</td>\\n</tr>\\n<tr>\\n<td>Hungarian</td>\\n<td>hun</td>\\n</tr>\\n<tr>\\n<td>Greek</td>\\n<td>ell</td>\\n</tr>\\n<tr>\\n<td>Czech</td>\\n<td>ces</td>\\n</tr>\\n<tr>\\n<td>Swedish</td>\\n<td>swe</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"timesincelastkeypress-as-integer\\\">TimeSinceLastKeypress() as Integer</h3>\\n<h4 id=\\\"description-21\\\">Description</h4>\\n<p>Checks for the number of seconds passed since the last remote keypress.</p>\\n<h4 id=\\\"return-values-21\\\">Return Values</h4>\\n<p>The number of seconds since the last remote keypress was received.</p>\\n<h3 id=\\\"getdrminfo-as-object\\\">GetDrmInfo() as Object</h3>\\n<blockquote>\\n<p><strong>This method is deprecated</strong>.</p>\\n<p>Developers must update their channels to use the replacement API <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#getdrminfoex-as-object\\\">GetDrmInfoEx()</a> to return the supported DRM system and features.</p>\\n</blockquote>\\n<h4 id=\\\"description-22\\\">Description</h4>\\n<p>Checks for the supported DRM system and its features.</p>\\n<h4 id=\\\"return-values-22\\\">Return Values</h4>\\n<p>An associative array with the supported DRM system and features. For example, a device that supports PlayReady inside a trusted environment with secure stop returns:</p>\\n<p><code>{\\\"playready\\\": \\\"tee;ss\\\"}</code></p>\\n<p>The values for the PlayReady key above are:</p>\\n<ul>\\n<li><strong>tee</strong> indicates the core DRM system runs in a Trusted Execution Environment</li>\\n<li><strong>ss</strong> indicates the DRM system supports secure stop</li>\\n</ul>\\n<h3 id=\\\"getdrminfoex-as-object\\\">GetDrmInfoEx() as Object</h3>\\n<p><em>Available since Roku OS 8.1</em>\\n<em>As of Roku OS 9.4 , returns the \\\"securityLevel\\\" for Widevine and PlayReady DRMs</em></p>\\n<blockquote>\\n<p>Channels should cache the results of a call to this method (it takes approximately 1 second to return on devices running Roku OS 10.0).</p>\\n</blockquote>\\n<p><strong>Description</strong></p>\\n<p>Checks for the DRM system used by the channel.</p>\\n<p><strong>Return Values</strong></p>\\n<p>An associative array with the supported DRM system and features:</p>\\n<p><strong>Example</strong></p>\\n<pre><code>PlayReady : {\\n    multikey: false\\n    securestop: true\\n    tee: false\\n    version: \\\"2.5\\\"\\n    securityLevel: \\\"2000\\\"\\n}\\nWidevine : {\\n    multikey: true\\n    securestop: false\\n    tee: false\\n    version: \\\"3.5\\\"\\n    securityLevel: \\\"2\\\"\\n}\\n    Verimatrix : {\\n    multikey: false\\n    securestop: false\\n    tee: false\\n    version: \\\"3.7\\\"\\n}\\n</code></pre>\\n<blockquote>\\n<p>tee indicates the core DRM system runs in a Trusted Execution Environment.</p>\\n</blockquote>\\n<h3 id=\\\"getcaptionsmode-as-string\\\">GetCaptionsMode() as String</h3>\\n<h4 id=\\\"description-23\\\">Description</h4>\\n<p>Determines whether global captions are turned on or off, or are in instant replay mode.</p>\\n<h4 id=\\\"return-values-23\\\">Return Values</h4>\\n<p>The current global setting for the Mode property, which may be one of the following values:</p>\\n<ul>\\n<li>On</li>\\n<li>Off</li>\\n<li>Instant replay</li>\\n</ul>\\n<blockquote>\\n<p>On a Roku TV, when the user selects On Mute this function will return On when the TV is muted and Off when it is not muted.</p>\\n</blockquote>\\n<h3 id=\\\"setcaptionsmodemode-as-string-as-boolean\\\">SetCaptionsMode(mode as String) as Boolean</h3>\\n<h4 id=\\\"description-24\\\">Description</h4>\\n<p>Sets the current global setting for the Mode property.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>mode</td>\\n<td>String</td>\\n<td>The current global setting for the Mode property, which may be one of the following values: <ul>\\n<li>On</li>\\n<li>Off</li>\\n<li>Instant replay</li>\\n<li>When mute (Roku TVs only)</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-values-24\\\">Return Values</h4>\\n<p>A flag indicating whether the Mode property was successfully set.</p>\\n<h3 id=\\\"getcaptionsoptionoption-as-string-as-string\\\">GetCaptionsOption(option as String) as String</h3>\\n<h4 id=\\\"description-25\\\">Description</h4>\\n<p>Checks the current value of the specified global setting property.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Option</td>\\n<td>String</td>\\n<td>The global setting property to be checked, which may be one of the following values: <ul>\\n<li>Mode</li>\\n<li>Text/Font</li>\\n<li>Text/Effect</li>\\n<li>Text/Size</li>\\n<li>Text/Color</li>\\n<li>Text/Opacity</li>\\n<li>Background/Color</li>\\n<li>Background/Opacity</li>\\n<li>Window/Color</li>\\n<li>Window/Opacity</li>\\n<li>Track</li>\\n<li>Track_Composite</li>\\n<li>Track_Analog</li>\\n<li>Muted</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-values-25\\\">Return Values</h4>\\n<p>The value of the specified global setting property, which may be as follows:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Queried Property</th>\\n<th>Possible Values</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Mode</td>\\n<td><ul>\\n<li>On</li>\\n<li>Off</li>\\n<li>Instant replay</li>\\n<li>When mute (Roku TVs only)</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Text style</td>\\n<td><ul>\\n<li>Default</li>\\n<li>Serif Fixed Width</li>\\n<li>Serif Proportional</li>\\n<li>Sans Serif Fixed Width</li>\\n<li>Sans Serif Proportional</li>\\n<li>Casual</li>\\n<li>Cursive</li>\\n<li>Small Caps</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Text edge effect</td>\\n<td><ul>\\n<li>Default</li>\\n<li>None</li>\\n<li>Raised</li>\\n<li>Depressed</li>\\n<li>Uniform</li>\\n<li>Drop shadow (left)</li>\\n<li>Drop shadow (right)</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Text size</td>\\n<td><ul>\\n<li>Default</li>\\n<li>Large</li>\\n<li>Medium</li>\\n<li>Small</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Text color</td>\\n<td><ul>\\n<li>Default</li>\\n<li>White</li>\\n<li>Black</li>\\n<li>Red</li>\\n<li>Green</li>\\n<li>Blue</li>\\n<li>Yellow</li>\\n<li>Magenta</li>\\n<li>Cyan</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Text opacity</td>\\n<td><ul>\\n<li>Default</li>\\n<li>25%</li>\\n<li>75%</li>\\n<li>100%</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Background Color</td>\\n<td><ul>\\n<li>Default</li>\\n<li>White</li>\\n<li>Black</li>\\n<li>Red</li>\\n<li>Green</li>\\n<li>Blue</li>\\n<li>Yellow</li>\\n<li>Magenta</li>\\n<li>Cyan</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Background Opacity</td>\\n<td><ul>\\n<li>Default</li>\\n<li>Off</li>\\n<li>25%</li>\\n<li>75%</li>\\n<li>100%</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Window Color</td>\\n<td><ul>\\n<li>Default</li>\\n<li>White</li>\\n<li>Black</li>\\n<li>Red</li>\\n<li>Green</li>\\n<li>Blue</li>\\n<li>Yellow</li>\\n<li>Magenta</li>\\n<li>Cyan</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>Window Opacity</td>\\n<td><ul>\\n<li>Default</li>\\n<li>Off</li>\\n<li>25%</li>\\n<li>75%</li>\\n<li>100%</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"example\\\">Example</h4>\\n<pre><code>di = CreateObject(\\\"roDeviceInfo\\\")\\nmode = di.GetCaptionsMode()\\n\\nprint \\\"Font=\\\";di.GetCaptionsOption(\\\"Text/Font\\\")\\nprint \\\"Color=\\\";di.GetCaptionsOption(\\\"Text/Color\\\")\\nprint \\\"Size=\\\";di.GetCaptionsOption(\\\"Text/Size\\\")\\nprint \\\"Effect=\\\";di.GetCaptionsOption(\\\"Text/Effect\\\")\\nprint \\\"Opacity=\\\";di.GetCaptionsOption(\\\"Text/Opacity\\\")\\nprint \\\"Background Color=\\\";di.GetCaptionsOption(\\\"Background/Color\\\")\\nprint \\\"Background Opacity=\\\";di.GetCaptionsOption(\\\"Background/Opacity\\\")\\nprint \\\"Window Color=\\\";di.GetCaptionsOption(\\\"Window/Color\\\")\\nprint \\\"Window Opacity=\\\";di.GetCaptionsOption(\\\"Window/Opacity\\\")\\n</code></pre>\\n<h3 id=\\\"getclockformat-as-string\\\">GetClockFormat() as String</h3>\\n<h4 id=\\\"description-26\\\">Description</h4>\\n<p>Checks whether the system settings for Time (<strong>Setting > System > Time</strong>) is set to a 12 or 24-hour format.</p>\\n<h4 id=\\\"return-values-26\\\">Return Values</h4>\\n<p>The time format:</p>\\n<ul>\\n<li>\\\"12h\\\": 12-hour AM/PM format</li>\\n<li>\\\"24h\\\": 24-hour format</li>\\n<li>\\\"\\\": error</li>\\n</ul>\\n<h3 id=\\\"enableappfocuseventenable-as-boolean-as-dynamic\\\">EnableAppFocusEvent(enable as Boolean) as Dynamic</h3>\\n<p><em>Available since Roku OS 8.0</em></p>\\n<h4 id=\\\"description-27\\\">Description</h4>\\n<p>Notifies the channel when a system overlay event (such as the <a href=\\\"/docs/developer-program/getting-started/architecture/channel-manifest.md#special-purpose-attributes\\\">confirm partner button HUD</a> or the caption control overlay) is displayed. This notification gives the channel the opportunity to do any processing they may want to when the channel loses or regains focus.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether to enable/disable system overlay event notifications.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-values-27\\\">Return Values</h4>\\n<p>A flag indicating whether the system overlay event notifications are enabled (true) or disabled (false).</p>\\n<h3 id=\\\"enablescreensaverexitedeventenable-as-boolean-as-dynamic\\\">EnableScreensaverExitedEvent(enable as Boolean) as Dynamic</h3>\\n<h4 id=\\\"description-28\\\">Description</h4>\\n<p>Notifies the channel when a screensaver exit event occurs. This function enables the sending of an <a href=\\\"/docs/references/brightscript/events/rodeviceinfoevent.md\\\">roDeviceInfoEvent</a> when a user has exited the screensaver.</p>\\n<p>To receive events, you must have first called <a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\">SetMessagePort</a> on the roDeviceInfo object specifying the message port that is to receive the events</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether to enable/disable screensaver exit event notifications.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-values-28\\\">Return Values</h4>\\n<p>A flag indicating whether screensaver exit event notifications are enabled (true) or disabled (false).</p>\\n<h3 id=\\\"ishdmiconnected-as-boolean\\\">IsHDMIConnected() as Boolean</h3>\\n<blockquote>\\n<p><strong>This method is deprecated</strong>.</p>\\n<p> Channel developers must use the <a href=\\\"/docs/references/brightscript/interfaces/ifhdmistatus.md\\\">ifHdmiStatus</a> interface functions instead.</p>\\n</blockquote>\\n<h4 id=\\\"description-29\\\">Description</h4>\\n<p>Checks for an HDMI connection.</p>\\n<h4 id=\\\"return-values-29\\\">Return Values</h4>\\n<p>A flag indicating whether an HDMI connection to a TV has been detected.</p>\\n<h3 id=\\\"enablelowgeneralmemoryeventenabled-as-boolean-as-dynamic\\\">EnableLowGeneralMemoryEvent(enabled as Boolean) as Dynamic</h3>\\n<p><em>Available since Roku OS 8.1</em></p>\\n<h4 id=\\\"description-30\\\">Description</h4>\\n<p>Notifies the channel when a lowGeneralMemoryLevel event occurs. This function enables the sending of an <a href=\\\"/docs/references/brightscript/events/rodeviceinfoevent.md\\\">roDeviceInfoEvent</a> when a low general memory event occurs.</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether to enable/disable lowGeneralMemoryLevel event notifications.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-values-30\\\">Return Values</h4>\\n<p>A flag indicating whether lowGeneralMemoryLevel event notifications are enabled (true) or disabled (false).</p>\\n<h3 id=\\\"getgeneralmemorylevel-as-string\\\">GetGeneralMemoryLevel() as String</h3>\\n<p><em>Available since Roku OS 8.1</em></p>\\n<h4 id=\\\"description-31\\\">Description</h4>\\n<p>Checks the general memory levels of the channel.</p>\\n<h4 id=\\\"return-values-31\\\">Return Values</h4>\\n<p>Returns the general memory levels of the channel, which may be one of the following values:</p>\\n<ul>\\n<li>\\\"normal\\\"</li>\\n<li>\\\"low\\\"</li>\\n<li>\\\"critical\\\"</li>\\n</ul>\\n<h3 id=\\\"isstoredemomode-as-boolean\\\">IsStoreDemoMode() as Boolean</h3>\\n<p><em>Available since Roku OS 9.3</em></p>\\n<h4 id=\\\"description-32\\\">Description</h4>\\n<p>Checks whether the device is in demo mode.</p>\\n<h4 id=\\\"return-values-32\\\">Return Values</h4>\\n<p>A flag indicating whether the device is in demo mode.</p>\\n<h4 id=\\\"network-info\\\">Network info</h4>\\n<h3 id=\\\"getlinkstatus-as-boolean\\\">GetLinkStatus() as Boolean</h3>\\n<h4 id=\\\"description-33\\\">Description</h4>\\n<p>Checks if the device has an active connection.</p>\\n<h4 id=\\\"return-values-33\\\">Return Values</h4>\\n<p>A flag indicating whether the device has an active connection.</p>\\n<h3 id=\\\"enablelinkstatuseventenable-as-boolean-as-boolean\\\">EnableLinkStatusEvent(enable as Boolean) as Boolean</h3>\\n<h4 id=\\\"description-34\\\">Description</h4>\\n<p>Notifies the channel when a network connection status event occurs. This function enables the sending of an <a href=\\\"/docs/references/brightscript/events/rodeviceinfoevent.md\\\">roDeviceInfoEvent</a> when the network connection status changes. To receive events, you must have first called <a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\">SetMessagePort</a> on the roDeviceInfo object specifying the message port that is to receive the events</p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether to enable/disable network connection status event notifications.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-values-34\\\">Return Values</h4>\\n<p>A flag indicating whether network connection status event notifications are enabled (true) or disabled (false).</p>\\n<h3 id=\\\"getconnectiontype-as-string\\\">GetConnectionType() as String</h3>\\n<h4 id=\\\"description-35\\\">Description</h4>\\n<p>Checks whether the device has a WiFi or wired connection, or if it is not connected through any type of network.</p>\\n<h4 id=\\\"return-values-35\\\">Return Values</h4>\\n<p>The type of internet connection the device is using. This may be one of the following values:</p>\\n<ul>\\n<li>\\\"WiFiConnection\\\"</li>\\n<li>\\\"WiredConnection\\\"</li>\\n<li>\\\"\\\" (the device does not have an Internet connection)</li>\\n</ul>\\n<h3 id=\\\"enableinternetstatuseventenable-as-boolean-as-boolean\\\">EnableInternetStatusEvent(enable as Boolean) as Boolean</h3>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<h4 id=\\\"description-36\\\">Description</h4>\\n<p>Notifies the channel when an internet connection status event occurs. This function enables the sending of an <a href=\\\"/docs/references/brightscript/events/rodeviceinfoevent.md\\\">roDeviceInfoEvent</a> when the network connection status changes, as indicated by <code>roDeviceInfoEvent.internetStatus</code>. To receive events, the channel must have first called <a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\">SetMessagePort</a> on the roDeviceInfo object specifying the message port that is to receive the events.</p>\\n<h4 id=\\\"parameters-7\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether to enable/disable network connection status event notifications.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-values-36\\\">Return Values</h4>\\n<p>A flag indicating whether network connection status event notifications are enabled (true) or disabled (false).</p>\\n<h3 id=\\\"getinternetstatus-as-boolean\\\">GetInternetStatus() as Boolean</h3>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<h4 id=\\\"description-37\\\">Description</h4>\\n<p>Checks the internet connection status of the device.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>True if the cached internet status shows a connection; false, otherwise.</p>\\n<h3 id=\\\"forceinternetstatuscheck-as-boolean\\\">ForceInternetStatusCheck() as Boolean</h3>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<h4 id=\\\"description-38\\\">Description</h4>\\n<p>Forces a new internet connection check. A new check will only be initiated if the cached internet status is older than 10 seconds.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>True indicates only that a new internet check has been initiated; otherwise, false. To get the actual internet connection status, use the <a href=\\\"getinternetstatus-as-boolean\\\"><strong>GetInternetStatus()</strong></a> method.</p>\\n<h3 id=\\\"getexternalip-as-string\\\">GetExternalIp() as String</h3>\\n<h4 id=\\\"description-39\\\">Description</h4>\\n<p>Checks the IP address assigned to the device by your internet service provider (ISP). This IP address is visible to the internet and all other computers outside your local network.</p>\\n<h4 id=\\\"return-values-37\\\">Return Values</h4>\\n<p>The external IP address assigned to the device.</p>\\n<h3 id=\\\"getipaddrs-as-object\\\">GetIPAddrs() as Object</h3>\\n<h4 id=\\\"description-40\\\">Description</h4>\\n<p>Checks the local IP address of the device.</p>\\n<h4 id=\\\"return-values-38\\\">Return Values</h4>\\n<p>An associative array, where each key is the name of a network interface and the value is the IP-address of the interface. Typically, the associative array only contains a single interface.</p>\\n<h3 id=\\\"getconnectioninfo-as-object\\\">GetConnectionInfo() as Object</h3>\\n<h4 id=\\\"description-41\\\">Description</h4>\\n<p>Checks for the information associated with the hardware's connection</p>\\n<h4 id=\\\"return-values-39\\\">Return Values</h4>\\n<p>An associative array with the following key-value pairs:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>type</td>\\n<td>Same as the value returned from GetConnectionType()</td>\\n</tr>\\n<tr>\\n<td>name</td>\\n<td>Name of the connection interface</td>\\n</tr>\\n<tr>\\n<td>ip</td>\\n<td>IP Address used by the connection</td>\\n</tr>\\n<tr>\\n<td>mac</td>\\n<td><em>This field is deprecated</em><br /><br />The device's MAC address is no longer returned (a string of zeros is returned in this field). Developers can use the <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#getchannelclientid-as-string\\\">roDeviceInfo.GetChannelClientId </a>method to uniquely identify devices.</td>\\n</tr>\\n<tr>\\n<td>ssid</td>\\n<td>The SSID of the Access Point (present only if type = \\\"WiFiConnection\\\")</td>\\n</tr>\\n<tr>\\n<td>gateway</td>\\n<td>IP Address of the connection gateway (usually the router)</td>\\n</tr>\\n<tr>\\n<td>dns.0</td>\\n<td>IP Address of first DNS server associated with the connection</td>\\n</tr>\\n<tr>\\n<td>dns.1</td>\\n<td>IP Address of the second DNS server, if any (Similarly for any subsequent DNS servers)</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"video-info\\\">Video info</h4>\\n<h3 id=\\\"getdisplaytype-as-string\\\">GetDisplayType() as String</h3>\\n<h4 id=\\\"description-42\\\">Description</h4>\\n<p>Gets the text corresponding to the button selection in the Player Info Settings/Display Type page.</p>\\n<h4 id=\\\"return-values-40\\\">Return Values</h4>\\n<p>The display type, which may be one of the following values:</p>\\n<ul>\\n<li>\\\"HDTV\\\"</li>\\n<li>\\\"4:3 standard\\\"</li>\\n<li>\\\"16:9 anamorphic\\\"</li>\\n</ul>\\n<h3 id=\\\"getdisplaymode-as-string\\\">GetDisplayMode() as String</h3>\\n<h4 id=\\\"description-43\\\">Description</h4>\\n<p>Checks the UI resolution of the device.</p>\\n<h4 id=\\\"return-values-41\\\">Return Values</h4>\\n<p>The configured graphics layer resolution, which may be one of the following values:</p>\\n<ul>\\n<li>\\\"480i\\\" or \\\"480p\\\" (the <strong>ui_resolutions</strong> manifest entry includes <strong>sd</strong> as a supported resolution).</li>\\n<li>\\\"720p\\\"</li>\\n<li>\\\"1080p\\\" (the <strong>ui_resolutions</strong> manifest file entry includes <strong>fhd</strong> as a supported resolution)</li>\\n</ul>\\n<h3 id=\\\"getdisplayaspectratio-as-string\\\">GetDisplayAspectRatio() as String</h3>\\n<h4 id=\\\"description-44\\\">Description</h4>\\n<p>Checks the aspect ratio for the display screen.</p>\\n<h4 id=\\\"return-values-42\\\">Return Values</h4>\\n<p>The aspect ratio, which may be one of the following values:</p>\\n<ul>\\n<li>\\\"4x3\\\"</li>\\n<li>\\\"16x9\\\"</li>\\n</ul>\\n<h3 id=\\\"getdisplaysize-as-object\\\">GetDisplaySize() as Object</h3>\\n<h4 id=\\\"description-45\\\">Description</h4>\\n<p>Checks the display size of a screen.</p>\\n<h4 id=\\\"return-values-43\\\">Return Values</h4>\\n<p>An associative array with the screen width and height. Specifically, the keys \\\"w\\\" and \\\"h\\\" contain the values for the screen width and height respectively, either 720 and 480, or 1280 and 720</p>\\n<h3 id=\\\"getvideomode-as-string\\\">GetVideoMode() as String</h3>\\n<h4 id=\\\"description-46\\\">Description</h4>\\n<p>Checks the video playback resolution.</p>\\n<h4 id=\\\"return-values-44\\\">Return Values</h4>\\n<p>The video playback resolution, which maybe one of the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>String</th>\\n<th>Resolution</th>\\n<th>Aspect Ratio</th>\\n<th>Refresh Rate</th>\\n<th>Bit Depth</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>\\\"480i\\\"</td>\\n<td>720x480</td>\\n<td>4:3</td>\\n<td>60 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"480p\\\"</td>\\n<td>720x480</td>\\n<td>4:3</td>\\n<td>60 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"576i25\\\"</td>\\n<td>720x576</td>\\n<td>4:3</td>\\n<td>25 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"576p50\\\"</td>\\n<td>720x576</td>\\n<td>4:3</td>\\n<td>50 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"576p60\\\"</td>\\n<td>720x576</td>\\n<td>4:3</td>\\n<td>60 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"720p50\\\"</td>\\n<td>1280x720</td>\\n<td>16:9</td>\\n<td>50 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"720p\\\"</td>\\n<td>1280x720</td>\\n<td>16:9</td>\\n<td>60 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"1080i50\\\"</td>\\n<td>1920x1080</td>\\n<td>16:9</td>\\n<td>50 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"1080i\\\"</td>\\n<td>1920x1080</td>\\n<td>16:9</td>\\n<td>60 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"1080p24\\\"</td>\\n<td>1920x1080</td>\\n<td>16:9</td>\\n<td>24 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"1080p25\\\"</td>\\n<td>1920x1080</td>\\n<td>16:9</td>\\n<td>25 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"1080p30\\\"</td>\\n<td>1920x1080</td>\\n<td>16:9</td>\\n<td>30 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"1080p50\\\"</td>\\n<td>1920x1080</td>\\n<td>16:9</td>\\n<td>50 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"1080p60b10\\\"</td>\\n<td>1920x1080</td>\\n<td>16:9</td>\\n<td>60 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"1080p60Dv\\\"</td>\\n<td>1920x1080</td>\\n<td>16:9</td>\\n<td>60 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"1080p\\\"</td>\\n<td>1920x1080</td>\\n<td>16:9</td>\\n<td>60 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"2160p24\\\"</td>\\n<td>3840x2160</td>\\n<td>16:9</td>\\n<td>24 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"2160p25\\\"</td>\\n<td>3840x2160</td>\\n<td>16:9</td>\\n<td>25 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"2160p30\\\"</td>\\n<td>3840x2160</td>\\n<td>16:9</td>\\n<td>30 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"2160p30Dv\\\"</td>\\n<td>3840x2160</td>\\n<td>16:9</td>\\n<td>30 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"2160p50\\\"</td>\\n<td>3840x2160</td>\\n<td>16:9</td>\\n<td>50 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"2160p60\\\"</td>\\n<td>3840x2160</td>\\n<td>16:9</td>\\n<td>60 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"2160p60Dv\\\"</td>\\n<td>3840x2160</td>\\n<td>16:9</td>\\n<td>60 Hz</td>\\n<td>8 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"2160p24b10\\\"</td>\\n<td>3840x2160</td>\\n<td>16:9</td>\\n<td>24 Hz</td>\\n<td>10 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"2160p25b10\\\"</td>\\n<td>3840x2160</td>\\n<td>16:9</td>\\n<td>25 Hz</td>\\n<td>10 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"2160p30b10\\\"</td>\\n<td>3840x2160</td>\\n<td>16:9</td>\\n<td>30 Hz</td>\\n<td>10 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"2160p50b10\\\"</td>\\n<td>3840x2160</td>\\n<td>16:9</td>\\n<td>50 Hz</td>\\n<td>10 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"2160p60b10\\\"</td>\\n<td>3840x2160</td>\\n<td>16:9</td>\\n<td>60 Hz</td>\\n<td>10 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"4320p60\\\"</td>\\n<td>7680 x 4320</td>\\n<td>16:9</td>\\n<td>60 Hz</td>\\n<td>12 Bit</td>\\n</tr>\\n<tr>\\n<td>\\\"4320p60b10\\\"</td>\\n<td>7680 x 4320</td>\\n<td>16:9</td>\\n<td>60 Hz</td>\\n<td>12 Bit</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getdisplayproperties-as-object\\\">GetDisplayProperties() as Object</h3>\\n<h4 id=\\\"description-47\\\">Description</h4>\\n<p>Checks for the display properties of the screen.</p>\\n<h4 id=\\\"return-values-45\\\">Return Values</h4>\\n<p>An associative array with the following key/value pairs for the display properties of the screen:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Width</td>\\n<td>Integer</td>\\n<td>Physical width of the attached display in centimeters</td>\\n</tr>\\n<tr>\\n<td>Height</td>\\n<td>Integer</td>\\n<td>Physical height of the attached display in centimeters</td>\\n</tr>\\n<tr>\\n<td>Internal</td>\\n<td>Boolean</td>\\n<td>Set to true if the display is part of the Roku Player (such as a Roku TV), false otherwise</td>\\n</tr>\\n<tr>\\n<td>Hdr10</td>\\n<td>Boolean</td>\\n<td>Set to true if the attached display supports HDR10, false otherwise</td>\\n</tr>\\n<tr>\\n<td>Hdr10Plus</td>\\n<td>Boolean</td>\\n<td>Set to true if the attached display supports HDR10+, false otherwise</td>\\n</tr>\\n<tr>\\n<td>HdrSeamless</td>\\n<td>Boolean</td>\\n<td>Set to true if the attached display supports any type of HDR, such as HDR10, HLG, or<br />Dolby Vision, false otherwise.</td>\\n</tr>\\n<tr>\\n<td>Headless</td>\\n<td>Boolean</td>\\n<td>Set to true if the attached display supports being powered off while audio continues to play</td>\\n</tr>\\n<tr>\\n<td>HLG</td>\\n<td>Boolean</td>\\n<td>Set to true if the attached display supports HLG, false otherwise</td>\\n</tr>\\n<tr>\\n<td>DolbyVision</td>\\n<td>Boolean</td>\\n<td>Set to true if the attached display supports Dolby Vision, false otherwise</td>\\n</tr>\\n<tr>\\n<td>visible<br /><br /><em>Available since Roku OS 11.0</em></td>\\n<td>boolean</td>\\n<td>For Roku TVs only. Indicates whether the TV screen is on/off while the Roku device is actively streaming content. This is useful for checking whether customers have muted their TV screen while streaming video in order to continue listening to the audio (for example, when playing music videos, conferences, or podcasts).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getsupportedgraphicsresolutions-as-object\\\">GetSupportedGraphicsResolutions() as Object</h3>\\n<h4 id=\\\"description-48\\\">Description</h4>\\n<p>Checks the supported graphics resolutions.</p>\\n<h4 id=\\\"return-values-46\\\">Return Values</h4>\\n<p>A list of associative arrays. Each associative array contains the following key/value pairs for the graphics resolutions:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>width</td>\\n<td>integer</td>\\n<td>The pixel width of the supported resolution</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>integer</td>\\n<td>The pixel height of the supported resolution</td>\\n</tr>\\n<tr>\\n<td>name</td>\\n<td>string</td>\\n<td>Either SD, HD, or FHD</td>\\n</tr>\\n<tr>\\n<td>ui</td>\\n<td>boolean</td>\\n<td>True if this resolution is the current Roku UI resolution</td>\\n</tr>\\n<tr>\\n<td>preferred</td>\\n<td>boolean</td>\\n<td>True if this is the preferred UI resolution, i.e., if this is the optimal resolution for the device</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"candecodevideovideo_format-as-object-as-object\\\">CanDecodeVideo(video_format as Object) as Object</h3>\\n<h4 id=\\\"description-49\\\">Description</h4>\\n<p>Checks whether the device can decode and play the specified video format.</p>\\n<h4 id=\\\"parameters-8\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>video_format</td>\\n<td>Object</td>\\n<td>An associative array with the following key/value pairs specifying the video format to be checked: <table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n<th>Requirement</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Codec</td>\\n<td>string</td>\\n<td>Specifies the video codec: <table>\\n<thead>\\n<tr>\\n<th>Codec</th>\\n<th>Profile</th>\\n<th>Level</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>\\\"mpeg2\\\"</td>\\n<td>n/a</td>\\n<td>\\\"main\\\", \\\"high\\\"</td>\\n</tr>\\n<tr>\\n<td>\\\"mpeg4 avc\\\"  1</td>\\n<td>\\\"main\\\", \\\"high\\\"</td>\\n<td>\\\"4.1\\\", \\\"4.2\\\"</td>\\n</tr>\\n<tr>\\n<td>\\\"hevc\\\" 1</td>\\n<td>\\\"main\\\", \\\"main 10\\\"</td>\\n<td>\\\"4.1\\\", \\\"5.0\\\", \\\"5.1\\\"</td>\\n</tr>\\n<tr>\\n<td>\\\"vp9\\\" 1</td>\\n<td>\\\"profile 0\\\", \\\"profile 2\\\"</td>\\n<td>\\\"4.1\\\", \\\"5.0\\\", \\\"5.1\\\"</td>\\n</tr>\\n</tbody>\\n</table></td>\\n<td>Required</td>\\n</tr>\\n<tr>\\n<td>Profile</td>\\n<td>string</td>\\n<td>Specifies the profile</td>\\n<td>Optional</td>\\n</tr>\\n<tr>\\n<td>Level</td>\\n<td>string</td>\\n<td>Specifies the level</td>\\n<td>Optional</td>\\n</tr>\\n<tr>\\n<td>Container</td>\\n<td>string</td>\\n<td>Specifies the container format: “mp4”, “hls”, “mkv”, “ism”, “dash”, “ts”</td>\\n<td>Optional</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>All the codecs, except \\\"mpeg2\\\", can provide additional display info (bit depth, refresh rate, display width, display height) if the codec, profile, and level are passed as parameters.</p>\\n<p>For example, if the application wants to check if the Roku Player can play an AVC stream at high profile and level 4.2, it calls <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#candecodevideovideo_format-as-object-as-object\\\">CanDecodeVideo()</a> with the following video_format:</p>\\n<p><code>{Codec: \\\"mpeg4 avc\\\", Profile: \\\"high\\\", Level: \\\"4.2\\\"}</code></p>\\n<p>Format keys that are not provided by the caller are not taken into account and not updated. For example, calling <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#candecodevideovideo_format-as-object-as-object\\\">CanDecodeVideo()</a> with a format description that has only a codec key (such as <code>{\\\"codec\\\": \\\"vp9\\\"}</code>) will return that same format if the device can decode and play that codec at all, even if the decode capability is limited to one specific container, profile, and level.</p>\\n</blockquote>\\n<h4 id=\\\"return-values-47\\\">Return Values</h4>\\n<p>An associative array that includes a flag indicating whether the video format can be played, and the closest video format supported by the device.</p>\\n<p>If the Roku Player cannot play that video format, it will return false, and return the closest video format it can play, with the changed fields, such as:</p>\\n<p><code>{\\\"codec\\\":[\\\"hevc\\\",\\\"mpeg1\\\",\\\"mpeg2\\\",\\\"h263\\\",\\\"mpeg4 avc\\\",\\\"vp9\\\"],\\\"result\\\":false,\\\"updated\\\":\\\"codec\\\"}</code></p>\\n<p>The return value shows the Roku Player cannot play requested video format, shows the updated keys of the requested video format (level and profile) that it can support, and the all the key values of the requested video format supported by the Roku Player.</p>\\n<h3 id=\\\"getuiresolution-as-object\\\">GetUIResolution() as Object</h3>\\n<h4 id=\\\"description-50\\\">Description</h4>\\n<p>Checks for the UI resolution of the screen.</p>\\n<h4 id=\\\"return-values-48\\\">Return Values</h4>\\n<p>An associative array with the following key-value pairs describing the current UI resolution:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name</td>\\n<td>The possible values are: <table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>SD</td>\\n<td>standard definition (720x480 screen pixel dimensions)</td>\\n</tr>\\n<tr>\\n<td>HD</td>\\n<td>high-definition (1280x720 screen pixel dimensions)</td>\\n</tr>\\n<tr>\\n<td>FHD</td>\\n<td>full high-definition (1920x1080 screen pixel dimensions)</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>The possible values are: <table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>720</td>\\n<td>standard definition screen pixel width</td>\\n</tr>\\n<tr>\\n<td>1280</td>\\n<td>high-definition screen pixel width</td>\\n</tr>\\n<tr>\\n<td>1920</td>\\n<td>full high-definition screen pixel width</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>The possible values are: <table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>480</td>\\n<td>standard definition screen pixel height</td>\\n</tr>\\n<tr>\\n<td>720</td>\\n<td>high-definition screen pixel height</td>\\n</tr>\\n<tr>\\n<td>1080</td>\\n<td>full high-definition screen pixel height</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getgraphicsplatform-as-string\\\">GetGraphicsPlatform() as String</h3>\\n<h4 id=\\\"description-51\\\">Description</h4>\\n<p>Checks the graphics platform of the device.</p>\\n<h4 id=\\\"return-values-49\\\">Return Values</h4>\\n<p>The device's graphics platform, which may be one of the following values:</p>\\n<ul>\\n<li>\\\"opengl\\\"</li>\\n<li>\\\"directfb\\\"</li>\\n</ul>\\n<h3 id=\\\"getvideodecodeinfo-as-object\\\">GetVideoDecodeInfo() as Object</h3>\\n<blockquote>\\n<p><strong>This method is deprecated</strong>.</p>\\n<p>Channel developers  should use the <a href=\\\"#candecodevideovideo_format-as-object-as-object\\\">CanDecodeVideo()</a> function instead.</p>\\n</blockquote>\\n<h4 id=\\\"description-52\\\">Description</h4>\\n<p>See <a href=\\\"http://en.wikipedia.org/wiki/Extended_display_identification_data#EIA.2FCEA-861_extension_block\\\">http://en.wikipedia.org/wiki/Extended_display_identification_data#EIA.2FCEA-861_extension_block</a> for an explanation of the information returned.</p>\\n<h4 id=\\\"return-values-50\\\">Return Values</h4>\\n<p>An associative array with the EDID (EIA.2FCEA-861) information describing the video display</p>\\n<h3 id=\\\"enablecodeccapchangedeventenable-as-boolean\\\">EnableCodecCapChangedEvent(enable As Boolean)</h3>\\n<p><em>Available since Roku OS 9.1</em></p>\\n<h4 id=\\\"description-53\\\">Description</h4>\\n<p>Notifies the channel when the audio or video codec changes. This function enables the sending of an <a href=\\\"/docs/references/brightscript/events/rodeviceinfoevent.md\\\">roDeviceInfoEvent</a> when the codec changes. To receive events, you must have first called <a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\">SetMessagePort</a> on the roDeviceInfo object specifying the message port that is to receive the events</p>\\n<h4 id=\\\"parameters-9\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag indicating whether to enable/disable codec change event notifications.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-values-51\\\">Return Values</h4>\\n<p>A flag indicating whether codec change event notifications are enabled (true) or disabled (false).</p>\\n<h4 id=\\\"audio-info\\\">Audio info</h4>\\n<h3 id=\\\"getaudiooutputchannel-as-string\\\">GetAudioOutputChannel() as String</h3>\\n<h4 id=\\\"description-54\\\">Description</h4>\\n<p>Checks for the type of audio output.</p>\\n<h4 id=\\\"return-values-52\\\">Return Values</h4>\\n<p>The selected audio output, which may be one of the following values:</p>\\n<ul>\\n<li>\\\"Stereo\\\"</li>\\n<li>\\\"5.1 surround\\\"</li>\\n</ul>\\n<h3 id=\\\"getaudiodecodeinfo-as-object\\\">GetAudioDecodeInfo() as Object</h3>\\n<blockquote>\\n<p><strong>This method is deprecated</strong>.</p>\\n<p>Channel developers  should use the <a href=\\\"#candecodeaudioaudio_format-as-object-as-object\\\">CanDecodeAudio()</a> function instead.</p>\\n</blockquote>\\n<h4 id=\\\"description-55\\\">Description</h4>\\n<p>Lists each audio decoder supported by the device, with up to four numbers describing the decoder from the EDID SAD (Short Audio Descriptor). Each value is of the form \\\"::::\\\"</p>\\n<h4 id=\\\"return-values-53\\\">Return Values</h4>\\n<p>An associative array with EDID (EIA.2FCEA-861) audio decoder information for the device connected to the HDMI port (or the device itself for a Roku TV).</p>\\n<p>For example, the name \\\"DD+\\\" may have the value \\\"8:6:0:1\\\" where there are 8 independent audio tracks (7.1 audio), 6 is the SAD1 byte, 0 is the SAD2 byte, and 1 is the binary value that indicates this is a pass-through audio device (not a Roku TV). The SAD1 and SAD2 bytes are interpreted differently for different codecs and more information about their values can be found here: <a href=\\\"http://en.wikipedia.org/wiki/Extended_display_identification_data#CEA_EDID_Timing_Extension_Version_3_data_format\\\">http://en.wikipedia.org/wiki/Extended_display_identification_data#CEA_EDID_Timing_Extension_Version_3_data_format</a></p>\\n<h4 id=\\\"example-1\\\">Example</h4>\\n<p>The following example demonstrates how to determine if the attached device supports Dolby Digital Plus audio:</p>\\n<pre><code>di = CreateObject(\\\"roDeviceInfo\\\")\\naudioDecoders = di.GetAudioDecodeInfo()\\n\\nREM Check for surround sound codecs:\\nhasDolbyDigital = audioDecoders.doesexist(\\\"AC3\\\")\\nhasDTS = audioDecoders.doesexist(\\\"DTS\\\")\\nhasDDPlus = audioDecoders.doesexist(\\\"DD+\\\")\\n</code></pre>\\n<blockquote>\\n<p>The definition of hasFeature (“5.1_surround_sound”) has changed in Roku OS 6.1. In previous firmware revisions it returned true when the user set the system audio format to \\\"Surround Sound\\\". In Roku OS6.1 and above, it returns true when any of the codecs in the GetAudioDecodeInfo() AA has more than 2 audio channels. Users devices will also be default to the \\\"Auto Detect\\\" system HDMI audio setting in v6.1.</p>\\n</blockquote>\\n<h3 id=\\\"candecodeaudioaudio_format-as-object-as-object\\\">CanDecodeAudio(audio_format as Object) as Object</h3>\\n<h4 id=\\\"description-56\\\">Description</h4>\\n<p>Checks if the device can decode and play the specified audio format.</p>\\n<blockquote>\\n<p>Use this method to query the codecs every time before starting playback on content (do not cache  and use the results from a previous call). In addition, use the <a href=\\\"/docs/references/brightscript/events/rodeviceinfoevent.md\\\"><strong>roDeviceInfo.audioCodecCapabilityChanged()</strong></a> event to identify any codec changes that may occur when the audio output destination is switched. This will help your channel to perform well with the Roku mobile app and and private listening.</p>\\n</blockquote>\\n<h4 id=\\\"parameters-10\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>audio_format</td>\\n<td>Object</td>\\n<td>An associative array with the audio format to be checked. The general format of the associative arrays for CanDecodeAudio() is similar to the parameter and return associative arrays used in <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#candecodevideovideo_format-as-object-as-object\\\">CanDecodeVideo()</a>: <table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n<th>Requirement</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Codec</td>\\n<td>string</td>\\n<td>Specifies the audio codec: “aac”, “ac3”, “eac3”, \\\"alac\\\", \\\"flac\\\", “mp2”, “mp3”, “vorbis”, “wma”, “wma pro”, “dts”, \\\"ac4\\\"</td>\\n<td>Required</td>\\n</tr>\\n<tr>\\n<td>Profile</td>\\n<td>string</td>\\n<td>Specifies the codec profile: <table>\\n<thead>\\n<tr>\\n<th>Codec</th>\\n<th>Profile</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>\\\"h.265/h.265\\\"</td>\\n<td>\\\"main\\\", \\\"high\\\", \\\"main 10\\\"</td>\\n</tr>\\n<tr>\\n<td>\\\"vp9\\\"</td>\\n<td>\\\"profile 0\\\", \\\"profile 2\\\"</td>\\n</tr>\\n<tr>\\n<td>\\\"AAC codec profiles\\\"</td>\\n<td>\\\"mp2 lc\\\", \\\"mp4 he\\\"</td>\\n</tr>\\n</tbody>\\n</table></td>\\n<td>Optional</td>\\n</tr>\\n<tr>\\n<td>Level</td>\\n<td>String</td>\\n<td>Specifies the codec level: <table>\\n<thead>\\n<tr>\\n<th>Codec</th>\\n<th>Level</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>\\\"h.265/h.265\\\"</td>\\n<td>4.1, 4.2, 5.0, 5.1</td>\\n</tr>\\n<tr>\\n<td>\\\"vp9\\\"</td>\\n<td>3.0, 3.1, 4.0, 4.1, 5.0, 5.1</td>\\n</tr>\\n</tbody>\\n</table></td>\\n<td>Optional</td>\\n</tr>\\n<tr>\\n<td>ChCnt</td>\\n<td>integer</td>\\n<td>Specifies the required number of audio channels</td>\\n<td>Optional</td>\\n</tr>\\n<tr>\\n<td>PassThru</td>\\n<td>integer</td>\\n<td>Specifies whether the bitstream needs to be decoded on the device. By default, this reports the codec properties of both the Roku device and the attached           HDMI device. <br /><br />You can filter the values returned by including one of the following options: <ul>\\n<li><strong>0</strong> - Reports only codecs that are supported on the Roku device itself.</li>\\n<li><strong>1</strong> - Reports only codecs of the attached HDMI device (for example, an audio receiver).</li>\\n</ul></td>\\n<td>Optional</td>\\n</tr>\\n<tr>\\n<td>Atmos</td>\\n<td>Integer</td>\\n<td>Specifies whether atmos is required. Include 'atmos=1' if it is.</td>\\n<td>Optional</td>\\n</tr>\\n<tr>\\n<td>SampleRate</td>\\n<td>integer</td>\\n<td>Specifies the sample rate</td>\\n<td>Optional</td>\\n</tr>\\n<tr>\\n<td>BitRate</td>\\n<td>integer</td>\\n<td>Specifies the bit rate in Kbit/sec</td>\\n<td>Optional</td>\\n</tr>\\n<tr>\\n<td>Container</td>\\n<td>string</td>\\n<td>Specifies the container format</td>\\n<td>Optional</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-values-54\\\">Return Values</h4>\\n<p>An associative array that includes a flag indicating whether the audio format can be played, and the closest audio format supported by the device.</p>\\n<h3 id=\\\"getsoundeffectsvolume-as-integer\\\">GetSoundEffectsVolume() as Integer</h3>\\n<h4 id=\\\"description-57\\\">Description</h4>\\n<p>Checks for the user interface sound effects volume level.</p>\\n<h4 id=\\\"return-values-55\\\">Return Values</h4>\\n<p>The UI sounds effects volume as a percentage. A return value of 0 indicates that UI sound effects are muted, and a value of 100 indicates that they are set to the maximum volume level</p>\\n<h3 id=\\\"isaudioguideenabled-as-dynamic\\\">IsAudioGuideEnabled() as Dynamic</h3>\\n<blockquote>\\n<p>The screen reader is available on the following devices: Roku Streaming Stick (3600X), Roku Express (3700X) and Express+ (3710X), Roku Premiere (4620X) and Premiere+ (4630X), Roku Ultra (4640X), and any Roku TV running Roku OS version 7.5 and later.</p>\\n</blockquote>\\n<h4 id=\\\"description-58\\\">Description</h4>\\n<p>Checks if the screen reader is enabled.</p>\\n<h4 id=\\\"return-values-56\\\">Return Values</h4>\\n<p>A flag indicating whether the screen reader is enabled.</p>\\n<h3 id=\\\"enableaudioguidechangedeventenable-as-boolean-as-dynamic\\\">EnableAudioGuideChangedEvent(enable as Boolean) as Dynamic</h3>\\n<blockquote>\\n<p>The screen reader is available on: Roku Streaming Stick (3600X), Roku Express (3700X) and Express+ (3710X), Roku Premiere (4620X) and Premiere+ (4630X), Roku Ultra (4640X), and any Roku TV running Roku OS version 7.5 and above</p>\\n</blockquote>\\n<h4 id=\\\"description-59\\\">Description</h4>\\n<p>Notifies the channel when the screen reader changes. This function enables the sending of an <a href=\\\"/docs/references/brightscript/events/rodeviceinfoevent.md\\\">roDeviceInfoEvent</a> when the screen reader changes. To receive events, you must have first called <a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md\\\">SetMessagePort</a> on the roDeviceInfo object specifying the message port that is to receive the events</p>\\n<h4 id=\\\"parameters-11\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag indicating whether to enable/disable screen reader change event notifications.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-values-57\\\">Return Values</h4>\\n<p>A flag indicating whether screen reader change event notifications are enabled (true) or disabled (false).</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifdevicecrypto.md":"{\n  \"content\": \"<h1 id=\\\"ifdevicecrypto\\\">ifDeviceCrypto</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented By</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rodevicecrypto.md\\\">roDeviceCrypto</a></td>\\n<td>Encrypts and decrypts data on a device using a key that is unique per channel, device, or model.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported Methods</h2>\\n<h3 id=\\\"encrypt-input-as-robytearray-string-as-enctype-as-robytearray\\\">Encrypt (input as roByteArray, String as encType) as roByteArray</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Encrypts data on a device that is unique per device, channel, or model. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>input</td>\\n<td>roByteArray</td>\\n<td>The data to be encrypted.</td>\\n</tr>\\n<tr>\\n<td>encType</td>\\n<td>String</td>\\n<td>The encryption key type, which is a string that may be set to \\\"channel\\\", \\\"device\\\", or \\\"model\\\": <table>\\n<thead>\\n<tr>\\n<th>encType</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>device</td>\\n<td>Encrypt data with a device unique key. This can be used to implement a secure storage-like algorithm.</td>\\n</tr>\\n<tr>\\n<td>channel</td>\\n<td>Encrypt data with a channel unique key This enables you to provision credentials, API tokens, or other data from the cloud to devices securely. Channels signed with same signing key will share the encryption key.</td>\\n</tr>\\n<tr>\\n<td>model</td>\\n<td>Encrypt channel with a model unique key This is similar to the \\\"channel\\\" encryption type, but with the scope limited to a specific model.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>An roByteArray containing the encrypted data.</p>\\n<h3 id=\\\"decrypt-encrypteddata-as-robytearray-string-as-enctype-as-robytearray\\\">Decrypt (EncryptedData as roByteArray, String as encType) as roByteArray</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Decrypts data stored on a device that was previously encoded with the <a href=\\\"#encrypt-input-as-robytearray-string-as-enctype-as-robytearray\\\"><strong>Encrypt()</strong></a> method. </p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>EncryptedData</td>\\n<td>roByteArray</td>\\n<td>The previously encoded data to be decrypted.</td>\\n</tr>\\n<tr>\\n<td>encType</td>\\n<td>String</td>\\n<td>The encryption key type, which is a string that may be set to \\\"channel\\\", \\\"device\\\", or \\\"model\\\": ${encTypeValues-2}</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>${encTypeValues-2}</p>\\n<table>\\n<thead>\\n<tr>\\n<th>encType</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>device</td>\\n<td>Encrypt data with a device unique key. This can be used to implement a secure storage-like algorithm.</td>\\n</tr>\\n<tr>\\n<td>channel</td>\\n<td>Encrypt data with a channel unique key This enables you to provision credentials, API tokens, or other data from the cloud to devices securely. Channels signed with same signing key will share the encryption key.</td>\\n</tr>\\n<tr>\\n<td>model</td>\\n<td>Encrypt channel with a model unique key This is similar to the \\\"channel\\\" encryption type, but with the scope limited to a specific model.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>An roByteArray containing the decrypted data.</p>\\n<h4 id=\\\"example\\\">Example</h4>\\n<p>You can use the <code>Encrypt()</code> and <code>Decrypt()</code> methods to encrypt plaintext on a Roku device\\nand then decode it, as demonstrated in the following example:  </p>\\n<pre><code>  ' store plaintext to be encrypted in an roByteArray\\n  ba = CreateObject(\\\"roByteArray\\\")\\n  ba.FromAsciiString(\\\"plain text1\\\")  \\n\\n  ' create roDeviceCrypto object and specify a device key\\n  dc = CreateObject(\\\"roDeviceCrypto\\\") encType = \\\"device\\\"\\n\\n  ' encrypt plaintext using the device key and store the encoded data in an roByteArray\\n  encrypted = dc.Encrypt(ba, encType)\\n\\n  ' decode the encrypted data and store the decrypted data in an roByteArray\\n  if encrypted &#x3C;> invalid then\\n    decrypted = dc.Decrypt(encrypted,encType)\\n  end if\\n</code></pre>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifdouble.md":"{\n  \"content\": \"<h1 id=\\\"ifdouble\\\">ifDouble</h1>\\n<blockquote>\\n<p>Interface equivalent for intrinsic type Double</p>\\n</blockquote>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rodouble.md\\\" title=\\\"roDouble\\\">roDouble</a></td>\\n<td>roDouble is a legacy object name, corresponding to the intrinsic Double object</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getdouble-as-double\\\">GetDouble() As Double</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Gets the double value stored in the calling Double object. </p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The double value stored in the calling Double object. </p>\\n<h3 id=\\\"setdoublevalue-as-double-as-void\\\">SetDouble(value As Double) As Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Sets the calling Double object to the specified double value. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>value</td>\\n<td>Double</td>\\n<td>The double value to be set on the calling Double object.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifdraw2d.md":"{\n  \"content\": \"<h1 id=\\\"ifdraw2d\\\">ifDraw2D</h1>\\n<p>Coordinates (x,y) for this interface are based on an origin (0,0) at the top, left. (This is common for 2D drawing APIs, but is different than OpenGL's default coordinate system).</p>\\n<p>Bitmap pixel values and color values are always represented as 32-bit integer RGBA color values.  That is, red is in the most significant byte and alpha is in the least significant byte.</p>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/robitmap.md\\\" title=\\\"roBitmap\\\">roBitmap</a></td>\\n<td>The roBitmap component contains image data and provides an interface (ifDraw2D) for drawing</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegion\\\">roRegion</a></td>\\n<td>The roRegion component is used to represent a subsection of a bitmap</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roscreen.md\\\" title=\\\"roScreen\\\">roScreen</a></td>\\n<td>The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"clearrgba-as-integer-as-void\\\">Clear(rgba as Integer) as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Clears the bitmap, and fills it with the specified RGBA color.</p>\\n<blockquote>\\n<p>The alpha channel will be filled into the bitmap, even when not used. Once AlphaEnable is set to true, the alpha channel will be taken into account when using this bitmap as a source. See SetAlphaEnable() for more information on alpha blending.</p>\\n</blockquote>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>rgba</td>\\n<td>Integer</td>\\n<td>The RGBA color to be used to fill the bitmap.</td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>Clear() is not the same as a DrawRect() for the entire bitmap. Clear() fills the bitmap with the specified RGBA; it does not perform any alpha blending operations.</p>\\n</blockquote>\\n<h3 id=\\\"getwidth-as-integer\\\">GetWidth() as Integer</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Gets the width of the bitmap.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The width of the bitmap in pixels.</p>\\n<h3 id=\\\"getheight-as-integer\\\">GetHeight() as Integer</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Gets the height of the bitmap in pixels.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The height of the bitmap in pixels.</p>\\n<h3 id=\\\"getbytearrayx-as-integer-y-as-integer-width-as-integer-height-as-integer-as-object\\\">GetByteArray(x as Integer, y as Integer, width as Integer, height as Integer) as Object</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Gets the RGBA pixel values for the specified rectangle.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The x-coordinate of the rectangle.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The y-coordinate of the rectangle.</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>Integer</td>\\n<td>The width of the rectangle.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>Integer</td>\\n<td>The height of the rectangle.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An roByteArray representing the RGBA pixel values for the specified rectangle.</p>\\n<h3 id=\\\"getpngx-as-integer-y-as-integer-width-as-integer-height-as-integer-as-object\\\">GetPng(x as Integer, y as Integer, width as Integer, height as Integer) as Object</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Gets PNG image data for the specified area of the bitmap. The PNG is in 32-bit RGBA format.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The x-coordinate of the rectangle.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The y-coordinate of the rectangle.</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>Integer</td>\\n<td>The width of the rectangle.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>Integer</td>\\n<td>The height of the rectangle.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>An roByteArray object containing PNG image data for the specified area of the bitmap. If the coordinates are out of bounds, or the PNG conversion fails for any reason, then invalid is returned</p>\\n<h4 id=\\\"example\\\">Example</h4>\\n<pre><code>Function SaveTestPng()\\n    w = 200 : h = 100\\n    bm = CreateObject(\\\"roBitmap\\\", {width: w, height: h, AlphaEnable: true})\\n    bm.DrawRect(10, 10, w-20, h-20, &#x26;hFF0000FF)\\n    bm.Finish()\\n    ba = bm.GetPng(0, 0, w, h)\\n    ba.WriteFile(\\\"tmp:/test.png\\\")\\n End Function\\n</code></pre>\\n<h3 id=\\\"getalphaenable-as-boolean\\\">GetAlphaEnable() as Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Checks if the alpha blending is enabled.</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether alpha blending is enabled.</p>\\n<h3 id=\\\"setalphaenableenable-as-boolean-as-void\\\">SetAlphaEnable(enable as Boolean) as Void</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Enables alpha blending when the source bitmap is the destination. The setting of the source bitmap's alpha enable is ignored.</p>\\n<p>When alpha blending is enabled, each pixel in the destination bitmap is set by combining the destination and source pixels according to the alpha value in the source bitmap (or rectangle). The destination alpha is not used. (In OpenGL this is referred to as GL_ONE_MINUS_SRC_ALPHA).</p>\\n<p>By default, alpha blending is off. Even when alpha blending is off, the alpha value is still present in the bitmap, and it must be passed when a function parameter is a color, which is always RGBA.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether alpha blending is enabled.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"example-1\\\">Example</h4>\\n<pre><code>Function Main()\\n    s=CreateObject(\\\"roScreen\\\")\\n    ' Clear to White with alpha fully opaque\\n    ' but alpha not actually ever used since it is the bottom most plane\\n    ' alpha is only looked at on \\\"source\\\" planes, not \\\"destination\\\".\\n    s.Clear(&#x26;hFFFFFFFF)\\n\\n    ' AlphaEnable must be enabled in the destination surface to have effect.\\n    s.SetAlphaEnable(true)\\n    bm=CreateObject(\\\"roBitmap\\\", {width:100, height: 100, alphaenable: false} )\\n    bm.Clear(&#x26;h0000FFFF) 'blue, fully opaque alpha\\n\\n    ' draw a blue rect in the upper left corner\\n    s.DrawObject(0,0, bm)\\n    s.Finish()\\n    Sleep(2000)\\n    s.Clear(&#x26;hFFFFFFFF)\\n    bm.Clear(&#x26;h0000FF00) 'blue, fully transparent alpha\\n\\n    ' draw a blue rect in the upper left corner\\n    ' but, since it is transparent, nothing will appear on the screen.\\n    s.DrawObject(0, 0, bm)\\n    s.Finish()\\n    Sleep(2000)\\n End Function\\n</code></pre>\\n<h3 id=\\\"drawrectx-as-integer-y-as-integer-width-as-integer-height-as-integer-rgba-as-integer-as-void\\\">DrawRect(x as Integer, y as Integer, width as Integer, height as Integer, rgba as Integer) as Void</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Fills the specified rectangle from left (x), top (y) to right (x + width), bottom (y + height) with the RGBA color.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The x-coordinate of the rectangle.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The y-coordinate of the rectangle.</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>Integer</td>\\n<td>The width of the rectangle.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>Integer</td>\\n<td>The height of the rectangle.</td>\\n</tr>\\n<tr>\\n<td>rgba</td>\\n<td>Integer</td>\\n<td>The RGBA color to be used to fill the rectangle.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"drawpointx-as-integer-y-as-integer-size-as-float-rgba-as-integer-as-void\\\">DrawPoint(x as Integer, y as Integer, size as Float, rgba as Integer) as Void</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Draws a point at (x,y) with the given size and RGBA color.</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The x-coordinate of the point.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The y-coordinate of the point.</td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td>Float</td>\\n<td>The size of the point.</td>\\n</tr>\\n<tr>\\n<td>rgba</td>\\n<td>Integer</td>\\n<td>The RGBA color of the point.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"drawlinexstart-as-integer-ystart-as-integer-xend-as-integer--yend-as-integer-rgba-as-integer-as-void\\\">DrawLine(xStart as Integer, yStart as Integer, xEnd as Integer,  yEnd as Integer, rgba as Integer) as Void</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Draws a line from (xStart, yStart) to (xEnd, yEnd) with RGBA color.</p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>xStart</td>\\n<td>Integer</td>\\n<td>The x-coordinate of the line's start point.</td>\\n</tr>\\n<tr>\\n<td>yStart</td>\\n<td>Integer</td>\\n<td>The y-coordinate of the line's start point.</td>\\n</tr>\\n<tr>\\n<td>xEnd</td>\\n<td>Integer</td>\\n<td>The x-coordinate of the line's end point.</td>\\n</tr>\\n<tr>\\n<td>yEnd</td>\\n<td>Integer</td>\\n<td>The y-coordinate of the line's end point.</td>\\n</tr>\\n<tr>\\n<td>rgba</td>\\n<td>Integer</td>\\n<td>The RGBA color of the line.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"drawobjectx-as-integer-y-as-integer-src-as-object-as-boolean\\\">DrawObject(x as Integer, y as Integer, src as Object) as Boolean</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Draws the source object, where src is an <a href=\\\"/docs/references/brightscript/components/robitmap.md\\\" title=\\\"roBitmap\\\">roBitmap</a> or an <a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegion\\\">roRegion</a> object, at position x,y.</p>\\n<h4 id=\\\"parameters-7\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The x-coordinate of the source object.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The y-coordinate of the source object.</td>\\n</tr>\\n<tr>\\n<td>src</td>\\n<td>Object</td>\\n<td>The <a href=\\\"/docs/references/brightscript/components/robitmap.md\\\" title=\\\"roBitmap\\\">roBitmap</a> or an <a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegion\\\">roRegion</a> object to be drawn.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A flag indicating whether the object was successfully drawn.</p>\\n<h3 id=\\\"drawscaledobjectx-as-integer-y-as-integer-scalex-as-float-scaley-as-float-src-as-object-as-boolean\\\">DrawScaledObject(x as Integer, y as Integer, scaleX as Float, scaleY as Float, src as Object) as Boolean</h3>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>Draws the source object, where src is an <a href=\\\"/docs/references/brightscript/components/robitmap.md\\\" title=\\\"roBitmap\\\">roBitmap</a> or an <a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegion\\\">roRegion</a> object, at position x,y, scaled in the x direction by scaleX and in the y direction by scaleY. scaleX and scaleY should each be greater than zero and less than one to reduce the object size, or greater than one to increase the object size</p>\\n<h4 id=\\\"parameters-8\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The x-coordinate of the source object.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The y-coordinate of the source object.</td>\\n</tr>\\n<tr>\\n<td>scaleX</td>\\n<td>Float</td>\\n<td>The x direction in which the source object is to be scaled.</td>\\n</tr>\\n<tr>\\n<td>scaleY</td>\\n<td>Float</td>\\n<td>The y direction in which the source object is to be scaled.</td>\\n</tr>\\n<tr>\\n<td>src</td>\\n<td>Object</td>\\n<td>The <a href=\\\"/docs/references/brightscript/components/robitmap.md\\\" title=\\\"roBitmap\\\">roBitmap</a> or an <a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegion\\\">roRegion</a> object to be drawn.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>A flag indicating whether the object was successfully drawn.</p>\\n<h3 id=\\\"drawscaledobjectx-as-integer-y-as-integer-scalex-as-float-scaley-as-float-src-as-object-rgba-as-integer-as-boolean\\\">DrawScaledObject(x as Integer, y as Integer, scaleX as Float, scaleY as Float, src as Object, rgba as Integer) as Boolean</h3>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Draws the source object, where src is an <a href=\\\"/docs/references/brightscript/components/robitmap.md\\\" title=\\\"roBitmap\\\">roBitmap</a> or an <a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegion\\\">roRegion</a> object, at position x,y, scaled in the x direction by scaleX and in the y direction by scaleY. scaleX and scaleY should each be greater than zero and less than one to reduce the object size, or greater than one to increase the object size.</p>\\n<h4 id=\\\"parameters-9\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The x-coordinate of the source object.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The y-coordinate of the source object.</td>\\n</tr>\\n<tr>\\n<td>scaleX</td>\\n<td>Float</td>\\n<td>The x direction in which the source object is to be scaled.</td>\\n</tr>\\n<tr>\\n<td>scaleY</td>\\n<td>Float</td>\\n<td>The y direction in which the source object is to be scaled.</td>\\n</tr>\\n<tr>\\n<td>src</td>\\n<td>Object</td>\\n<td>The <a href=\\\"/docs/references/brightscript/components/robitmap.md\\\" title=\\\"roBitmap\\\">roBitmap</a> or an <a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegion\\\">roRegion</a> object to be drawn.</td>\\n</tr>\\n<tr>\\n<td>rgba</td>\\n<td>Integer</td>\\n<td>The RGBA color of the source object.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>A flag indicating whether the object was successfully drawn.</p>\\n<h3 id=\\\"drawrotatedobjectx-as-integer-y-as-integer-theta-as-float-src-as-object-as-boolean\\\">DrawRotatedObject(x as Integer, y as Integer, theta as Float, src as Object) as Boolean</h3>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Draws the source object, where src is an <a href=\\\"/docs/references/brightscript/components/robitmap.md\\\" title=\\\"roBitmap\\\">roBitmap</a> or an <a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegion\\\">roRegion</a> object, at position x,y rotated by angle theta degrees.</p>\\n<h4 id=\\\"parameters-10\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The x-coordinate of the source object.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The y-coordinate of the source object.</td>\\n</tr>\\n<tr>\\n<td>Theta</td>\\n<td>Float</td>\\n<td>The position which to rotate the source object. This may be 0, 90, 180, and 270 degrees.</td>\\n</tr>\\n<tr>\\n<td>src</td>\\n<td>Object</td>\\n<td>The <a href=\\\"/docs/references/brightscript/components/robitmap.md\\\" title=\\\"roBitmap\\\">roBitmap</a> or an <a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegion\\\">roRegion</a> object to be drawn.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>A flag indicating whether the object was successfully drawn.</p>\\n<h3 id=\\\"drawtexttext-as-string-x-as-integer-y-as-integer-rgba-as-integer-font-as-object-as-boolean\\\">DrawText(text as String, x as Integer, y as Integer, rgba as Integer, font as Object) as Boolean</h3>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Draws the text at position (x,y) using the specified RGBA color and <a href=\\\"/docs/references/brightscript/components/rofont.md\\\" title=\\\"roFont\\\">roFont</a> font object. Text is drawn anti-aliased. The background image/color behind the text will show through the spaces and holes in the text. To have the text erase the background, make a call to <a href=\\\"#drawrectx-as-integer-y-as-integer-width-as-integer-height-as-integer-rgba-as-integer-as-void\\\">DrawRect()</a> before calling DrawText(). The size, bold, and italic attributes are specified when creating the <a href=\\\"/docs/references/brightscript/components/rofont.md\\\" title=\\\"roFont\\\">roFont</a>.</p>\\n<h4 id=\\\"parameters-11\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>String</td>\\n<td>The text to be drawn.</td>\\n</tr>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The x-coordinate of the source object.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The y-coordinate of the source object.</td>\\n</tr>\\n<tr>\\n<td>rgba</td>\\n<td>Integer</td>\\n<td>The color of the text.</td>\\n</tr>\\n<tr>\\n<td>font</td>\\n<td>Object</td>\\n<td>The <a href=\\\"/docs/references/brightscript/components/rofont.md\\\" title=\\\"roFont\\\">roFont</a> object to be used for the text.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>A flag indicating whether the object was successfully drawn.</p>\\n<h3 id=\\\"finish-as-void\\\">Finish() as Void</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>Realizes the bitmap by finishing all queued draw calls. Until Finish() is called, prior graphics operations may not be user visible. For example, they may be in the graphics display pipeline, or in a server queue.</p>\\n<blockquote>\\n<p>This method is synchronous; it does not return until all graphic operations are complete.</p>\\n<p>When working with an <a href=\\\"/docs/references/brightscript/components/roscreen.md\\\" title=\\\"roScreen\\\">roScreen</a> object, the <a href=\\\"/docs/references/brightscript/interfaces/ifscreen.md#swapbuffers-as-void\\\">ifScreen.SwapBuffers()</a> method should be used instead of this method.</p>\\n</blockquote>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifdsa.md":"{\n  \"content\": \"<h1 id=\\\"ifdsa\\\">ifDsa</h1>\\n<p><em>Available since Roku OS 10.5</em></p>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rodsa.md\\\">roDsa</a></td>\\n<td>The <strong>roDSA</strong> component provides support for the ECDSA and EdDSA (with Ed25519 form) digital signature algorithms. It is used to provide cryptographically signed evidence that an ad request originated from an actual Roku device.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"setprivatekeykeyfilename-as-string-as-integer\\\">SetPrivateKey(keyFileName as String) as Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Specifies the private key to be used for signing.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>keyFileName</td>\\n<td>String</td>\\n<td>Specifies the ECDSA or Ed25519 private key to be used for signing. Provide the key as a path, either in the package or a temporary path.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>An integer indicating whether the operation was successful:</p>\\n<ul>\\n<li>1 = The key is valid.</li>\\n<li>0 = The file does not contain a valid key.</li>\\n<li>-1 = The file was not found.</li>\\n</ul>\\n<h3 id=\\\"setprivatekeyfrombytearraykey-as-object-as-integer\\\">SetPrivateKeyFromByteArray(key as Object) as Integer</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Specifies the private key to be used for signing.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>key</td>\\n<td>roByteArray Object</td>\\n<td>Specifies the ECDSA or Ed25519 private key to be used for signing.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>An integer indicating whether the operation was successful:</p>\\n<ul>\\n<li>1 = The key is valid.</li>\\n<li>0 = The key is not valid.</li>\\n</ul>\\n<h3 id=\\\"setpublickeykeyfilename-as-string-as-integer\\\">SetPublicKey(keyFileName as String) as Integer</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Specifies the public key to be used for verification.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>keyFileName</td>\\n<td>String</td>\\n<td>Specifies the ECDSA or Ed25519 public key to be used for signing. Provide the key as a path, either in the package or a temporary path.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An integer indicating whether the operation was successful:</p>\\n<ul>\\n<li>1 = The key is valid.</li>\\n<li>0 = The file does not contain a valid key.</li>\\n<li>-1 = The file was not found.</li>\\n</ul>\\n<h3 id=\\\"setdigestalgorithmalgorithm-as-string-as-boolean\\\">SetDigestAlgorithm(algorithm as String) as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Specifies the digest algorithm to be used for signing and verification. </p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>algorithim</td>\\n<td>String</td>\\n<td>An OpenSSL string with the algorithm to be used: \\\"sha1\\\"\\\"sha224\\\"\\\"sha256\\\" (default)\\\"sha384\\\"\\\"sha512\\\". When using Ed25519 signing, the only supported digest algorithm is \\\"sha512\\\".</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful:</p>\\n<ul>\\n<li>true = algorithm was successfully set</li>\\n<li>false = string was not recognized</li>\\n</ul>\\n<h3 id=\\\"setsignalgorithmalgorithm-as-string-as-boolean\\\">SetSignAlgorithm(algorithm as String) as Boolean</h3>\\n<p>Specifies the signing algorithm to be used for signing and verification. </p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>algorithm</td>\\n<td>String</td>\\n<td>An OpenSSL string with the algorithm to be used:\\\"ECDSA\\\" (default).\\\"Ed25519\\\".</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful:</p>\\n<ul>\\n<li>true = algorithm was successfully set.</li>\\n<li>false = string was not recognized.</li>\\n</ul>\\n<h3 id=\\\"signmessage-as-object-as-object\\\">Sign(message as Object) as Object</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Generates a signature based on the specified message.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>message</td>\\n<td>roByteArray Object</td>\\n<td>The roByteArray to be signed.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>An roByteArray containing the signature. If an error occurs, \\\"invalid\\\" is returned.</p>\\n<p>Errors are printed to the BrightScript Debug Console. Common errors include:</p>\\n<ul>\\n<li>digest is empty</li>\\n<li>SetPrivateKey() was not yet called</li>\\n<li>out of memory</li>\\n<li>the digest could not be signed</li>\\n</ul>\\n<h3 id=\\\"verifymessage-as-object-signature-as-object-as-integer\\\">Verify(message as Object, signature as Object) as Integer</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Verifies the given message and signature. The message and the signature should both be roByteArrays.</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>message</td>\\n<td>roByteArray Object</td>\\n<td>The message to be verified.</td>\\n</tr>\\n<tr>\\n<td>signature</td>\\n<td>roByteArray Object</td>\\n<td>The signature to be verified.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>Indicates the result of the validation. This may be one of the following values:</p>\\n<ul>\\n<li>1 = The signature matches.</li>\\n<li>-1 = The SetPublicKey() method was not yet called.</li>\\n<li>-2 = The digest is empty.</li>\\n<li>-3 = Internal error.</li>\\n<li>-4 = Incorrect digest/sign algorithms</li>\\n<li>0 = The signature does not match.</li>\\n</ul>\\n<h2 id=\\\"examples\\\">Examples</h2>\\n<h3 id=\\\"using-ecdsa-signing-with-sha256-digest\\\">Using ECDSA signing with SHA256 digest</h3>\\n<h4 id=\\\"signing\\\">Signing</h4>\\n<pre><code>msg_ba = CreateObject(\\\"roByteArray\\\")\\n\\n' ...populate bytearray with the message...\\n\\ndsa = CreateObject(\\\"roDSA\\\")\\n\\n' ... save private key to tmp:/privateKey.txt\\n\\ndsa.SetDigestAlgorithm(\\\"sha256\\\")\\ndsa.SetSignAlgorithm(\\\"ECDSA\\\")\\ndsa.SetPrivateKey(\\\"tmp:/privateKey.txt\\\")\\n\\nsignature = dsa.Sign(msg_ba)\\n</code></pre>\\n<h4 id=\\\"verification\\\">Verification</h4>\\n<pre><code>msg_ba = CreateObject(\\\"roByteArray\\\")\\n\\n' ...populate bytearray with the message...\\n\\nsig_ba = CreateObject(\\\"roByteArray\\\")\\n\\n' ...populate bytearray with the signature...\\n\\ndsa = CreateObject(\\\"roDSA\\\")\\n\\n' ... save public key to tmp:/publicKey.txt\\n\\ndsa.SetDigestAlgorithm(\\\"sha256\\\")\\ndsa.SetSignAlgorithm(\\\"ECDSA\\\")\\ndsa.SetPublicKey(\\\"tmp:/publicKey.txt\\\")\\n\\nresult = dsa.Verify(msg_ba, sig_ba)\\n\\nif (result = 1)\\n    print \\\"Verified\\\"\\nelse\\n    print \\\"Not verified, result = \\\" result\\nend if\\n</code></pre>\\n<h3 id=\\\"using-ed25519-signing-with-sha512-digest\\\">Using Ed25519 signing with SHA512 digest</h3>\\n<h4 id=\\\"signing-1\\\">Signing</h4>\\n<pre><code>msg_ba = CreateObject(\\\"roByteArray\\\")\\n\\n' ...populate bytearray with the message...\\n\\ndsa = CreateObject(\\\"roDSA\\\")\\n\\n' ... save private key to tmp:/privateKey.txt\\n\\ndsa.SetDigestAlgorithm(\\\"sha512\\\")\\ndsa.SetSignAlgorithm(\\\"Ed25519\\\")\\ndsa.SetPrivateKey(\\\"tmp:/privateKey.txt\\\")\\n\\nsignature = dsa.Sign(msg_ba)\\n</code></pre>\\n<h4 id=\\\"verification-1\\\">Verification</h4>\\n<pre><code>msg_ba = CreateObject(\\\"roByteArray\\\")\\n\\n' ...populate bytearray with the message...\\n\\nsig_ba = CreateObject(\\\"roByteArray\\\")\\n\\n' ...populate bytearray with the signature...\\n\\ndsa = CreateObject(\\\"roDSA\\\")\\n\\n' ... save public key to tmp:/publicKey.txt\\n\\ndsa.SetDigestAlgorithm(\\\"sha512\\\")\\ndsa.SetSignAlgorithm(\\\"Ed25519\\\")\\ndsa.SetPublicKey(\\\"tmp:/publicKey.txt\\\")\\n\\nresult = dsa.Verify(msg_ba, sig_ba)\\n\\nif (result = 1)\\n    print \\\"Verified\\\"\\nelse\\n    print \\\"Not verified, result = \\\" result\\nend if\\n</code></pre>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifenum.md":"{\n  \"content\": \"<h1 id=\\\"ifenum\\\">ifEnum</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roarray.md\\\" title=\\\"roArray\\\">roArray</a></td>\\n<td>An array stores an indexed collection of BrightScript objects</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roassociativearray.md\\\" title=\\\"roAssociativeArray\\\">roAssociativeArray</a></td>\\n<td>An associative array (also known as a map, dictionary or hash table) allows objects to be associated with string keys</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/robytearray.md\\\" title=\\\"roByteArray\\\">roByteArray</a></td>\\n<td>The byte array component is used to contain and manipulate an arbitrary array of bytes</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rolist.md\\\" title=\\\"roList\\\">roList</a></td>\\n<td>The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/romessageport.md\\\" title=\\\"roMessagePort\\\">roMessagePort</a></td>\\n<td>A Message Port is the place messages (events) are sent</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roxmllist.md\\\" title=\\\"roXMLList\\\">roXMLList</a></td>\\n<td>Contains a list of roXML objects</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"reset-as-void\\\">Reset() as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Resets the current position to the first element of the enumeration.</p>\\n<h3 id=\\\"next-as-dynamic\\\">Next() as Dynamic</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Increments the position of an enumeration. If the last element of the enumeration is returned, this method sets the current position to indicate that it is now past the end. </p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The value at the current position of the enumeration. If the current position is already past the end (that is, the last element has already been returned by a previous call to this method), \\\"invalid\\\" is returned.</p>\\n<h3 id=\\\"isnext-as-boolean\\\">IsNext() as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Checks whether the current position is not past the end of the enumeration.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether the current position is not past the end (true), or is past the end (false). </p>\\n<h3 id=\\\"isempty-as-boolean\\\">IsEmpty() as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Checks whether the enumeration contains no elements.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the enumeration contains no elements (true), or contains elements (false). </p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifevpcipher.md":"{\n  \"content\": \"<h1 id=\\\"ifevpcipher\\\">ifEVPCipher</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roevpcipher.md\\\" title=\\\"roEVPCipher\\\">roEVPCipher</a></td>\\n<td>The EVP Cipher component provides an interface to the OpenSSL EVP library of symmetric cipher commands</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"setupencrypt-as-boolean-format-as-string-key-as-string-iv-as-string-padding-as-integer-as-integer\\\">Setup(encrypt as Boolean, format as String, key as String, iv as String, padding as Integer) as Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Configures and initializes a new cipher context.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>encrypt</td>\\n<td>Boolean</td>\\n<td>True for encryption; false for decryption</td>\\n</tr>\\n<tr>\\n<td>format</td>\\n<td>String</td>\\n<td>Cipher format string, from openssl, listed at roEVPCipher</td>\\n</tr>\\n<tr>\\n<td>key</td>\\n<td>String</td>\\n<td>A hex-encoded key</td>\\n</tr>\\n<tr>\\n<td>iv</td>\\n<td>String</td>\\n<td>A hex-encoded initialization vector, which can be an empty string</td>\\n</tr>\\n<tr>\\n<td>padding</td>\\n<td>Integer</td>\\n<td>1 to use standard padding; 0 for no padding)</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>Returns 0 on success or non-zero on failure.</p>\\n<h3 id=\\\"reinit-as-integer\\\">Reinit() as Integer</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Reinitializes an existing cipher context. This can be called to reuse an existing <a href=\\\"/docs/references/brightscript/components/roevpdigest.md\\\" title=\\\"roEVPCipher\\\">roEVPCipher</a> object to encrypt new data</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>Returns 0 on success or non-zero on failure.</p>\\n<h3 id=\\\"processbytes-as-object-as-object\\\">Process(bytes as Object) as Object</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Processes the included <a href=\\\"/docs/references/brightscript/components/robytearray.md\\\">roByteArray</a> containing encrypted/decrypted data.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>bytes</td>\\n<td>Object</td>\\n<td>An <a href=\\\"/docs/references/brightscript/components/robytearray.md\\\">roByteArray</a> containing data that is encrypted or decrypted.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An <a href=\\\"/docs/references/brightscript/components/robytearray.md\\\" title=\\\"roByteArray\\\">roByteArray</a> containing the result.</p>\\n<h4 id=\\\"example\\\">Example</h4>\\n<pre><code>  x = evp.Process(bytes)\\n</code></pre>\\n<p>is equivalent to</p>\\n<pre><code>  evp.Reinit()\\n  x = evp.Update(bytes)\\n  x = x + evp.Final()\\n</code></pre>\\n<h3 id=\\\"updatebytes-as-object-as-object\\\">Update(bytes as Object) as Object</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Updates the included <a href=\\\"/docs/references/brightscript/components/robytearray.md\\\">roByteArray</a> containing encrypted/decrypted data.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>bytes</td>\\n<td>Object</td>\\n<td>An <a href=\\\"/docs/references/brightscript/components/robytearray.md\\\">roByteArray</a> containing data that is encrypted or decrypted.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>An <a href=\\\"/docs/references/brightscript/components/robytearray.md\\\" title=\\\"roByteArray\\\">roByteArray</a> containing a subset of the result. Some or all of the result may not be returned until the next call to Update().</p>\\n<h3 id=\\\"final-as-object\\\">Final() as Object</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Signals that all data has been submitted by previous calls to Update().</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>The last remaining encrypted or decrypted bytes.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifevpdigest.md":"{\n  \"content\": \"<h1 id=\\\"ifevpdigest\\\">ifEVPDigest</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roevpdigest.md\\\" title=\\\"roEVPDigest\\\">roEVPDigest</a></td>\\n<td>The EVP Digest component provides an interface to the OpenSSL EVP library of message digest algorithms</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"setupdigesttype-as-string-as-integer\\\">Setup(digestType as String) as Integer</h3>\\n<h4 id=\\\"descriptions\\\">Descriptions</h4>\\n<p>Initializes a new message digest context. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>digestType</td>\\n<td>String</td>\\n<td>The supported digest algorithm from openssl, listed at roEVPDigest.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>Returns 0 on success or non-zero on failure.</p>\\n<h3 id=\\\"reinit-as-integer\\\">Reinit() as Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Re-initializes an existing message digest context. This can be called to reuse an existing <a href=\\\"/docs/references/brightscript/components/roevpdigest.md\\\" title=\\\"roEVPDigest\\\">roEVPDigest</a> object to digest new data.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>Returns 0 on success or non-zero on failure.</p>\\n<h3 id=\\\"processbytes-as-object-as-string\\\">Process(bytes as Object) as String</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Digests the provided data. </p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>bytes</td>\\n<td>Object</td>\\n<td>An <a href=\\\"/docs/references/brightscript/components/robytearray.md\\\">roByteArray</a> containing digested data</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A Hex string (Digested array data).</p>\\n<h4 id=\\\"example\\\">Example</h4>\\n<pre><code>  x = evp.Process(bytes)\\n</code></pre>\\n<p>is equivalent to</p>\\n<pre><code>  evp.Reinit()\\n  evp.Update(bytes)\\n  x = evp.Final()\\n</code></pre>\\n<h3 id=\\\"updatebytes-as-object-as-void\\\">Update(bytes as Object) as Void</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Adds more data to be digested.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>bytes</td>\\n<td>Object</td>\\n<td>An <a href=\\\"/docs/references/brightscript/components/robytearray.md\\\">roByteArray</a> containing data to be added to the current digest</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"final-as-string\\\">Final() as String</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Returns the digest of data passed in by previous calls to <a href=\\\"#updatebytes-as-object-as-void\\\">Update()</a> as a hex string.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>Hex string (digest of data)</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/iffilesystem.md":"{\n  \"content\": \"<h1 id=\\\"iffilesystem\\\">ifFileSystem</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rofilesystem.md\\\" title=\\\"roFile System\\\">roFileSystem</a></td>\\n<td>The roFilesystem component implements common filesystem inspection and modification routines</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<p>The format of file and directory pathnames is described on the <a href=\\\"/docs/developer-program/getting-started/architecture/file-system.md\\\" title=\\\"File System\\\">File System</a> page.</p>\\n<h3 id=\\\"getvolumelist-as-object\\\">GetVolumeList() as Object</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the available volumes on the device.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>An <a href=\\\"/docs/references/brightscript/components/rolist.md\\\" title=\\\"roList\\\">roList</a> containing strings representing the available volumes.</p>\\n<h3 id=\\\"getdirectorylistingdirpath-as-string-as-object\\\">GetDirectoryListing(dirPath as String) as Object</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the file names in the specified directory path.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>dirPath</td>\\n<td>String</td>\\n<td>The directory path from which to get a list of file names.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>An <a href=\\\"/docs/references/brightscript/components/rolist.md\\\" title=\\\"roList\\\">roList</a> of strings representing the directory listing of names in dirPath.</p>\\n<h3 id=\\\"finddirpath-as-string-regex-as-string-as-object\\\">Find(dirPath as String, regEx as String) as Object</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns the file names in the specified directory path matching the provided regex.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>dirPath</td>\\n<td>String</td>\\n<td>The directory path from which to get a list of file names.</td>\\n</tr>\\n<tr>\\n<td>regex</td>\\n<td>String</td>\\n<td>The regex to be used to search for files.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An <a href=\\\"/docs/references/brightscript/components/rolist.md\\\" title=\\\"roList\\\">roList</a> of Strings representing the directory listing of names in dirPath that match the regex.</p>\\n<h3 id=\\\"findrecursedirpath-as-string-regex-as-string-as-object\\\">FindRecurse(dirPath as String, regEx as String) as Object</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Returns the file names in the specified directory path and any sudirectories matching the provided regex.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>dirPath</td>\\n<td>String</td>\\n<td>The directory path from which to get a list of file names.</td>\\n</tr>\\n<tr>\\n<td>regex</td>\\n<td>String</td>\\n<td>The regex to be used to search for files.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>An <a href=\\\"/docs/references/brightscript/components/rolist.md\\\" title=\\\"roList\\\">roList</a> of Strings representing the directory listing of names in dirPath that match the regex. Each item in the list is the name of the file relative to dirPath.</p>\\n<h3 id=\\\"matchpath-as-string-pattern-as-string-as-object\\\">Match(path as String, pattern as String) as Object</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns the file names in the specified directory path matching the provided shell-like pattern. This method is similar to the <a href=\\\"#finddirpath-as-string-regex-as-string-as-object\\\">Find()</a> method except that it uses shell-like pattern matching rather than regular expression matching.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The directory path from which to get a list of file names.</td>\\n</tr>\\n<tr>\\n<td>pattern</td>\\n<td>String</td>\\n<td>The shell-like pattern to be used to search for files. The pattern may contain wildcards such as <code>*</code>and <code>?</code>.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>An <a href=\\\"/docs/references/brightscript/components/rolist.md\\\" title=\\\"roList\\\">roList</a> of Strings representing the directory listing of names in dirPath that match the shell-like pattern.</p>\\n<h3 id=\\\"existspath-as-string-as-boolean\\\">Exists(path as String) as Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Checks if the specified directory path exists on the device.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The directory path to be checked.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A flag indicating whether the specified path directory exists on the device.</p>\\n<h3 id=\\\"statpath-as-string-as-object\\\">Stat(path as String) as Object</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns the keys in the specified directory path.</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The directory path to be checked.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>An <a href=\\\"/docs/references/brightscript/components/roassociativearray.md\\\" title=\\\"roAssociativeArray\\\">roAssociativeArray</a> containing the following key-value pairs for the specified path:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Values</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>type</td>\\n<td>String</td>\\n<td><ul>\\n<li>\\\"file\\\"</li>\\n<li>\\\"directory\\\"</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td>Integer</td>\\n<td>Number of bytes in the file. Only relevant for type \\\"file\\\".</td>\\n</tr>\\n<tr>\\n<td>permissions</td>\\n<td>String</td>\\n<td><ul>\\n<li>\\\"rw\\\": read/write</li>\\n<li>\\\"r\\\": read-only</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getvolumeinfopath-as-string-as-object\\\">GetVolumeInfo(path as String) as Object</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Returns information about the specified volume. The function can only be called on external volumes; internal volumes do not return meaningful information.</p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The external volume for which to get information. This should be specified as the volume name plus a directory separator (for example, \\\"ext1:/\\\").</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>An roAssociativeArray containing the following key-value pairs about the specified external volume:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Values</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>blocksize</td>\\n<td>Integer</td>\\n<td>The size of the filesystem blocks in bytes.</td>\\n</tr>\\n<tr>\\n<td>blocks</td>\\n<td>Integer</td>\\n<td>The number of blocks in the filesystem.</td>\\n</tr>\\n<tr>\\n<td>free-blocks</td>\\n<td>Integer</td>\\n<td>The number of unused blocks in the filesystem.</td>\\n</tr>\\n<tr>\\n<td>usedblocks</td>\\n<td>Integer</td>\\n<td>The number of used blocks in the filesystem.</td>\\n</tr>\\n<tr>\\n<td>label</td>\\n<td>String</td>\\n<td>The volume label, if any.</td>\\n</tr>\\n<tr>\\n<td>mounttime</td>\\n<td>Integer</td>\\n<td>The time (in UTC format) when the volume specified in the path was last mounted. This field will be set to 0 if the drive is unknown or unmounted. <br /><br /><em>Available since Roku OS 9.2</em></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"createdirectorypath-as-string-as-boolean\\\">CreateDirectory(path as String) as Boolean</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Creates the directory specified by the path parameter. All directories in path except the last one must already exist; that is, only one directory can be created.</p>\\n<h4 id=\\\"parameters-7\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The path of the directory to be created.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>A flag indicating whether the path was successfully created.</p>\\n<h3 id=\\\"deletepath-as-string-as-boolean\\\">Delete(path as String) as Boolean</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Permanently removes the file or directory specified by the path parameter. If path is a directory, its contents are recursively removed.</p>\\n<h4 id=\\\"parameters-8\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The path of the directory to be deleted.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>A flag indicating whether the path was successfully deleted.</p>\\n<h3 id=\\\"copyfilefrompath-as-string-topath-as-string-as-boolean\\\">CopyFile(fromPath as String, toPath as String) as Boolean</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Copies the files from one directory to another.</p>\\n<h4 id=\\\"parameters-9\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fromPath</td>\\n<td>String</td>\\n<td>The source path containing the files to be copied.</td>\\n</tr>\\n<tr>\\n<td>toPath</td>\\n<td>String</td>\\n<td>The target path to which files are to be copied.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-10\\\">Return Value</h4>\\n<p>A flag indicating whether the files were successfully copied.</p>\\n<h3 id=\\\"renamefrompath-as-string-topath-as-string-as-boolean\\\">Rename(fromPath as String, toPath as String) as Boolean</h3>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>Renames the directory.</p>\\n<h4 id=\\\"parameters-10\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fromPath</td>\\n<td>String</td>\\n<td>The current name of the path to be renamed.</td>\\n</tr>\\n<tr>\\n<td>toPath</td>\\n<td>String</td>\\n<td>The new name of the path.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-11\\\">Return Value</h4>\\n<p>A flag indicating whether the directory was successfully renamed. If the provided target directory (<strong>toPath</strong>) exists, it is not overwritten; instead the operation fails and this method returns false</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/iffloat.md":"{\n  \"content\": \"<h1 id=\\\"iffloat\\\">ifFloat</h1>\\n<p>Interface equivalent for intrinsic type Float</p>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rofloat.md\\\" title=\\\"roFloat\\\">roFloat</a></td>\\n<td>Object equivalent for intrinsic type 'Float'</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getfloat-as-float\\\">GetFloat() As Float</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Gets the float value stored in the calling Float object. </p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The float value stored in the calling Float object. </p>\\n<h3 id=\\\"setfloatvalue-as-float-as-void\\\">SetFloat(value As Float) As Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Sets the calling Float object to the specified float value. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>value</td>\\n<td>Float</td>\\n<td>The float value to be set on the calling Float object.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/iffont.md":"{\n  \"content\": \"<h1 id=\\\"iffont\\\">ifFont</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rofont.md\\\" title=\\\"roFont\\\">roFont</a></td>\\n<td>roFont represents a particular font, from a font-family (eg. Arial), with a particular pixel size (e.g 20), and a particular boldness or italicness</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getonelineheight-as-integer\\\">GetOneLineHeight() as Integer</h3>\\n<h4 id=\\\"descriptions\\\">Descriptions</h4>\\n<p>Returns the number of pixels from one line to the next when drawing with this font.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The number of pixels.</p>\\n<h3 id=\\\"getonelinewidthtext-as-string-maxwidth-as-integer-as-integer\\\">GetOneLineWidth(text as String, MaxWidth as Integer) as Integer</h3>\\n<h4 id=\\\"descriptions-1\\\">Descriptions</h4>\\n<p>Returns the number of pixels from one line to the next when drawing with this font. Each glyph and the needed spacing between glyphs is measured.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>String</td>\\n<td>The subject text.</td>\\n</tr>\\n<tr>\\n<td>MaxWidth</td>\\n<td>Integer</td>\\n<td>Generally, the amount of pixels available for rendering on this line.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The number of pixels. This will be less than provided MaxWidth.</p>\\n<h3 id=\\\"getascent-as-integer\\\">GetAscent() as Integer</h3>\\n<h4 id=\\\"descriptions-2\\\">Descriptions</h4>\\n<p>Returns the number of pixels of the font ascent.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>The number of pixels.</p>\\n<h3 id=\\\"getdescent-as-integer\\\">GetDescent() as Integer</h3>\\n<h4 id=\\\"descriptions-3\\\">Descriptions</h4>\\n<p>Returns the number of pixels of the font descent.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>The number of pixels.</p>\\n<h3 id=\\\"getmaxadvance-as-integer\\\">GetMaxAdvance() as Integer</h3>\\n<h4 id=\\\"descriptions-4\\\">Descriptions</h4>\\n<p>Returns the font maximum advance width in pixels.</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>The number of pixels.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/iffontregistry.md":"{\n  \"content\": \"<h1 id=\\\"iffontregistry\\\">ifFontRegistry</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rofontregistry.md\\\" title=\\\"roFontRegistry\\\">roFontRegistry</a></td>\\n<td>The roFontRegistry object allows you to create roFont objects, either using the default font or using fonts in TrueType or OpenType files packaged with your application</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"registerpath-as-string-as-boolean\\\">Register(path as String) as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Registers a font file (.ttf or .otf format). Each font file defines one or more font families (usually one).</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the fonts in the specified file were successfully installed. </p>\\n<h3 id=\\\"getfamilies-as-object\\\">GetFamilies() as Object</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the names of the font families that have been registered via the <a href=\\\"#registerpath-as-string-as-boolean\\\">Register()</a> method. Each name can be passed as the first parameter to the <a href=\\\"#getfontfamily-as-string-size-as-integer-bold-as-boolean-italic-as-boolean-as-object\\\">GetFont()</a> method.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>An <a href=\\\"/docs/references/brightscript/components/roarray.md\\\" title=\\\"roArray\\\">roArray</a> of strings that represent the names of the font families that have been registered.</p>\\n<h3 id=\\\"getfontfamily-as-string-size-as-integer-bold-as-boolean-italic-as-boolean-as-object\\\">GetFont(family as String, size as Integer, bold as Boolean, italic as Boolean) as Object</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns a font from the specified family, selected from the fonts previously registered via the <a href=\\\"#registerpath-as-string-as-boolean\\\">Register()</a> method. </p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>family</td>\\n<td>String</td>\\n<td>The font family name.</td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td>Integer</td>\\n<td>The requested font size, in pixels, not points.</td>\\n</tr>\\n<tr>\\n<td>bold</td>\\n<td>Boolean</td>\\n<td>\\\"bold\\\" specifies a font variant that may be (but is not always) supported by the font file.</td>\\n</tr>\\n<tr>\\n<td>italic</td>\\n<td>Boolean</td>\\n<td>\\\"italic\\\" specifies a font variant that may be (but is not always) supported by the font file.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An <a href=\\\"/docs/references/brightscript/components/rofont.md\\\" title=\\\"roFont\\\">roFont</a> object representing a font from the specified family.</p>\\n<h3 id=\\\"getdefaultfont-as-object\\\">GetDefaultFont() as Object</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Returns the system font at its default size. Calling this method is the same as calling the <a href=\\\"#getdefaultfontsize-as-integer-bold-as-boolean-italic-as-boolean-as-object\\\">GetDefaultFont()</a> method with the following syntax: <code>reg.GetDefaultFont(reg.GetDefaultFontSize(), false, false)</code>.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>The system font as its default size. </p>\\n<h3 id=\\\"getdefaultfontsize-as-integer-bold-as-boolean-italic-as-boolean-as-object\\\">GetDefaultFont(size as Integer, bold as Boolean, italic as Boolean) as Object</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns the system font. The system font is always available, even if the <a href=\\\"#registerpath-as-string-as-boolean\\\">Register()</a> method has not been called</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>size</td>\\n<td>Integer</td>\\n<td>The requested font size, in pixels, not points.</td>\\n</tr>\\n<tr>\\n<td>bold</td>\\n<td>Boolean</td>\\n<td>\\\"bold\\\" specifies a font variant that may be (but is not always) supported by the font file.</td>\\n</tr>\\n<tr>\\n<td>italic</td>\\n<td>Boolean</td>\\n<td>\\\"italic\\\" specifies a font variant that may be (but is not always) supported by the font file.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>An roFont object representing the system font. </p>\\n<h3 id=\\\"getdefaultfontsize-as-integer\\\">GetDefaultFontSize() as Integer</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Returns the default font size.</p>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>The default font size.</p>\\n<h3 id=\\\"getfamily-as-string-size-as-integer-bold-as-boolean-italic-as-boolean-as-string\\\">Get(family as String, size as Integer, bold as Boolean, italic as Boolean) as String</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns a valid font string.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>family</td>\\n<td>String</td>\\n<td>The font family name.</td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td>Integer</td>\\n<td>The requested font size, in pixels, not points.</td>\\n</tr>\\n<tr>\\n<td>bold</td>\\n<td>Boolean</td>\\n<td>\\\"bold\\\" specifies a font variant that may be (but is not always) supported by the font file.</td>\\n</tr>\\n<tr>\\n<td>italic</td>\\n<td>Boolean</td>\\n<td>\\\"italic\\\" specifies a font variant that may be (but is not always) supported by the font file.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>A valid font string.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/iffunction.md":"{\n  \"content\": \"<h1 id=\\\"iffunction\\\">ifFunction</h1>\\n<p>Interface equivalent for intrinsic type Function.</p>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rofunction.md\\\" title=\\\"roFunction\\\">roFunction</a></td>\\n<td>Object equivalent for intrinsic type Function</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getsub-as-function\\\">GetSub() As Function</h3>\\n<p>You can get a plain (non-referenced) version of the value by calling the this method.</p>\\n<h3 id=\\\"setsubvalue-as-function-as-void\\\">SetSub(value As Function) As Void</h3>\\n<p>This method can be used for in/out function parameters. If you have a boxed object, you can change the value in the object via this method, without changing the variable reference itself.</p>\\n<pre><code>Function Main()\\n    f1 = Foo\\n    print \\\"f1 \\\"; Type(f1); \\\"=\\\"; f1\\n\\n    f2 = Box(Foo)\\n    print \\\"f2 \\\"; Type(f2); \\\"=\\\"; f2\\n\\n    print \\\"adjusting f2\\\"\\n    AdjustFun(f2)\\n\\n    print \\\"f2 \\\"; Type(f2); \\\"=\\\"; f2\\n    print \\\"f2()\\\"; \\\"=\\\"; f2()\\n\\n    f3 = f2.GetSub()\\n    print \\\"f3 \\\"; Type(f3); \\\"=\\\"; f3\\nEnd Function\\n\\nFunction AdjustFun(f)\\n    f.SetSub(Bar)\\nEnd Function\\n\\nFunction Foo()\\n    return \\\"--Foo--\\\"\\nEnd Function\\n\\nFunction Bar()\\n    return \\\"--Bar--\\\"\\nEnd Function\\n==>\\nf1 Function=&#x3C;Function: foo>\\nf2 roFunction=&#x3C;Function: foo>\\nadjusting f2\\nf2 roFunction=&#x3C;Function: bar>\\nf2()=--Bar--\\nf3 Function=&#x3C;Function: bar>\\n</code></pre>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifgetmessageport.md":"{\n  \"content\": \"<h1 id=\\\"ifgetmessageport\\\">ifGetMessagePort</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rohdmistatus.md\\\" title=\\\"roHdmiStatus\\\">roHdmiStatus</a></td>\\n<td>The HDMI status component provides an interface to the current HDMI operational status</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roscreen.md\\\" title=\\\"roScreen\\\">roScreen</a></td>\\n<td>The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rourltransfer.md\\\" title=\\\"roUrlTransfer\\\">roUrlTransfer</a></td>\\n<td>A roUrlTransfer object transfers data to or from remote servers specified by URLs</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rotexttospeech.md\\\" title=\\\"roTextToSpeech\\\">roTextToSpeech</a></td>\\n<td>The roTextToSpeech component provides text to speech capabilities to applications</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getmessageport-as-object\\\">GetMessagePort() as Object</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the message port (if any) currently associated with the object</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The message port.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifhdmistatus.md":"{\n  \"content\": \"<h1 id=\\\"ifhdmistatus\\\">ifHdmiStatus</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rohdmistatus.md\\\" title=\\\"roHdmiStatus\\\">roHdmiStatus</a></td>\\n<td>The HDMI status component provides an interface to the current HDMI operational status</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"isconnected-as-boolean\\\">IsConnected() as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Checks whether the HDMI or MHL output is connected to an HDMI device.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the HDMI or MHL output is connected to an HDMI device.</p>\\n<h3 id=\\\"gethdcpversion-as-string\\\">GetHdcpVersion() as String</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the version number of the currently established HDCP link.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The version number of the HDCP link: 1.4 or 2.2.</p>\\n<p>If an empty string is returned, HDCP is disabled. In this case, videos that require HDCP encryption cannot be played. Videos not requiring encryption should still be playable.</p>\\n<h3 id=\\\"ishdcpactiveversion-as-string-as-boolean\\\">IsHdcpActive(version as String) as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Checks if the current established HDCP link is the specified version or higher</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>version</td>\\n<td>String</td>\\n<td>The HDCP link version to be checked (for example, \\\"1.4\\\" or \\\"2.2\\\").</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the current established HDCP link is the specified <code>version</code>.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifhmac.md":"{\n  \"content\": \"<h1 id=\\\"ifhmac\\\">ifHMAC</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rohmac.md\\\" title=\\\"roHMAC\\\">roHMAC</a></td>\\n<td>The HMAC component provides an interface to the OpenSSL HMAC functions</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"setupdigesttype-as-string-key-as-object-as-integer\\\">Setup(digestType as String, key as Object) as Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Initializes new HMAC context. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>digestType</td>\\n<td>String</td>\\n<td>Selects one of the supported digest algorithms, as documented in <a href=\\\"/docs/references/brightscript/components/roevpdigest.md\\\" title=\\\"roEVPDigest\\\">roEVPDigest</a>.</td>\\n</tr>\\n<tr>\\n<td>key</td>\\n<td>Object</td>\\n<td>An roByteArray containing the key for the MAC.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>An integer indicating whether the function succeeded (0) or failed (1).</p>\\n<h3 id=\\\"reinit-as-integer\\\">Reinit() as Integer</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Re-initializes an existing HMAC context. This can be called to reuse an existing roHMAC object to authenticate new data. </p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>An integer indicating whether the function succeeded (0) or failed (1).</p>\\n<h3 id=\\\"processmessage-as-object-as-object\\\">Process(message as Object) as Object</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Digests the data in an array generates a MAC. Calling this method is the same as making the following calls:</p>\\n<pre><code>hmac.Reinit()\\nhmac.Update(message)\\nmac = hmac.Final()\\n</code></pre>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>message</td>\\n<td>Object</td>\\n<td>An <a href=\\\"/docs/references/brightscript/components/robytearray.md\\\" title=\\\"roByteArray\\\">roByteArray</a> with the data to be digested.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An <a href=\\\"/docs/references/brightscript/components/robytearray.md\\\" title=\\\"roByteArray\\\">roByteArray</a> containing the generated MAC.</p>\\n<h3 id=\\\"updatepartialmesssage-as-object-as-void\\\">Update(partialMesssage as Object) as Void</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Adds more data to be digested. The data in the array is added to the current digest.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>partialMesssage</td>\\n<td>Object</td>\\n<td>An <a href=\\\"/docs/references/brightscript/components/robytearray.md\\\" title=\\\"roByteArray\\\">roByteArray</a> with the additional data to be digested.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"final-as-object\\\">Final() as Object</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns an <a href=\\\"/docs/references/brightscript/components/robytearray.md\\\" title=\\\"roByteArray\\\">roByteArray</a> containing the final MAC.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>The final MAC.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifhttpagent.md":"{\n  \"content\": \"<h1 id=\\\"ifhttpagent\\\">ifHttpAgent</h1>\\n<p>The ifHttpAgent methods modify the way that URLs are accessed</p>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roappmanager.md\\\" title=\\\"roAppManager\\\">roAppManager</a></td>\\n<td>The Application Manager APIs set application level attributes, which mostly affect the look-and-feel of the application</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roaudioplayer.md\\\" title=\\\"roAudioPlayer\\\">roAudioPlayer</a></td>\\n<td>The Audio Player object provides the ability to setup the playing of a series of audio streams</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNode\\\">roSGNode</a></td>\\n<td>The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rotexturemanager.md\\\" title=\\\"roTextureManager\\\">roTextureManager</a></td>\\n<td>The Texture Manager provides a set of API's for managing an roBitmap cache.</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rotexturerequest.md\\\" title=\\\"roTextureRequest\\\">roTextureRequest</a></td>\\n<td>An roTextureRequest is used to make requests to the roTextureManager</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rourltransfer.md\\\" title=\\\"roUrlTransfer\\\">roUrlTransfer</a></td>\\n<td>A roUrlTransfer object transfers data to or from remote servers specified by URLs</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rovideoplayer.md\\\" title=\\\"roVideoPlayer\\\">roVideoPlayer</a></td>\\n<td>The roVideoPlayer component implements a video player with more programmatic control, but less user control than the roVideoScreen component</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"addheadername-as-string-value-as-string-as-boolean\\\">AddHeader(name as String, value as String) as Boolean</h3>\\n<p>Adds the specified HTTP header to the list of headers that will be sent in the HTTP request.</p>\\n<p>Certain well known headers such as User-Agent, Content-Length, and so on are automatically sent. The application may override the values for these headers if needed (for example, some servers may require a specific user agent string).</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name</td>\\n<td>String</td>\\n<td>The name of the HTTP header to be added to the list of headers. <br /><br />If \\\"x-roku-reserved-dev-id\\\" is passed as the name, the value parameter is ignored and in its place, the devid of the currently running channel is used as the value. This allows the developer's server to know which client app is talking to it. <br /><br />Any other headers with names beginning with \\\"x-roku-reserved-\\\" are reserved and may not be set.</td>\\n</tr>\\n<tr>\\n<td>value</td>\\n<td>String</td>\\n<td>The value of the HTTP header being added.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the HTTP header was successfully added.</p>\\n<h3 id=\\\"setheadersnamevaluemap-as-object-as-boolean\\\">SetHeaders(nameValueMap as Object) as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sets the HTTP headers to be sent in the HTTP request.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>nameValueMap</td>\\n<td>Object</td>\\n<td>An associative array containing the HTTP headers and values to be included in the HTTP request. <br /><br />If \\\"x-roku-reserved-dev-id\\\" is passed as a key, the value parameter is ignored and in its place, the devid of the currently running channel is used as the value. This allows the developer's server to know which client app is talking to it. <br /><br />Any other headers with names beginning with \\\"x-roku-reserved-\\\" are reserved and may not be set.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether the HTTP header was successfully set.</p>\\n<h3 id=\\\"initclientcertificates-as-boolean\\\">InitClientCertificates() as Boolean</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Initializes the object to be sent to the Roku client certificate.</p>\\n<blockquote>\\n<p>The Roku Developer Dashboard includes a link for downloading the <a href=\\\"https://developer.roku.com/certificate\\\">RokuTV Certification Authority</a>. This CA can be passed to a channel through this function.</p>\\n</blockquote>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the object sent to to the Roku client certificate was successfully initialized.</p>\\n<h3 id=\\\"setcertificatesfilepath-as-string-as-boolean\\\">SetCertificatesFile(path as String) as Boolean</h3>\\n<p>Set the certificates file used for SSL to the specified .pem file.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The directory path of the .pem file to be used.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether the certificate was successfully set.</p>\\n<h3 id=\\\"setcertificatesdepthdepth-as-integer-as-void\\\">SetCertificatesDepth(depth as Integer) as Void</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Sets the maximum depth of the certificate chain that will be accepted.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>depth</td>\\n<td>Integer</td>\\n<td>The maximum depth to be used.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"enablecookies-as-void\\\">EnableCookies() as Void</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Enables any Set-Cookie headers returned from the request to be interpreted and the resulting cookies to be added to the cookie cache.</p>\\n<h3 id=\\\"getcookiesdomain-as-string-path-as-string-as-object\\\">GetCookies(domain as String, path as String) as Object</h3>\\n<h4 id=\\\"descripton\\\">Descripton</h4>\\n<p>Returns any cookies from the cookie cache that match the specified domain and path. Expired cookies are not returned.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>domain</td>\\n<td>String</td>\\n<td>The domain of the cookies to be retrieved.  To match all domains, provide an empty string.</td>\\n</tr>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The path of the cookies to be retrieved.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>An roArray of roAssociativeArrays, where each associative array represents a cookie. The roAssociativeArrays contain the following key-value pairs:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Version</td>\\n<td>Integer</td>\\n<td>Cookie version number</td>\\n</tr>\\n<tr>\\n<td>Domain</td>\\n<td>String</td>\\n<td>Domain to which cookie applies</td>\\n</tr>\\n<tr>\\n<td>Path</td>\\n<td>String</td>\\n<td>Path to which cookie applies</td>\\n</tr>\\n<tr>\\n<td>Name</td>\\n<td>String</td>\\n<td>Name of the cookie</td>\\n</tr>\\n<tr>\\n<td>Value</td>\\n<td>String</td>\\n<td>Value of the cookie</td>\\n</tr>\\n<tr>\\n<td>Expires</td>\\n<td>roDateTime</td>\\n<td>Cookie expiration date, if any</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"addcookiescookies-as-object-as-boolean\\\">AddCookies(cookies as Object) as Boolean</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Adds the specified cookies to the cookie cache.</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>cookies</td>\\n<td>Object</td>\\n<td>An roArray of roAssociativeArrays, where each associative array represents a cookie to be added. Each associative array must contain the following key-value pairs: <table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Version</td>\\n<td>Integer</td>\\n<td>Cookie version number</td>\\n</tr>\\n<tr>\\n<td>Domain</td>\\n<td>String</td>\\n<td>Domain to which cookie applies</td>\\n</tr>\\n<tr>\\n<td>Path</td>\\n<td>String</td>\\n<td>Path to which cookie applies</td>\\n</tr>\\n<tr>\\n<td>Name</td>\\n<td>String</td>\\n<td>Name of the cookie</td>\\n</tr>\\n<tr>\\n<td>Value</td>\\n<td>String</td>\\n<td>Value of the cookie</td>\\n</tr>\\n<tr>\\n<td>Expires</td>\\n<td>roDateTime</td>\\n<td>Cookie expiration date, if any</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A flag indicating whether the cookies were successfully added to the cache.</p>\\n<h3 id=\\\"clearcookies-as-void\\\">ClearCookies() as Void</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Removes all cookies from the cookie cache.</p>\\n<h2 id=\\\"server-side-configuration-of-ssl-mutual-authentication-on-apache\\\">Server Side Configuration of SSL Mutual Authentication on Apache</h2>\\n<ol>\\n<li>\\n<p>Create a Self-Signed CA (Certificate Authority) root Certificate</p>\\n<ul>\\n<li>\\n<p>Create the root CA private key (remember the password chosen). This is needed to sign new certificates.</p>\\n</li>\\n<li>\\n<p>Create the root CA.</p>\\n<pre><code>  openssl genrsa -out rootCA.key 4096\\n  openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 825 -out rootCA.crt\\n</code></pre>\\n</li>\\n</ul>\\n</li>\\n</ol>\\n<ol start=\\\"2\\\">\\n<li>\\n<p>OpenSSL Server Cert</p>\\n<ul>\\n<li>\\n<p>Create the Web Server's key (remember the password chosen).</p>\\n</li>\\n<li>\\n<p>Create the Web Server's Cert Req.</p>\\n</li>\\n<li>\\n<p>Sign the Web Server's Cert Req with the CA Cert. In the <em>extfile</em> keyword, provide the path to the config file.</p>\\n<pre><code>  openssl genrsa -out &#x3C;server>.key 2048\\n  openssl req -new -key &#x3C;server>.key -out &#x3C;server>.csr -config &#x3C;server>.conf\\n  openssl x509 -req -in &#x3C;server>.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out &#x3C;server>.crt -days 825 -sha256 -extfile &#x3C;config_file_path> -extensions req_ext\\n</code></pre>\\n</li>\\n</ul>\\n</li>\\n</ol>\\n<pre><code>    **Sample config file**: The following demonstrates a config file to be referenced by the *extfile* keyword\\n\\n        [req]\\n        default_bits = 2048\\n        prompt = no\\n        default_md = sha256\\n        req_extensions = req_ext\\n        distinguished_name = dn\\n        [dn]\\n        C = &#x3C;COUNTRY>\\n        ST = &#x3C;STATE>\\n        L = &#x3C;CITY>\\n        O = &#x3C;ORGANIZATION>\\n        OU = &#x3C;ORGANIZATIONAL_UNIT>\\n        emailAddress = &#x3C;CONTACT>\\n        CN = &#x3C;DOMAIN>.com\\n        [req_ext]\\n        subjectAltName = @alt_names\\n        [alt_names]\\n        DNS.1 = &#x3C;DOMAIN>.com\\n        DNS.2 = &#x3C;DOMAIN_ALT>.com\\n</code></pre>\\n<ol start=\\\"3\\\">\\n<li>\\n<p>Install Cert in Apache</p>\\n<ul>\\n<li>Optionally, you can remove the passwd from the keyfile if you don't want to enter the passwd for testWEB every time Apache starts</li>\\n<li>Edit /etc/httpd/conf.d/ssl.conf</li>\\n<li>Edit /etc/httpd/conf/httpd.conf</li>\\n<li>Restart Apache</li>\\n</ul>\\n</li>\\n</ol>\\n<pre><code># Install Cert in Apache\\n    sudo mkdir /etc/httpd/certs\\n    sudo cp /opt/openssl/testCA/server/certificates/testWEB.CRT /etc/httpd/certs\\n    sudo cp /opt/openssl/testCA/server/keys/testWEB.KEY /etc/httpd/certs\\n    sudo cp sudo cp /opt/openssl/testCA/CA/testCA.CRT /etc/httpd/certs\\n\\n# Remove the passwd from the keyfile (to avoid entering it for testWEB every time Apache starts)\\n    sudo cp /etc/httpd/certs/testWEB.KEY\\n    /etc/httpd/certs/testWEB.KEY.orig\\n    sudo openssl rsa -in /etc/httpd/certs/testWEB.KEY.orig -out /etc/httpd/certs/testWEB.KEY\\n\\n# Editing ssl.conf\\n\\n# Configure your server cert:\\n    SSLCertificateFile /etc/httpd/certs/testWEB.CRT\\n    SSLCertificateKeyFile /etc/httpd/certs/testWEB.KEY\\n\\n# Configure client cert authentication:\\n    SSLCACertificateFile /etc/httpd/certs/cacert.pem\\n\\n# from roku sdk\\n    SSLVerifyClient require\\n    SSLVerifyDepth 1\\n\\n# Editing httpd.conf\\n\\n# In &#x3C;Directory> &#x3C;/Directory> tags where your video resides:`\\n# Checking the x-roku-reserved-dev-id header value assures that it is\\n# your package trying to connect to this directory.\\n\\n# You can find the dev-id of your brightscript package by going to the developer page on your Roku box, and selecting \\\"Utilities\\\".\\n# On the \\\"Utilities\\\" page, select \\\"Choose File\\\", enter the passwd for that pkg, and click \\\"Inspect\\\"\\n# Copy the value for the \\\"Dev ID:\\\" parameter and paste it here:\\n    SetEnvIf x-roku-reserved-dev-id 6bb22ba64125f6da56fa4b7d6f2199a970d06672 let_roku_in`\\n    SSLRequireSSL`\\n    Order Deny,Allow`\\n    Deny from all`\\n    Allow from env=let_roku_in`\\n\\n# Restarting Apache\\n    sudo service httpd restart\\n</code></pre>\\n<ol start=\\\"4\\\">\\n<li>\\n<p>Place your video in your Apache directory configured in step 3 above.</p>\\n</li>\\n<li>\\n<p>Modify the simplevideoplayer application to access the secure video:</p>\\n<ul>\\n<li>Add the testCA.CRT (The Certificate Authority cert) file to the simplevideoplayer/source directory.</li>\\n<li>In the appMain.brs:displyVideo() function, change the URL and video meta-data to match the video you put on your server in step 4).</li>\\n<li>Right before the \\\"video.SetContent(videoclip)\\\" line, add the following calls:</li>\\n</ul>\\n</li>\\n</ol>\\n<pre><code>      video.Addheader(\\\"x-roku-reserved-dev-id\\\",\\\"\\\")\\n      video.SetCertificatesFile(\\\"pkg:/source/testCA.CRT\\\")\\n      video.InitClientCertificates()\\n</code></pre>\\n<ol start=\\\"6\\\">\\n<li>Test the authentication with and without the code in step 5 above. If any of the three authentication methods above are ommitted you should get access denied. Note that you cannot successfully access the video until you've built a package, uploaded it to the channel store, and are running that channel via a channel code. A sideloaded developer app does not properly negotiate client certs or send the enforced dev-id value for the x-roku-reserved-dev-id header.</li>\\n</ol>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifimagemetadata.md":"{\n  \"content\": \"<h1 id=\\\"ifimagemetadata\\\">ifImageMetadata</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roimagemetadata.md\\\" title=\\\"roImageMetadata\\\">roImageMetadata</a></td>\\n<td>The roImageMetadata component provides developers access to image file metadata included in many .jpg EXIF headers</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"seturlurl-as-string-as-void\\\">SetUrl(url as String) as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sets the URL to the image. Only file URLs are supported</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>url</td>\\n<td>String</td>\\n<td>The URL of the image.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getmetadata-as-object\\\">GetMetadata() as Object</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns a set of simple and common image metadata</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>An associative array containing the following key-value pairs with image metadata:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>width</td>\\n<td>Integer</td>\\n<td>Width of the image in pixels</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>Integer</td>\\n<td>Height of the image in pixels</td>\\n</tr>\\n<tr>\\n<td>orientation</td>\\n<td>String</td>\\n<td>\\\"portrait\\\" or \\\"landscape\\\"</td>\\n</tr>\\n<tr>\\n<td>datetime</td>\\n<td>roDateTime</td>\\n<td>The creation time of the image such as the time a photo was taken</td>\\n</tr>\\n<tr>\\n<td>comment</td>\\n<td>String</td>\\n<td>User specified comment string. This is often referred to as a caption</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getthumbnail-as-object\\\">GetThumbnail() as Object</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns a thumbnail image if one is embedded in the image metadata and the corresponding associative array with image data.  This only generates a thumbnail if one exists. </p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>An associative array that with <strong>bytes</strong> and <strong>type</strong> keys with the image data: </p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>bytes</td>\\n<td>roByteArray</td>\\n<td>The image data</td>\\n</tr>\\n<tr>\\n<td>Type</td>\\n<td>Integer</td>\\n<td>The type of image, which is most likely \\\"image/jpeg\\\", but could also be  \\\"image/png\\\".</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getrawexif-as-object\\\">GetRawExif() as Object</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Returns all of the raw EXIF metadata.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An associative array with all of the raw EXIF metadata. See the <a href=\\\"/docs/references/brightscript/components/roimagemetadata.md#exif-background\\\">EXIF section</a> for details about EXIF metadata.</p>\\n<h3 id=\\\"getrawexiftagifd-as-integer-tagnum-as-integer-as-dynamic\\\">GetRawExifTag(ifd as Integer, tagnum as Integer) as Dynamic</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns the raw data for an Exif tag. The method provides direct access to a specific raw EXIF tag</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>ifd</td>\\n<td>Integer</td>\\n<td>The ifd of the Exif tag.</td>\\n</tr>\\n<tr>\\n<td>tagnum</td>\\n<td>Integer</td>\\n<td>The tag number of the Exif tag.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>The raw data of an Exif tag. It the Exif tag doesn't exist it returns invalid.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifinput.md":"{\n  \"content\": \"<h1 id=\\\"ifinput\\\">ifInput</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roinput.md\\\" title=\\\"roInput\\\">roInput</a></td>\\n<td>An roInput object can be used to receive events sent from a network client using the External Control Protocol (ECP), as described in External Control API</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getmessageport-as-object\\\">GetMessagePort() as Object</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the message port (if any) currently associated with the object.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The message port value.</p>\\n<h3 id=\\\"setmessageportport-as-object-as-void\\\">SetMessagePort(port as Object) as Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Sets the roMessagePort to be used to receive events.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>port</td>\\n<td>Object</td>\\n<td>The port to be used to receive events.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"enabletransportevents-as-boolean\\\">EnableTransportEvents() as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Registers a channel to receive <code>roInput transport</code> events, which are voice commands sent via the Roku remote control, Roku mobile app, or a virtual assistant such as Amazon Alexa or Google Assistant. </p>\\n<p>Voice commands include the following: \\\"fast forward\\\", \\\"next, \\\"play\\\", \\\"pause\\\", \\\"replay\\\", \\\"rewind\\\", \\\"seek\\\", and \\\"startover\\\". Once you register your channel to receive transport events, your channel must call the <code>EventResponse()</code> method to handle them.</p>\\n<p>See <a href=\\\"/docs/developer-program/media-playback/voice-controls/transport-controls.md\\\">Implementing Voice Controls</a> for more information.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether transport event notifications were successfully registered.  </p>\\n<h3 id=\\\"eventresponseroassociativearray-aa-as-boolean\\\">EventResponse(roAssociativeArray aa) as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Marks a transport command as handled, unhandled, or handled with an error. </p>\\n<p>If your channel has registered for handling transport events (by calling the <code>EnableTransportEvents()</code>function on an <code>roInput</code> object), it must call this method within 5 seconds of receiving a transport event. This is because the Roku OS needs to know whether a transport command has been handled, unhandled, or handled with an error. If a transport event is marked as unhandled, the Roku OS can provide the default behavior. If a transport event is marked as handled with an error, the Roku OS can provide on-screen feedback.</p>\\n<p>If your channel has registered for transport events, but does not call this method within 5 seconds of receiving a transport event, the event is considered unhandled.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<p>This method takes an AssociativeArray with two fields: <strong>id</strong> and <strong>status</strong>. The <strong>id</strong> field specifies the transport ID event; the <strong>status</strong> specifies whether the event was handled, handled with an error, or unhandled.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Parameter</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Id</td>\\n<td>String</td>\\n<td>The unique ID of the transport event.</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>String</td>\\n<td>Indicates whether the event was handled successfully, handled with an error, or unhandled. This may be one of the following values: <br /><br /><ul>\\n<li>\\\"error.generic\\\" (<em>Available since Roku OS 10.0</em>). No active media is available to fulfill the voice command. Passing this status displays \\\"That is not available\\\" in the Roku Voice heads-up display. This can be used in cases, for example, when a channel receives a \\\"forward\\\" or \\\"next\\\" command, but there is no content to fast forward or play next, respectively.</li>\\n<li>\\\"unhandled\\\". The channel is not handling the event. The default behavior is executed by the Roku OS, if defined.</li>\\n<li>\\\"error\\\".  The channel failed to handle the event in that instance.</li>\\n<li>\\\"error.ad\\\". The transport command failed because an ad is playing.</li>\\n<li>\\\"error.channel\\\". The channel does not support this command in any context.</li>\\n<li>\\\"error.live\\\". The transport command failed because the content is live. </li>\\n<li>\\\"error.no-media\\\". There is no media active.</li>\\n<li>\\\"error.redundant\\\". The transport command does not change the current state (\\\"pause\\\" command sent when the content is already paused)</li>\\n<li>\\\"success\\\". The channel handled the event successfully.</li>\\n<li>\\\"success.seek-start\\\".  A seek command was handled successfully, but the seek duration was before the beginning.</li>\\n<li>\\\"success.seek-end\\\". A seek command was handled successfully but the seek location was past the end.</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the event response operation was successful.  </p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifint.md":"{\n  \"content\": \"<h1 id=\\\"ifint\\\">ifInt</h1>\\n<blockquote>\\n<p>Interface equivalent for intrinsic type 'Integer'</p>\\n</blockquote>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roint.md\\\" title=\\\"roInt\\\">roInt</a></td>\\n<td>Object equivalent for intrinsic type Integer</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getint-as-integer\\\">GetInt() As Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Gets the integer value stored in the calling Integer object. </p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The integer value stored in the calling Integer object. </p>\\n<h3 id=\\\"setintvalue-as-integer-as-void\\\">SetInt(value As Integer) As Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Sets the calling Integer object to the specified integer value. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>value</td>\\n<td>Integer</td>\\n<td>The integer value to be set on the calling Integer object.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifintops.md":"{\n  \"content\": \"<h1 id=\\\"ifintops\\\">ifIntOps</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roint.md\\\" title=\\\"roInt\\\">roInt</a></td>\\n<td>Object equivalent for intrinsic type Integer</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"tostr-as-string\\\">ToStr() As String</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the integer value formatted as a decimal string. No leading space is appended for non-negative numbers.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A decimal string.</p>\\n<h4 id=\\\"example\\\">Example</h4>\\n<p><code>5.ToStr() = \\\"5\\\", (-5).ToStr() = \\\"-5\\\"</code></p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/iflist.md":"{\n  \"content\": \"<h1 id=\\\"iflist\\\">ifList</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rolist.md\\\" title=\\\"roList\\\">roList</a></td>\\n<td>The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roxmllist.md\\\" title=\\\"roXMLList\\\">roXMLList</a></td>\\n<td>Contains a list of roXML objects</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"resetindex-as-boolean\\\">ResetIndex() As Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Resets the current index or position in list to the head element.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the index has been reset.</p>\\n<h3 id=\\\"addtailtval-as-dynamic-as-void\\\">AddTail(tval As Dynamic) As Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Adds an element to the tail of the list.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>AddTail</td>\\n<td>Dynamic</td>\\n<td>The element to be added to the tail of the list.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"addheadtval-as-dynamic-as-void\\\">AddHead(tval As Dynamic) As Void</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Adds an element to the head of the list.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>AddHead</td>\\n<td>Dynamic</td>\\n<td>The element to be added to the head of the list.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"removeindex-as-dynamic\\\">RemoveIndex() As Dynamic</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Removes the entry at the current index or position from the list and increments the index or position in the list.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The entry removed from the list. This method returns invalid if the end of the list is reached.</p>\\n<h3 id=\\\"getindex-as-dynamic\\\">GetIndex() As Dynamic</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Gets the entry at current index or position from the list and increments the index or position in the list.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>The entry retrieved from the list. This method returns invalid if the end of the list is reached.</p>\\n<h3 id=\\\"removetail-as-dynamic\\\">RemoveTail() As Dynamic</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Removes the entry at the tail of the list.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>The entry removed from the tail of the list. </p>\\n<h3 id=\\\"removehead-as-dynamic\\\">RemoveHead() As Dynamic</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Removes the entry at the head of the list.</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>The entry removed from the head of the list. </p>\\n<h3 id=\\\"gettail-as-dynamic\\\">GetTail() As Dynamic</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Retrieves the entry at the tail of the list.</p>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>The entry retrieved from the tail of the list. </p>\\n<h3 id=\\\"gethead-as-dynamic\\\">GetHead() As Dynamic</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Retrieves the entry at the head of the list.</p>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>The entry retrieved from the head of the list. </p>\\n<h3 id=\\\"count-as-integer\\\">Count() As Integer</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Returns the number of elements in the list.</p>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>The number of elements in the list. </p>\\n<h3 id=\\\"clear-as-void\\\">Clear() As Void</h3>\\n<p>Removes all elements from the list</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/iflisttoarray.md":"{\n  \"content\": \"<h1 id=\\\"iflisttoarray\\\">ifListToArray</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rolist.md\\\" title=\\\"roList\\\">roList</a></td>\\n<td>The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roxmllist.md\\\" title=\\\"roXMLList\\\">roXMLList</a></td>\\n<td>Contains a list of roXML objects</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"toarray-as-object\\\">ToArray() As Object</h3>\\n<blockquote>\\n<p>This function is available in Roku OS 8.0 or later</p>\\n</blockquote>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns an roArray containing the same elements as the list.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p> An element list as an array.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/iflocalization.md":"{\n  \"content\": \"<h1 id=\\\"iflocalization\\\">ifLocalization</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rolocalization.md\\\" title=\\\"roLongInteger\\\">roLocalization</a></td>\\n<td>The roLocalization object provides functions to assist in localization</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getpluralstringcount-as-integer-zerostring-as-string-onestring-as-string-pluralstring-as-string-as-string\\\">GetPluralString(count as Integer, zeroString as String, oneString as String, pluralString as String) as String</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Replaces \\\"^n\\\" in pluralString with count and returns the result.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>count</td>\\n<td>Integer</td>\\n</tr>\\n<tr>\\n<td>zeroString</td>\\n<td>String</td>\\n</tr>\\n<tr>\\n<td>oneString</td>\\n<td>String</td>\\n</tr>\\n<tr>\\n<td>pluralString</td>\\n<td>String</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The result of the operation. If count is 0, this returns zeroString. If count is 1, it returns oneString.</p>\\n<h4 id=\\\"examples\\\">Examples</h4>\\n<p><code>GetPluralString(count, \\\"0 books\\\", \\\"1 book\\\", \\\"^n books\\\")</code></p>\\n<h3 id=\\\"getlocalizedassetdirname-as-string-filename-as-string-as-string\\\">GetLocalizedAsset(dirName as String, fileName as String) as String</h3>\\n<p>Returns an appropriate asset path based on the user's currently selected language.</p>\\n<p>If the user's current language setting is French (fr_CA), and the file exists, then this would return \\\"pkg:/locale/fr_CA/images/MyImage.png\\\".</p>\\n<p>If the file does not exist in the current locale directory, then this will search the directory locale/default/. If it exists there, it will return it; otherwise, it will check the directory locale/en_US/. If it still can't find the file, then it will return an empty string.</p>\\n<p>A list of currently supported locales can be found at <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#getcurrentlocale-as-string\\\" title=\\\"ifDeviceInfo.GetCurrentLocale\\\">ifDeviceInfo.GetCurrentLocale</a>.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>dirName</td>\\n<td>String</td>\\n<td>The name of a subdirectory in the directory pkg:/locale/XX_YY/ where XX_YY is the current language setting.</td>\\n</tr>\\n<tr>\\n<td>fileName</td>\\n<td>String</td>\\n<td>The name of the file.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>An asset path. </p>\\n<h4 id=\\\"example\\\">Example</h4>\\n<p><code>GetLocalizedAsset(\\\"images\\\", \\\"MyImage.png\\\")</code>.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/iflongint.md":"{\n  \"content\": \"<h1 id=\\\"iflongint\\\">ifLongInt</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rolonginteger.md\\\" title=\\\"roLongInteger\\\">roLongInteger</a></td>\\n<td>Object equivalent for intrinsic type LongInteger</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getlongint-as-longinteger\\\">GetLongInt() As LongInteger</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Gets the longinteger value stored in the calling Longinteger object. </p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The longinteger value stored in the calling Loninteger object. </p>\\n<h3 id=\\\"setlongintvalue-as-longinteger-as-void\\\">SetLongInt(value As LongInteger) As Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Sets the calling Longinteger object to the specified longinteger value. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>value</td>\\n<td>Longinteger</td>\\n<td>The longinteger value to be set on the calling Longinteger object.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifmessageport.md":"{\n  \"content\": \"<h1 id=\\\"ifmessageport\\\">ifMessagePort</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/romessageport.md\\\" title=\\\"roMessagePort\\\">roMessagePort</a></td>\\n<td>A Message Port is the place messages (events) are sent</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"waitmessagetimeout-as-integer-as-dynamic\\\">WaitMessage(timeout as Integer) as Dynamic</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Waits until an event object is available or timeout milliseconds have passed.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>timeout</td>\\n<td>Integer</td>\\n<td>The number of milliseconds to wait for a message. If this parameter is set to 0, this method waits indefinitely for a message, with no timeout.<br /><br />The native <a href=\\\"/docs/references/brightscript/language/global-utility-functions.md#waittimeout-as-integer-port-as-object-as-object\\\">wait()</a> function can also be used to get the event object which WaitMessage() would return.  This means that the following two statements have the same effect:<br /><pre><code>msg = port.WaitMessage(timeout)\\nmsg = wait(timeout, port)\\n</code></pre></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p> If an event is available, it is returned. If the timeout expires, invalid is returned. </p>\\n<h3 id=\\\"getmessage-as-dynamic\\\">GetMessage() as Dynamic</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>If an event object is available, it is returned.  Otherwise invalid is returned.  The method returns immediately in either case and does not wait.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>An event object.</p>\\n<h3 id=\\\"peekmessage-as-dynamic\\\">PeekMessage() as Dynamic</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>This method is similar to the <a href=\\\"#getmessage-as-dynamic\\\">GetMessage()</a> method, but the returned object (if not invalid) remains in the message queue.  A later call to <a href=\\\"#waitmessagetimeout-as-integer-as-dynamic\\\">WaitMessage()</a>, <a href=\\\"#getmessage-as-dynamic\\\">GetMessage()</a> or PeekMessage() will return the same message.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An event object.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifmicrophone.md":"{\n  \"content\": \"<h1 id=\\\"ifmicrophone\\\">ifMicrophone</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/romicrophone.md\\\" title=\\\"roMicrophone\\\">roMicrophone</a></td>\\n<td>The roMicrophone API allows channel applications to receive audio data from the user’s microphone-supported remote control device or mobile phone</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"canrecord-as-boolean\\\">CanRecord() as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Indicates whether the platform and paired remote control can be requested to open the microphone.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the microphone can be opened.</p>\\n<h3 id=\\\"setpromptprompt-as-string-as-void\\\">SetPrompt(prompt as String) as Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Sets the text to be displayed in the system microphone UI.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>prompt</td>\\n<td>String</td>\\n<td>The text to be displayed in the system microphone UI.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"recordtofilewavfilepath-as-string-as-boolean\\\">RecordToFile(wavFilePath as String) as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Opens the microphone and records to create a WAV file at the specified output file path. Only tmp:/ paths are supported.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>wavFilePath</td>\\n<td>String</td>\\n<td>The file path where the WAV file is to be stored.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether the recording was performed and saved successfully.</p>\\n<h3 id=\\\"startrecording-as-boolean\\\">StartRecording() as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Opens the microphone and begins streaming microphone events to the channel. The channel must have called the <a href=\\\"/docs/references/brightscript/interfaces/ifsetmessageport.md#setmessageportport-as-object--as-void\\\">SetMessagePort()</a> method previously. </p>\\n<p>While the microphone is open, <a href=\\\"/docs/references/brightscript/events/romicrophoneevent.md#isrecordinginfo-as-boolean\\\">RecordingInfo</a> events will be sent periodically with audio data. When the microphone is closed, a <a href=\\\"/docs/references/brightscript/events/romicrophoneevent.md#isrecordingdone-as-boolean\\\">RecordingDone</a> event will be sent. See <a href=\\\"/docs/references/brightscript/events/romicrophoneevent.md\\\">roMicrophoneEvent</a> for detailed information.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the microphone was opened successfully.</p>\\n<h3 id=\\\"stoprecording-as-boolean\\\">StopRecording() as Boolean</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Stops recording and closes the microphone. This method is useful if the microphone was previously opened via the <a href=\\\"#startrecording-as-boolean\\\">StartRecording()</a> method and the channel needs to cancel the current recording prematurely, (for example, the duration limit was reached or an application error). </p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether the microphone was opened and closed successfully.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifpath.md":"{\n  \"content\": \"<h1 id=\\\"ifpath\\\">ifPath</h1>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/ropath.md\\\" title=\\\"roPath\\\">roPath</a></td>\\n<td>The roPath component provides developers an easy way to create valid file system paths</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"changepath-as-string-as-boolean\\\">Change(path as String) as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Modifies or changes the current path via the specified relative or absolute path.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Return Type</th>\\n<th>Parameters</th>\\n<th>Return Value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Change</td>\\n<td>Boolean</td>\\n<td>${changeparamTable}</td>\\n<td>Returns true if the resulting path is valid, otherwise false</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>path</td>\\n<td>String</td>\\n<td>The new relative or absolute file system path to be used.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the path was successfully changed. </p>\\n<h3 id=\\\"isvalid-as-boolean\\\">IsValid() as Boolean</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Checks whether the current path is valid (the path is correctly formed). This does not check whether the file actually exists.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether the current path is valid. </p>\\n<h3 id=\\\"split-as-object\\\">Split() as Object</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An <a href=\\\"/docs/references/brightscript/components/roassociativearray.md\\\" title=\\\"roAssociativeArray\\\">roAssociativeArray</a> that contains the following keys: <table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>basename</td>\\n<td>String</td>\\n<td>The filename, without parent directories or extension.</td>\\n</tr>\\n<tr>\\n<td>extension</td>\\n<td>String</td>\\n<td>The filename, with extension, without parent directories.</td>\\n</tr>\\n<tr>\\n<td>filename</td>\\n<td>String</td>\\n<td>The filename.</td>\\n</tr>\\n<tr>\\n<td>parent</td>\\n<td>String</td>\\n<td>The parent directory, or empty if in a root directory.</td>\\n</tr>\\n<tr>\\n<td>phy</td>\\n<td>String</td>\\n<td>The PHY volume.</td>\\n</tr>\\n</tbody>\\n</table></p>\\n<h4 id=\\\"example-brightscript-debugger-interactive-shell\\\">Example (Brightscript Debugger Interactive Shell)</h4>\\n<pre><code>> mypath = CreateObject(\\\"roPath\\\", \\\"pkg:/source/appMain.brs\\\")\\n> ? myPath.Split()\\nparent: pkg:/source/\\nextension: .brs\\nphy: pkg:\\nbasename: appMain\\nfilename: appMain.brs\\n</code></pre>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifprogramguide.md":"{\n  \"content\": \"<h1 id=\\\"ifprogramguide\\\">ifProgramGuide</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roprogramguide.md\\\">roProgramGuide</a></td>\\n<td>Represents Electronic Program Guide (EPG) information from the tuner.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getchannelsid-as-integer-as-object\\\">GetChannels(id as Integer) as Object</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the list of logical channel numbers on which the given program ID can be found.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>id</td>\\n<td>Integer</td>\\n<td>The program ID containing the channels to be returned.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getnownextprogramschannel-as-string-as-dynamic\\\">GetNowNextPrograms(channel as String) as Dynamic</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns details about the current and next program on a channel. </p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>channel</td>\\n<td>String</td>\\n<td>The channel number for which programs are to be retrieved.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>An roAssociativeArray containing two roArray components: one for the current program and another for the next program on the channel. Each roArray contains the following key/value pairs detailing the program:   </p>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>Key</strong></th>\\n<th><strong>Type</strong></th>\\n<th><strong>Value</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name</td>\\n<td>String</td>\\n<td>Descriptive name for the program.</td>\\n</tr>\\n<tr>\\n<td>id</td>\\n<td>String</td>\\n<td>ID for the program, not guaranteed to be unique,   suitable for passing to GetChannels.</td>\\n</tr>\\n<tr>\\n<td>description</td>\\n<td>String</td>\\n<td>Longer description for the program.</td>\\n</tr>\\n<tr>\\n<td>category</td>\\n<td>String</td>\\n<td>Genre of the program, such as Drama, Sport, and so forth.</td>\\n</tr>\\n<tr>\\n<td>start_time</td>\\n<td>roDateTime</td>\\n<td>Starting time of this program.</td>\\n</tr>\\n<tr>\\n<td>duration</td>\\n<td>Integer</td>\\n<td>Length of this program in seconds.</td>\\n</tr>\\n<tr>\\n<td>subtitles</td>\\n<td>String</td>\\n<td>(Optional) If present indicates this program has subtitles.</td>\\n</tr>\\n<tr>\\n<td>format</td>\\n<td>roAssociativeArray</td>\\n<td>Indicates the media format, with the following keys, all of which are optional. The value for each key is the Boolean string   \\\"true\\\" to indicate the format option.</td>\\n</tr>\\n<tr>\\n<td>Rating</td>\\n<td>roAssociativeArray</td>\\n<td>(Optional) Rating and parental guidance information.</td>\\n</tr>\\n<tr>\\n<td>link</td>\\n<td>roAssociativeArray</td>\\n<td>(Optional) Links to other related programs.</td>\\n</tr>\\n<tr>\\n<td>content_metadata</td>\\n<td>Content Meta­ Data  object</td>\\n<td>Name, description, start_time, duration and format of   this program.</td>\\n</tr>\\n<tr>\\n<td>Rating Region UK DTT</td>\\n<td>String</td>\\n<td><strong>UK digital terrestrial TV only</strong><br /><br />(Optional) A JSON object encoded as string representing viewer guidance type and description.</td>\\n</tr>\\n<tr>\\n<td>Link HD   simulcast</td>\\n<td>String</td>\\n<td><strong>UK digital terrestrial TV only**</strong><br /><br />(Optional) A JSON object encoded as string representing a list of other service_id and event_id pairs   on which this program is simultaneously broadcast in HD.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getversion-as-integer\\\">GetVersion() as Integer</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns an integer which is incremented each time the underlying data in the guide changes.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The version number of the program guide.</p>\\n<h3 id=\\\"getprogramsstarttime-as-rodatetime-channel-as-string-endtime-as-rodatetime-as-object\\\">GetPrograms(startTime as roDateTime, channel as String, endTime as roDateTime) as Object</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Returns the programs falling within the given time range. </p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>startTime</td>\\n<td>roDateTime</td>\\n<td>The start time programs must fall within to be retrieved.</td>\\n</tr>\\n<tr>\\n<td>channel</td>\\n<td>String</td>\\n<td>The channel number for which programs are to be retrieved.</td>\\n</tr>\\n<tr>\\n<td>endTime</td>\\n<td>roDateTime</td>\\n<td>The end time programs must fall within to be retrieved.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An roArray of programs falling within the given time range (returns invalid if the given channel is unknown). Each entry in the array contains an roAssociativeArray containing the following details of a program: </p>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>Key</strong></th>\\n<th><strong>Type</strong></th>\\n<th><strong>Value</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name</td>\\n<td>String</td>\\n<td>Descriptive name for the program.</td>\\n</tr>\\n<tr>\\n<td>id</td>\\n<td>String</td>\\n<td>ID for the program, not guaranteed to be unique,   suitable for passing to GetChannels.</td>\\n</tr>\\n<tr>\\n<td>description</td>\\n<td>String</td>\\n<td>Longer description for the program.</td>\\n</tr>\\n<tr>\\n<td>category</td>\\n<td>String</td>\\n<td>Genre of the program, such as Drama, Sport, and so forth.</td>\\n</tr>\\n<tr>\\n<td>start_time</td>\\n<td>roDateTime</td>\\n<td>Starting time of this program.</td>\\n</tr>\\n<tr>\\n<td>duration</td>\\n<td>Integer</td>\\n<td>Length of this program in seconds.</td>\\n</tr>\\n<tr>\\n<td>subtitles</td>\\n<td>String</td>\\n<td>(Optional) If present indicates this program has subtitles.</td>\\n</tr>\\n<tr>\\n<td>format</td>\\n<td>roAssociativeArray</td>\\n<td>Indicates the media format, with the following keys, all of which are optional. The value for each key is the Boolean string   \\\"true\\\" to indicate the format option.</td>\\n</tr>\\n<tr>\\n<td>Rating</td>\\n<td>roAssociativeArray</td>\\n<td>(Optional) Rating and parental guidance information.</td>\\n</tr>\\n<tr>\\n<td>link</td>\\n<td>roAssociativeArray</td>\\n<td>(Optional) Links to other related programs.</td>\\n</tr>\\n<tr>\\n<td>content_metadata</td>\\n<td>Content Meta­ Data  object</td>\\n<td>Name, description, start_time, duration and format of   this program.</td>\\n</tr>\\n<tr>\\n<td>Rating Region UK DTT</td>\\n<td>String</td>\\n<td><strong>UK digital terrestrial TV only</strong><br /><br />(Optional) A JSON object encoded as string representing viewer guidance type and description.</td>\\n</tr>\\n<tr>\\n<td>Link HD   simulcast</td>\\n<td>String</td>\\n<td><strong>UK digital terrestrial TV only**</strong><br /><br />(Optional) A JSON object encoded as string representing a list of other service_id and event_id pairs   on which this program is simultaneously broadcast in HD.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifregex.md":"{\n  \"content\": \"<h1 id=\\\"ifregex\\\">ifRegex</h1>\\n<blockquote>\\n<p>See the PCRE documentation (<a href=\\\"http://www.pcre.org/\\\">http://www.pcre.org/</a>) for documentation on the PCRE library used for regular expression matching.  See the <a href=\\\"http://perldoc.perl.org/perlre.html\\\" title=\\\"Perlre main page\\\">Perlre main page</a> for complete documentation of the possible regular expressions this library can parse and match. In general, most Perl compatible regular expressions are supported.</p>\\n</blockquote>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roregex.md\\\" title=\\\"roRegex\\\">roRegex</a></td>\\n<td>The roRegex component provides the powerful regular expression processing of the PCRE library to Brightscript strings</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"ismatchstr-as-string-as-boolean\\\">IsMatch(str as String) as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Checks if a string matches the matching pattern.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>str</td>\\n<td>String</td>\\n<td>The string to be checked.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the string matches the matching pattern.</p>\\n<h3 id=\\\"matchstr-as-string-as-object\\\">Match(str as String) as Object</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>If the matching pattern contains N parenthetical substrings, the relevant substrings are returned as an array of length N+1, where array[0] is again the entire match and each additional entry in the array is the match for the corresponding parenthetical expression. </p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>str</td>\\n<td>String</td>\\n<td>The string to be searched for matching substrings.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>An roArray of matched substrings from str. If no match was made, an empty array is returned. If a match was made, the entire match is returned in array[0]. If there are no parenthetical substrings this is the only entry in the array</p>\\n<h4 id=\\\"example-from-brightscript-debugger-interactive-shell\\\">Example (from Brightscript Debugger Interactive Shell)</h4>\\n<pre><code> r = CreateObject(\\\"roRegex\\\", \\\"(a|(z))(bc)\\\",\\\"\\\")\\n ? r.Match(\\\"abcd\\\")\\n abc\\n a \\n\\n bc\\n</code></pre>\\n<h3 id=\\\"matchallstr-as-string-as-object\\\">MatchAll(str as String) as Object</h3>\\n<p><strong>Available since Roku OS 8.1</strong></p>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns all matches of the specific regular expression pattern in the target string.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>str</td>\\n<td>String</td>\\n<td>The string to be searched for matching substrings.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An roArray where the first element is the full matched string and if there are any capture groups those are returned in subsequent array elements</p>\\n<h4 id=\\\"example\\\">Example</h4>\\n<pre><code>  r = CreateObject(\\\"roRegex\\\", \\\"\\\\d+\\\", \\\"\\\")\\n  arr = r.MatchAll(\\\"123 456 789\\\")\\n  print FormatJSON(arr)\\n\\n [[\\\"123\\\"],[\\\"456\\\"],[\\\"789\\\"]]\\n</code></pre>\\n<h3 id=\\\"replacestr-as-string-replacement-as-string-as-string\\\">Replace(str as String, replacement as String) as String</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Replaces the first occurrence of a matching pattern in str with replacement and returns the result. The replacement may contain numbered back-references to parenthetical substrings.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>str</td>\\n<td>String</td>\\n<td>The string to be searched.</td>\\n</tr>\\n<tr>\\n<td>replacement</td>\\n<td>String</td>\\n<td>The string to be used to replace matches in source string.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"example-from-brightscript-debugger-interactive-shell-1\\\">Example (from Brightscript Debugger Interactive Shell)</h4>\\n<pre><code> r = CreateObject(\\\"roRegex\\\", \\\"(\\\\d+)\\\\s+(\\\\w+)\\\", \\\"\\\")\\n ? r.Replace(\\\"123 abc\\\", \\\"word:\\\\2 number:\\\\1\\\")\\n word:abc number:123\\n</code></pre>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A string with the result of the replace operation. </p>\\n<h3 id=\\\"replaceallstr-as-string-replacement-as-string-as-string\\\">ReplaceAll(str as String, replacement as String) as String</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Replaces all occurrences of a matching pattern in str with replacement and returns the result. The replacement may contain numbered back-references to parenthetical substrings.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>str</td>\\n<td>String</td>\\n<td>The string to be searched.</td>\\n</tr>\\n<tr>\\n<td>replacement</td>\\n<td>String</td>\\n<td>The string to be used to replace matches in source string.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A string with the result of the replace all operation. </p>\\n<h4 id=\\\"example-from-brightscript-debugger-interactive-shell-2\\\">Example (from Brightscript Debugger Interactive Shell)</h4>\\n<pre><code>  r = CreateObject(\\\"roRegex\\\", \\\"a\\\", \\\"i\\\")\\n  ? r.ReplaceAll(\\\"Abracadabra\\\", \\\"x\\\")\\n xbrxcxdxbrx\\n\\n  r = CreateObject(\\\"roRegex\\\", \\\"a\\\", \\\"\\\")\\n  ? r.ReplaceAll(\\\"Abracadabra\\\", \\\"x\\\")\\n Abrxcxdxbrx\\n</code></pre>\\n<h3 id=\\\"splitstr-as-string-as-object\\\">Split(str as String) as Object</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Uses the matching pattern as a separator and splits the string on the separator boundaries.</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>str</td>\\n<td>String</td>\\n<td>The string to be split.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>An roList of substrings of str that were separated by strings which match the pattern in the CreateObject call. The separator strings are not returned. If no matches were found, the returned list contains a single item with the string unchanged.</p>\\n<p><strong>Examples from Brightscript Debugger Interactive Shell</strong></p>\\n<pre><code> r = CreateObject(\\\"roRegex\\\", \\\",\\\", \\\"\\\") ' split on comma\\n ? r.Split(\\\"first, second, third and fourth\\\")\\n first\\n  second\\n  third and fourth\\n r = CreateObject(\\\"roRegex\\\", \\\"/+\\\", \\\"\\\") ' split on one or more slashes\\n ? r.Split(\\\"example.com/images///2012/cat.jpg\\\")\\n  example.com\\n  images\\n  2012\\n  cat.jpg\\n</code></pre>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifregion.md":"{\n  \"content\": \"<h1 id=\\\"ifregion\\\">ifRegion</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegion\\\">roRegion</a></td>\\n<td>The roRegion component is used to represent a subsection of a bitmap</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getbitmap-as-object\\\">GetBitmap() as Object</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the roBitmap object of the bitmap to which this region refers. A region is always a section of a bitmap.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>An roBitmap object of the bitmap. </p>\\n<h3 id=\\\"getx-as-integer\\\">GetX() as Integer</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the x coordinate of the region in its bitmap.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The x coordinate value</p>\\n<h3 id=\\\"gety-as-integer\\\">GetY() as Integer</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns the y coordinate of the region in its bitmap.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>The y coordinate value</p>\\n<h3 id=\\\"getwidth-as-integer\\\">GetWidth() as Integer</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Returns the width of the region.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>The width of the region.</p>\\n<h3 id=\\\"getheight-as-integer\\\">GetHeight() as Integer</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns the height of the region.</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>The height of the region.</p>\\n<h3 id=\\\"offsetx-as-dynamic-y-as-dynamic-w-as-dynamic-h-as-dynamic-as-void\\\">Offset(x as Dynamic, y as Dynamic, w as Dynamic, h as Dynamic) as Void</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Adds the passed parameters x,y, w, and h to the values of those roRegion fields. Respects the wrap setting when adjusting the fields by the offsets.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Dynamic</td>\\n<td>The x-coordinate of the region.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Dynamic</td>\\n<td>The y-coordinate of the region.</td>\\n</tr>\\n<tr>\\n<td>w</td>\\n<td>Dynamic</td>\\n<td>The width of the region.</td>\\n</tr>\\n<tr>\\n<td>h</td>\\n<td>Dynamic</td>\\n<td>The height of the region.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setsrcregion-as-object-as-void\\\">Set(srcRegion as Object) as Void</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Initializes the fields of this region to be the same as the values of the fields in the srcRegion.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>srcRegion</td>\\n<td>Object</td>\\n<td>An roRegion object.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"copy-as-object\\\">Copy() as Object</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Returns a newly created copy of the region as a new <a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegion\\\">roRegion</a> object.</p>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>An roRegion Object.</p>\\n<h3 id=\\\"setwrapwrap-as-boolean-as-void\\\">SetWrap(wrap as Boolean) as Void</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Wraps any part of a region that extends beyond the bounds of its bitmap to the other side of the bitmap and renders it there.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>wrap</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether wrapping of the region is enabled. If this flag is set to false, the part of the region beyond the bounds of its bitmap is not rendered.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getwrap-as-boolean\\\">GetWrap() as Boolean</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Returns if the region can be wrapped.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<p>A flag indicating whether wrapping of the region is enabled. </p>\\n<h3 id=\\\"settimetime-as-integer-as-void\\\">SetTime(time as Integer) as Void</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Sets the duration of each frame of any animated sprite that uses this region.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<p>A flag indicating whether wrapping of region is enabled. </p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>time</td>\\n<td>Integer</td>\\n<td>The \\\"frame hold time\\\" in milliseconds.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"gettime-as-integer\\\">GetTime() as Integer</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Return Type</th>\\n<th>Return Value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>GetTime</td>\\n<td>Integer</td>\\n<td>Milliseconds - Integer</td>\\n<td>Returns the \\\"frame hold time\\\" in milliseconds</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setpretranslationx-as-integer-y-as-integer-as-void\\\">SetPretranslation(x as Integer, y as Integer) as Void</h3>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>Sets the pre-translation for DrawObject, DrawRotatedObject, and DrawScaledObject.</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The pre-translation x-value.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The pre-translation y-value.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getpretranslationx-as-integer\\\">GetPretranslationX() as Integer</h3>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Returns the pre-translation x value. </p>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>The pre-translation x value.</p>\\n<h3 id=\\\"getpretranslationy-as-integer\\\">GetPretranslationY() as Integer</h3>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Returns the pre-translation y value. </p>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>The pre-translation y value.</p>\\n<h3 id=\\\"setscalemodemode-as-integer-as-void\\\">SetScaleMode(mode as Integer) as Void</h3>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Sets the scaling mode used for DrawScaledObject.</p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>mode</td>\\n<td>Integer</td>\\n<td>The scaling mode, which may be one of the following values: <ul>\\n<li>0 = fast scaling operation (may have jaggies)</li>\\n<li>1 = smooth scaling operation (may be slow)</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getscalemode-as-integer\\\">GetScaleMode() as Integer</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>Returns the scaling mode.</p>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>The scaling mode, which may be one of the following values:</p>\\n<ul>\\n<li>0 = fast scaling operation (may have jaggies)</li>\\n<li>1 = smooth scaling operation (may be slow)</li>\\n</ul>\\n<h3 id=\\\"setcollisiontypecollisiontype-as-integer-as-void\\\">SetCollisionType(collisiontype as Integer) as Void</h3>\\n<h4 id=\\\"description-16\\\">Description</h4>\\n<p>Sets the type of region to be used for collision tests with this sprite.</p>\\n<h4 id=\\\"parameters-7\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>collisiontype</td>\\n<td>Integer</td>\\n<td>The collision type, which may be one of the following values: <ul>\\n<li>Type 0– Use the entire defined region of the sprite. Type 0 is the default</li>\\n<li>Type 1 – Use the defined rectangular region specified by the SetCollisionRectangle() method</li>\\n<li>Type 2 – Use a circular region specified by the SetCollisionCircle() method</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getcollisiontype-as-integer\\\">GetCollisionType() as Integer</h3>\\n<h4 id=\\\"description-17\\\">Description</h4>\\n<p>Returns the collision type.</p>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>The collision type, which may be one of the following values:</p>\\n<ul>\\n<li>Type 0– Use the entire defined region of the sprite. Type 0 is the default</li>\\n<li>Type 1 – Use the defined rectangular region specified by the SetCollisionRectangle() method</li>\\n<li>Type 2 – Use a circular region specified by the SetCollisionCircle() method</li>\\n</ul>\\n<h3 id=\\\"setcollisionrectanglexoffset-as-integer-yoffset-as-integer-width-as-integer-height-as-integer-as-void\\\">SetCollisionRectangle(xOffset as Integer, yOffset as Integer, width as Integer, height as Integer) as Void</h3>\\n<h4 id=\\\"description-18\\\">Description</h4>\\n<p>Sets the collision rectangle used for type-1 collision tests. The upper left corner of the rectangle is the (x,y) position of the sprite plus the specified offsets. The width and height specify the size of the rectangle.</p>\\n<h4 id=\\\"parameters-8\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>xOffset</td>\\n<td>Integer</td>\\n<td>The  offset for the x position of the sprite.</td>\\n</tr>\\n<tr>\\n<td>yOffset</td>\\n<td>Integer</td>\\n<td>The  offset for the y position of the sprite.</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>Integer</td>\\n<td>The width of the rectangle.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>Integer</td>\\n<td>The height of the rectangle.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setcollisioncirclexoffset-as-integer-yoffset-as-integer-radius-as-integer-as-void\\\">SetCollisionCircle(xOffset as Integer, yOffset as Integer, Radius as Integer) as Void</h3>\\n<h4 id=\\\"description-19\\\">Description</h4>\\n<p>Sets the collision circle used for type-2 collision tests. The center of the circle is the  (x,y) position of the sprite plus the specified offsets. The radius specifies the size of the circle.</p>\\n<h4 id=\\\"parameters-9\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>xOffset</td>\\n<td>Integer</td>\\n<td>The  offset for the x position of the sprite.</td>\\n</tr>\\n<tr>\\n<td>yOffset</td>\\n<td>Integer</td>\\n<td>The  offset for the y position of the sprite.</td>\\n</tr>\\n<tr>\\n<td>Radius</td>\\n<td>Integer</td>\\n<td>The size of the circle.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifregistry.md":"{\n  \"content\": \"<h1 id=\\\"ifregistry\\\">ifRegistry</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roregistry.md\\\" title=\\\"roRegistry\\\">roRegistry</a></td>\\n<td>The Registry is an area of non-volatile storage where a small number of persistent settings can be stored</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getspaceavailable-as-integer\\\">GetSpaceAvailable() as Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the number of bytes available in the channel application's device registry (16K minus current file size). This function can be used, for example, to check the remaining space and remove older entries before writing newer ones. The following code demonstrates how to do this:</p>\\n<pre><code>registry = CreateObject(\\\"roRegistry\\\")\\nbuffer = 512 ' arbitrary limit based on the channel application\\nif (registry.GetSpaceAvailable() &#x3C; buffer)\\n' remove some old registry entries before writing new ones\\nend if\\n</code></pre>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>An integer representing the the number of bytes available in the device registry.</p>\\n<h3 id=\\\"getsectionlist-as-object\\\">GetSectionList() as Object</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the registry sections on the device. </p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>An roList with one entry for each registry section. Each registry section is an roString containing the name of the section. The section itself can be accessed by creating an <a href=\\\"/docs/references/brightscript/components/roregistrysection.md\\\" title=\\\"roRegistrySection\\\">roRegistrySection</a> object using that name.</p>\\n<h3 id=\\\"deletesection-as-string-as-boolean\\\">Delete(section as String) as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Deletes the specified registry section.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>section</td>\\n<td>String</td>\\n<td>The registry section to be deleted.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p> A flag indicating whether the registry section was successfully deleted.</p>\\n<h3 id=\\\"flush-as-boolean\\\">Flush() as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Flushes the contents of the registry out to persistent storage in order to permanently store a token or other setting on the device.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether the registry was successfully flushed.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifregistrysection.md":"{\n  \"content\": \"<h1 id=\\\"ifregistrysection\\\">ifRegistrySection</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roregistrysection.md\\\" title=\\\"roRegistrySection\\\">roRegistrySection</a></td>\\n<td>A Registry Section enables the organization of settings within the registry</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"readkey-as-string-as-string\\\">Read(key as String) as String</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Reads and returns the value of the specified key.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>key</td>\\n<td>String</td>\\n<td>The key name to be read.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The value of the key.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Return Type</th>\\n<th>Parameters</th>\\n<th>Return Value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Read</td>\\n<td>String</td>\\n<td>${readparamTable}</td>\\n<td>Value of the key - String</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"readmultikeysarray-as-object-as-object\\\">ReadMulti(keysArray as Object) as Object</h3>\\n<p><em>Available since Roku OS 8.0</em></p>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Reads multiple values from the registry. </p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>keysArray</td>\\n<td>Object</td>\\n<td>An array of strings containing the key names to be read.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>An associative array containing the keys and corresponding values read from the registry.</p>\\n<h3 id=\\\"writekey-as-string-value-as-string-as-boolean\\\">Write(key as String, value as String) as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Replaces the value of the specified key. Does not guarantee a commit to non-volatile storage until an explicit <a href=\\\"#flush-as-boolean\\\">Flush()</a> is done.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>key</td>\\n<td>String</td>\\n<td>The name of the key to be updated.</td>\\n</tr>\\n<tr>\\n<td>value</td>\\n<td>String</td>\\n<td>The updated value to be written to the specified key.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the value of the key was successfully updated. </p>\\n<h3 id=\\\"writemultiroassociativearray-as-object-as-boolean\\\">WriteMulti(roAssociativeArray as Object) as Boolean</h3>\\n<p><em>Available since Roku OS 8.0</em></p>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Writes multiple values to the registry. </p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>roAssociativeArray</td>\\n<td>Object</td>\\n<td>An associative array with key-value pairs to be updated.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether the values were successfully updated. </p>\\n<h3 id=\\\"deletekey-as-string-as-boolean\\\">Delete(key as String) as Boolean</h3>\\n<p>Deletes the specified key.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>key</td>\\n<td>String</td>\\n<td>The key to be deleted.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether the key was successfully deleted. </p>\\n<h3 id=\\\"existskey-as-string-as-boolean\\\">Exists(key as String) as Boolean</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Checks if the specified key resides in the registry.</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>key</td>\\n<td>String</td>\\n<td>The key to be checked.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A flag indicating whether the key is in the registry. </p>\\n<h3 id=\\\"flush-as-boolean\\\">Flush() as Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Flushes the contents of the registry out to persistent storage in order to permanently store a token or other setting on the device. Developers should explicitly this method after performing a write or series of writes. This method is transactional and all writes between calls to it are atomic.</p>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>A flag indicating whether the registry was successfully flushed. </p>\\n<h3 id=\\\"getkeylist-as-object\\\">GetKeyList() as Object</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Gets a list of the keys in the registry.</p>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>An roList containing one entry per registry key in this section.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifremoteinfo.md":"{\n  \"content\": \"<h1 id=\\\"ifremoteinfo\\\">ifRemoteInfo</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roremoteinfo.md\\\" title=\\\"roRemoteInfo\\\">roRemoteInfo</a></td>\\n<td>The roRemoteInfo component provides an interface to obtain attributes about the Roku remote control that is currently connected to the Roku device. Note that a Roku remote control device that is paired with a device, may not be the one that is currently connected (a single remote is typically connected to a device at a time).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getmodelremoteindex-as-integer-as-integer\\\">GetModel(remoteIndex as Integer) as Integer</h3>\\n<p>Returns the model number of the specified Roku remote control. For example, this function returns 135 for an RC135 remote that is connected to the Roku device.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>remoteIndex</td>\\n<td>Integer</td>\\n<td>The index for a Roku remote control that is currently connected to the Roku device. In addition to specific remote index, the following values may be specified:<br /><ul>\\n<li>-1: The most recently used remote. </li>\\n<li>0: The first connected remote (this is typically the only remote that is connected to the device).</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-values\\\">Return Values</h4>\\n<p>The model number of the specified Roku remote control, or 0 if the specified remote does not exist. </p>\\n<h3 id=\\\"isawakeremoteindex-as-integer-as-boolean\\\">IsAwake(remoteIndex as Integer) as Boolean</h3>\\n<p>Checks whether the specified Roku remote control is awake. </p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>remoteIndex</td>\\n<td>Integer</td>\\n<td>The index for a Roku remote control that is currently connected to the Roku device. In addition to specific remote index, the following values may be specified:<br /><ul>\\n<li>-1: The most recently used remote. </li>\\n<li>0: The first connected remote (this is typically the only remote that is connected to the device).</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-values-1\\\">Return Values</h4>\\n<p>A flag indicating whether the specified Roku remote control is awake.</p>\\n<h3 id=\\\"hasfeaturefeature-as-string-remoteindex-as-integer-as-boolean\\\">HasFeature(feature as String, remoteIndex as Integer) as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Checks if the specified Roku remote control supports the passed in feature string.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>feature</td>\\n<td>String</td>\\n<td>The feature to be checked, which may be one of the following values: <ul>\\n<li>\\\"bluetooth\\\"</li>\\n<li>\\\"wifi\\\"</li>\\n<li>\\\"motion\\\"</li>\\n<li>\\\"audio\\\"</li>\\n<li>\\\"voicecapture\\\"</li>\\n<li>\\\"findremote\\\"</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>remoteIndex</td>\\n<td>Integer</td>\\n<td>The index for a Roku remote control that is currently connected to the Roku device. In addition to specific remote index, the following values may be specified:<br /><ul>\\n<li>-1: The most recently used remote. </li>\\n<li>0: The first connected remote (this is typically the only remote that is connected to the device).</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-values-2\\\">Return Values</h4>\\n<p>A flag indicating whether the Roku remote control supports the passed in feature string.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsgscreen.md":"{\n  \"content\": \"<h1 id=\\\"ifsgscreen\\\">ifSGScreen</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rosgscreen.md\\\" title=\\\"roSGScreen\\\">roSGScreen</a></td>\\n<td>The roSGScreen object is a SceneGraph canvas that displays the contents of a SceneGraph Scene node tree</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"setmessageportport-as-romessageport-as-void\\\">SetMessagePort(port as roMessagePort) as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Specifies the roMessagePort object for the roSGScreen object</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>port</td>\\n<td>roMessagePort</td>\\n<td>The roMessagePort to be used for the SceneGraph scene.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getmessageport-as-romessageport\\\">GetMessagePort() as roMessagePort</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the roMessagePort object for the SceneGraph scene.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The roMessagePort object.</p>\\n<h3 id=\\\"getglobalnode-as-rosgnode\\\">getGlobalNode() as roSGNode</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns a global reference object for the SceneGraph application.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A global reference object.</p>\\n<h4 id=\\\"example-starting-scene-graph-applications\\\">Example: Starting Scene Graph Applications</h4>\\n<pre><code>sub showChannelSGScreen()\\n  print \\\"in showChannelSGScreen\\\"\\n  screen = CreateObject(\\\"roSGScreen\\\")\\n  m.port = CreateObject(\\\"roMessagePort\\\")\\n  screen.setMessagePort(m.port)\\n  m.global = screen.getGlobalNode()\\n  m.global.id = \\\"GlobalNode\\\"\\n  m.global.addFields( {red: &#x26;hff0000ff, green: &#x26;h00ff00ff, blue: &#x26;h0000ffff} )\\n  scene = screen.CreateScene(\\\"TrivialScene\\\")\\n  screen.show()\\n  scene.setFocus(true)\\n\\n  child = createObject(\\\"RoSGNode\\\",\\\"ContentNode\\\")\\n  child.contentkey = \\\"test_string\\\"\\n  print \\\"child: '\\\"; child.contentkey; \\\"'\\\"\\n\\n  while(true)\\n    msg = wait(0, m.port)\\n    msgType = type(msg)\\n    if msgType = \\\"roSGScreenEvent\\\"\\n      if msg.isScreenClosed() then return\\n    end if\\n  end while\\n\\nend sub\\n</code></pre>\\n<h3 id=\\\"show-as-boolean\\\">Show() as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Renders the SceneGraph scene defined by the roSGScreen object on the display screen.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the screen is displayed. </p>\\n<h3 id=\\\"close-as-void\\\">Close() as Void</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Removes the SceneGraph scene from the display screen.</p>\\n<h3 id=\\\"createscenescenetype-as-string-as-object\\\">CreateScene(sceneType as String) as Object</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Creates the SceneGraph scene object based on the specified sceneType object.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>sceneType</td>\\n<td>String</td>\\n<td>The sceneType object to be used to create the scene object.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>The roSGScene object associated with the screen.</p>\\n<h3 id=\\\"getscene-as-rosgnode\\\">GetScene() as roSGNode</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>The roSGScene object associated with the screen.</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>Typically, the scene created in main.brs by a roSGScreen.CreateScene() call.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifrsa.md":"{\n  \"content\": \"<h1 id=\\\"ifrsa\\\">ifRSA</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rorsa.md\\\" title=\\\"roRSA\\\">roRSA</a></td>\\n<td>The RSA component provides an interface to the OpenSSL RSA library of signing algorithms</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"setprivatekeykeyfilename-as-string-as-integer\\\">SetPrivateKey(keyFileName as String) as Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Specifies the private key to use for signing. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>keyFileName</td>\\n<td>String</td>\\n<td>Specifies the private key to be used for signing. The file name should specify a path, either in the package or a temp path.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<ul>\\n<li>1 = The key is valid.</li>\\n<li>0 = The file does not contain a valid key.</li>\\n<li>-1 = The file was not found.</li>\\n</ul>\\n<h3 id=\\\"setpublickeykeyfilename-as-string-as-integer\\\">SetPublicKey(keyFileName as String) as Integer</h3>\\n<p>Specifies the public key to be used for verification. </p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>keyFileName</td>\\n<td>String</td>\\n<td>Specifies the public key to be used for signing. The file name should specify a path, either in the package or a temp path.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<ul>\\n<li>1 = The key is valid.</li>\\n<li>0 = The file does not contain a valid key.</li>\\n<li>-1 = The file was not found.</li>\\n</ul>\\n<h3 id=\\\"setdigestalgorithmdigestalgorithm-as-string-as-boolean\\\">SetDigestAlgorithm(digestAlgorithm as String) as Boolean</h3>\\n<p>Specifies the digest algorithm to use for signing and verification. </p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>digestAlgorithm</td>\\n<td>String</td>\\n<td>An openssl string with the digest to be used. Common digest algorithms are \\\"sha1\\\", \\\"ripemd160\\\", and \\\"md5\\\".</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the algorithm was successfully set (true) or the string was not recognized (false).</p>\\n<h3 id=\\\"signdigest-as-object-as-object\\\">Sign(digest as Object) as Object</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Generates a signature based on the specified digest.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>digest</td>\\n<td>roByteArray Object</td>\\n<td>The roByteArray to be signed. Errors will be printed in the BrightScript console. If the digest algorithm is not set (using SetDigestAlgorithm) before calling Sign(), the digest is not encapsulated. This would be equivalent to simply calling the openssl function RSA_private_encrypt()</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>An roByteArray containing the signature, or invalid if an error occurred. Typical values include the following: </p>\\n<ul>\\n<li>digest is empty</li>\\n<li>SetPrivateKey() was not yet called</li>\\n<li>out of memory</li>\\n<li>the digest could not be signed</li>\\n</ul>\\n<h3 id=\\\"verifydigest-as-object-signature-as-object-as-integer\\\">Verify(digest as Object, signature as Object) as Integer</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Verifies the given digest and signature. Both digest and signature should be roByteArrays. If the digest algorithm is not set (using the <a href=\\\"#setdigestalgorithmdigestalgorithm-as-string-as-boolean\\\">SetDigestAlgorithm</a> method) before calling Verify(), the digest associated with the signature is not expected to be encapsulated. This would be equivalent to simply calling the openssl function RSA_public_decrypt(signature) and then comparing the result with the digest</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>digest</td>\\n<td>roByteArray Object</td>\\n<td>The digest to be verified.</td>\\n</tr>\\n<tr>\\n<td>signature</td>\\n<td>roByteArray Object</td>\\n<td>The signature to be verified.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>Indicates the result of the validation. This may be one of the following values:</p>\\n<ul>\\n<li>1 = The signature matches.</li>\\n<li>-1 = The SetPublicKey() method was not yet called.</li>\\n<li>-2 = The digest is empty.</li>\\n<li>-3 = There is not enough memory.</li>\\n<li>0 = The signature does not match.</li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifscreen.md":"{\n  \"content\": \"<h1 id=\\\"ifscreen\\\">ifScreen</h1>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roscreen.md\\\" title=\\\"roScreen\\\">roScreen</a></td>\\n<td>The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"swapbuffers-as-void\\\">SwapBuffers() as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>This function first operates the same as a call to <a href=\\\"/docs/references/brightscript/interfaces/ifdraw2d.md\\\" title=\\\"ifDraw2D\\\">ifDraw2D</a>, completing all queued drawing operations on the back buffer (draw surface).</p>\\n<p>The new back buffer should be assumed to be in a garbage state after this call is complete, which means you will need to re-render the entire frame before a subsequent call to SwapBuffers. This call will not return until the back buffer is ready to be drawn on to. Depending on the implementation, it may take up to a single video frame period for the new front buffer to become visible.</p>\\n<p>This operation is extremely fast (that is, it never copies a bitmap from one location to another), and is guaranteed not to \\\"tear\\\" the visible image.</p>\\n<p>If the screen is single buffered, this method returns immediately after this operation. If the screen is double buffered, this method swaps the back buffer with the front buffer, so the back buffer is now visible.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsetmessageport.md":"{\n  \"content\": \"<h1 id=\\\"ifsetmessageport\\\">ifSetMessagePort</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rohdmistatus.md\\\" title=\\\"roHdmiStatus\\\">roHdmiStatus</a></td>\\n<td>The HDMI status component provides an interface to the current HDMI operational status</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roscreen.md\\\" title=\\\"roScreen\\\">roScreen</a></td>\\n<td>The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rourltransfer.md\\\" title=\\\"roUrlTransfer\\\">roUrlTransfer</a></td>\\n<td>A roUrlTransfer object transfers data to or from remote servers specified by URLs. It can perform mutual authentication with a web server</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rotexttospeech.md\\\" title=\\\"roTextToSpeech\\\">roTextToSpeech</a></td>\\n<td>The roTextToSpeech component provides text to speech capabilities to applications</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"setmessageportport-as-object--as-void\\\">SetMessagePort(port as Object ) as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sets the <a href=\\\"/docs/references/brightscript/components/romessageport.md\\\" title=\\\"roMessagePort\\\">roMessagePort</a> to be used for all events from the screen.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Port</td>\\n<td>Object</td>\\n<td>The roMessagePort to be used for screen events.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsgnodeboundingrect.md":"{\n  \"content\": \"<h1 id=\\\"ifsgnodeboundingrect\\\">ifSGNodeBoundingRect</h1>\\n<p>The ifSGNodeBoundingRect interface can be used to query the bounding rectangle of subject node. The ifSGNodeBoundingRect interface methods return a node bounding rectangle as an associative array with four elements:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>x-coordinate of the origin of the bounding rectangle</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>y-coordinate of the origin of the bounding rectangle</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>width of the bounding rectangle</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>height of the bounding rectangle</td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>These methods return the bounding rectangle dimensions and location of component objects at the time they are called. If they are called before an object is fully constructed, such as before all graphical images have been loaded, they will return the dimensions and location at the time of the call, which may not be the correct values for placing the component object properly. To ensure that your screen has the component objects located as you intended, make sure you call these methods after the component object is fully constructed. For example, if the component object relies on loading graphical images to construct its appearance, it is best to use these methods as part of an observer callback function triggered by the image loading field events, such as the loadStatus field of the Poster node.</p>\\n</blockquote>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\">roSGNode</a></td>\\n<td>The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"boundingrect-as-dynamic\\\">boundingRect() as Dynamic</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the node bounding rectangle. The bounding rectangle of a node is the axis-aligned rectangle computed by transforming the local bounding rectangle of the node by the node transformation matrix. The resulting rectangle corresponds to the node local bounding rectangle transformed into its parent node local coordinate system.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>An associative array with the node bounding rectangle.</p>\\n<h3 id=\\\"localboundingrect-as-dynamic\\\">localBoundingRect() as Dynamic</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the node local bounding rectangle. The local bounding rectangle of a node is the axis-aligned rectangle, that includes the union of the bounding rectangle of the geometry of the node, and the bounding rectangles of all of the node children, transformed into the local coordinate system of the node.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>An associative array with the node local bounding rectangle.</p>\\n<h3 id=\\\"sceneboundingrect-as-dynamic\\\">sceneBoundingRect() as Dynamic</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns the bounding rectangle for scene components (component nodes extended from a <a href=\\\"/docs/references/scenegraph/scene.md\\\" title=\\\"Scene\\\">Scene</a> or <a href=\\\"/docs/references/scenegraph/sliding-panels-nodes/overhangpanelsetscene.md\\\" title=\\\"OverhangPanelSetScene\\\">OverhangPanelSetScene</a> node class).</p>\\n<p>If this method is called before any child components have been added to the <strong>Scene</strong> component, or the child components are smaller than the <strong>Scene</strong> component, this is the screen dimensions of the user interface, so can be used to automatically create a bounding rectangle for the specified display user interface dimensions (SD, HD, FHD), to locate and dimension child components within the screen.</p>\\n<p>If this method is called after child components have been added that are larger than the <strong>Scene</strong> component, the returned bounding rectangle will be larger than the user interface dimensions.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An associative array with the bounding rectangle.</p>\\n<h3 id=\\\"ancestorboundingrectancestor-as-rosgnode-as-dynamic\\\">ancestorBoundingRect(ancestor as roSGNode) as Dynamic</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Returns the bounding rectangle of this node and all of its children in the Scene's root coordinate system, including any transformation specified in the Scene node.</p>\\n<p>In most cases, this will result in the bounding rectangle expressed in display coordinates.</p>\\n<p>If the node is not connected to a Scene node, this will return the same value as the <a href=\\\"#boundingrect-as-dynamic\\\">boundingRect()</a> method.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>ancestor</td>\\n<td>roSGNode</td>\\n<td>The ancestor of the subject node.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>An associative array with the bounding rectangle and all of its children in the Scene's root coordinate system.</p>\\n<h3 id=\\\"localsubboundingrectitemnumber-as-string-as-dynamic\\\">localSubBoundingRect(itemnumber as String) as Dynamic</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns the local bounding rectangle of this node's identified sub part in the node's local coordinate system. If the subpart does not exist, the node's local bounding rectangle is returned.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>itemnumber</td>\\n<td>String</td>\\n<td>The <em>itemnumber</em> parameter may contain one of the following strings: <ul>\\n<li>itemX: where X is the index of an item in an ArrayGrid's data model (for example, <strong>item17</strong> is the 17th item in the data model).</li>\\n<li>itemX_Y: where X is the index of the row and Y is the index of an item in that row in a RowList's data model (for example, <strong>item4_11</strong> is the 11th item in row 4 of the data model).</li>\\n<li>focusItem: Gets the bounding rect of the ArrayGrid's focused item.</li>\\n<li>focusIndicator: Gets the bounding rect of the ArrayGrid's focus indicator (for example, the focus ring or list highlight).</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>An associative array with the local bounding rectangle of the node's identified sub part.</p>\\n<h3 id=\\\"subboundingrectitemnumber-as-string-as-dynamic\\\">subBoundingRect(itemnumber as String) as Dynamic</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Returns the bounding rectangle of this node's identified sub part, as transformed by this node's transformation matrix, in its parent node's coordinate system. If the subpart does not exist, the node's bounding rectangle is returned.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>itemnumber</td>\\n<td>String</td>\\n<td>The <em>itemnumber</em> parameter may contain one of the following strings: <ul>\\n<li>itemX: where X is the index of an item in an ArrayGrid's data model (for example, <strong>item17</strong> is the 17th item in the data model).</li>\\n<li>itemX_Y: where X is the index of the row and Y is the index of an item in that row in a RowList's data model (for example, <strong>item4_11</strong> is the 11th item in row 4 of the data model).</li>\\n<li>focusItem: Gets the bounding rect of the ArrayGrid's focused item.</li>\\n<li>focusIndicator: Gets the bounding rect of the ArrayGrid's focus indicator (for example, the focus ring or list highlight).</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>An associative array with the bounding rectangle. </p>\\n<h3 id=\\\"scenesubboundingrectitemnumber-as-string-as-dynamic\\\">sceneSubBoundingRect(itemnumber as String) as Dynamic</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns the bounding rectangle of this node's subpart in its Scene's coordinate system If the subpart does not exist or if the node is not an ancestor of a Scene node, this will return the node's bounding rectangle.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>itemnumber</td>\\n<td>String</td>\\n<td>The <em>itemnumber</em> parameter may contain one of the following strings: <ul>\\n<li>itemX: where X is the index of an item in an ArrayGrid's data model (for example, <strong>item17</strong> is the 17th item in the data model).</li>\\n<li>itemX_Y: where X is the index of the row and Y is the index of an item in that row in a RowList's data model (for example, <strong>item4_11</strong> is the 11th item in row 4 of the data model).</li>\\n<li>focusItem: Gets the bounding rect of the ArrayGrid's focused item.</li>\\n<li>focusIndicator: Gets the bounding rect of the ArrayGrid's focus indicator (for example, the focus ring or list highlight).</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>An associative array with the bounding rectangle. </p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Return Type</th>\\n<th>Parameters</th>\\n<th>Return Value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>sceneSubBoundingRect</td>\\n<td>Dynamic</td>\\n<td>${sceneSubBoundingRect}</td>\\n<td>Bounding rectangle</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"ancestorsubboundingrectitemnumber-as-string-ancestor-as-rosgnode-as-object\\\">ancestorSubBoundingRect(itemnumber as String, ancestor as roSGNode) as Object</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Returns the bounding rectangle of this node's subpart into the specified  ancestor' s coordinate system. If the subpart does not exist or if the node is not an ancestor of the specified node, this will return the node's bounding rectangle</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>itemnumber</td>\\n<td>String</td>\\n<td>The <em>itemnumber</em> parameter may contain one of the following strings: <ul>\\n<li>itemX: where X is the index of an item in an ArrayGrid's data model (for example, <strong>item17</strong> is the 17th item in the data model).</li>\\n<li>itemX_Y: where X is the index of the row and Y is the index of an item in that row in a RowList's data model (for example, <strong>item4_11</strong> is the 11th item in row 4 of the data model).</li>\\n<li>focusItem: Gets the bounding rect of the ArrayGrid's focused item.</li>\\n<li>focusIndicator: Gets the bounding rect of the ArrayGrid's focus indicator (for example, the focus ring or list highlight).</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>ancestor</td>\\n<td>roSGNode</td>\\n<td>The ancestor of the subject node.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>An associative array with the bounding rectangle. </p>\\n<h2 id=\\\"example-illustrating-bounding-rectangles\\\">Example: Illustrating Bounding Rectangles</h2>\\n<p>We start with the following code example:</p>\\n<p>The scene has the following parenting structure:</p>\\n<pre><code>Scene\\nRectangleGroup\\nRectangle (Green)\\nRectangle (Yellow)\\n&#x3C;Scene>\\n  &#x3C;Group id=\\\"RectGroup\\\" translation=\\\"[100, 50]\\\" >\\n        &#x3C;Rectangle id=\\\"GreenRect\\\" width=\\\"100\\\" height=\\\"150\\\" color=\\\"0x00FF00FF\\\" translation=\\\"[200, 75]\\\" >\\n            &#x3C;Rectangle id=\\\"YellowRect\\\" width=\\\"150\\\" height=\\\"250\\\" color=\\\"0xFFFF00FF\\\" translation=\\\"[200,100]\\\" rotation=\\\"-0.45\\\"/>\\n        &#x3C;/Rectangle>\\n   &#x3C;/Group>\\n&#x3C;/Scene>\\n</code></pre>\\n<p>Initially, the illustration shows the local coordinates systems of each of these nodes.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/rectangle-group1.png\\\" alt=\\\"roku815px - rectangle-group1\\\" title=\\\"rectangle-group1\\\"></p>\\n<p>The next illustration shows the Yellow rectangle's localBoundingRect().</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/rectangle-group2.png\\\" alt=\\\"roku815px - rectangle-group2\\\" title=\\\"rectangle-group2\\\"></p>\\n<p>The next illustration shows the Yellow rectangle's boundingRect(), which is relative to it's parent's coordinate system.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/rectangle-group3.png\\\" alt=\\\"roku815px - rectangle-group3\\\" title=\\\"rectangle-group3\\\"></p>\\n<p>The next illustration shows the Yellow rectangle's sceneBoundingRect(), which is relative to the Scene's coordinate system.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/rectangle-group4.png\\\" alt=\\\"roku815px - rectangle-group4\\\" title=\\\"rectangle-group4\\\"></p>\\n<p>The next illustration shows the localBoundingRect() of the Green rectangle, that includes the union of the Green rectangle's local rectangle and the boundingRect() of it's child. This rectangle is relative to the Green rectangle's local coordinate system.</p>\\n<blockquote>\\n<p>Note that this is the smallest, screen-aligned rectangle the encloses both the Green and Yellow rectangle.</p>\\n</blockquote>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/rectangle-group5.png\\\" alt=\\\"roku815px - rectangle-group5\\\" title=\\\"rectangle-group5\\\"></p>\\n<p>The next illustration shows the boundingRect() of the Green rectangle, which is relative to its parent Group's coordinate system.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/rectangle-group6.png\\\" alt=\\\"roku815px - rectangle-group6\\\" title=\\\"rectangle-group6\\\"></p>\\n<p>The last illustration shows the Green rectangle's sceneBoundingRect(), which is relative to the Scene's coordinate system.</p>\\n<p> <img src=\\\"https://image.roku.com/ZHZscHItMTc2/rectangle-group7.png\\\" alt=\\\"roku815px - rectangle-group7\\\" title=\\\"rectangle-group7\\\"></p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsgnodechildren.md":"{\n  \"content\": \"<h1 id=\\\"ifsgnodechildren\\\">ifSGNodeChildren</h1>\\n<p>The ifSGNodeChildren interface allows querying and manipulation of nodes in a SceneGraph node tree, such as creating new nodes, placing them at certain positions in the tree, and removing them.</p>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNode\\\">roSGNode</a></td>\\n<td>The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>To use the methods in this interface to manipulate child nodes at the scene level, the subject nodes must be wrapped in another element, typically a Group node. For example:</p>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n&#x3C;component name = \\\"myScene\\\" extends = \\\"Scene\\\" >\\n  &#x3C;script type = \\\"text/brightscript\\\" >\\n    &#x3C;![CDATA[\\n    sub init()\\n      m.myGroup = m.top.FindNode(\\\"myGroup\\\")\\n      m.label = m.myGroup.getChild(0)\\n    end sub\\n    ]]>\\n  &#x3C;/script>\\n\\n  &#x3C;children>\\n    &#x3C;Group id = \\\"myGroup\\\">\\n      &#x3C;Label id = \\\"myLabel\\\" ... />\\n    &#x3C;/Group>\\n  &#x3C;/children>\\n&#x3C;/component>\\n</code></pre>\\n<p>In the example above, m.label will contain the roSGNode corresponding to the Label node after the getChild() call. On the other hand, the following will not work:</p>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n&#x3C;component name = \\\"myScene\\\" extends = \\\"Scene\\\" >\\n  &#x3C;script type = \\\"text/brightscript\\\" >\\n    &#x3C;![CDATA[\\n    sub init()\\n      m.label = m.top.getChild(0)\\n    end sub\\n    ]]>\\n  &#x3C;/script>\\n\\n  &#x3C;children>\\n    &#x3C;Label id = \\\"myLabel\\\" ... />\\n  &#x3C;/children>\\n&#x3C;/component>\\n</code></pre>\\n<p>The Scene node children are hidden elements used by the SceneGraph framework. Thus, despite the fact that the Label node is in the scene  element, it will not be retrieved by getChild() .</p>\\n<blockquote>\\n<p>Removing or replacing a node in a SceneGraph node tree can cause that node to be destroyed entirely if there are no more references to it.</p>\\n</blockquote>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"appendchildchild-as-rosgnode-as-boolean\\\">appendChild(child as roSGNode) as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Adds a child node to the end of the subject node list of children so that it is traversed last (of those children) during render.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>child</td>\\n<td>roSGNode</td>\\n<td>The child node to be appended to the end of the list.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the child node was successfully appended.</p>\\n<h3 id=\\\"createchildnodetype-as-string-as-object\\\">createChild(nodeType as String) as Object</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Creates a child node of type nodeType, and adds the new node to the end of the subject node list of children.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>nodeType</td>\\n<td>String</td>\\n<td>The node class to be created.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The child node that was created.</p>\\n<h3 id=\\\"insertchildchild-as-rosgnode-index-as-integer-as-boolean\\\">insertChild(child as roSGNode, index as Integer) as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Inserts a previously-created child node at the position index in the subject node list of children, so that this is the position that the new child node is traversed during render.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>child</td>\\n<td>roSGNode</td>\\n<td>The child node to be added to the child tree.</td>\\n</tr>\\n<tr>\\n<td>index</td>\\n<td>Integer</td>\\n<td>The postion index where the child node is to be inserted.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the child node that was successfully inserted.</p>\\n<h3 id=\\\"removechildchild-as-rosgnode-as-boolean\\\">removeChild(child as roSGNode) as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Finds a child node in the subject node list of children, and if found, remove it from the list of children. The match is made on the basis of actual object identity, that is, the value of the pointer to the child node.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>child</td>\\n<td>roSGNode</td>\\n<td>The child node to be removed from the child tree.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether the child node that was successfully removed.</p>\\n<h3 id=\\\"removechildindexindex-as-integer-as-boolean\\\">removeChildIndex(index as Integer) as Boolean</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>If the subject node has a child node in the index position, removes that child node from the subject node list of children.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>index</td>\\n<td>Integer</td>\\n<td>The position in the tree of the child node to be removed.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether the child node that was successfully removed.</p>\\n<h3 id=\\\"replacechildnewchild-as-rosgnode-index-as-integer-as-boolean\\\">replaceChild(newChild as roSGNode, index as Integer) as Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>If the subject node has a child node in the index position, replace that child node with the newChild node in the subject node list of children, otherwise do nothing.</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>newChild</td>\\n<td>roSGNode</td>\\n<td>The child node to replace the one specified by the index.</td>\\n</tr>\\n<tr>\\n<td>index</td>\\n<td>Integer</td>\\n<td>The index of the child node to be replaced.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A flag indicating whether the child node that was successfully replaced.</p>\\n<h3 id=\\\"getchildindex-as-integer-as-dynamic\\\">getChild(index as Integer) as Dynamic</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns the child node specified by the index.</p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>index</td>\\n<td>Integer</td>\\n<td>The index of the child node to be retrieved.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>The child node at the index position; otherwise, \\\"invalid\\\".</p>\\n<h3 id=\\\"getparent-as-rosgnode\\\">getParent() as roSGNode</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Returns the parent node of a node has been added to a list of children.</p>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>The parent node; otherwise, \\\"invalid\\\".</p>\\n<h3 id=\\\"getchildcount-as-integer\\\">getChildCount() as Integer</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Returns the current number of children in the subject node list of children. This is always a non-negative number.</p>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>The number of child nodes in the tree.</p>\\n<h3 id=\\\"reparentnewparent-as-rosgnode-adjusttransform-as-boolean-as-boolean\\\">reparent(newParent as roSGNode, adjustTransform as Boolean) as Boolean</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Moves the subject node to another parent node.</p>\\n<h4 id=\\\"parameters-7\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>newParent</td>\\n<td>roSGNode</td>\\n<td>The new parent node where the child node is to be moved.</td>\\n</tr>\\n<tr>\\n<td>adjustTransform</td>\\n<td>Boolean</td>\\n<td>Specifies whether the translation, rotation, and scale of the node are adjusted so that the node has the same transformation factors relative to the screen as it previously did.<br /><br />If <strong>adjustTransform</strong> is true, the subject node transformation factor fields (translation/rotation/scale) are adjusted so that the node has the same transformation factors relative to the screen as it previously did.<br /><br />If <strong>adjustTransform</strong> is false, the subject node is simply parented to the new node without adjusting its transformation factor fields, in which case, the reparenting operation could cause the node to jump to a new position on the screen.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>A flag indicating whether the node that was successfully moved to another parent node.</p>\\n<h3 id=\\\"appendchildrenchild_nodes-as-object-as-boolean\\\">appendChildren(child_nodes as Object) as Boolean</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Appends an array of children nodes to the subject node.</p>\\n<h4 id=\\\"parameters-8\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>child_nodes</td>\\n<td>Object</td>\\n<td>An roArray of child nodes to be appended to the subject node.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-10\\\">Return Value</h4>\\n<p>A flag indicating whether the children nodes were successfully appended.</p>\\n<h3 id=\\\"insertchildrenchild_nodes-as-object-index-as-integer-as-boolean\\\">insertChildren(child_nodes as Object, index as Integer) as Boolean</h3>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>Inserts an array of child nodes to the subject node, starting at a specific position.</p>\\n<h4 id=\\\"parameters-9\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>child_nodes</td>\\n<td>Object</td>\\n<td>An roArray of child nodes to be inserted in the tree.</td>\\n</tr>\\n<tr>\\n<td>index</td>\\n<td>Integer</td>\\n<td>The position in the tree where to insert the child nodes.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-11\\\">Return Value</h4>\\n<p>A flag indicating whether the children nodes were successfully inserted.</p>\\n<h3 id=\\\"removechildrenchild_nodes-as-object-as-boolean\\\">removeChildren(child_nodes as Object) as Boolean</h3>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Removes an array of child nodes from the subject node.</p>\\n<h4 id=\\\"parameters-10\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>child_nodes</td>\\n<td>Object</td>\\n<td>An roArray of child nodes to removed from the tree</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-12\\\">Return Value</h4>\\n<p>A flag indicating whether the children nodes were successfully removed.</p>\\n<h3 id=\\\"removechildrenindexnum_children-as-integer-index-as-integer--as-boolean\\\">removeChildrenIndex(num_children as Integer, index as Integer ) as Boolean</h3>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Removes a specific number of child nodes from the subject node starting at a specific position.</p>\\n<h4 id=\\\"parameters-11\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>num_children</td>\\n<td>Integer</td>\\n<td>The number of child nodes to be removed.</td>\\n</tr>\\n<tr>\\n<td>index</td>\\n<td>Integer</td>\\n<td>The starting position in the child node tree where the specified number of nodes are to be removed.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-13\\\">Return Value</h4>\\n<p>A flag indicating whether the children nodes were successfully removed.</p>\\n<h3 id=\\\"updatefields-as-roassociativearray-addfields-as-boolean-as-void\\\">update(fields as roAssociativeArray[, addFields as Boolean]) as Void</h3>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Takes the key-value pairs in an roAssociativeArray and maps the values to the respective field name in the calling node.</p>\\n<h4 id=\\\"parameters-12\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fields</td>\\n<td>roAssociativeArray</td>\\n<td>Contains key-value pairs corresponding to the fields in the subject node to be updated.</td>\\n</tr>\\n<tr>\\n<td>addFields</td>\\n<td>Boolean</td>\\n<td>optional (default = false). If true, and a specified key is not yet present, add it and value to the node.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"example\\\">Example</h4>\\n<p>The following example demonstrates how to use this method:</p>\\n<pre><code>aa = {\\\"a\\\":\\\"1\\\", \\\"b\\\":\\\"2\\\", \\\"c\\\":\\\"3\\\", \\\"d\\\":\\\"4\\\"}\\ncn = createObject(\\\"roSGNode\\\", \\\"contentNode\\\")\\ncn.addfield(\\\"a\\\",\\\"string\\\",false)\\ncn.addfield(\\\"b\\\",\\\"string\\\",false)\\ncn.addfield(\\\"c\\\",\\\"string\\\",false)\\ncn.update(aa,false)\\n'At this point, cn would contain the following:\\n&#x3C;Component: roSGNode> =\\n{\\n    change: &#x3C;Component: roAssociativeArray>\\n    focusable: false\\n    focusedChild: &#x3C;Component: roInvalid>\\n    id: \\\"\\\"\\n    a: \\\"1\\\"\\n    b: \\\"2\\\"\\n    c: \\\"3\\\"\\n}\\n</code></pre>\\n<h3 id=\\\"replacechildrenchild_nodes-as-object-index-as-integer-as-boolean\\\">replaceChildren(child_nodes as Object, index as Integer) as Boolean</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>Replaces the child nodes in the subject node, starting at the position specified by index, with new child nodes specified by child_nodes</p>\\n<blockquote>\\n<p>Starting from Roku OS 8.1, when using this method to update the content of each item in a markupGrid, if more items are supplied than there are in the original list (going from 4 items to 5), the 'extra' items are ignored and not added as children.</p>\\n</blockquote>\\n<h4 id=\\\"parameters-13\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>child_nodes</td>\\n<td>Object</td>\\n<td>An roArray of child nodes to replace the nodes in the tree.</td>\\n</tr>\\n<tr>\\n<td>index</td>\\n<td>Integer</td>\\n<td>The starting position in the tree from where to replace the child nodes.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-14\\\">Return Value</h4>\\n<p>A flag indicating whether the children nodes were successfully replaced.</p>\\n<h3 id=\\\"getchildrennum_children-as-integer-index-as-integer-as-object\\\">getChildren(num_children as Integer, index as Integer) as Object</h3>\\n<h4 id=\\\"description-16\\\">Description</h4>\\n<p>Retrieves a specific number of child nodes from the subject node, starting at a specific position.</p>\\n<h4 id=\\\"parameters-14\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>num_children</td>\\n<td>Integer</td>\\n<td>The number of child nodes to be retrieved.</td>\\n</tr>\\n<tr>\\n<td>index</td>\\n<td>Integer</td>\\n<td>The starting position in the child node tree where the specified number of nodes are to be retrieved.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-15\\\">Return Value</h4>\\n<p>An roArray containing the child nodes retrieved. If num_children is -1, all the child nodes are returned.</p>\\n<h3 id=\\\"createchildrennum_children-as-integer-subtype-as-string--as-object\\\">createChildren(num_children as Integer, subtype as String ) as Object</h3>\\n<h4 id=\\\"description-17\\\">Description</h4>\\n<p>Creates a specific number of new child nodes of a specific type or extended type.</p>\\n<h4 id=\\\"parameters-15\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>num_children</td>\\n<td>Integer</td>\\n<td>Number of new child nodes to be created.</td>\\n</tr>\\n<tr>\\n<td>subtype</td>\\n<td>String</td>\\n<td>Node type or extended type of the new child nodes to be created.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-16\\\">Return Value</h4>\\n<p>An roArray containing the new child nodes created.</p>\\n<h3 id=\\\"getscene-as-rosgnode\\\">getScene() as roSGNode</h3>\\n<h4 id=\\\"description-18\\\">Description</h4>\\n<p>Returns the node's root Scene. This returns a valid Scene even if the node is not parented.</p>\\n<h4 id=\\\"return-value-17\\\">Return Value</h4>\\n<p>The node's root Scene.</p>\\n<h2 id=\\\"debugging-only-methods\\\">Debugging-only Methods</h2>\\n<p>The following methods can be called on any subject node and return the same global results. They can be used in a development channel for debugging purposes, but should not be used in a production channel.</p>\\n<blockquote>\\n<p>These methods are similar to the debugger sgnodes commands. See <a href=\\\"/docs/developer-program/debugging/debugging-channels.md#special-scenegraph-debugging-commands\\\">Special SceneGraph Debugging Commands</a> for information on the debugger sgnodes commands. Also please note that calling these functions from code should only be done for debugging purposes. Any calls to <a href=\\\"#getall-as-object\\\">getAll()</a>, <a href=\\\"#getroots-as-object\\\">getRoots()</a>, <a href=\\\"#getrootsmeta-as-object\\\">getRootsMeta()</a> and <a href=\\\"#getallmeta-as-object\\\">getAllMeta()</a> should be removed from your production channels. |</p>\\n</blockquote>\\n<h3 id=\\\"getall-as-object\\\">getAll() as Object</h3>\\n<h4 id=\\\"description-19\\\">Description</h4>\\n<p>Returns an array with every existing node created by the currently running channel.</p>\\n<h4 id=\\\"return-value-18\\\">Return Value</h4>\\n<p>An roArray with the all the existing nodes created by the channel.</p>\\n<h3 id=\\\"getroots-as-object\\\">getRoots() as Object</h3>\\n<h4 id=\\\"description-20\\\">Description</h4>\\n<p>Returns an array with every existing node without a parent created by the currently running channel.</p>\\n<p>The existence of these unparented nodes means they are being kept alive by direct BrightScript references. These could be in variables local to a function, arrays, or associative arrays, including a component global m or an associative array field of a node.</p>\\n<h4 id=\\\"return-type\\\">Return Type</h4>\\n<p>An roArray with every existing node without a parent created by the currently running channel</p>\\n<h3 id=\\\"getrootsmeta-as-object\\\">getRootsMeta() as Object</h3>\\n<h4 id=\\\"description-21\\\">Description</h4>\\n<p>Returns an array with every existing node without a parent created by the currently running channel.</p>\\n<p>The existence of these unparented nodes means they are being kept alive by direct BrightScript references. These could be in variables local to a function, arrays, or associative arrays, including a component global m or an associative array field of a node. These unparented nodes are organized as an XML forest of trees.</p>\\n<h4 id=\\\"return-value-19\\\">Return Value</h4>\\n<p>An roArray with every existing node without a parent created by the currently running channel.</p>\\n<h3 id=\\\"getallmeta-as-object\\\">getAllMeta() as Object</h3>\\n<h4 id=\\\"description-22\\\">Description</h4>\\n<p>Returns an array with every existing node created by the currently running channel (similar to the <a href=\\\"#getall-as-object\\\">getAll()</a> method) organized as an XML forest of trees according to the usual parent-child node relationship. Cycles are handled with a reference entry in the tree rather than indefinite recursion.</p>\\n<h4 id=\\\"return-value-20\\\">Return Value</h4>\\n<p>An roArray of strings with the all the existing nodes created by the channel.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsgnodedict.md":"{\n  \"content\": \"<h1 id=\\\"ifsgnodedict\\\">ifSGNodeDict</h1>\\n<p>The ifSGNodeDict interface allows you access information about the nodes in a SceneGraph node tree, and find and return a node with a specific ID.</p>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNode\\\">roSGNode</a></td>\\n<td>The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"findnodename-as-string-as-object\\\">findNode(name as String) as Object</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the node that is a descendant of the nearest component ancestor of the subject node (possibly the subject node itself) and whose id field is set to name. The search for the descendant node is a breadth-first search that includes child nodes in nodes that are declared as custom components defined in other XML component files. These together allow finding siblings and cousins of a node within the context of a component. If a node with the specified name is not found, an invalid object is returned</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name</td>\\n<td>String</td>\\n<td>The name of the node to be retrieved.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The node that is a descendant of the nearest component ancestor of the subject node.</p>\\n<h3 id=\\\"subtype-as-string\\\">subtype() as String</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the subtype of the subject node as specified when it was created.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The subtype of the subject node. </p>\\n<h3 id=\\\"parentsubtypenodetype-as-string-as-string\\\">parentSubtype(nodeType as String) as String</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns the subtype of the parent of the nodeType in the SceneGraph node class hierarchy. </p>\\n<blockquote>\\n<p>This method does not actually reference the subject node.</p>\\n</blockquote>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>nodeType</td>\\n<td>String</td>\\n<td>The node type of the parent node.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>The subtype of the parent node.</p>\\n<h3 id=\\\"issubtypenodetype-as-string-as-boolean\\\">isSubtype(nodeType as String) as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Checks whether the subtype of the subject node is a descendant of the subtype nodeType in the SceneGraph node class hierarchy.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>nodeType</td>\\n<td>String</td>\\n<td>The node type of the subject node.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether the subtype of the subject node is a descendant of the subtype nodeType.</p>\\n<h3 id=\\\"issamenoderosgnode-as-object-as-boolean\\\">isSameNode(RoSGNode as Object) as Boolean</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Checks whether a specific roSGNode refers to the same SceneGraph node object as the subject node.</p>\\n<p>This can be useful when the RoSGNode objects come from two different sources, for example when one is stored in an associative array, and the other is obtained from an RoSGNode interface method that returns an RoSGNode object, like getChild(). It may be that the application needs to know whether the two RoSGNode objects are actually referring to the same underlying SceneGraph node. </p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Return Type</th>\\n<th>Parameters</th>\\n<th>Return Value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>isSameNode</td>\\n<td>Boolean</td>\\n<td><table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>RoSGNode</td>\\n<td>Object</td>\\n<td>The roSGNode to be checked.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n<td>True/False</td>\\n<td>Returns a Boolean value indicating whether the RoSGNode parameter refers to the same SceneGraph node object as the subject node</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether the nodes refer to the same SceneGraph node object.</p>\\n<h4 id=\\\"example\\\">Example:</h4>\\n<p>The following example should print \\\"same\\\":</p>\\n<pre><code>n = createObject(\\\"roSGNode\\\", \\\"Node\\\")\\nc = n.createChild(\\\"Node\\\")\\nif c.isSameNode(n.getChild(0)) then print \\\"same\\\"\\n</code></pre>\\n<h3 id=\\\"cloneisdeepcopy-as-boolean-as-object\\\">clone(isDeepCopy as Boolean) as Object</h3>\\n<p>Returns a copy of the entire node tree or just a shallow copy.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Return Type</th>\\n<th>Parameters</th>\\n<th>Return Value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>clone</td>\\n<td>Object</td>\\n<td><table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>isDeepCopy</td>\\n<td>Boolean</td>\\n<td>True = return a copy of the entire node tree. <br />False = return a shallow copy of the node tree.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n<td>Node tree</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A node tree.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsgnodefield.md":"{\n  \"content\": \"<h1 id=\\\"ifsgnodefield\\\">ifSGNodeField</h1>\\n<p>The ifSGNodeField interface allows querying, getting, setting, and performing other similar manipulation operations on Scene Graph node fields. This interface also allows you to set and unset event observers on a subject node field.</p>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNode\\\">roSGNode</a></td>\\n<td>The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"setfieldfieldname-as-string-value-as-object-as-boolean\\\">setField(fieldName as String, value as Object) as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sets the value of a subject node field. This will fail and stop script execution if the value is not of the appropriate type.</p>\\n<p>You can also use the node.field syntax to get the same result as setField(). Specifically, rect.setField(\\\"opacity\\\", 0.5) is equivalent to rect.opacity = 0.5. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldName</td>\\n<td>String</td>\\n<td>The name of the field to be updated.</td>\\n</tr>\\n<tr>\\n<td>value</td>\\n<td>Object</td>\\n<td>The updated value for the field.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the field was successfully updated.</p>\\n<p><em>Since Roku OS 9.3</em>, <code>observeField()</code> and <code>observeFieldScoped()</code> methods include an optional <code>infoFields</code> parameter, which is an array of field names.  Generally, these should be relevant fields in the same object being observed, which are necessary to give context to the field that triggered the field change event. The triggered event object itself will provide a <code>getInfo()</code> method, which returns an AA that contains the names and instantaneous values of the requested \\\"context\\\" fields at the point when the observed field changed. For example, use of <code>videoNode.observeField(\\\"position\\\", m.port, [\\\"clipId\\\", \\\"programId\\\"])</code> to set up an observer for <code>position</code> would later allow the call <code>extraInfo = msg.GetInfo()</code> to retrieve requested \\\"context\\\" information, given that <code>msg</code> is the relevant roSGNodeEvent indicating that <code>position</code> has changed. The contents of <code>extraInfo</code> would resemble <code>{\\\"clipid\\\": 1, \\\"programid\\\": 0}</code>.</p>\\n<h3 id=\\\"observefieldfieldname-as-string-functionname-as-string--infofields-as-object-as-boolean\\\">observeField(fieldName as String, functionName as String [, infoFields as Object]) as Boolean</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Calls a function when a field of the subject node changes. The function called must be in the scope of the current component.</p>\\n<p>Optionally, this form can pass an <a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNodeEvent\\\">roSGNodeEvent</a> message to the callback function by specifying the message object as an argument to the callback function. The following sample demonstrates how to do this:</p>\\n<pre><code>sub callback_function(message as Object)\\n  ...\\nend sub\\n</code></pre>\\n<p>From this message in the callback function, you can get the node ID, the field name, and the field value at the time it was set, using the same <a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNodeEvent\\\">roSGNodeEvent</a> methods described in the overloaded form observeField(fieldName as String, port as Object). The <a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNodeEvent\\\">roSGNodeEvent</a> message also includes a pointer to the node that can be accessed using getRoSGNode(), to associate nodes without an ID in the callback function. Additional information can be accessed in the callback function by storing the information in a custom field of the node. </p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldName</td>\\n<td>String</td>\\n<td>The name of the field to be monitored.</td>\\n</tr>\\n<tr>\\n<td>functionName</td>\\n<td>String</td>\\n<td>The name of the method to be executed when the value of the field   changes.</td>\\n</tr>\\n<tr>\\n<td>infoFields</td>\\n<td>Object (String array)</td>\\n<td>Optional. Names of \\\"context\\\" field values to be reported via getInfo() when the monitored field changes.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether this operation was successful. </p>\\n<h3 id=\\\"observefieldfieldname-as-string-port-as-object--infofields-as-object-as-boolean\\\">observeField(fieldName as String, port as Object [, infoFields as Object]) as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>This overloaded form sends an <a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNodeEvent\\\">roSGNodeEvent</a> message to the <a href=\\\"/docs/references/brightscript/components/romessageport.md\\\" title=\\\"roMessagePort\\\">roMessagePort</a> identified by port when the subject node field identified by fieldName changes value. </p>\\n<ul>\\n<li>Running GetNode() on the message retrieves the ID of the node that changed.</li>\\n<li>Running GetField() on the message gets the name of the field that changed.</li>\\n<li>Running GetData() on the message gets the new field value at the time of the change.</li>\\n</ul>\\n<p>This allows other threads to react to field changes, and avoids missing a value when the field changes twice before the message handler is able to receive the <a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNodeEvent\\\">roSGNodeEvent</a> messages.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldName</td>\\n<td>String</td>\\n<td>The name of the field to be monitored.</td>\\n</tr>\\n<tr>\\n<td>port</td>\\n<td>Object</td>\\n<td>The <a href=\\\"/docs/references/brightscript/components/romessageport.md\\\" title=\\\"roMessagePort\\\">roMessagePort</a> to receive a <a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNodeEvent\\\">roSGNodeEvent</a> message when the value of the field changes.</td>\\n</tr>\\n<tr>\\n<td>infoFields</td>\\n<td>Object (String array)</td>\\n<td>Optional. Names of \\\"context\\\" field values to be reported via getInfo() when the monitored field changes.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether this operation was successful. </p>\\n<h3 id=\\\"queuefieldsqueuenode-as-boolean-as-boolean\\\">queueFields(queueNode as Boolean) as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Makes subsequent operations on the node fields to queue on the node itself rather than on the <a href=\\\"/docs/references/scenegraph/scene.md\\\" title=\\\"Scene\\\">Scene</a> node render thread. This prevents the operations from being executed immediately.</p>\\n<p>Subsequently setting this method to false will then cause all of the operations to be transferred to the <a href=\\\"/docs/references/scenegraph/scene.md\\\" title=\\\"Scene\\\">Scene</a> node render thread queue to be immediately executed in a single render cycle. This can be helpful when multiple fields of a node that affect the appearance of the user interface need to be changed at one time from another thread. </p>\\n<p>This method should not be used on a node that is not owned by the render thread, as the render thread will not be able to execute the operations when they are released to it. You can use it when a node owned by a <a href=\\\"/docs/references/scenegraph/control-nodes/task.md\\\" title=\\\"Task\\\">Task</a> node thread is transferred to the render thread, by setting it to a child or a node field of a node already owned by the render thread, where the queue is then released.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>queueNode</td>\\n<td>Boolean</td>\\n<td>A flag enabling queuing on the node.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating the current state of <strong>queueNode</strong>.</p>\\n<h3 id=\\\"addfieldsfields-as-object-as-boolean\\\">addFields(fields as Object) as Boolean</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Adds the field(s) and corresponding field value(s) defined as key-value pair(s) in the associative array fields to the subject node. The types of the added fields are determined by the values which correspond to the allowable types for an <code>&#x3C;interface></code> field.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fields</td>\\n<td>Object</td>\\n<td>An roAssociativeArray containing key-value pairs for the fields to be added.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether the fields have been successfully added.</p>\\n<h3 id=\\\"getfieldfieldname-as-string-as-object\\\">getField(fieldName as String) as Object</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Returns the appropriately-typed value from the specified field of the subject node.</p>\\n<p>You can also use the node.field syntax to get the same result as getField(). Specifically, <code>rectpos = rect.getField(\\\"translation\\\")</code> is equivalent to <code>rectpos = rect.translation</code>. You can also use the syntax node[fieldName].</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldName</td>\\n<td>String</td>\\n<td>The name of the field to be retrieved.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A typed value.</p>\\n<h3 id=\\\"addfieldfieldname-as-string-type-as-string-alwaynotify-as-boolean-as-boolean\\\">addField(fieldName as String, type as String, alwayNotify as Boolean) as Boolean</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Adds a field with the specified name and type to the subject node. The added field is initialized to the default value for the type.</p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldName</td>\\n<td>String</td>\\n<td>The name of the field to be added.</td>\\n</tr>\\n<tr>\\n<td>type</td>\\n<td>String</td>\\n<td>The type of the field to be added.<br /><br />Type declarations must be lowercase or the field will not be added to the node. For example, declaring \\\"Boolean\\\" as the type will prevent the field from being added.</td>\\n</tr>\\n<tr>\\n<td>alwayNotify</td>\\n<td>Boolean</td>\\n<td>Specifies whether observers of the field are triggered when the field value is updated to the same or new value (true), or only when the field changes to a new value (false).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>A flag indicating whether the field have been successfully added.</p>\\n<h3 id=\\\"getfieldtypefieldname-as-string-as-string\\\">getFieldType(fieldName as String) as String</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Returns the type of a specific field of the subject node.</p>\\n<h4 id=\\\"parameters-7\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldName</td>\\n<td>String</td>\\n<td>The name of the field to have its type retrieved.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>The field type. </p>\\n<h3 id=\\\"setfieldsfields-as-object-as-boolean\\\">setFields(fields as Object) as Boolean</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Sets the values for one or more fields.</p>\\n<h4 id=\\\"parameters-8\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fields</td>\\n<td>Object</td>\\n<td>An roAssociativeArray containing key-value pairs for the fields to be updated.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>A flag indicating whether the fields have been successfully updated.</p>\\n<h3 id=\\\"removefieldsfieldnames-as-object-as-boolean\\\">removeFields(fieldNames as Object) as Boolean</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Removes one or more fields from the subject node. </p>\\n<p>Fields defined as part of the built-in node class cannot be removed. Fields defined in <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\" title=\\\" Content Meta-Data\\\">content metadata</a> and the related SceneGraph node class metadata bindings can be removed, but will be dynamically re-added at any time they are explicitly accessed.</p>\\n<h4 id=\\\"parameters-9\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldNames</td>\\n<td>Object</td>\\n<td>An roArray containing the names of the fields to be removed.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>A flag indicating whether the fields have been successfully removed.</p>\\n<h3 id=\\\"unobservefieldscopedfieldname-as-string-as-boolean\\\">unobserveFieldScoped(fieldName as String) as Boolean</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Removes the connection between the observing component and the observed node's field. </p>\\n<p>This is similar to the <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefield.md#unobservefieldfieldname-as-string-as-boolean\\\" title=\\\"unobserveField(fieldName as String)\\\">unobserveField()</a> method, which undoes both forms of observeField() and thus undoes both forms of observeFieldScoped(). </p>\\n<p>This method looks for and removes the implicit connection state stored in the observing object so that the calling component will no longer receive notification of changes in the specified node's field. Connections in other observing objects or even in the observed object are not affected</p>\\n<h4 id=\\\"parameters-10\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldName</td>\\n<td>String</td>\\n<td>The name of the field to no longer be monitored.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-10\\\">Return Value</h4>\\n<p>A flag indicating whether this operation was successful. </p>\\n<h3 id=\\\"removefieldfieldname-as-string-as-boolean\\\">removeField(fieldName as String) as Boolean</h3>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>Removes a field from the subject node. Fields defined in <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\" title=\\\" Content Meta-Data\\\">content metadata</a> and the related SceneGraph node class metadata bindings can be removed, but will be dynamically re-added at any time they are explicitly accessed.</p>\\n<h4 id=\\\"parameters-11\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldName</td>\\n<td>String</td>\\n<td>The name of the field to be removed.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-11\\\">Return Value</h4>\\n<p>A flag indicating whether the field has been successfully removed.</p>\\n<h3 id=\\\"observefieldscopedfieldname-as-string-functionname-as-string-infofields-as-object-as-boolean\\\">observeFieldScoped(fieldName as String, functionName as String[, infoFields as Object]) as Boolean</h3>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Sets up a connection between the observed node's field and the current component from which this call is made. This method is similar to the <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefield.md#observefieldfieldname-as-string-functionname-as-string-as-boolean\\\" title=\\\"observeField(fieldName as String, functionName as String)\\\">observeField()</a> method.</p>\\n<p>While the connection exists, any change in the called/observed node's field specified by <strong>fieldName</strong> results in calling the function specified by functionName in the observing component. </p>\\n<p>The callback will be on the thread that owns the observed node. This is usually the render thread except in some narrowly defined scenarios. See <a href=\\\"/docs/developer-program/core-concepts/threads.md\\\" title=\\\"SceneGraph Threads\\\">SceneGraph Threads</a> for further details.</p>\\n<h4 id=\\\"parameters-12\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldName</td>\\n<td>String</td>\\n<td>The name of the field to be monitored.</td>\\n</tr>\\n<tr>\\n<td>functionName</td>\\n<td>String</td>\\n<td>The name of the method to be executed when the value of the field   changes.</td>\\n</tr>\\n<tr>\\n<td>infoFields</td>\\n<td>Object (String array)</td>\\n<td>Optional. Names of \\\"context\\\" field values to be reported via getInfo() when the monitored field changes.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-12\\\">Return Value</h4>\\n<p>A flag indicating whether this operation was successful. </p>\\n<h3 id=\\\"observefieldscopedfieldname-as-string-port-as-object-infofields-as-object-as-boolean\\\">observeFieldScoped(fieldName as String, port as Object[, infoFields as Object]) as Boolean</h3>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Sets up a connection between the observed node's field and the current component from which this call is made. This method is similar to the <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefield.md#observefieldfieldname-as-string-functionname-as-string-as-boolean\\\" title=\\\"observeField(fieldName as String, functionName as String)\\\">observeField()</a> method.</p>\\n<p>While the connection exists, any change in the called/observed node's field specified by fieldName results in a message being sent to the <a href=\\\"/docs/references/brightscript/components/romessageport.md\\\" title=\\\"roMessagePort\\\">roMessagePort</a> specified by port.</p>\\n<p>The message will be received on the thread that owns the port. This is either a task thread or the main BrightScript thread. See <a href=\\\"/docs/developer-program/core-concepts/threads.md\\\" title=\\\"SceneGraph Threads\\\">SceneGraph Threads</a> for further details.</p>\\n<h4 id=\\\"parameters-13\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldName</td>\\n<td>String</td>\\n<td>The name of the field to be monitored.</td>\\n</tr>\\n<tr>\\n<td>port</td>\\n<td>Object</td>\\n<td>The <a href=\\\"/docs/references/brightscript/components/romessageport.md\\\" title=\\\"roMessagePort\\\">roMessagePort</a> to receive a <a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNodeEvent\\\">roSGNodeEvent</a> message when the value of the field changes.</td>\\n</tr>\\n<tr>\\n<td>infoFields</td>\\n<td>Object (String array)</td>\\n<td>Optional. Names of \\\"context\\\" field values to be reported via getInfo() when the monitored field changes.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-13\\\">Return Value</h4>\\n<p>A flag indicating whether this operation was successful. </p>\\n<h3 id=\\\"unobservefieldfieldname-as-string-as-boolean\\\">unobserveField(fieldName as String) as Boolean</h3>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Removes the previously established connections between the subject node field identified by fieldName and any callback functions or message ports.</p>\\n<h4 id=\\\"parameters-14\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldName</td>\\n<td>String</td>\\n<td>The name of the field to no longer be monitored.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-14\\\">Return Value</h4>\\n<p>A flag indicating whether this operation was successful. </p>\\n<h3 id=\\\"getfields-as-object\\\">getFields() as Object</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>Returns the names and values of all the fields in the node.</p>\\n<h4 id=\\\"return-value-15\\\">Return Value</h4>\\n<p>An roAssociativeArray containing key-value pairs with the element names and values. </p>\\n<h3 id=\\\"hasfieldfieldname-as-string-as-boolean\\\">hasField(fieldName as String) as Boolean</h3>\\n<h4 id=\\\"description-16\\\">Description</h4>\\n<p>Checks whether a field exists in the node. </p>\\n<h4 id=\\\"parameters-15\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldName</td>\\n<td>String</td>\\n<td>The name of the field to be checked for whether it exists in the node.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-16\\\">Return Value</h4>\\n<p>A flag indicating whether the subject node has a field whose name exactly matches fieldName, or whose fully lowercase analog is identical to that of fieldName.</p>\\n<h3 id=\\\"getfieldtypes-as-object\\\">getFieldTypes() as Object</h3>\\n<h4 id=\\\"description-17\\\">Description</h4>\\n<p>Returns the names and types of all the fields in the node.</p>\\n<h4 id=\\\"return-value-17\\\">Return Value</h4>\\n<p>An roAssociativeArray containing key-value pairs with the element names and types. </p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Return Type</th>\\n<th>Return Value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>getFieldTypes</td>\\n<td>Object</td>\\n<td>roAssociatve Array</td>\\n<td>Returns an roAssociativeArray for the subject node containing key-value pairs with the field names and field types, respectively.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"threadinfo-as-object\\\">threadinfo() as Object</h3>\\n<h4 id=\\\"description-18\\\">Description</h4>\\n<p>A runtime debugging method for helping minimize Rendezvous spread.  This method can be called on any node from any thread.</p>\\n<p>The following example demonstrates the information returned by this method: </p>\\n<pre><code>{   node: { type: \\\"XXComponent\\\",          \\n    id: \\\"XXID\\\",          \\n    address: 0x123XXX,          \\n    willRendezvousFromCurrentThread: \\\"yes\\\",          \\n    owningThread: { type: \\\"Render\\\", name: \\\"newMainScene\\\", id:\\\"123456\\\" }        \\n},\\n    currentThread: { type: \\\"Task\\\",   name: \\\"conviva\\\",     id: \\\"234567\\\" },    \\n    renderThread: { type: \\\"Render\\\", name: \\\"newMainScene\\\", id: \\\"123456\\\" }\\n}\\n</code></pre>\\n<blockquote>\\n<p>Do not call this method from within function main() or any function called by function main()</p>\\n</blockquote>\\n<h4 id=\\\"return-value-18\\\">Return Value</h4>\\n<p>An roAssociatveArray with the following information:</p>\\n<ul>\\n<li>What is calling a thread function is being called from.</li>\\n<li>On which component's behalf (what m.top) the current function is executing.</li>\\n<li>The thread ownership of the node in question.</li>\\n<li>Whether or not access to the node from the current thread would cause a rendezvous.</li>\\n</ul>\\n<h3 id=\\\"signalbeaconbeacon-as-string-as-integer\\\">signalBeacon(beacon As String) As Integer</h3>\\n<p><em>Available since Roku OS 9.1</em></p>\\n<h4 id=\\\"description-19\\\">Description</h4>\\n<p>Signals start and/or stop points for measuring channel launch and Electronic Program Grid (EPG) launch times.                                                                                                                     </p>\\n<p>To pass certification, a channel must finish launching within the time specified in the <a href=\\\"/docs/developer-program/certification/certification.md#3performance\\\">certification performance requirements</a>. The Roku OS automatically fires an <strong>AppLaunchInitiate</strong> event to mark when the user presses the OK button to launch a channel from the Roku home screen. The channel, however, must fire the corresponding <code>AppLaunchComplete</code> to mark when the channel home page is fully rendered or when video playback starts after handling a <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefield.md\\\">deep link</a> and the channel can respond to commands sent via the remote control.</p>\\n<p>Starting in Roku OS 9.3, if the channel UI displays a login or user selection dialog before the home page, the channel can fire <strong>AppDialogInitiate</strong> and <strong>AppDialogComplete</strong> beacons when the dialog loads and exits, respectively. These new beacons enable more accurate measurements of channel launch times as the time spent on any dialogs requiring user input prior to rendering the home page are subtracted from the overall channel launch time. If the channel displays more that one dialog before the home page, multiple pairs of <strong>AppDialogInitiate</strong>/<strong>AppDialogComplete</strong> beacons may be fired. Do not fire AppDialog beacons on message dialogs that do not involve any user interaction (for example, a \\\"please wait\\\" or \\\"loading\\\" dialog).</p>\\n<p>To fire signal beacons within your application, call the <code>signalBeacon()</code> function on any node as demonstrated in the following examples:</p>\\n<pre><code>myScene.signalBeacon(“AppLaunchComplete”)\\nmyEPGComponent.signalBeacon(“EPGLaunchInitiate”) \\nm.top.signalBeacon(“EPGLaunchComplete”)`\\n</code></pre>\\n<blockquote>\\n<p>Only the first sequence of EPG launch beacons is recorded.  If a user launches the EPG more than once while the channel is running, a warning message is output to the debug console. This warning message, which acknowledges the receipt of the beacon while notifying that subsequent ones will not be recorded, may be ignored. </p>\\n<p>Only EPG launch sequences that start within 5 seconds of the <code>AppLaunchComplete</code> event being fired qualify as a valid measurements for certification. EPG launch sequences fired after the 5-second window are still recorded so that channel performance can be compared against requirements.</p>\\n</blockquote>\\n<p>The following table summarizes when to fire the <code>AppLaunchComplete</code>, <code>AppDialogLaunch/AppDialogComplete</code>,  and <code>EPGLauchInitiate</code>/<code>EPGLauchComplete</code> beacons and when their timestamps are recorded:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Launch Event</th>\\n<th><strong>Placement</strong></th>\\n<th><strong>Timestamping</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>AppLaunchComplete</td>\\n<td>When the channel home page is fully rendered, or when video playback starts and the channel can responds to commands sent via the remote control (if your channel is launched to direct playback).The system automatically fires an AppLaunchInitiated beacon to marks when your app is initially launched.</td>\\n<td>The first render pass completes after the stop point has been signaled.</td>\\n</tr>\\n<tr>\\n<td>AppDialogLaunch</td>\\n<td>Before signaling AppLaunchComplete, when the channel enters a login dialog, user selection screen, network error dialog or any other dialog/screen where the app waits for user input.</td>\\n<td>The dialog is fully displayed and ready for user interaction.</td>\\n</tr>\\n<tr>\\n<td>AppDialogComplete</td>\\n<td>The channel exits the last dialog before the home screen is rendered.</td>\\n<td>The user dismisses the dialog or a timeout occurs that forces the dialog to exit.</td>\\n</tr>\\n<tr>\\n<td>EPGLaunchInitiate</td>\\n<td>Where your app initiates the display of the channel guide.</td>\\n<td>The last keypress before the start beacon was signaled. If there was no prior keypress, the start beacon signal time.</td>\\n</tr>\\n<tr>\\n<td>EPGLaunchComplete</td>\\n<td>Where the channel guide is fully rendered and operational.</td>\\n<td>The first render pass completes after the stop point has been signaled.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-19\\\">Return Value</h4>\\n<p>When you fire a launch event, the system will return an integer indicating the result of its signaling:</p>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>Return Code</strong></th>\\n<th><strong>Description</strong></th>\\n<th></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>0</td>\\n<td>Success</td>\\n<td>The event was successfully signaled.</td>\\n</tr>\\n<tr>\\n<td>1</td>\\n<td>Not Ready</td>\\n<td>The event cannot be fired until after the AppLaunchComplete beacon has been completed.</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td>Invalid</td>\\n<td>An invalid string was passed into the signalBeacon function.</td>\\n</tr>\\n<tr>\\n<td>3</td>\\n<td>Already Signaled</td>\\n<td>An event that can only be fired once (AppLaunchComplete) was signaled again.</td>\\n</tr>\\n<tr>\\n<td>4</td>\\n<td>Wrong Order</td>\\n<td>The completion event was fired before the corresponding initiate event (for example, EPGLaunchComplete was signaled before EPGLaunchInitiate).</td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>In addition to the channel launch, dialog launch, and EPG launch times, the Roku OS automatically measures five other certification performance metrics: app compile time, video start time, live start time, channel change time, and channel exit time. You can use the <a href=\\\"/docs/developer-program/debugging/debugging-channels.md\\\">BrightScript console</a> (port 8085) to view a report detailing your channel's performance. See <a href=\\\"/docs/developer-program/debugging/debugging-channels.md\\\">Measuring channel performance</a> for more information.</p>\\n</blockquote>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsgnodefocus.md":"{\n  \"content\": \"<h1 id=\\\"ifsgnodefocus\\\">ifSGNodeFocus</h1>\\n<p>The ifSGNodeFocus interface is used to query and manipulate the remote control focus of the nodes in a SceneGraph node tree.</p>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNode\\\">roSGNode</a></td>\\n<td>The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"setfocuson-as-boolean-as-boolean\\\">setFocus(on as Boolean) as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sets the current remote control focus to the subject node.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>on</td>\\n<td>Boolean</td>\\n<td>True = Sets the current remote control focus to the subject node. This also automatically removes focus from the node on which it was previously set. <br />False = Removes focus from the subject node if it had it. Setting the remote control focus to false is rarely necessary, and can lead to unexpected behavior.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether focus on the subject node has successfully been updated. </p>\\n<h3 id=\\\"hasfocus-as-boolean\\\">hasFocus() as Boolean</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Checks whether the subject node has the remote control focus.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether the subject node has the remote control focus.</p>\\n<h3 id=\\\"isinfocuschain-as-boolean\\\">isInFocusChain() as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Checks whether the subject node or any of its descendants in the SceneGraph node tree have remote control focus.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the subject node or any of its descendants in the SceneGraph node tree have the remote control focus.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsgnodehttpagentaccess.md":"{\n  \"content\": \"<h1 id=\\\"ifsgnodehttpagentaccess\\\">ifSGNodeHttpAgentAccess</h1>\\n<p>The ifSGNodeHttpAgentAccess interface allows you to get an <a href=\\\"/docs/references/brightscript/components/rohttpagent.md\\\" title=\\\"roHttpAgent\\\">roHttpAgent</a> object from a SceneGraph node, and set an roHttpAgent object for a nod</p>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNode\\\">roSGNode</a></td>\\n<td>The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"gethttpagent-as-object\\\">getHttpAgent() as Object</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the roHttpAgent object for the node.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The roHttpAgent object for the node, which may be one of the following:</p>\\n<ul>\\n<li>the node roHttpAgent object, if it was set using setHttpAgent()</li>\\n<li>the roHttpAgent object of the closest ancestor node that has an roHttpAgent set</li>\\n<li>the default roHttpAgent object for the application that contains the node</li>\\n</ul>\\n<h3 id=\\\"sethttpagenthttp_agent-as-object-as-boolean\\\">setHttpAgent(HTTP_agent as Object) as Boolean</h3>\\n<p>Sets an roHttpAgent object for the node. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>HTTP_agent</td>\\n<td>Object</td>\\n<td>The roHttpAgent object to be set for the node.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether the roHttpAgent object was successfully set.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsocket.md":"{\n  \"content\": \"<h1 id=\\\"ifsocket\\\">ifSocket</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rodatagramsocket.md\\\" title=\\\"roDataGramSocket\\\">roDataGramSocket</a></td>\\n<td>The roDataGramSocket component enables Brightscript apps to send and receive UDP packets</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rostreamsocket.md\\\" title=\\\"roStreamSocket\\\">roStreamSocket</a></td>\\n<td>The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<p>These are the basic binding and data transfer operations used on both <a href=\\\"/docs/references/brightscript/components/rostreamsocket.md\\\" title=\\\"roStreamSocket\\\">roStreamSocket</a> and <a href=\\\"/docs/references/brightscript/components/rodatagramsocket.md\\\" title=\\\"roDataGramSocket\\\">roDataGramSocket</a>. They are synchronous or asynchronous as determined by the socket's blocking behavior. If there is a valid assigned <a href=\\\"/docs/references/brightscript/components/romessageport.md\\\" title=\\\"roMessagePort\\\">roMessagePort</a>, the blocking behavior is considered asynchronous (non-blocking). Otherwise, the blocking behavior is considered synchronous.</p>\\n<h3 id=\\\"senddata-as-object-startindex-as-integer-length-as-integer-as-integer\\\">Send(data as Object, startIndex as Integer, length as Integer) as Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sends up to length bytes of data to the socket.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data</td>\\n<td>Object</td>\\n<td>A <a href=\\\"/docs/references/brightscript/components/robytearray.md\\\" title=\\\"roByteArray\\\">roByteArray</a> containing the data to be sent.</td>\\n</tr>\\n<tr>\\n<td>startIndex</td>\\n<td>Integer</td>\\n<td>The index of the byte array from which to start sending data.</td>\\n</tr>\\n<tr>\\n<td>length</td>\\n<td>Integer</td>\\n<td>The amount of data to be sent to the socket.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The number of bytes sent.</p>\\n<h3 id=\\\"sendstrdata-as-string-as-integer\\\">SendStr(data as String) as Integer</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Sends the whole string to the socket, if possible.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data</td>\\n<td>String</td>\\n<td>A string containing the data to be sent.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The number of bytes sent.</p>\\n<h3 id=\\\"receivedata-as-object-startindex-as-integer-length-as-integer-as-integer\\\">Receive(data as Object, startIndex as Integer, length as Integer) as Integer</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Reads data from the socket. </p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data</td>\\n<td>Object</td>\\n<td>A <a href=\\\"/docs/references/brightscript/components/robytearray.md\\\" title=\\\"roByteArray\\\">roByteArray</a> containing the data to be stored.</td>\\n</tr>\\n<tr>\\n<td>startIndex</td>\\n<td>Integer</td>\\n<td>The index of the byte array from which to start reading data.</td>\\n</tr>\\n<tr>\\n<td>length</td>\\n<td>Integer</td>\\n<td>The amount of data to be read from the socket.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>The number of bytes read.</p>\\n<h3 id=\\\"receivestrlength-as-integer-as-string\\\">ReceiveStr(length as Integer) as String</h3>\\n<p>Reads data from the socket and stores the result in a string.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>length</td>\\n<td>Integer</td>\\n<td>The amount of data to be read from the socket.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>The received byte length string.  If no bytes are received, the string is empty.</p>\\n<h3 id=\\\"close-as-void\\\">Close() as Void</h3>\\n<p>Performs an orderly close of socket. After a close, most operations on the socket will return invalid.</p>\\n<p>On blocking sockets, this clears the receive buffer and blocks until the send buffer is emptied. Neither buffer may be read or written afterward.</p>\\n<p>On non-blocking sockets, both the send and the receive buffer may be read but not written.</p>\\n<h3 id=\\\"setaddresssockaddr-as-object-as-boolean\\\">SetAddress(sockAddr as Object) as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Sets the address using a BSD bind() call</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Return Type</th>\\n<th>Parameters</th>\\n<th>Return Value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>SetAddress</td>\\n<td>Boolean</td>\\n<td>${setaddressparamTable}</td>\\n<td>True/False</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>sockAddr</td>\\n<td>Object</td>\\n<td>An roSocketAddress.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether the address was successfully set. </p>\\n<h3 id=\\\"getaddress-as-object\\\">GetAddress() as Object</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns the roSocketAddress object bound to this socket.</p>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>roSocketAddress Object.</p>\\n<h3 id=\\\"setsendtoaddresssockaddr-as-object-as-boolean\\\">SetSendToAddress(sockAddr as Object) as Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Sets the remote address for next message to be sent.</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>sockAddr</td>\\n<td>Object</td>\\n<td>An roSocketAddress.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>A flag indicating whether the address was successfully stored as the first half of underlying BSD sendto() call.</p>\\n<h3 id=\\\"getsendtoaddress-as-object\\\">GetSendToAddress() as Object</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns the roSocketAddress for the remote address of the next message to be sent. This method can also be used to return the remote address on newly accepted sockets.</p>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>The roSocketAddress for the remote address of the next message to be sent.</p>\\n<h3 id=\\\"getreceivedfromaddress-as-object\\\">GetReceivedFromAddress() as Object</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Returns the roSocketAddress for the remote address of the last message received via the <a href=\\\"#receivedata-as-object-startindex-as-integer-length-as-integer-as-integer\\\">receive()</a> method. This method can also be used to return the remote address on newly accepted sockets.</p>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>The roSocketAddress for the remote address of the last message received.</p>\\n<h3 id=\\\"getcountrcvbuf-as-integer\\\">GetCountRcvBuf() as Integer</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Returns the number of bytes in the receive buffer.</p>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>Number of bytes.</p>\\n<h3 id=\\\"getcountsendbuf-as-integer\\\">GetCountSendBuf() as Integer</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Returns the number of bytes in the send buffer.</p>\\n<h4 id=\\\"return-value-10\\\">Return Value</h4>\\n<p>Number of bytes.</p>\\n<h3 id=\\\"status-as-integer\\\">Status() as Integer</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Indicates whether the last operation was successful.</p>\\n<h4 id=\\\"return-value-11\\\">Return Value</h4>\\n<p>This method returns 0 if the last operation was successful or an error number if it failed.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsocketaddress.md":"{\n  \"content\": \"<h1 id=\\\"ifsocketaddress\\\">ifSocketAddress</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rosocketaddress.md\\\" title=\\\"roSocketAddress\\\">roSocketAddress</a></td>\\n<td>The roSocketAddress is used by the roStreamSocket and roDataGramSocket components for TCP and UDP traffic respectively</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"setaddressaddress-as-string-as-boolean\\\">SetAddress(address as String) as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sets the IPV4 address. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>address</td>\\n<td>String</td>\\n<td>The string consists of a hostname, optionally followed by a colon and a decimal port number. The hostname may be either dotted quad (such as \\\"192.168.1.120\\\") or a DNS name (such as \\\"roku.com\\\"). If a name is given, a DNS lookup is performed to convert it to dotted quad. Use IsAddressValid() to determine the result of the DNS lookup. Example: \\\"192.168.1.120:8888\\\" or \\\"roku.com\\\".</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the IPV4 address was successfully set.</p>\\n<h3 id=\\\"getaddress-as-string\\\">GetAddress() as String</h3>\\n<p>Returns the IPV4 address in dotted quad format (for example, \\\"192.168.1.120:8888\\\").</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The IPV4 address.</p>\\n<h3 id=\\\"sethostnamehostname-as-string-as-boolean\\\">SetHostName(hostname as String) as Boolean</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Sets the hostname. The port number is unchanged. </p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>hostname</td>\\n<td>String</td>\\n<td>The hostname to be used.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the hostname was successfully set.</p>\\n<h3 id=\\\"gethostname-as-string\\\">GetHostName() as String</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns the hostname.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>The hostname. </p>\\n<h3 id=\\\"setportport-as-integer-as-boolean\\\">SetPort(port as Integer) as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Sets the port number. The hostname is unchanged. </p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>port</td>\\n<td>Integer</td>\\n<td>The port number to be used.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether the port number was successfully set.</p>\\n<h3 id=\\\"getport-as-integer\\\">GetPort() as Integer</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns the port number.</p>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>The port number. </p>\\n<h3 id=\\\"isaddressvalid-as-boolean\\\">IsAddressValid() as Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Checks whether the component contains a valid IP address.</p>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>A flag indicating whether the component contains a valid IP address.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsocketasync.md":"{\n  \"content\": \"<h1 id=\\\"ifsocketasync\\\">ifSocketAsync</h1>\\n<p>The ifSocketAsync interface provides asynchronous socket features that utilize a full-featured select loop in the Roku OS that communicates to the application using a BrightScript <a href=\\\"/docs/references/brightscript/components/romessageport.md\\\" title=\\\"roMessagePort\\\">roMessagePort</a>. This interface is valid on roStreamSocket and roDataGramSocket objects that were assigned a BrightScript port via SetMessagePort().</p>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rodatagramsocket.md\\\" title=\\\"roDataGramSocket\\\">roDataGramSocket</a></td>\\n<td>The roDataGramSocket component enables Brightscript apps to send and receive UDP packets</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rostreamsocket.md\\\" title=\\\"roStreamSocket\\\">roStreamSocket</a></td>\\n<td>The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"isreadable-as-boolean\\\">IsReadable() as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Checks whether underlying select determines non-blocking read is possible.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether underlying select determines non-blocking read is possible.</p>\\n<h3 id=\\\"iswritable-as-boolean\\\">IsWritable() as Boolean</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Checks whether underlying select determines non-blocking write is possible.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether underlying select determines non-blocking write is possible.</p>\\n<h3 id=\\\"isexception-as-boolean\\\">IsException() as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Checks whether underlying select determines non-blocking read of OOB data is possible.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether underlying select determines non-blocking read of OOB data is possible.</p>\\n<h3 id=\\\"notifyreadableenable-as-boolean-as-void\\\">NotifyReadable(enable as Boolean) as Void</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Enables roSocketEvent events to be sent via the message port when the underlying socket becomes readable.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether roSocketEvent events are to be sent when the underlying socket becomes readable.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"notifywritableenable-as-boolean-as-void\\\">NotifyWritable(enable as Boolean) as Void</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Enables roSocketEvent events to be sent via the message port when the underlying socket becomes writable.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether roSocketEvent events are to be sent when the underlying socket becomes writable.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"notifyexceptionenable-as-boolean-as-void\\\">NotifyException(enable as Boolean) as Void</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Enables roSocketEvent events to be sent via the message port when the underlying socket gets an exception or OOB data.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether roSocketEvent events are to be sent when the underlying socket gets an exception or OOB data.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getid-as-integer\\\">GetID() as Integer</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns a unique identifier that can be compared to the value returned by the <a href=\\\"/docs/references/brightscript/events/rosocketevent.md#getsocketid-as-integer\\\">roSocketEvent.getSocketID()</a> method to match the underlying socket to receive the event.</p>\\n<h4 id=\\\"return-paramters\\\">Return Paramters</h4>\\n<p>A unique ID. </p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsocketcastoption.md":"{\n  \"content\": \"<h1 id=\\\"ifsocketcastoption\\\">ifSocketCastOption</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rodatagramsocket.md\\\" title=\\\"roDataGramSocket\\\">roDataGramSocket</a></td>\\n<td>The roDataGramSocket component enables Brightscript apps to send and receive UDP packets</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<p>Only the <a href=\\\"/docs/references/brightscript/components/rodatagramsocket.md\\\" title=\\\"roDataGramSocket\\\">roDataGramSocket</a> component supports the ifSocketCastOption multicast interface. The <a href=\\\"/docs/references/brightscript/components/rostreamsocket.md\\\" title=\\\"roStreamSocket\\\">roStreamSocket</a> component does not support multicast.</p>\\n<h3 id=\\\"getbroadcast-as-boolean\\\">GetBroadcast() as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Checks whether broadcast messages may be sent or received.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether broadcast messages may be sent or received.</p>\\n<h3 id=\\\"setbroadcastenable-as-boolean-as-boolean\\\">SetBroadcast(enable as Boolean) as Boolean</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Enables broadcast messages to be sent or received. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether broadcast messages may be sent or received.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether this operation succeeded.</p>\\n<h3 id=\\\"joingroupipaddress-as-object-as-boolean\\\">JoinGroup(ipAddress as Object) as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Joins a specific multicast group.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>ipAddress</td>\\n<td>Object</td>\\n<td>An <a href=\\\"/docs/references/brightscript/components/rostreamsocket.md\\\" title=\\\"roSocketAddress\\\">roSocketAddress</a> representing the group to be joined. IPV4 multicast addresses are in the range of 224.0.0.0 through 239.255.255.255.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether this operation was successful.</p>\\n<h3 id=\\\"dropgroupipaddress-as-object-as-boolean\\\">DropGroup(ipAddress as Object) as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Drops out of a specific multicast group.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>ipAddress</td>\\n<td>Object</td>\\n<td>An <a href=\\\"/docs/references/brightscript/components/rostreamsocket.md\\\" title=\\\"roSocketAddress\\\">roSocketAddress</a> representing the group to leave. IPV4 multicast addresses are in the range of 224.0.0.0 through 239.255.255.255.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether this operation was successful.</p>\\n<h3 id=\\\"getmulticastloop-as-boolean\\\">GetMulticastLoop() as Boolean</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Checks whether multicast messages are enabled for local loopback.</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether multicast messages are enabled for local loopback. If this flag is true, multicast message sent locally are to be received locally.</p>\\n<h3 id=\\\"setmulticastloopenable-as-boolean-as-boolean\\\">SetMulticastLoop(enable as Boolean) as Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Enables local loopback of multicast messages.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether local loopback of multicast messages; otherwise do not send or receive broadcast messages.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A flag indicating whether this operation was successful.</p>\\n<h3 id=\\\"getmulticastttl-as-integer\\\">GetMulticastTTL() as Integer</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns the TTL integer value for multicast messages. This is the number of hops a packet is allowed before a router drops the packet.</p>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>The multicast messages value.</p>\\n<h3 id=\\\"setmulticastttlttl-as-integer-as-boolean\\\">SetMulticastTTL(ttl as Integer) as Boolean</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Sets the TTL integer value for multicast messages. </p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>ttl</td>\\n<td>Integer</td>\\n<td>The number of hops a packet is allowed before a router drops the packet</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>A flag indicating whether the TTL value was successfully set.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsocketconnection.md":"{\n  \"content\": \"<h1 id=\\\"ifsocketconnection\\\">ifSocketConnection</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rostreamsocket.md\\\" title=\\\"roStreamSocket\\\">roStreamSocket</a></td>\\n<td>The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<p>Each of these operations except listen() is either synchronous or asynchronous as determined by the socket's blocking behavior. If there is a valid assigned roMessagePort, the blocking behavior is considered asynchronous (non-blocking). Otherwise, the blocking behavior is considered synchronous.</p>\\n<h3 id=\\\"listenbacklog-as-integer-as-boolean\\\">Listen(backlog as Integer) as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Puts the socket into the listen state. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>backlog</td>\\n<td>Integer</td>\\n<td>The limit for the queue of incoming connections</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether listening can be done (generally, if bound address is valid).</p>\\n<h3 id=\\\"islistening-as-boolean\\\">IsListening() as Boolean</h3>\\n<p>Checks whether if the <a href=\\\"#listenbacklog-as-integer-as-boolean\\\">listen()</a> method has been successfully called on this socket.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether the <a href=\\\"#listenbacklog-as-integer-as-boolean\\\">listen()</a> method has been successfully called on this socket.</p>\\n<h3 id=\\\"connect-as-boolean\\\">Connect() as Boolean</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Establishes a connection. </p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether a socket connection has successfully been created. The connection might still not be complete if the socket is non-blocking</p>\\n<h3 id=\\\"accept-as-object\\\">Accept() as Object</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Accepts incoming requests.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>An roStreamSocket if the connection is pending; invalid otherwise. Use status to distinguish among success (eSuccess() or isConnected()), not ready (eOK()), and error.</p>\\n<h3 id=\\\"isconnected-as-boolean\\\">IsConnected() as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Checks whether a <a href=\\\"#connect-as-boolean\\\">connect</a> or <a href=\\\"#accept-as-object\\\">accept</a> function has been completed on this socket. </p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether a connection has been established or accepted on this socket.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsocketconnectionoption.md":"{\n  \"content\": \"<h1 id=\\\"ifsocketconnectionoption\\\">ifSocketConnectionOption</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rostreamsocket.md\\\" title=\\\"roStreamSocket\\\">roStreamSocket</a></td>\\n<td>The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getkeepalive-as-boolean\\\">GetKeepAlive() as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Checks whether keep alive is set. If keep alive is set, occasional no-data packets are sent to keep the connection alive. </p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether keep alive is set. </p>\\n<h3 id=\\\"setkeepaliveenable-as-boolean-as-boolean\\\">SetKeepAlive(enable as Boolean) as Boolean</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Sends no-data packets to keep the connection alive. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether keep alive is enabled.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether keep alive was successfully set.</p>\\n<h3 id=\\\"getlinger-as-integer\\\">GetLinger() as Integer</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns the max time in seconds that the socket close() blocks to allow send data to be flushed in synchronous mode.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>The max time in seconds.</p>\\n<h3 id=\\\"setlingertime-as-integer-as-boolean\\\">SetLinger(time as Integer) as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Sets the max time in seconds that the socket close() blocks to allow send data to be flushed in synchronous mode. </p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>time</td>\\n<td>Integer</td>\\n<td>The max time.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether the linger was successfully set.</p>\\n<h3 id=\\\"getmaxseg-as-integer\\\">GetMaxSeg() as Integer</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns the max TCP segment size.</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>The segment size.</p>\\n<h3 id=\\\"setmaxsegtime-as-integer-as-boolean\\\">SetMaxSeg(time as Integer) as Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Sets the max TCP segment size. </p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>time</td>\\n<td>Integer</td>\\n<td>The max TCP segment size.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A flag indicating whether the max TCP segment size was successfully set.</p>\\n<h3 id=\\\"getnodelay-as-boolean\\\">GetNoDelay() as Boolean</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Checks whether the no delay property is enabled on the socket. This means that data is sent as soon as it is available rather than once there is enough data to fill a segment.</p>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>A flag indicating whether the no delay property is enabled. </p>\\n<h3 id=\\\"setnodelayenable-as-boolean-as-boolean\\\">SetNoDelay(enable as Boolean) as Boolean</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Enables the no delay property on the socket. This means that data is sent as soon as it is available rather than once there is enough data to fill a segment.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether the no delay property is enabled.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>A flag indicating whether the no delay property was successfully set. </p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsocketconnectionstatus.md":"{\n  \"content\": \"<h1 id=\\\"ifsocketconnectionstatus\\\">ifSocketConnectionStatus</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rostreamsocket.md\\\" title=\\\"roStreamSocket\\\">roStreamSocket</a></td>\\n<td>The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"econnaborted-as-boolean\\\">eConnAborted() as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Checks whether a connection aborted error (ECONNABORTED) has occurred. </p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether an ECONNABORTED error has occurred. </p>\\n<h3 id=\\\"econnrefused-as-boolean\\\">eConnRefused() as Boolean</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Checks whether a connection refused (ECONNREFUSED) has occurred. </p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether an ECONNREFUSED error has occurred. </p>\\n<h3 id=\\\"econnreset-as-boolean\\\">eConnReset() as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Checks whether a connection reset error (ECONNRESET) has occurred. </p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether an ECONNRESET error has occurred. </p>\\n<h3 id=\\\"eisconn-as-boolean\\\">eIsConn() as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Checks whether an is connected error (EISCONN) has occurred. </p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether an EISCONN error has occurred. </p>\\n<h3 id=\\\"enotconn-as-boolean\\\">eNotConn() as Boolean</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Checks whether a not connected error (ENOTCONN) has occurred. </p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether an ENOTCONN error has occurred. </p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsocketoption.md":"{\n  \"content\": \"<h1 id=\\\"ifsocketoption\\\">ifSocketOption</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rodatagramsocket.md\\\" title=\\\"roDataGramSocket\\\">roDataGramSocket</a></td>\\n<td>The roDataGramSocket component enables Brightscript apps to send and receive UDP packets</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rostreamsocket.md\\\" title=\\\"roStreamSocket\\\">roStreamSocket</a></td>\\n<td>The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getttl-as-integer\\\">GetTTL() as Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the TTL (Time To Live) value for all IP packets on the socket.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The TTL value.</p>\\n<h3 id=\\\"setttlttl-as-integer-as-boolean\\\">SetTTL(ttl as Integer) as Boolean</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Sets the TTL value for all IP packets on the socket. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>ttl</td>\\n<td>Integer</td>\\n<td>The TTL value to be used for IP packets on the socket.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether the TTL was successfully set. </p>\\n<h3 id=\\\"getreuseaddr-as-boolean\\\">GetReuseAddr() as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Checks whether an address that has been previously assigned can be immediately reassigned.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the previously assigned address can be reassigned.</p>\\n<h3 id=\\\"setreuseaddrreuse-as-boolean-as-dynamic\\\">SetReuseAddr(reuse as Boolean) as Dynamic</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Enables a previously assigned address to be immediately reassigned. </p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Reuse</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether the address can be reused.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether the reuse address feature was successfully set. </p>\\n<h3 id=\\\"getoobinline-as-boolean\\\">GetOOBInline() as Boolean</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Checks whether Out Of Bounds (OOB) data is read inline with regular data.</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether OOB data is read inline with regular data.</p>\\n<h3 id=\\\"setoobinlineinline-as-boolean-as-boolean\\\">SetOOBInline(inline as Boolean) as Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Enables Out Of Bounds (OOB) data to be read inline with regular data.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>inline</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether OOB data is read inline.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A flag indicating whether the OOB inline data feature was successfully set. </p>\\n<h3 id=\\\"getsendbuf-as-integer\\\">GetSendBuf() as Integer</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns the current send buffer size.</p>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>The buffer size.</p>\\n<h3 id=\\\"setsendbufsize-as-integer-as-boolean\\\">SetSendBuf(size as Integer) as Boolean</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Sets the current send buffer size. </p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>size</td>\\n<td>Integer</td>\\n<td>The send buffer size to be used.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>A flag indicating whether the send buffer size was successfully set.</p>\\n<h3 id=\\\"getrcvbuf-as-integer\\\">GetRcvBuf() as Integer</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Returns the current receive buffer size.</p>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>The buffer size.</p>\\n<h3 id=\\\"setrcvbufsize-as-integer-as-boolean\\\">SetRcvBuf(size as Integer) as Boolean</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Sets the current receive buffer size. </p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>size</td>\\n<td>Integer</td>\\n<td>The receive buffer size to be used.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>A flag indicating whether the receive buffer size was successfully set.</p>\\n<h3 id=\\\"getsendtimeout-as-integer\\\">GetSendTimeout() as Integer</h3>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Returns the current send timeout.</p>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>The number of seconds for the send timeout.</p>\\n<h3 id=\\\"setsendtimeouttimeout-as-integer-as-boolean\\\">SetSendTimeout(timeout as Integer) as Boolean</h3>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Sets the current send timeout (in seconds).</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>timeout</td>\\n<td>Integer</td>\\n<td>The number of seconds for the send timeout.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>A flag indicating whether the send timeout was successfully set.</p>\\n<h3 id=\\\"getreceivetimeout-as-integer\\\">GetReceiveTimeout() as Integer</h3>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Returns the current receive timeout.</p>\\n<h4 id=\\\"return-value-10\\\">Return Value</h4>\\n<p>The number of seconds for the receive timeout.</p>\\n<h3 id=\\\"setreceivetimeouttimeout-as-integer-as-boolean\\\">SetReceiveTimeout(timeout as Integer) as Boolean</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>Sets the current receive timeout (in seconds).</p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>timeout</td>\\n<td>Integer</td>\\n<td>The number of seconds for the receive timeout.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-11\\\">Return Value</h4>\\n<p>A flag indicating whether the receive timeout was successfully set.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsocketstatus.md":"{\n  \"content\": \"<h1 id=\\\"ifsocketstatus\\\">ifSocketStatus</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rodatagramsocket.md\\\" title=\\\"roDataGramSocket\\\">roDataGramSocket</a></td>\\n<td>The roDataGramSocket component enables Brightscript apps to send and receive UDP packets</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rostreamsocket.md\\\" title=\\\"roStreamSocket\\\">roStreamSocket</a></td>\\n<td>The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"eagain-as-boolean\\\">eAgain() as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Checks whether an EAGAIN error has occurred. </p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether an EAGAIN error has occurred. </p>\\n<h3 id=\\\"ealready-as-boolean\\\">eAlready() as Boolean</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Checks whether an EALREADY error has occurred. </p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether an EALREADY error has occurred. </p>\\n<h3 id=\\\"ebadaddr-as-boolean\\\">eBadAddr() as Boolean</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Checks whether an EBADADDR error has occurred. </p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether an EBADADDR error has occurred. </p>\\n<h3 id=\\\"edestaddrreq-as-boolean\\\">eDestAddrReq() as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Checks whether an EDESTADDRREQ error has occurred. </p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether an EDESTADDRREQ error has occurred. </p>\\n<h3 id=\\\"ehostunreach-as-boolean\\\">eHostUnreach() as Boolean</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Checks whether an EHOSTUNREACH error has occurred. </p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether an EHOSTUNREACH error has occurred. </p>\\n<h3 id=\\\"einvalid-as-boolean\\\">eInvalid() as Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Checks whether an EINVALID error has occurred. </p>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A flag indicating whether an EINVALID error has occurred. </p>\\n<h3 id=\\\"einprogress-as-boolean\\\">eInProgress() as Boolean</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Checks whether an EINPROGRESS error has occurred. </p>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>A flag indicating whether an EINPROGRESS error has occurred. </p>\\n<h3 id=\\\"ewouldblock-as-boolean\\\">eWouldBlock() as Boolean</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Checks whether an EWOULDBLOCK error has occurred. </p>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>A flag indicating whether an EWOULDBLOCK error has occurred. </p>\\n<h3 id=\\\"esuccess-as-boolean\\\">eSuccess() as Boolean</h3>\\n<p>Checks whether there are no errors (the error number is 0).</p>\\n<h3 id=\\\"eok-as-boolean\\\">eOK() as Boolean</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Checks whether there is no hard error, but possibly one of the following async conditions: EAGAIN, EALREADY, EINPROGRESS, EWOULDBLOCK.</p>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>A flag indicating whether an EOK error has occurred. </p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsourceidentity.md":"{\n  \"content\": \"<h1 id=\\\"ifsourceidentity\\\">ifSourceIdentity</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/events/rochannelstoreevent.md\\\" title=\\\"roChannelStoreEvent\\\">roChannelStoreEvent</a></td>\\n<td>The roChannelStore sends an roChannelStoreEvent in response to a call to any of several Get* methods in ifChannelStore</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/events/rourlevent.md\\\" title=\\\"roUrlEvent\\\">roUrlEvent</a></td>\\n<td>The roUrlTransfer component sends the roUrlEvent</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getsourceidentity-as-integer\\\">GetSourceIdentity() as Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the ID currently associated with this source (event generating) or event object</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The ID value of the source or event object.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsprite.md":"{\n  \"content\": \"<h1 id=\\\"ifsprite\\\">ifSprite</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rosprite.md\\\" title=\\\"roSprite\\\">roSprite</a></td>\\n<td>This component is associated with a managing roCompositor object</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"movetox-as-integer-y-as-integer-as-void\\\">MoveTo(x as Integer, y as Integer) as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Move the sprite to a new set of coordinates. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The x-coordinate to which the sprite is to be moved.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The y-coordinate to which the sprite is to be moved.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"moveoffsetxoffset-as-integer-yoffset-as-integer-as-void\\\">MoveOffset(xOffset as Integer, yOffset as Integer) as Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Move the sprite to a new position based on offsets to the current position.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>xOffset</td>\\n<td>Integer</td>\\n<td>The offset from the current x-coordinate to be used.</td>\\n</tr>\\n<tr>\\n<td>yOffset</td>\\n<td>Integer</td>\\n<td>The offset from the current y-coordinate to be used.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getx-as-integer\\\">GetX() as Integer</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns the x-coordinate of the sprite.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The x-coordinate of the sprite.</p>\\n<h3 id=\\\"gety-as-integer\\\">GetY() as Integer</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Returns the y-coordinate of the sprite.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The y-coordinate of the sprite.</p>\\n<h3 id=\\\"setzz-as-integer-as-void\\\">SetZ(z as Integer) as Void</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Sets the z value of the sprite. The z value defines the order in which sprites are drawn. Sprites with higher z values are drawn after (in front of) sprites with lower z values. The default z value is 0.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>z</td>\\n<td>Integer</td>\\n<td>The z value to be used for the sprite.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getz-as-integer\\\">GetZ() as Integer</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Returns the z value of the sprite.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>The z value of the sprite.</p>\\n<h3 id=\\\"setdrawableflagenable-as-boolean-as-void\\\">SetDrawableFlag(enable as Boolean) as Void</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Sets whether this sprite is drawable or just used for collision tests. An undrawable sprite can be used to define a region in the background that needs collision testing. It can also be used as an auxiliary collision region for a more complex sprite defined in another sprite. </p>\\n<p>The default value is true, and it is set when a sprite is created.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether the sprite is drawable:<br /><br />True = The sprite is drawable. <br /><br />False = The sprite may only be used for collision tests.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getdrawableflag-as-boolean\\\">GetDrawableFlag() as Boolean</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Checks whether the sprite is drawable. </p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether the sprite is drawable. </p>\\n<h3 id=\\\"setmemberflagsflags-as-integer-as-void\\\">SetMemberFlags(flags as Integer) as Void</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Defines the sprite membership though flags. The  flags are used with CollidableFlags to define which sprites are allowed to collide.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>flags</td>\\n<td>Integer</td>\\n<td>Enables \\\"levels\\\" of collision detection, as only sprites with a member flag bit that matches a collidable flag bit will be checked for collisions. The default value is 1.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getmemberflags-as-integer\\\">GetMemberFlags() as Integer</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Returns the value of member flags variable.</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>The value of the member flag variable.</p>\\n<h3 id=\\\"setcollidableflagsflags-as-integer-as-void\\\">SetCollidableFlags(flags as Integer) as Void</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Sets bits to determine which sprites will be checked for collisions. The sprites that are checked must have the corresponding bits sets in their MemberFlags. </p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>flags</td>\\n<td>Integer</td>\\n<td>The bits to be set for determining which sprites to check for collisions. The default value is 1.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getcollidableflags-as-integer\\\">GetCollidableFlags() as Integer</h3>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>Returns the value of collidable flags variable.</p>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>The value of the flag variable.</p>\\n<h3 id=\\\"setregionregion-as-object-as-void\\\">SetRegion(region as Object) as Void</h3>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Sets the region of the sprite to the passed roRegion object. If one already is set, it is replaced.</p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>region</td>\\n<td>Object</td>\\n<td>The roRegion object to be used as the region for the sprite.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getregion-as-object\\\">GetRegion() as Object</h3>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Returns an roRegion object that specifies the region of a bitmap that is the sprite's display graphic.</p>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>roRegion object.</p>\\n<h3 id=\\\"offsetregionx-as-integer-y-as-integer-width-as-integer-height-as-integer-as-void\\\">OffsetRegion(x as Integer, y as Integer, width as Integer, height as Integer) as Void</h3>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Adjusts the part of an <a href=\\\"/docs/references/brightscript/components/roregion.md\\\" title=\\\"roRegion\\\">roRegion</a>'s bitmap that is being displayed as the sprite. Wrap is taken into consideration.</p>\\n<h4 id=\\\"parameters-7\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The x-coordinate for the bitmap.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The y-coordinate for the bitmap.</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>Integer</td>\\n<td>The width of the bitmap.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>Integer</td>\\n<td>The height of the bitmap.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setdatadata-as-dynamic-as-void\\\">SetData(data as Dynamic) as Void</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>Associates user-defined data with the sprite. The data can be any type including intrinsic types or objects.</p>\\n<h4 id=\\\"parameters-8\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data</td>\\n<td>Dynamic</td>\\n<td>The user-defined data to be associated with the sprite.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getdata-as-dynamic\\\">GetData() as Dynamic</h3>\\n<h4 id=\\\"description-16\\\">Description</h4>\\n<p>Returns any user data associated with the sprite previously set via the <a href=\\\"#setdatadata-as-dynamic-as-void\\\">SetData()</a> method.</p>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>Any user-defined data associated with the sprite. Returns invalid if there is no user data associated with this sprite.</p>\\n<h3 id=\\\"checkcollision-as-object\\\">CheckCollision() as Object</h3>\\n<h4 id=\\\"description-17\\\">Description</h4>\\n<p>Returns the first <a href=\\\"/docs/references/brightscript/components/rosprite.md\\\" title=\\\"roSprite\\\">roSprite</a> that this sprite collides with. </p>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>An roSprite object. If there are no collisions, this method returns invalid.</p>\\n<h3 id=\\\"checkmultiplecollisions-as-object\\\">CheckMultipleCollisions() as Object</h3>\\n<h4 id=\\\"description-18\\\">Description</h4>\\n<p>Returns an roArray of all roSprite objects this sprite collides sprites. The collision area is the entire sprite's bounding box, and the sprites must actually be overlapped to detect a collision. That is, if a fast moving sprite moves \\\"through\\\" another sprite without actually overlapping when this call is made, no collision is detected.</p>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>roArray of colliding sprites. If there are no collisions, this method returns invalid.</p>\\n<h3 id=\\\"remove-as-void\\\">Remove() as Void</h3>\\n<h4 id=\\\"description-19\\\">Description</h4>\\n<p>Removes the sprite from the managing roComposite object and deletes the sprite.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifstring.md":"{\n  \"content\": \"<h1 id=\\\"ifstring\\\">ifString</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/events/rochannelstoreevent.md\\\" title=\\\"roChannelStoreEvent\\\">roChannelStoreEvent</a></td>\\n<td>The roChannelStore sends an roChannelStoreEvent in response to a call to any of several Get* methods in ifChannelStore</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/ropath.md\\\" title=\\\"roPath\\\">roPath</a></td>\\n<td>The roPath component provides developers an easy way to create valid file system paths</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rostring.md\\\" title=\\\"roString\\\">roString</a></td>\\n<td>Object equivalent for intrinsic type 'String'</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/events/rourlevent.md\\\" title=\\\"roUrlEvent\\\">roUrlEvent</a></td>\\n<td>The roUrlTransfer component sends the roUrlEvent component</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<p>Interface equivalent for intrinsic type String.</p>\\n<p>Also implemented by selected objects that can return a string representation.</p>\\n<h3 id=\\\"getstring-as-string\\\">GetString() As String</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Gets the string value stored in the calling String object. </p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The string value stored in the calling String object. </p>\\n<h3 id=\\\"setstringvalue-as-string-as-void\\\">SetString(value As String) As Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Sets the calling String object to the specified string value. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>value</td>\\n<td>String</td>\\n<td>The string value to be set on the calling String object.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifstringops.md":"{\n  \"content\": \"<h1 id=\\\"ifstringops\\\">ifStringOps</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rostring.md\\\" title=\\\"roString\\\">roString</a></td>\\n<td>Object equivalent for intrinsic type 'String'</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<blockquote>\\n<p>ifStringOps provides various methods for manipulating string objects. Some of these duplicate functionality also available in the <a href=\\\"/docs/references/brightscript/language/brightscript-language-reference.md\\\" title=\\\"global string functions\\\">global string functions</a>.</p>\\n<p>Note that the ifStringOps string indices start at 0; they do not start at 1 like global string functions.</p>\\n</blockquote>\\n<h3 id=\\\"setstrings-as-string-len-as-integer-as-void\\\">SetString(s as String, len as Integer) as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sets the roString object to the specified first set of characters of the provided string.</p>\\n<p>The <a href=\\\"/docs/references/brightscript/interfaces/ifstring.md\\\">ifString interface</a> includes a similar function, <a href=\\\"/docs/references/brightscript/interfaces/ifstring.md#setstringvalue-as-string-as-void\\\">ifString.SetString()</a>, which does not take a length parameter.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>s</td>\\n<td>String</td>\\n<td>The source string to be used for setting the roString object.</td>\\n</tr>\\n<tr>\\n<td>len</td>\\n<td>Integer</td>\\n<td>The first number of characters in the source string to which the roString object is to be set.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"appendstrings-as-string-len-as-integer-as-void\\\">AppendString(s as String, len as Integer) as Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Appends the specified first set of characters of the provided string to the end of the roString object. </p>\\n<p>The AppendString() function modifies the object on which it is called, which can result in unexpected results if called on a literal string constant rather than a string object. Consider the following example: </p>\\n<pre><code>x = \\\"one\\\"\\nprint type(x) ' prints \\\"String\\\"\\nx.AppendString(\\\"two\\\", 3)\\nprint x ' will print \\\"one\\\" not \\\"onetwo\\\"\\n\\ny = box(\\\"one\\\")\\nprint type(y) ' prints \\\"roString\\\"\\ny.AppendString(\\\"two\\\", 3)\\nprint y ' will print \\\"onetwo\\\"\\n</code></pre>\\n<p>The third line does not appear to do an append, but it is working as designed since the append happens to the temporary boxed object. x=\\\"string\\\" sets x to the intrinsic type, vs. y=box(\\\"string\\\"), which works as expected.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>s</td>\\n<td>String</td>\\n<td>The source string to be used for appending characters to the roString object.</td>\\n</tr>\\n<tr>\\n<td>len</td>\\n<td>Integer</td>\\n<td>The first number of characters in the source string to append to the roString object.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"len-as-integer\\\">Len() as Integer</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns the number of characters in the string.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>Number of characters.</p>\\n<h3 id=\\\"leftlen-as-integer-as-string\\\">Left(len as Integer) as String</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Returns a string consisting of the first len characters of the string.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>len</td>\\n<td>Integer</td>\\n<td>The first number of characters in the roString object to be retrieved.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The string generated by the method.</p>\\n<h3 id=\\\"rightlen-as-integer-as-string\\\">Right(len as Integer) as String</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns a string consisting of the last len characters of the string.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>len</td>\\n<td>Integer</td>\\n<td>The last number of characters in the roString object to be retrieved.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>The string generated by the method.</p>\\n<h3 id=\\\"midstart_index-as-integer-as-string\\\">Mid(start_index as Integer) as String</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Returns a string consisting of the last characters of the string, starting at the zero-based start_index.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>start_index</td>\\n<td>Integer</td>\\n<td>The position in the roString object from which to return the remaining characters.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>The string generated by the method.</p>\\n<h3 id=\\\"midstart_index-as-integer-num_chars-as-integer-as-string\\\">Mid(start_index as Integer, num_chars as Integer) as String</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns a string consisting of num_chars characters of the string, starting at the zero-based start_index. If there are fewer than num_chars in the string after start_index, returns the remaining characters in the string. </p>\\n<p><code>s.Left(len)</code> is equivalent to <code>s.Mid(0, len)</code><code>s.Right(len)</code> is equivalent to <code>s.Mid(s.Len() - len</code>.</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>start_index</td>\\n<td>Integer</td>\\n<td>The position in the roString object from which to return the number of characters specified by num_chars.</td>\\n</tr>\\n<tr>\\n<td>num_chars</td>\\n<td>Integer</td>\\n<td>The number of characters in the remaining part of the roString object to be retrieved.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"instrsubstring-as-string-as-integer\\\">Instr(substring as String) as Integer</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Returns the zero-based index of the first occurrence of substring in the string. If the substring does not occur in the string, this method returns -1</p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>substring</td>\\n<td>String</td>\\n<td>The substring within the roString object to be returned.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>The index of the first instance of the substring within the string.</p>\\n<h3 id=\\\"replacefrom-as-string-to-as-string-as-string\\\">Replace(from As String, to As String) As String</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Returns a copy of the string with all instances of <strong>fromStr</strong> replaced with <strong>toStr</strong>. If <strong>fromStr</strong> is empty the return value is the same as the source string. </p>\\n<h4 id=\\\"parameters-7\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>from</td>\\n<td>String</td>\\n<td>The string of characters within the roString object to be replaced.</td>\\n</tr>\\n<tr>\\n<td>to</td>\\n<td>String</td>\\n<td>The string of characters that will replace all instances of the <strong>from</strong> string.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A copy of the string with all the instances</p>\\n<h4 id=\\\"example\\\">Example</h4>\\n<pre><code>print \\\"a-b-c\\\".Replace(\\\"-\\\", \\\"/\\\")\\n\\n' result is \\\"a/b/c\\\"\\n</code></pre>\\n<h3 id=\\\"instrstart_index-as-integer-substring-as-string-as-integer\\\">Instr(start_index as Integer, substring as String) as Integer</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Returns the zero-based index of the first occurrence of substring in the string, starting at the specified zero-based start_index. If the substring does not occur in the string after start_index, returns -1</p>\\n<h4 id=\\\"parameters-8\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>start_index</td>\\n<td>Integer</td>\\n<td>The position in the roString object from which to start looking for and returning the <strong>substring</strong>.</td>\\n</tr>\\n<tr>\\n<td>substring</td>\\n<td>String</td>\\n<td>The substring within the roString object to be found.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>The index of the first instance of the substring within the string, based on the specified starting position. </p>\\n<h3 id=\\\"trim-as-string\\\">Trim() as String</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Returns the string with any leading and trailing whitespace characters (space, TAB, LF, CR, VT, FF, NO-BREAK SPACE, et al) removed.</p>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>The trimmed string. </p>\\n<h3 id=\\\"toint-as-integer\\\">ToInt() as Integer</h3>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>Returns the value of the string interpreted as a decimal number.</p>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>The decimal number representation of the string.</p>\\n<h3 id=\\\"tofloat-as-float\\\">ToFloat() as Float</h3>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Returns the value of the string interpreted as a floating point number.</p>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>The floating point number representation of the string.</p>\\n<h3 id=\\\"tokenizedelim-as-string-as-object\\\">Tokenize(delim as String) as Object</h3>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Splits the string into separate substrings separated by a single delimiter character.</p>\\n<h4 id=\\\"parameters-9\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>delim</td>\\n<td>String</td>\\n<td>A set of characters which are treated as delimiters. A sequence of two or more contiguous delimiters in the string is treated as a single delimiter.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-10\\\">Return Value</h4>\\n<p>An roList containing the each of the substrings. The delimiters are not returned.</p>\\n<h3 id=\\\"splitseparator-as-string-as-object\\\">Split(separator as String) as Object</h3>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Splits the input string using the separator string as a delimiter. An empty separator string indicates to split the string by character.</p>\\n<h4 id=\\\"parameters-10\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>separator</td>\\n<td>String</td>\\n<td>The delimiter to be used to parse the roString object.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-11\\\">Return Value</h4>\\n<p>An array of the split token strings (not including the delimiter). </p>\\n<h4 id=\\\"examples\\\">Examples</h4>\\n<pre><code>a = \\\"\\\".Split(\\\"\\\")\\n\\n'creates the array equivalent to\\na = []\\n</code></pre>\\n<pre><code>a = \\\"123\\\".Split(\\\"\\\")\\n\\n'creates the array equivalent to\\na = [\\\"1\\\", \\\"2\\\", \\\"3\\\"]\\n</code></pre>\\n<pre><code>a = \\\"123\\\".Split(\\\"/\\\")\\n\\n'creates the array equivalent to\\na = [\\\"123\\\"]\\n</code></pre>\\n<pre><code>a = \\\"/123/\\\".Split(\\\"/\\\")\\n\\n'creates the array equivalent to\\na = [\\\"\\\", \\\"123\\\", \\\"\\\"]\\n</code></pre>\\n<pre><code>a = \\\"one, two, three\\\".Split(\\\", \\\")\\n\\n'creates the array equivalent to\\na = [\\\"one\\\", \\\"two\\\", \\\"three\\\"]\\n</code></pre>\\n<h3 id=\\\"getentityencode-as-string\\\">GetEntityEncode() as String</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>Returns the string with the following characters replaced with their corresponding HTML entity encoding sequences below: </p>\\n<table>\\n<thead>\\n<tr>\\n<th>Character</th>\\n<th>Replaced with</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>\\\" (double quote)</td>\\n<td>\\\\\\\"</td>\\n</tr>\\n<tr>\\n<td>' (single quote)</td>\\n<td>\\\\'</td>\\n</tr>\\n<tr>\\n<td>&#x3C;</td>\\n<td>\\\\&#x3C;</td>\\n</tr>\\n<tr>\\n<td>></td>\\n<td>\\\\></td>\\n</tr>\\n<tr>\\n<td>&#x26;</td>\\n<td>\\\\&#x26;</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-12\\\">Return Value</h4>\\n<p>The encoded string.  </p>\\n<h3 id=\\\"escape-as-string\\\">Escape() as String</h3>\\n<h4 id=\\\"description-16\\\">Description</h4>\\n<p>URL encodes the specified string per <a href=\\\"https://www.ietf.org/rfc/rfc3986.txt\\\" title=\\\"RFC 3986\\\">RFC 3986</a> and returns the encoded string. Non-ASCII characters are encoded as UTF-8 escape sequences. This functionality is essentially the same as roUrlTransfer.Escape, but without the overhead of creating a roUrlTransfer object. </p>\\n<blockquote>\\n<p>Use the EncodeUri or EncodeUriComponent methods instead.</p>\\n</blockquote>\\n<h4 id=\\\"return-value-13\\\">Return Value</h4>\\n<p>The URL-encoded version of the specified string. </p>\\n<h4 id=\\\"example-1\\\">Example</h4>\\n<pre><code>s = \\\"@&#x26;=+/#!*\\\"\\nt = s.Escape()\\nprint \\\"\\\"\\\"\\\" + t + \\\"\\\"\\\"\\\"\\nREM \\\"%40%26%3D%2B%2F%23%21%2A\\\"\\n\\n' escaped characters are encoded as UTF-8 sequences\\ns = Chr(&#x26;h2022)\\nt = s.Escape()\\nprint \\\"\\\"\\\"\\\" + t + \\\"\\\"\\\"\\\"\\nREM \\\"%E2%80%A2\\\"\\n</code></pre>\\n<h3 id=\\\"unescape-as-string\\\">Unescape() as String</h3>\\n<h4 id=\\\"description-17\\\">Description</h4>\\n<p>URL decodes the specified string per <a href=\\\"https://www.ietf.org/rfc/rfc3986.txt\\\" title=\\\"RFC 3986\\\">RFC 3986</a> and returns the decoded string.</p>\\n<p>The functionality is essentially the same as <a href=\\\"/docs/references/brightscript/components/rourltransfer.md\\\">roUrlTransfer</a>. Unescape, but without the overhead of creating a roUrlTransfer object.</p>\\n<p>If the escaped string includes invalid escape sequences, the decode will fail and an empty string will be returned. </p>\\n<blockquote>\\n<p> Consider using the <a href=\\\"#decodeuri-as-string\\\">DecodeUri</a> or <a href=\\\"#decodeuricomponent-as-string\\\">DecodeUriComponent</a> method instead.</p>\\n</blockquote>\\n<h4 id=\\\"return-value-14\\\">Return Value</h4>\\n<p>The URL-decoded string. </p>\\n<h4 id=\\\"example-2\\\">Example</h4>\\n<pre><code>t = \\\"%3B%3F%3A%24%2C%28%29\\\"\\ns = t.Unescape()\\nprint \\\"\\\"\\\"\\\" + s + \\\"\\\"\\\"\\\"\\nREM \\\";?:$,()\\\"\\n</code></pre>\\n<h3 id=\\\"encodeuri-as-string\\\">EncodeUri() as String</h3>\\n<h4 id=\\\"description-18\\\">Description</h4>\\n<p>Encodes the specified string with escape sequences for reserved Uniform Resource Identifier (URI) characters. Non-ASCII characters are encoded as UTF-8 escape sequences.</p>\\n<h4 id=\\\"return-value-15\\\">Return Value</h4>\\n<p>The provided string encoded as a Uniform Resource Identifier (URI).</p>\\n<h4 id=\\\"example-3\\\">Example</h4>\\n<pre><code>s = \\\"http://roku.com/my test.asp?first=jane&#x26;last=doe\\\"\\nt = s.EncodeUri()\\nprint \\\"\\\"\\\"\\\" + t + \\\"\\\"\\\"\\\"\\nREM \\\"http://roku.com/my%20test.asp?first=jane&#x26;last=doe\\\"\\n</code></pre>\\n<h3 id=\\\"decodeuri-as-string\\\">DecodeUri() as String</h3>\\n<h4 id=\\\"description-19\\\">Description</h4>\\n<p>Decodes the specified string with escape sequences for reserved Uniform Resource Identifier (URI) characters. If the escaped string includes invalid escape sequences, the decode will fail and an empty string will be returned. </p>\\n<h4 id=\\\"return-value-16\\\">Return Value</h4>\\n<p>An unencoded version of the provided encoded Uniform Resource Identifier (URI).</p>\\n<h4 id=\\\"example-4\\\">Example</h4>\\n<pre><code>t = \\\"http://roku.com/my%20test.asp?first=jane&#x26;last=doe\\\"\\ns = t.DecodeUri()\\nprint \\\"\\\"\\\"\\\" + s + \\\"\\\"\\\"\\\"\\nREM \\\"http://roku.com/my test.asp?first=jane&#x26;last=doe\\\"\\n</code></pre>\\n<h3 id=\\\"encodeuricomponent-as-string\\\">EncodeUriComponent() as String</h3>\\n<h4 id=\\\"description-20\\\">Description</h4>\\n<p>Encodes the specified string with escape sequences for reserved Uniform Resource Identifier (URI) component characters. </p>\\n<h4 id=\\\"return-value-17\\\">Return Value</h4>\\n<p>The provided string encoded as a Uniform Resource Identifier (URI).</p>\\n<h4 id=\\\"example-5\\\">Example</h4>\\n<pre><code>s = \\\"http://roku.com/my test.asp?first=jane&#x26;last=doe\\\"\\nt = s.EncodeUriComponent()\\nprint \\\"\\\"\\\"\\\" + t + \\\"\\\"\\\"\\\"\\nREM \\\"http%3A%2F%2Froku.com%2Fmy%20test.asp%3Ffirst%3Djane%26last%3Ddoe\\\"\\n</code></pre>\\n<h3 id=\\\"decodeuricomponent-as-string\\\">DecodeUriComponent() as String</h3>\\n<h4 id=\\\"description-21\\\">Description</h4>\\n<p>Decodes the specified string with escape sequences for reserved Uniform Resource Identifier (URI) component characters. If the escaped string includes invalid escape sequences, the decode will fail and an empty string will be returned. </p>\\n<h4 id=\\\"return-value-18\\\">Return Value</h4>\\n<p>An unencoded version of the provided encoded Uniform Resource Identifier (URI).</p>\\n<h4 id=\\\"example-6\\\">Example</h4>\\n<pre><code>t = \\\"http%3A%2F%2Froku.com%2Fmy%20test.asp%3Ffirst%3Djane%26last%3Ddoe\\\"\\ns = t.DecodeUriComponent()\\nprint \\\"\\\"\\\"\\\" + s + \\\"\\\"\\\"\\\"\\nREM \\\"http://roku.com/my test.asp?first=jane&#x26;last=doe\\\"\\n</code></pre>\\n<h3 id=\\\"startswithmatchstring-as-string-as-boolean\\\">StartsWith(matchString as String) As Boolean</h3>\\n<p><em>Available since Roku OS 9.3</em></p>\\n<p>Checks whether the string starts with the substring specified in <strong>matchString</strong>, starting at the beginning of the string (position 0). </p>\\n<h4 id=\\\"return-value-19\\\">Return Value</h4>\\n<p>A flag indicating whether a matching substring was found. </p>\\n<h4 id=\\\"example-7\\\">Example</h4>\\n<pre><code>s = \\\"Roku Rocks\\\"\\n? s.StartsWith(\\\"Roku\\\") ' => true\\n? s.StartsWith(\\\"roku\\\") '=> false\\n</code></pre>\\n<h3 id=\\\"startswithmatchstring-as-string-matchpos-as-integer-as-boolean\\\">StartsWith(matchString as String, matchPos as Integer) As Boolean</h3>\\n<p><em>Available since Roku OS 9.3</em></p>\\n<p>Checks whether the string starts with the substring specified in <strong>matchString</strong>, starting at the <strong>matchPos</strong> parameter (0-based character offset). </p>\\n<h4 id=\\\"return-value-20\\\">Return Value</h4>\\n<p>A flag indicating whether a matching substring was found. </p>\\n<h4 id=\\\"example-8\\\">Example</h4>\\n<pre><code>s = \\\"Roku Rocks\\\"\\n? s.StartsWith(\\\"Rocks\\\", 5) ' => true\\n? s.StartsWith(\\\"Roku\\\", 5) ' => false\\n</code></pre>\\n<h3 id=\\\"endswithmatchstring-as-string-as-boolean\\\">EndsWith(matchString as String) As Boolean</h3>\\n<p><em>Available since Roku OS 9.3</em></p>\\n<p>Checks whether the string ends with the substring specified in <strong>matchString</strong>, starting at the end of the string. </p>\\n<h4 id=\\\"return-value-21\\\">Return Value</h4>\\n<p>A flag indicating whether a matching substring was found. </p>\\n<h4 id=\\\"example-9\\\">Example</h4>\\n<pre><code>s = \\\"Roku Rocks\\\"\\n? s.EndsWith(\\\"Rocks\\\") ' => true\\n? s.EndsWith(\\\"roku\\\") '=> false\\n</code></pre>\\n<h3 id=\\\"endswithmatchstring-as-string-length-as-integer-as-boolean\\\">EndsWith(matchString as String, length as Integer) As Boolean</h3>\\n<p><em>Available since Roku OS 9.3</em></p>\\n<p>Checks whether the string ends with the substring specified in <strong>matchString</strong>, starting at the position specified in the <strong>length</strong> parameter. </p>\\n<h4 id=\\\"return-value-22\\\">Return Value</h4>\\n<p>A flag indicating whether a matching substring was found. </p>\\n<h4 id=\\\"example-10\\\">Example</h4>\\n<pre><code>s = \\\"Roku Rocks\\\"\\n? s.EndsWith(\\\"Roku\\\", 4) ' => true\\n</code></pre>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifsystemlog.md":"{\n  \"content\": \"<h1 id=\\\"ifsystemlog\\\">ifSystemLog</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rosystemlog.md\\\" title=\\\"roSystemLog\\\">roSystemLog</a></td>\\n<td>The roSystemLog component enables the application to receive events from the Roku Streaming Player that are intended for reporting errors and trends, rather than trigger a response to a user action</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"enabletypelogtype-as-string-as-void\\\">EnableType(logType as String) as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Enables log message of type logType. When a log type is enabled, system log messages of that type are sent to the message port that was set using SetMessagePort().  </p>\\n<p>All system log events are disabled by default and must be explicitly enabled by the application.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>logType</td>\\n<td>String</td>\\n<td>The logType to be enabled, which may be one of the following values: <table>\\n<thead>\\n<tr>\\n<th>Valid logTypes</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>\\\"http.connect\\\"</td>\\n<td>Sent whenever a successful HTTP connection is made. This means that the server responded to the HTTP request with a success (2xx) status code. However, this does not necessarily mean that all of the body of the request has been received successfully</td>\\n</tr>\\n<tr>\\n<td>\\\"http.error\\\"</td>\\n<td>Sent whenever an error occurs while executing an HTTP request. This may be sent during the time of the initial connection for two possible reasons: <ul>\\n<li>because the server responded with an error code, or</li>\\n<li>data is being read from the body after the initial connection takes place</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>\\\"bandwidth.minute\\\"</td>\\n<td>Sent every minute to report the current measured bandwidth</td>\\n</tr>\\n<tr>\\n<td>“http.complete”</td>\\n<td><table>\\n<thead>\\n<tr>\\n<th>Property/Key</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>LogType</td>\\n<td>String</td>\\n<td>When enabled, the “http.complete” events will be sent to Roku after an http transfer is completed for adaptive streams. This event consolidates information related to: <ul>\\n<li>a cURL transfer such as DNS look up time,</li>\\n<li>connection latency,</li>\\n<li>transfer speed,</li>\\n<li>and number of bytes.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>DateTime</td>\\n<td>roDateTime</td>\\n<td>The GMT time of the event, with a resolution of one millisecond</td>\\n</tr>\\n<tr>\\n<td>Url</td>\\n<td>String</td>\\n<td>The URL that was requested</td>\\n</tr>\\n<tr>\\n<td>OrigUrl</td>\\n<td>String</td>\\n<td>The original URL. If the original URL was redirected, then Url represents the new redirected URL and OrigURL the original. OrigURL is included so that it's easy to correlate between events and URLs passed to components</td>\\n</tr>\\n<tr>\\n<td>Method</td>\\n<td>String</td>\\n<td>The HTTP method. \\\"GET\\\", \\\"POST\\\", or \\\"HEAD\\\"</td>\\n</tr>\\n<tr>\\n<td>Status</td>\\n<td>String</td>\\n<td>For LogType “http.complete”, this will be “ok”</td>\\n</tr>\\n<tr>\\n<td>TargetIp</td>\\n<td>String</td>\\n<td>The IP address of the target server</td>\\n</tr>\\n<tr>\\n<td>HttpCode</td>\\n<td>Integer</td>\\n<td>The HTTP response code if available</td>\\n</tr>\\n<tr>\\n<td>ContentType</td>\\n<td>String</td>\\n<td>Content type or MIME type</td>\\n</tr>\\n<tr>\\n<td>DNSLookupTime</td>\\n<td>Double</td>\\n<td>DNS name resolution time in seconds with double precision</td>\\n</tr>\\n<tr>\\n<td>ConnectTime</td>\\n<td>Double</td>\\n<td>Time taken to connect to the server (seconds)</td>\\n</tr>\\n<tr>\\n<td>FirstByteTime</td>\\n<td>Double</td>\\n<td>Time taken to receive the first byte from the server (seconds)</td>\\n</tr>\\n<tr>\\n<td>TransferTime</td>\\n<td>Double</td>\\n<td>Total data transfer time (seconds)</td>\\n</tr>\\n<tr>\\n<td>DownloadSpeed</td>\\n<td>Double</td>\\n<td>Transfer download speed in bytes per second</td>\\n</tr>\\n<tr>\\n<td>BytesDownloaded</td>\\n<td>Integer</td>\\n<td>Number of bytes downloaded from the server</td>\\n</tr>\\n<tr>\\n<td>UploadSpeed</td>\\n<td>Double</td>\\n<td>Transfer upload speed in bytes per second</td>\\n</tr>\\n<tr>\\n<td>BytesUploaded</td>\\n<td>Integer</td>\\n<td>Number of bytes uploaded to the server</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>See <a href=\\\"/docs/references/brightscript/events/rosystemlogevent.md\\\" title=\\\"roSystemLogEvent\\\">roSystemLogEvent</a> for details on the information reported for each log type.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/iftexttospeech.md":"{\n  \"content\": \"<h1 id=\\\"iftexttospeech\\\">ifTextToSpeech</h1>\\n<blockquote>\\n<p>To implement CVAA/screen reader support in your channel, use the <a href=\\\"/docs/references/brightscript/components/roaudioguide.md\\\">roAudioGuide</a> component object. The roTextToSpeech component object is typically used for book readers and other special-purpose applications.</p>\\n<p>Please note this component is only available on the following devices: Roku Streaming Stick (3600X), Roku Express (3700X) and Express+ (3710X), Roku Premiere (4620X) and Premiere+ (4630X), Roku Ultra (4640X), and any Roku TV running Roku OS version 7.2 and later.</p>\\n</blockquote>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rotexttospeech.md\\\" title=\\\"roTextToSpeech\\\">roTextToSpeech</a></td>\\n<td>The roTextToSpeech component provides text to speech capabilities to applications</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"saytext-as-string-as-integer\\\">Say(text as String) as Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns an ID for the spoken string to notify observer callbacks about a specific spoken string.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>String</td>\\n<td>The UTF8 text to be spoken. <br /><br />Punctuation such as commas and periods can be used to add pauses to the speech playback.<br /><br />Typically, special characters are generally not spoken; however, you can pass in the appropriate text such as \\\"question mark\\\" to have a special character be spoken (do not use the symbol).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The ID for the spoken string.</p>\\n<h3 id=\\\"silenceduration-as-integer-as-integer\\\">Silence(duration as Integer) as Integer</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Causes text to speech to continue to suppress any application background sound for the amount of time specified by <code>duration</code>.</p>\\n<p>This can be used to add clarity for longer spoken text that may have pauses that might otherwise allow application background sound to be heard.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>duration</td>\\n<td>Integer</td>\\n<td>The amount of time to suppress application background sound</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The duration for the speech suppression. </p>\\n<h3 id=\\\"flush-as-void\\\">Flush() as Void</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Interrupts and stops any current text to speech spoken string, to be used when the channel does not want to the text to speech to continue.</p>\\n<h3 id=\\\"isenabled-as-boolean\\\">IsEnabled() as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Checks whether text-to-speech is enabled. Text-to-speech may be enabled or disabled for various technical reasons (for example, on some platforms, text-to-speech may only be enabled once in connected mode). This is not affected by the state of any of its clients. In particular, it does not depend on whether a CVAA compliant accessibility feature is enabled or not.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether text-to-speech is enabled. </p>\\n<h3 id=\\\"getavailablelanguages-as-object\\\">GetAvailableLanguages() as Object</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns an array containing the current list of languages available for text-to-speech.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A list of languages. </p>\\n<h3 id=\\\"setlanguagename-as-string-as-void\\\">SetLanguage(name as String) as Void</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Sets the language specified by <code>name</code> for text to speech, from one of the available languages returned by the <a href=\\\"#getavailablelanguages-as-object\\\">GetAvailableLanguages()</a> method. </p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name</td>\\n<td>String</td>\\n<td>The text-to-speech language to be used.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getlanguage-as-string\\\">GetLanguage() as String</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Returns the name of the currently-selected text-to-speech language.</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>The language name. </p>\\n<h3 id=\\\"getavailablevoices-as-object\\\">GetAvailableVoices() as Object</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Returns an array containing the current list of voices available for text-to-speech.</p>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A list of voices.</p>\\n<h3 id=\\\"setvoicename-as-string-as-void\\\">SetVoice(name as String) as Void</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Sets the voice specified by name for text to speech, from one of the available voices returned by the <a href=\\\"#getavailablevoices-as-object\\\">GetAvailableVoices()</a> method. </p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name</td>\\n<td>String</td>\\n<td>The available text-to-speech voice to be used</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getvoice-as-string\\\">GetVoice() as String</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Returns the currently-selected voice.</p>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>The selected voice.</p>\\n<h3 id=\\\"getvolume-as-integer\\\">GetVolume() as Integer</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Returns the volume at which text is spoken. The value ranges from 0 for muted to 1000 for the highest volume. The default value is 1000.</p>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>The volume. </p>\\n<h3 id=\\\"setvolumevolume-as-integer-as-void\\\">SetVolume(volume as Integer) as Void</h3>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>Sets the volume at which text is spoken.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>volume</td>\\n<td>Integer</td>\\n<td>The volume at which text is spoken. The value ranges from 0 for muted to 1000 for the highest volume. The default value is 1000.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getrate-as-integer\\\">GetRate() as Integer</h3>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Returns the rate at which text is spoken. The value ranges from -40 to 200 with a default value of 0.</p>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>The rate. </p>\\n<h3 id=\\\"setraterate-as-integer-as-void\\\">SetRate(rate as Integer) as Void</h3>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Sets the rate at which text is spoken. </p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>rate</td>\\n<td>Integer</td>\\n<td>The rate at which text is to be spoken. The possible values range from -40 to 200.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getpitch-as-integer\\\">GetPitch() as Integer</h3>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Returns the pitch at which text is spoken. The possible values range from -60 to +60.</p>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>The pitch.</p>\\n<h3 id=\\\"setpitchpitch-as-integer-as-void\\\">SetPitch(pitch as Integer) as Void</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>Sets the pitch at which text is spoken. </p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>pitch</td>\\n<td>Integer</td>\\n<td>The pitch at which text is to be spoken. The possible values range from -60 to +60.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/iftexturemanager.md":"{\n  \"content\": \"<h1 id=\\\"iftexturemanager\\\">ifTextureManager</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rotexturemanager.md\\\" title=\\\"roTextureManager\\\">roTextureManager</a></td>\\n<td>The Texture Manager provides a set of API's for managing an roBitmap cache</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"requesttexturereq-as-object-as-void\\\">RequestTexture(req as Object) as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Makes a request for an roBitmap with the attributes specified by the roTextureRequest. The roTextureManager will pass an roTextureRequestEvent to the message port when completed.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>req</td>\\n<td>Object</td>\\n<td>The roTextureRequest</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"cancelrequestreq-as-object-as-void\\\">CancelRequest(req as Object) as Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Cancels the request specified by req, which should be an roTextureRequest previously passed to the <a href=\\\"#requesttexturereq-as-object-as-void\\\">RequestTexture()</a> method.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>req</td>\\n<td>Object</td>\\n<td>The previoulsy passed roTextureRequest to be cancelled.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"unloadbitmapurl-as-string-as-void\\\">UnloadBitmap(url as String) as Void</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Removes a bitmap from the roTextureManager with the specified URL.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>url</td>\\n<td>String</td>\\n<td>The URL of the bitmap to be removed from the roTextureManager</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"cleanup-as-void\\\">Cleanup() as Void</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Removes all bitmaps from the roTextureManager.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/iftexturerequest.md":"{\n  \"content\": \"<h1 id=\\\"iftexturerequest\\\">ifTextureRequest</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rotexturerequest.md\\\" title=\\\"roTextureRequest\\\">roTextureRequest</a></td>\\n<td>An roTextureRequest is used to make requests to the roTextureManager</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getid-as-integer\\\">GetId() as Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns a unique id for the request.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<p>The unique ID.</p>\\n<h3 id=\\\"getstate-as-integer\\\">GetState() as Integer</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the state of the request.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The state value, which may be one of the following:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>State</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>0</td>\\n<td>Requested</td>\\n</tr>\\n<tr>\\n<td>1</td>\\n<td>Downloading</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td>Downloaded</td>\\n</tr>\\n<tr>\\n<td>3</td>\\n<td>Ready</td>\\n</tr>\\n<tr>\\n<td>4</td>\\n<td>Failed</td>\\n</tr>\\n<tr>\\n<td>5</td>\\n<td>Cancelled</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setasyncasync-as-boolean-as-void\\\">SetAsync(async as Boolean) as Void</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Sets the request to be either asynchronous (true) or synchronous (false). The default is asynchronous</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>async</td>\\n<td>Boolean</td>\\n<td>The method used to send the request: asynchronous (true) or synchronous (false).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setsizewidth-as-integer-height-as-integer-as-void\\\">SetSize(width as Integer, height as Integer) as Void</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Sets the desired size of the roBitmap. The default is to return a bitmap in its native size.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>width</td>\\n<td>Integer</td>\\n<td>The width of the roBitmap.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>Integer</td>\\n<td>The height of the roBitmap.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setscalemodemode-as-integer-as-void\\\">SetScaleMode(mode as Integer) as Void</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Sets the scaling mode to be used. </p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>mode</td>\\n<td>Integer</td>\\n<td>The scaling mode to be used, which may be one of the following values:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Scaling mode</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>0</td>\\n<td>Nearest neighbor (fast). This is the default.</td>\\n</tr>\\n<tr>\\n<td>1</td>\\n<td>Bilinear (smooth)</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/iftimespan.md":"{\n  \"content\": \"<h1 id=\\\"iftimespan\\\">ifTimeSpan</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rotimespan.md\\\" title=\\\"roTimespan\\\">roTimespan</a></td>\\n<td>The Timespan object provides an interface to a simple timer for tracking the duration of activities</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"mark-as-void\\\">Mark() as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sets the \\\"Mark\\\" point to the current time. The Mark point is also automatically set to the current time when an roTimespan object is created.</p>\\n<h3 id=\\\"totalmilliseconds-as-integer\\\">TotalMilliseconds() as Integer</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the total number of milliseconds from the \\\"Mark\\\" point to the current time.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The number of milliseconds. </p>\\n<h3 id=\\\"totalseconds-as-integer\\\">TotalSeconds() as Integer</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns the total number of seconds from the \\\"Mark\\\" point to the current time.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The number of seconds.</p>\\n<h4 id=\\\"example\\\">Example</h4>\\n<pre><code>x = timespan.TotalSeconds()\\n</code></pre>\\n<p>is equivalent to</p>\\n<pre><code>x = Int(timespan.TotalMilliseconds() / 1000)\\n</code></pre>\\n<h3 id=\\\"getsecondstoiso8601datedate-as-string-as-integer\\\">GetSecondsToISO8601Date(date as String) as Integer</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Parses the ISO8601 date (e.g. 2008-11-29T14:54:02.171) and returns the number of seconds from now (not the \\\"Mark\\\" point) until the specified date/time.</p>\\n<p>The date provided and the current time calculations are all done assuming UTC. The \\\"Z\\\" timezone part of the ISO8601 string is ignored.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Parameters</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>date</td>\\n<td>String</td>\\n<td>The ISO8601date to be parsed.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>The number of seconds. </p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/iftostr.md":"{\n  \"content\": \"<h1 id=\\\"iftostr\\\">ifToStr</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roboolean.md\\\" title=\\\"roBoolean\\\">roBoolean</a></td>\\n<td>Object equivalent for intrinsic type Boolean</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rodouble.md\\\" title=\\\"roDouble\\\">roDouble</a></td>\\n<td>Object equivalent for intrinsic type 'Double'</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rofloat.md\\\" title=\\\"roFloat\\\">roFloat</a></td>\\n<td>Object equivalent for intrinsic type 'Float'</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rofunction.md\\\" title=\\\"roFunction\\\">roFunction</a></td>\\n<td>Object equivalent for intrinsic type Function</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roint.md\\\" title=\\\"roInt\\\">roInt</a></td>\\n<td>Object equivalent for intrinsic type Integer</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roinvalid.md\\\" title=\\\"roInvalid\\\">roInvalid</a></td>\\n<td>Object equivalent for intrinsic type 'Invalid'</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rolonginteger.md\\\" title=\\\"roLongInteger\\\">roLongInteger</a></td>\\n<td>Object equivalent for intrinsic type LongInteger</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rostring.md\\\" title=\\\"roString\\\">roString</a></td>\\n<td>Object equivalent for intrinsic type 'String'</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"tostr-as-string\\\">ToStr() As String</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns the value as a string.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>The string.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifurltransfer.md":"{\n  \"content\": \"<h1 id=\\\"ifurltransfer\\\">ifUrlTransfer</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rourltransfer.md\\\" title=\\\"roUrlTransfer\\\">roUrlTransfer</a></td>\\n<td>A roUrlTransfer object transfers data to or from remote servers specified by URLs. It can perform mutual authentication with a web server</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<blockquote>\\n<p>Each roUrlTransfer object can perform only one asynchronous operation at one time. After starting an asynchronous operation, you cannot perform any other data transfer operations using that object until the asynchronous operation has completed, as indicated by receiving an roUrlEvent message whose GetSourceIdentity value matches the GetIdentity value of the roUrlTransfer.</p>\\n<p>Furthermore, the roUrlTransfer object must remain referenced until the transfer has completed. That means that there must be at least one variable containing a reference to the object during the transfer.  Allowing the variable to go out of scope (for example, by returning from a function where the variable is declared, or reusing the variable to hold a different value) will stop the asynchronous transfer.</p>\\n</blockquote>\\n<h3 id=\\\"getidentity-as-integer\\\">GetIdentity() as Integer</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns a unique number for this object that can be used to identify whether events originated from this object. The value can be any arbitrary value as assigned by the Roku OS, and should only be used for comparison purposes. For example, the value should not be used as an array index. For use as a look-up key, one option would be to use <code>GetIdentity().ToStr()</code> as an associative array key.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A unique number for the object.</p>\\n<h4 id=\\\"example\\\">Example</h4>\\n<pre><code>Function Setup()\\n    m.pendingXfers = {}\\nEnd Function\\n\\nFunction GetAsync(url as String)\\n    newXfer = CreateObject(\\\"roUrlTransfer\\\")\\n    newXfer.SetUrl(url)\\n    newXfer.AsyncGetToString()\\n    requestId = newXfer.GetIdentity().ToStr()\\n    m.pendingXfers[requestId] = newXfer\\nEnd Function\\n\\nFunction HandleUrlEvent(event as Object)\\n    requestId = event.GetSourceIdentity().ToStr()\\n    xfer = m.pendingXfers[requestId]\\n    if xfer &#x3C;> invalid then\\n        ' process it\\n        m.pendingXfers.Delete(requestId)\\n    end if\\nEnd Function\\n</code></pre>\\n<h3 id=\\\"seturlurl-as-string-as-void\\\">SetUrl(url as String) as Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Sets the URL to use for the transfer request.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>url</td>\\n<td>String</td>\\n<td>The URL to be used for the transfer request</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"geturl-as-string\\\">GetUrl() as String</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns the current URL.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>The URL.</p>\\n<h3 id=\\\"setrequestreq-as-string\\\">SetRequest(req as String)</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Changes the request method from the normal GET, HEAD or POST to the value passed as a string.</p>\\n<blockquote>\\n<p> Use this function cautiously because it can generate invalid HTTP requests.</p>\\n</blockquote>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>req</td>\\n<td>String</td>\\n<td>The request method to be used</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getrequest-as-string\\\">GetRequest() as String</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns the current request method.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>The request method. </p>\\n<h3 id=\\\"gettostring-as-string\\\">GetToString() as String</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Connects to the remote service as specified in the URL and returns the response body as a string. This function waits for the transfer to complete and it may block for a long time. This calls discards the headers and response codes. If that information is required, use the <a href=\\\"#asyncgettostring-as-boolean\\\">AsyncGetToString()</a> method.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>The response body.</p>\\n<h3 id=\\\"gettofilefilename-as-string-as-integer\\\">GetToFile(filename as String) as Integer</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Connect to the remote service as specified in the URL and write the response body to a file on the Roku device's filesystem. This function does not return until the exchange is complete and may block for a long time. The HTTP response code from the server is returned. It is not possible to access any of the response headers. If this information is required use the <a href=\\\"#asyncgettofilefilename-as-string-as-boolean\\\">AsyncGetToFile()</a> method instead.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>filename</td>\\n<td>String</td>\\n<td>The file on the Roku device's filesystem to which the response body is to be written</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>The HTTP response code.</p>\\n<h3 id=\\\"asyncgettostring-as-boolean\\\">AsyncGetToString() as Boolean</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Starts a GET request to a server, but does not wait for the transfer to complete. </p>\\n<p>When the GET request completes, a <a href=\\\"/docs/references/brightscript/events/rourlevent.md\\\" title=\\\"roUrlEvent\\\">roUrlEvent</a> will be sent to the message port associated with the object. The event will contain a roString with the body of the response. If false is returned then the request could not be issued and no events will be delivered.</p>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>A flag indicating whether the request was issued. </p>\\n<h3 id=\\\"asyncgettofilefilename-as-string-as-boolean\\\">AsyncGetToFile(filename as String) as Boolean</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Starts a transfer without waiting for it to complete, similar to the <a href=\\\"#asyncgettostring-as-boolean\\\">AsyncGetToString()</a> method. However, the response body will be written to a file on the device's filesystem instead of being returned in a String object.</p>\\n<p>When the GET request completes, an <a href=\\\"/docs/references/brightscript/events/rourlevent.md\\\" title=\\\"roUrlEvent\\\">roUrlEvent</a> will be sent to the message port associated with the object. If false is returned then the request could not be issued and no events will be delivered.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>filename</td>\\n<td>String</td>\\n<td>The file on the Roku device's filesystem to which the response body is to be written</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>A flag indicating whether the request was issued. </p>\\n<h3 id=\\\"head-as-dynamic\\\">Head() as Dynamic</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Synchronously performs an HTTP HEAD request and returns an <a href=\\\"/docs/references/brightscript/interfaces/ifurltransfer.md\\\" title=\\\"roUrlTransfer\\\">roUrlTransfer</a> object.</p>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>An <a href=\\\"/docs/references/brightscript/interfaces/ifurltransfer.md\\\" title=\\\"roUrlTransfer\\\">roUrlTransfer</a> object.  If a catastrophic failure occurs (for example, an asynchronous operation is already active), invalid is returned</p>\\n<h3 id=\\\"asynchead-as-boolean\\\">AsyncHead() as Boolean</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Begins an HTTP HEAD request without waiting for it to complete. When the HEAD completes, an <a href=\\\"/docs/references/brightscript/events/rourlevent.md\\\" title=\\\"roUrlEvent\\\">roUrlEvent</a> will be sent to the message port associated with the object. If false is returned then the request could not be issued and no events will be delivered.</p>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>A flag indicating whether the request was issued. </p>\\n<h3 id=\\\"postfromstringrequest-as-string-as-integer\\\">PostFromString(request as String) as Integer</h3>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>Uses the HTTP POST method to send the supplied string to the current URL. The HTTP response code is returned. Any response body is discarded</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>request</td>\\n<td>String</td>\\n<td>The POST request to be sent</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>The HTTP response code.</p>\\n<h3 id=\\\"postfromfilefilename-as-string-as-integer\\\">PostFromFile(filename as String) as Integer</h3>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Uses the HTTP POST method to send the contents of the specified file to the current URL. The HTTP response code is returned. Any response body is discarded</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>filename</td>\\n<td>String</td>\\n<td>The file containing the POST request to be sent</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-10\\\">Return Value</h4>\\n<p>The HTTP response code.</p>\\n<h3 id=\\\"asyncpostfromstringrequest-as-string-as-boolean\\\">AsyncPostFromString(request as String) as Boolean</h3>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Uses the HTTP POST method to send the supplied string to the current URL. When the POST request completes, an <a href=\\\"/docs/references/brightscript/interfaces/ifurltransfer.md\\\" title=\\\"roUrlTransfer\\\">roUrlTransfer</a> will be sent to the message port associated with the object. If false is returned then the request could not be issued and no events will be delivered.</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>request</td>\\n<td>String</td>\\n<td>The POST request to be sent asynchronously</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-11\\\">Return Value</h4>\\n<p>A flag indicating whether the request was issued. </p>\\n<h3 id=\\\"asyncpostfromfilefilename-as-string-as-boolean\\\">AsyncPostFromFile(filename as String) as Boolean</h3>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Uses the HTTP POST method to send the contents of the specified file to the current URL. When the POST request completes, an <a href=\\\"/docs/references/brightscript/interfaces/ifurltransfer.md\\\" title=\\\"roUrlTransfer\\\">roUrlTransfer</a> will be sent to the message port associated with the object. If false is returned then the request could not be issued and no events will be delivered.</p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>filename</td>\\n<td>String</td>\\n<td>The file containing the POST request to be sent asynchronously</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-12\\\">Return Value</h4>\\n<p>A flag indicating whether the request was issued. </p>\\n<h3 id=\\\"asyncpostfromfiletofilefromfile-as-string-tofile-as-string-as-boolean\\\">AsyncPostFromFileToFile(fromFile as String, toFile as String) as Boolean</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>Uses the HTTP POST method to send the contents of the specified file (fromFile) to the current URL. When the POST request completes successfully, an <a href=\\\"/docs/references/brightscript/interfaces/ifurltransfer.md\\\" title=\\\"roUrlTransfer\\\">roUrlTransfer</a> will be sent to the message port associated with the object. If false is returned then the request could not be issued and no events will be delivered.  This function is the same as AsyncPostFromFile, except that the HTTP response is written to the file specified by the toFile parameter.</p>\\n<h4 id=\\\"parameters-7\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fromFile</td>\\n<td>String</td>\\n<td>The file containing the POST request to be sent asynchronously</td>\\n</tr>\\n<tr>\\n<td>toFile</td>\\n<td>String</td>\\n<td>The file on the Roku device's filesystem to which the response body is to be written</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-13\\\">Return Value</h4>\\n<p>A flag indicating whether the request was issued. </p>\\n<h3 id=\\\"asynccancel-as-boolean\\\">AsyncCancel() as Boolean</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Possible Value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>AsyncCancel</td>\\n<td>Boolean</td>\\n<td>True/False</td>\\n<td>Cancel any outstanding async requests on the roUrlEvent object</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"retainbodyonerrorretain-as-boolean-as-boolean\\\">RetainBodyOnError(retain as Boolean) as Boolean</h3>\\n<h4 id=\\\"description-16\\\">Description</h4>\\n<p>Returns the body of the response even if the HTTP status code indicates that an error occurred.</p>\\n<h4 id=\\\"parameters-8\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>retain</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether to return the response body when there is an HTTP error response code.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-14\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful. </p>\\n<h3 id=\\\"setuserandpassworduser-as-string-password-as-string-as-boolean\\\">SetUserAndPassword(user as String, password as String) as Boolean</h3>\\n<h4 id=\\\"description-17\\\">Description</h4>\\n<p>Enables HTTP authentication using the specified user name and password. </p>\\n<blockquote>\\n<p>HTTP basic authentication is intentionally disabled because it is inherently insecure. <a href=\\\"https://tools.ietf.org/html/rfc2617\\\" title=\\\"HTTP digest authentication\\\">HTTP digest authentication</a> is supported.</p>\\n</blockquote>\\n<h4 id=\\\"parameters-9\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>user</td>\\n<td>String</td>\\n<td>The user name to be authenticated</td>\\n</tr>\\n<tr>\\n<td>password</td>\\n<td>String</td>\\n<td>The password to be authenticated</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-15\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful. </p>\\n<h3 id=\\\"setminimumtransferratebytes_per_second-as-integer-period_in_seconds-as-integer-as-boolean\\\">SetMinimumTransferRate(bytes_per_second as Integer, period_in_seconds as Integer) as Boolean</h3>\\n<h4 id=\\\"description-18\\\">Description</h4>\\n<p>Terminates the transfer automatically if the transfer rate drops below the specified rate (bytes_per_second) over a specific interval (period_in_seconds).  </p>\\n<h4 id=\\\"parameters-10\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>bytes_per_second</td>\\n<td>Integer</td>\\n<td>The minimum transfer rate required to transfer data.</td>\\n</tr>\\n<tr>\\n<td>period_in_seconds</td>\\n<td>Integer</td>\\n<td>The interval to be used for averaging bytes_per_second.<br /><br />For large file transfers and a small bytes_per_second, averaging over fifteen minutes or even longer might be appropriate.<br /><br />If the transfer is being done over the internet, setting this to a small number because it may cause temporary drops in performance if network problems occur.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-16\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful. </p>\\n<h3 id=\\\"getfailurereason-as-string\\\">GetFailureReason() as String</h3>\\n<h4 id=\\\"description-19\\\">Description</h4>\\n<p>If any of the <code>roUrlEvent</code> functions indicate failure then this function may provide more information regarding the failure.</p>\\n<h4 id=\\\"return-value-17\\\">Return Value</h4>\\n<p>Failure reason.</p>\\n<h3 id=\\\"enableencodingsenable-as-boolean-as-boolean\\\">EnableEncodings(enable as Boolean) as Boolean</h3>\\n<h4 id=\\\"description-20\\\">Description</h4>\\n<p>Enables gzip encoding of transfers</p>\\n<h4 id=\\\"parameters-11\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>retain</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether to enable gzip encoding of transfers</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-18\\\">Return Value</h4>\\n<p>A flag indicating whether this operation was successful.</p>\\n<h3 id=\\\"escapetext-as-string-as-string\\\">Escape(text as String) as String</h3>\\n<h4 id=\\\"description-21\\\">Description</h4>\\n<p>URL encodes the specified string per <a href=\\\"https://www.ietf.org/rfc/rfc3986.txt\\\" title=\\\"RFC 3986\\\">RFC 3986</a> and return the encoded string</p>\\n<h4 id=\\\"parameters-12\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>String</td>\\n<td>The string to be URL-encoded</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-19\\\">Return Value</h4>\\n<p>The URL-encoded string.</p>\\n<h3 id=\\\"unescapetext-as-string-as-string\\\">Unescape(text as String) as String</h3>\\n<h4 id=\\\"description-22\\\">Description</h4>\\n<p>Decodes the specified string per <a href=\\\"https://www.ietf.org/rfc/rfc3986.txt\\\" title=\\\"RFC 3986\\\">RFC 3986</a> and returns the unencoded string.</p>\\n<h4 id=\\\"parameters-13\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>String</td>\\n<td>The string to be URL-decoded</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-20\\\">Return Value</h4>\\n<p>The decoded string. </p>\\n<h3 id=\\\"urlencodeurl-as-string-as-string\\\">UrlEncode(url as String) as String</h3>\\n<blockquote>\\n<p>This method is deprecated. Use the <a href=\\\"/docs/references/brightscript/interfaces/ifurltransfer.md#escapetext-as-string-as-string\\\">Escape()</a> method.</p>\\n</blockquote>\\n<h4 id=\\\"description-23\\\">Description</h4>\\n<p>URL encodes the specified string per RFC 3986 and return the encoded string</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Return Type</th>\\n<th>Parameters</th>\\n<th>Return Value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>UrlEncode</td>\\n<td>String</td>\\n<td>${UrlEncodeParameters}</td>\\n<td>URL-encoded String</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"parameters-14\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>String</td>\\n<td>The string to be URL-encoded</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-21\\\">Return Value</h4>\\n<p>The encoded string.</p>\\n<h3 id=\\\"enableresumeenable-as-boolean-as-boolean\\\">EnableResume(enable as Boolean) as Boolean</h3>\\n<h4 id=\\\"description-24\\\">Description</h4>\\n<p>Enables automatic resumption of <code>AsyncGetToFile</code> and <code>GetToFile</code> requests</p>\\n<h4 id=\\\"parameters-15\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether to automatically resume <code>AsyncGetToFile</code> and <code>GetToFile</code> requests</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-22\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful. </p>\\n<h3 id=\\\"enablepeerverificationenable-as-boolean-as-boolean\\\">EnablePeerVerification(enable as Boolean) as Boolean</h3>\\n<h4 id=\\\"description-25\\\">Description</h4>\\n<p>Verifies that the certificate has a chain of trust up to a valid root certificate using CURLOPT_SSL_VERIFYPEER.</p>\\n<h4 id=\\\"parameters-16\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether to verify a certificate has a chain-of-trust up to a valid root certificate</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-23\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful. </p>\\n<h3 id=\\\"enablehostverificationenable-as-boolean-as-boolean\\\">EnableHostVerification(enable as Boolean) as Boolean</h3>\\n<h4 id=\\\"description-26\\\">Description</h4>\\n<p>Verifies that the certificate belongs to the host using CURLOPT_SSL_VERIFYHOST.</p>\\n<h4 id=\\\"parameters-17\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether to verify a certificate belonging to the host.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-24\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful. </p>\\n<h3 id=\\\"enablefreshconnectionenable-as-boolean-as-boolean\\\">EnableFreshConnection(enable as Boolean) as Boolean</h3>\\n<blockquote>\\n<p>The Roku OS no longer supports this function. Channels should always reuse connections because it is more efficient (new connections impact channel performance by increasing latency and consuming more CPU).</p>\\n</blockquote>\\n<h4 id=\\\"description-27\\\">Description</h4>\\n<p>Enables a fresh connection using CURLOPT_FRESH_CONNECT.</p>\\n<h4 id=\\\"parameters-18\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>A flag specifying whether to enable fresh connections.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-25\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful. </p>\\n<h3 id=\\\"sethttpversionversion-as-string-as-void\\\">SetHttpVersion(version as String) as Void</h3>\\n<h4 id=\\\"description-28\\\">Description</h4>\\n<p>An optional function that enables HTTP/2 support. If version is set to <code>\\\"http2\\\"</code>, HTTP/2 will be used for all underlying transfers. </p>\\n<p>This must be set on a roUrlTransfer instance prior to any data transfer. The HTTP version used by an instance cannot be changed  after the instance's first use. </p>\\n<p>For the HTTP/2 connection sharing feature, all roUrlTransfers should be made from the same thread.</p>\\n<h4 id=\\\"parameters-19\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>version</td>\\n<td>String</td>\\n<td>The http version to be used (for example, \\\"http2\\\" for HTTP/2). <code>\\\"AUTO\\\"</code> is the default value, which causes the roUrlTransfer connection to auto-negotiate HTTP/1.x or HTTP/2, depending on the agreement reached by client and server.</td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>SetHttpVersion does not impact the connection made by the Roku Media player, which will always use HTTP/1.x.</p>\\n</blockquote>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifvideoplayer.md":"{\n  \"content\": \"<h1 id=\\\"ifvideoplayer\\\">ifVideoPlayer</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/rovideoplayer.md\\\" title=\\\"roVideoPlayer\\\">roVideoPlayer</a></td>\\n<td>The roVideoPlayer component implements a video player with more programmatic control, but less user control than the roVideoScreen component</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"setcontentlistcontentlist-as-object-as-void\\\">SetContentList(contentList as Object) as Void</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Sets the content to be played by the roVideoPlayer.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>contentList</td>\\n<td>Object</td>\\n<td>An <a href=\\\"/docs/references/brightscript/components/roarray.md\\\" title=\\\"roArray\\\">roArray</a> of <a href=\\\"/docs/references/brightscript/components/roassociativearray.md\\\" title=\\\"roAssociativeArray\\\">roAssociativeArray</a> (<a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\" title=\\\" Content Meta-Data\\\">Content Meta-Data</a> objects) representing the information for each stream to be played.<br /><br />If the player is currently playing the player will be stopped. Next, the current player position is reset so the next time Play() is called, playback will start at the first item of the content list (unless Seek() is called prior to Play()).<br /><br />roVideoPlayer prefetches the next item in the content list while the current item is playing. Given sufficient network throughput, there is no rebuffering when the player switches to the next item in the list. To signal the content transition, the player sends an isRequestSucceeded notification with the old content index and isListItemSelected notification with the new content index.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"addcontentcontentitem-as-object-as-void\\\">AddContent(contentItem as Object) as Void</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Adds a new <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\" title=\\\" Content Meta-Data\\\">Content Meta-Data</a> item to the end of the content list for the roVideoPlayer. roVideoPlayer playback buffers on each Content item transition.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>contentItem</td>\\n<td>Object</td>\\n<td>The <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\" title=\\\" Content Meta-Data\\\">content metadata</a> item to be added to the content list.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"clearcontent-as-void\\\">ClearContent() as Void</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Clears all content from the roVideoPlayer. If the player is currently playing, it stops. Next, the current player position is reset so the next time the <a href=\\\"#play-as-boolean\\\">Play()</a> method is called, playback starts at the first item of the content list (unless the <a href=\\\"#seekoffsetms-as-integer-as-boolean\\\">Seek()</a> method is called prior to Play()).</p>\\n<h3 id=\\\"prebuffer-as-boolean\\\">PreBuffer() as Boolean</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Begins downloading and buffering of a video that may be selected by a user. This method can be used to reduce buffering delays after a user has selected a video for playback. It is typically called when the user is in the roSpringboardScreen (or equivalent), anticipating that the user will select a video on the springboard screen for download.</p>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful. </p>\\n<h3 id=\\\"play-as-boolean\\\">Play() as Boolean</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Puts the roVideoPlayer object into play mode starting at the beginning of the content list. This will stop any currently playing Content List. </p>\\n<p>If the <a href=\\\"#seekoffsetms-as-integer-as-boolean\\\">Seek()</a> method was called prior to this method, the player will start playing at the seek position. If Seek() was not called, the player advances its current position to the next item in the content list and starts playing that item.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful. </p>\\n<h3 id=\\\"stop-as-boolean\\\">Stop() as Boolean</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>Stops playback and resets the seek position; keeps the player’s current position unchanged.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful. </p>\\n<h3 id=\\\"pause-as-boolean\\\">Pause() as Boolean</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>Puts the roVideoPlayer object into pause mode. If the player is already in pause mode, this will generate an error.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful. </p>\\n<h3 id=\\\"resume-as-boolean\\\">Resume() as Boolean</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Puts the roVideoPlayer object into play mode starting from the pause point. This method must be called when the roVideoPlayer object is in pause mode; otherwise, it will generate an error.</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful. </p>\\n<h3 id=\\\"setlooploop-as-boolean-as-void\\\">SetLoop(loop as Boolean) as Void</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Automatically replays the content list. This method buffers on every loop to the beginning of the content list.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>loop</td>\\n<td>Boolean</td>\\n<td>Enables the automatic replaying of the content list.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setnextitem-as-integer-as-void\\\">SetNext(item as Integer) as Void</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Sets the next item in the Content List to be played.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>item</td>\\n<td>Integer</td>\\n<td>The unique ID of the content item to be played next.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setenableaudioenable-as-boolean-as-void\\\">setEnableAudio(enable as Boolean) as Void</h3>\\n<p><em>Available since Roku OS 11.0</em></p>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Mutes the audio during video playback. This is useful, for example, for implementing a video preview feature in a channel.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>enable</td>\\n<td>Boolean</td>\\n<td>Mutes the audio during video playback.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"seekoffsetms-as-integer-as-boolean\\\">Seek(offsetMs as Integer) as Boolean</h3>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>Sets the start point of playback for the current video to a specific offset. </p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>offsetMs</td>\\n<td>Integer</td>\\n<td>The number of milliseconds to offset the playback of the current content item.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setpositionnotificationperiodperiod-as-integer-as-void\\\">SetPositionNotificationPeriod(period as Integer) as Void</h3>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Sets the interval to receive playback position events from the roVideoPlayer.</p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>period</td>\\n<td>Integer</td>\\n<td>The notification period for receiving playback position events in seconds. Notification events sent to the script specify the position in seconds relative to the beginning of the stream. If the value is 0, position notifications are never sent. The default value is 0.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setcgmslevel-as-integer-as-void\\\">SetCGMS(level as Integer) as Void</h3>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Sets CGMS (Copy Guard Management System) on analog outputs to the desired level.</p>\\n<h4 id=\\\"parameters-7\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>level</td>\\n<td>Integer</td>\\n<td>The level to which CGMS is set. This may be one of the following values: <ul>\\n<li>0 - No Copy Restriction</li>\\n<li>1 - Copy No More</li>\\n<li>2 - Copy Once Allowed</li>\\n<li>3 – No Copying Permitted</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setdestinationrectrect-as-object-as-void\\\">SetDestinationRect(rect as Object) as Void</h3>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Sets the target display window for the video.</p>\\n<h4 id=\\\"parameters-8\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>rect</td>\\n<td>Object</td>\\n<td>The parameters of the target display window, which include the x and y coordinates, width, and height {x:Integer, y:Integer, w:Integer, h:Integer}<br /><br />The default value is: {x:0, y:0, w:0, h:0}, which is full screen.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setdestinationrectx-as-integer-y-as-integer-w-as-integer-h-as-integer-as-void\\\">SetDestinationRect(x as Integer, y as Integer, w as Integer, h as Integer) as Void</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>Sets the target display window for the video. This is similar to the <a href=\\\"#setdestinationrectrect-as-object-as-void\\\">SetDestinationRect()</a> function except that the values are specified as separate parameters.</p>\\n<h4 id=\\\"parameters-9\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>Integer</td>\\n<td>The x coordinate of the target display window.</td>\\n</tr>\\n<tr>\\n<td>y</td>\\n<td>Integer</td>\\n<td>The y coordinate of the target display window.</td>\\n</tr>\\n<tr>\\n<td>w</td>\\n<td>Integer</td>\\n<td>The width of the target display window.</td>\\n</tr>\\n<tr>\\n<td>h</td>\\n<td>Integer</td>\\n<td>The height coordinate of the target display window.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setmaxvideodecoderesolutionwidth-as-integer-height-as-integer-as-void\\\">SetMaxVideoDecodeResolution(width as Integer, height as Integer) as Void</h3>\\n<h4 id=\\\"description-16\\\">Description</h4>\\n<p>Sets the max resolution required by your video. </p>\\n<p>Video decode memory is a shared resource with OpenGL texture memory. The BrightScript 2D APIs are implemented using OpenGL texture memory on Roku models that support the OpenGL APIs (please see <a href=\\\"/docs/specs/hardware.md#current-models\\\" title=\\\"Roku Models and Features\\\">Roku Models and Features</a> for a list of these models). For models that do not support OpenGL APIs, this method exists for API compatibility but has no effect on actual memory allocations.</p>\\n<p>Video decode memory allocation is based on a resolution of 1920x1080 or 1280x720 as the maximum supported resolution for a particular Roku model (please see <a href=\\\"/docs/specs/hardware.md#current-models\\\" title=\\\"Roku Models and Features\\\">Roku Models and Features</a> for a list of these models).</p>\\n<p>This API enables applications that want to use both the 2D APIs and video playback with a lower resolution than 1080p. Without this call, these applications are likely to not have enough memory for either video playback or roScreen rendering.</p>\\n<h4 id=\\\"parameters-10\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>width</td>\\n<td>Integer</td>\\n<td>The maximum height required by your video.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>Integer</td>\\n<td>The maximum width required by your video.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getplaybackduration-as-integer\\\">GetPlaybackDuration() as Integer</h3>\\n<h4 id=\\\"description-17\\\">Description</h4>\\n<p>Returns the duration of the video, in seconds. This information may not be available until after the video starts playing. </p>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>The duration of the video. A value of 0 is returned if the duration is unknown.</p>\\n<h3 id=\\\"getaudiotracks-as-object\\\">GetAudioTracks() as Object</h3>\\n<h4 id=\\\"description-18\\\">Description</h4>\\n<p>Returns the audio tracks contained in the current stream.</p>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>An roArray, where each element in the array represents a single audio track that contains the following attributes: ${getaudiotracksvalues}</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Language</td>\\n<td>String</td>\\n<td>Language code (\\\"eng\\\" for English, etc.)</td>\\n</tr>\\n<tr>\\n<td>Track</td>\\n<td>String</td>\\n<td>Audio track identifier</td>\\n</tr>\\n<tr>\\n<td>Name</td>\\n<td>String</td>\\n<td>Track name</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"changeaudiotracktrackid-as-string-as-void\\\">ChangeAudioTrack(trackID as String) as Void</h3>\\n<h4 id=\\\"description-19\\\">Description</h4>\\n<p>Changes the currently playing audio track. For content with multiple audio tracks, the current track can be selected programmatically using this function.</p>\\n<h4 id=\\\"parameters-11\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>trackID</td>\\n<td>String</td>\\n<td>The audio track identifier returned by GetAudioTracks().</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"settimedmetadataforkeyskeys-as-dynamic-as-void\\\">SetTimedMetaDataForKeys(keys[] as Dynamic) as Void</h3>\\n<h4 id=\\\"description-20\\\">Description</h4>\\n<p>Specifies the timedMetaData keys that the BrightScript channel is interested in receiving from the timedMetaData event.</p>\\n<h4 id=\\\"parameters-12\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>keys[]</td>\\n<td>Dynamic</td>\\n<td>An array of timedMetaData keys for the  channel to receive from the timedMetaData event.<br /><br />If the keys array is empty, all the timed metadata associated with the current stream is sent with the isTimedMetaData event. If the keys array is invalid, then do not return any keys to the BrightScript channel. Any keys not specified with this method are deleted by the Roku OS and never returned to the BrightScript application.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getcaptionrenderer-as-object\\\">GetCaptionRenderer() as Object</h3>\\n<h4 id=\\\"description-21\\\">Description</h4>\\n<p>This method returns the <a href=\\\"/docs/references/brightscript/components/rocaptionrenderer.md\\\" title=\\\"roCaptionRenderer\\\">roCaptionRenderer</a> instance associated with this roVideoPlayer.</p>\\n<p>Channels that render their own captions need to call this method to get the caption renderer for their video player. This is required for doing capture rendering. See <a href=\\\"/docs/references/brightscript/components/rocaptionrenderer.md\\\" title=\\\"roCaptionRenderer\\\">roCaptionRenderer</a> for details.</p>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>The <a href=\\\"/docs/references/brightscript/components/rocaptionrenderer.md\\\" title=\\\"roCaptionRenderer\\\">roCaptionRenderer</a> instance associated with this roVideoPlayer.</p>\\n<h3 id=\\\"setmacrovisionlevellevel-as-integer-as-void\\\">SetMacrovisionLevel(level as Integer) as Void</h3>\\n<blockquote>\\n<p>This function is deprecated. Roku no longer supports Macrovision and this function exists as a no-op so that legacy scripts do not break.</p>\\n</blockquote>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifxmlelement.md":"{\n  \"content\": \"<h1 id=\\\"ifxmlelement\\\">ifXMLElement</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roxmlelement.md\\\" title=\\\"roXMLElement\\\">roXMLElement</a></td>\\n<td>roXMLElement is used to contain an XML tree</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"parsexml-as-string-as-boolean\\\">Parse(xml as String) as Boolean</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Parses a string of XML. </p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>xml</td>\\n<td>String</td>\\n<td>The XML string to be parsed</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>A flag indicating whether the operation was successful. In that case, other methods below can then be used to extract information about the parsed element.</p>\\n<h3 id=\\\"getbody-as-object\\\">GetBody() as Object</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns the body of the element. If the element contains child elements, <code>GetBody()</code> returns an <a href=\\\"/docs/references/brightscript/components/roxmllist.md\\\" title=\\\"roXMLList\\\">roXMLList</a> representing those elements, like GetChildElements(). If there are no children but the element contains text, <code>GetBody()</code> returns an <a href=\\\"/docs/references/brightscript/components/rostring.md\\\" title=\\\"roString\\\">roString</a> like <code>GetText()</code>. If the element is empty, <code>GetBody()</code> returns invalid.</p>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>Object body.</p>\\n<h3 id=\\\"getattributes-as-object\\\">GetAttributes() as Object</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>Returns the XML attributes of the element. </p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>An associative array representing the XML attributes of the element.</p>\\n<h3 id=\\\"getname-as-string\\\">GetName() as String</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>Returns the name of the element.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>Element name.</p>\\n<h3 id=\\\"gettext-as-string\\\">GetText() as String</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>Returns any text contained in the element. This returns immediate body text only (for example, it does not include text from child elements).</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>The text in the element.</p>\\n<h3 id=\\\"getchildelements-as-object\\\">GetChildElements() as Object</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>If this element contains any child elements, this method returns an <a href=\\\"/docs/references/brightscript/components/roxmllist.md\\\" title=\\\"roXMLList\\\">roXMLList</a> representing those elements. If there are no child elements, returns invalid. </p>\\n<p>This function won't handle cases of mixed XML content, i.e., content with both child elements and text such as: Child TextMore Text. In this case <code>GetChildElements()</code> called with the top level as an argument would return an roXMLList containing only one item corresponding to the element. The body text \\\"More Text\\\" would be lost. To handle mixed content cases, use <code>GetChildNodes()</code>.</p>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>An element list.</p>\\n<h3 id=\\\"getchildnodes-as-object\\\">GetChildNodes() as Object</h3>\\n<h4 id=\\\"description-6\\\">Description</h4>\\n<p>If this element contains any child elements, this method returns an <a href=\\\"/docs/references/brightscript/components/rolist.md\\\" title=\\\"roList\\\">roList</a> representing those elements. If there are no child elements, returns invalid. The difference between this function and <code>GetChildElements()</code> is that <code>GetChildNodes()</code> handles the case of mixed XML content, i.e., content with both child elements and text such as: Child TextMore Text. In this case <code>GetChildNodes()</code> called with the top level as an argument would return an roList with two elements. The first element would be an <code>roXMLElement</code> containing the information about. The second would be an <code>roString</code> containing \\\"More Text\\\".</p>\\n<h4 id=\\\"return-value-6\\\">Return Value</h4>\\n<p>An element list.</p>\\n<h3 id=\\\"getnamedelementsname-as-string-as-object\\\">GetNamedElements(name as String) as Object</h3>\\n<h4 id=\\\"description-7\\\">Description</h4>\\n<p>Returns an <a href=\\\"/docs/references/brightscript/components/roxmllist.md\\\" title=\\\"roXMLList\\\">roXMLList</a> representing all child elements of this element whose case-sensitive name is specified. If only one element matches the name, an roXMLList containing one element is returned. If no elements match, an empty roXMLList is returned.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name</td>\\n<td>String</td>\\n<td>The parent element containing the child elements to be listed. Matching of the parent element name is case-sensitive.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-7\\\">Return Value</h4>\\n<p>An element list.</p>\\n<h3 id=\\\"getnamedelementsciname-as-string-as-object\\\">GetNamedElementsCi(name as String) as Object</h3>\\n<h4 id=\\\"description-8\\\">Description</h4>\\n<p>Returns an <a href=\\\"/docs/references/brightscript/components/roxmllist.md\\\" title=\\\"roXMLList\\\">roXMLList</a> representing all child elements of this element whose case-insensitive name is specified. If only one element matches the name, an roXMLList containing one element is returned. If no elements match, an empty roXMLList is returned.</p>\\n<h4 id=\\\"parameters-2\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name</td>\\n<td>String</td>\\n<td>The parent element containing the child elements to be listed. Matching of the parent element name is case-sensitive.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-8\\\">Return Value</h4>\\n<p>An element list.</p>\\n<h3 id=\\\"isnamename-as-string-as-boolean\\\">IsName(name as String) as Boolean</h3>\\n<h4 id=\\\"description-9\\\">Description</h4>\\n<p>Checks whether the element has the specified name.</p>\\n<h4 id=\\\"parameters-3\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name</td>\\n<td>String</td>\\n<td>The element name to be verified.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-9\\\">Return Value</h4>\\n<p>A flag indicating whether the element has the specified name.</p>\\n<h3 id=\\\"hasattributeattr-as-string-as-boolean\\\">HasAttribute(attr as String) as Boolean</h3>\\n<p>Checks whether the element has the specified attribute.</p>\\n<h4 id=\\\"parameters-4\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>attr</td>\\n<td>String</td>\\n<td>The element attribute to be verified.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-10\\\">Return Value</h4>\\n<p>A flag indicating whether the element has the specified attribute.</p>\\n<h3 id=\\\"setbodybody-as-object-as-void\\\">SetBody(body as Object) as Void</h3>\\n<h4 id=\\\"description-10\\\">Description</h4>\\n<p>Sets the element text from the specified string</p>\\n<h4 id=\\\"parameters-5\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>body</td>\\n<td>Object</td>\\n<td>The string to be used to set the element text.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"addbodyelement-as-object\\\">AddBodyElement() as Object</h3>\\n<h4 id=\\\"description-11\\\">Description</h4>\\n<p>Adds a new unnamed/empty child element and returns it. This should generally be followed by a call to the <a href=\\\"#setnamename-as-string-as-void\\\">SetName()</a> method of the child element. Alternatively, the <a href=\\\"#addelementname-as-string-as-object\\\">AddElement()</a> or <a href=\\\"#addelementwithbodyname-as-string-body-as-object-as-object\\\">AddElementWidthBody()</a> method can be used to combine this step with additional construction into one call.</p>\\n<h4 id=\\\"return-value-11\\\">Return Value</h4>\\n<p>Object value.</p>\\n<h3 id=\\\"addelementname-as-string-as-object\\\">AddElement(name as String) as Object</h3>\\n<h4 id=\\\"description-12\\\">Description</h4>\\n<p>Adds a new child element with the specified name and returns the new element.</p>\\n<h4 id=\\\"parameters-6\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name</td>\\n<td>String</td>\\n<td>The name of the child element to be added.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-12\\\">Return Value</h4>\\n<p>The new element added. </p>\\n<h3 id=\\\"addelementwithbodyname-as-string-body-as-object-as-object\\\">AddElementWithBody(name as String, body as Object) as Object</h3>\\n<h4 id=\\\"description-13\\\">Description</h4>\\n<p>Adds a new child element with the specified name and text from the specified body string, and returns the new element.</p>\\n<h4 id=\\\"parameters-7\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name</td>\\n<td>String</td>\\n<td>The name of the child element to be added.</td>\\n</tr>\\n<tr>\\n<td>body</td>\\n<td>Object</td>\\n<td>The text of the child element to be added (via the body string).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-13\\\">Return Value</h4>\\n<p>The new element added. </p>\\n<h3 id=\\\"addtexttext-as-string-as-void\\\">AddText(text as String) as Void</h3>\\n<h4 id=\\\"description-14\\\">Description</h4>\\n<p>Adds text to the element.</p>\\n<h4 id=\\\"parameters-8\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>String</td>\\n<td>The text to be added to the element.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"addattributeattr-as-string-value-as-string-as-void\\\">AddAttribute(attr as String, value as String) as Void</h3>\\n<h4 id=\\\"description-15\\\">Description</h4>\\n<p>Adds an attribute value to the element. If an attribute of the same name already exists it is replaced. XML attribute order is not preserved.</p>\\n<h4 id=\\\"parameters-9\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>attr</td>\\n<td>String</td>\\n<td>The name of the attribute to be added to the element.</td>\\n</tr>\\n<tr>\\n<td>value</td>\\n<td>Object</td>\\n<td>The value of the attribute being added to the element.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"setnamename-as-string-as-void\\\">SetName(name as String) as Void</h3>\\n<h4 id=\\\"description-16\\\">Description</h4>\\n<p>Sets the name of the element.</p>\\n<h4 id=\\\"parameters-10\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name</td>\\n<td>String</td>\\n<td>The name of the element.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"genxmlgen_header-as-boolean-as-string\\\">GenXML(gen_header as Boolean) as String</h3>\\n<h4 id=\\\"description-17\\\">Description</h4>\\n<p>Serializes the element to XML document text.</p>\\n<h4 id=\\\"parameters-11\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>gen_header</td>\\n<td>Boolean</td>\\n<td>Specifies whether the output begins with a standard XML declaration specifying UTF-8 encoding.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-14\\\">Return Value</h4>\\n<p>A serialized string.</p>\\n<h3 id=\\\"genxmlhdrhdr-as-string-as-string\\\">GenXMLHdr(hdr as String) as String</h3>\\n<h4 id=\\\"description-18\\\">Description</h4>\\n<p>Serializes the element to XML document text. The specified header is used to begin the output (for example, as a custom XML declaration).</p>\\n<h4 id=\\\"parameters-12\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>hdr</td>\\n<td>String</td>\\n<td>Specify the header with which the output begins.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-15\\\">Return Value</h4>\\n<p>A serialized string.</p>\\n<h3 id=\\\"clear-as-void\\\">Clear() as Void</h3>\\n<h4 id=\\\"description-19\\\">Description</h4>\\n<p>Removes all attributes and children from the element, as well as setting the name to empty.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/interfaces/ifxmllist.md":"{\n  \"content\": \"<h1 id=\\\"ifxmllist\\\">ifXMLList</h1>\\n<h2 id=\\\"implemented-by\\\">Implemented by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"/docs/references/brightscript/components/roxmllist.md\\\" title=\\\"roXMLList\\\">roXMLList</a></td>\\n<td>Contains a list of roXML objects</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getnamedelementsname-as-string-as-object\\\">GetNamedElements(name As String) As Object</h3>\\n<h4 id=\\\"description\\\">Description</h4>\\n<p>Returns a new XMLList that contains all roXMLElements that matched the passed in name (case-sensitive matching is used). This is the same as using the dot operator on an roXMLList.</p>\\n<h4 id=\\\"parameters\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Name</td>\\n<td>String</td>\\n<td>The XML element to be used to find matches.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value\\\">Return Value</h4>\\n<p>An XMLList that contains the matches. </p>\\n<h3 id=\\\"getnamedelementsciname-as-string-as-object\\\">GetNamedElementsCi(name As String) As Object</h3>\\n<h4 id=\\\"description-1\\\">Description</h4>\\n<p>Returns a new XMLList that contains all roXMLElements that matched the passed in name (case-insensitive matching is used). This is the same as using the dot operator on an roXMLList.</p>\\n<h4 id=\\\"parameters-1\\\">Parameters</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Name</td>\\n<td>String</td>\\n<td>The XML element to be used to find matches.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"return-value-1\\\">Return Value</h4>\\n<p>An XMLList that contains the matches. </p>\\n<h3 id=\\\"simplify-as-object\\\">Simplify() As Object</h3>\\n<h4 id=\\\"description-2\\\">Description</h4>\\n<p>If the list contains exactly one item, this function returns that item. Otherwise, it returns itself.</p>\\n<h4 id=\\\"return-value-2\\\">Return Value</h4>\\n<p>The object item.</p>\\n<h3 id=\\\"getattributes-as-object\\\">GetAttributes() As Object</h3>\\n<h4 id=\\\"description-3\\\">Description</h4>\\n<p>If the list contains exactly one item, this function returns the attributes of that item. Otherwise it returns invalid.</p>\\n<h4 id=\\\"return-value-3\\\">Return Value</h4>\\n<p>The object item.</p>\\n<h3 id=\\\"gettext-as-string\\\">GetText() As String</h3>\\n<h4 id=\\\"description-4\\\">Description</h4>\\n<p>If the list contains exactly one item, this function returns the text of that item. Otherwise, it returns an empty string.</p>\\n<h4 id=\\\"return-value-4\\\">Return Value</h4>\\n<p>The object string.</p>\\n<h3 id=\\\"getchildelements-as-object\\\">GetChildElements() As Object</h3>\\n<h4 id=\\\"description-5\\\">Description</h4>\\n<p>If the list contains exactly one item, this function returns the child elements of that item. Otherwise it returns invalid. </p>\\n<blockquote>\\n<p>This function does not return the items contained in the roXMLList. Use <a href=\\\"/docs/references/brightscript/interfaces/iflist.md\\\" title=\\\"ifList\\\">ifList</a> functions to access those items.</p>\\n</blockquote>\\n<h4 id=\\\"return-value-5\\\">Return Value</h4>\\n<p>The object item.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/roappmemorymonitorevent.md":"{\n  \"content\": \"<h1 id=\\\"roappmemorymonitorevent\\\">roAppMemoryMonitorEvent</h1>\\n<p>The <a href=\\\"/docs/references/brightscript/components/roappmemorymonitor.md\\\" title=\\\"roAppMemoryMonitor\\\">roAppMemoryMonitor</a> component sends the <strong>roAppMemoryMonitorEvent</strong> with the percentage of memory consumed by the channel compared to per-channel memory limit. </p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/roaudioplayerevent.md":"{\n  \"content\": \"<h1 id=\\\"roaudioplayerevent\\\">roAudioPlayerEvent</h1>\\n<p>The roAudioPlayer sends the roAudioPlayerEvent with the following predicates that indicate its valid event types:</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"islistitemselected-as-boolean\\\">isListItemSelected() as Boolean</h3>\\n<p>A stream has been selected to start playing.</p>\\n<h3 id=\\\"isstatusmessage-as-boolean\\\">isStatusMessage() as Boolean</h3>\\n<p>Status information is available.</p>\\n<h3 id=\\\"isfullresult-as-boolean\\\">isFullResult() as Boolean</h3>\\n<p>Audio playback completed at end of content.</p>\\n<h3 id=\\\"ispaused-as-boolean\\\">isPaused() as Boolean</h3>\\n<p>Audio playback was paused by the user.</p>\\n<h3 id=\\\"isresumed-as-boolean\\\">isResumed() as Boolean</h3>\\n<p>Audio playback has resumed</p>\\n<h3 id=\\\"ispartialresult-as-boolean\\\">isPartialResult() as Boolean</h3>\\n<p>Audio playback was interrupted</p>\\n<h3 id=\\\"isrequestfailed-as-boolean\\\">isRequestFailed() as Boolean</h3>\\n<p>Audio playback failed due to an error</p>\\n<h3 id=\\\"istimedmetadata-as-boolean\\\">isTimedMetaData() as Boolean</h3>\\n<p>This event is fired when an ID3 timecode has passed with an event that includes key/value pairs for timed metadata that the Brightscript channel is interested in.</p>\\n<p>All timed metadata is released after it is delivered to the Brightscript channel. It is also released without delivery if the Brightscript channel did not indicate it’s interest in the data with a SetTimedMetaDataForKeys() call.</p>\\n<h3 id=\\\"isrequestsucceeded-as-boolean\\\">isRequestSucceeded() as Boolean</h3>\\n<p>Stream playback has completed successfully.</p>\\n<h4 id=\\\"getmessage-as-string\\\">GetMessage() as String</h4>\\n<p>Returns the string \\\"Timed Metadata\\\"</p>\\n<h4 id=\\\"getinfo-as-object\\\">GetInfo() as Object</h4>\\n<p>Returns an associative array of key/value pairs of timedMetadata at the pts timecode specified in the index.</p>\\n<h4 id=\\\"getindex-as-integer\\\">GetIndex() as Integer</h4>\\n<p>Returns the index of the audio stream.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/rocecstatusevent.md":"{\n  \"content\": \"<h1 id=\\\"rocecstatusevent\\\">roCECStatusEvent</h1>\\n<p>The roCECStatusEvent determines the active source status for set boxes. Channels subscribing to the roCECStatusEvent are notified when the active-source status of the device changes per the CEC message traffic.</p>\\n<p>To use the roCECStatusEvent, follow the steps below:</p>\\n<ol>\\n<li>\\n<p>Connect a Roku STB to a TV which transmits and receives CEC messages.</p>\\n</li>\\n<li>\\n<p>Select the HDMI input to which the STB is connected.</p>\\n</li>\\n<li>\\n<p>Switch away and then back to the STB's HDMI input.</p>\\n</li>\\n</ol>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getmessage-as-string\\\">GetMessage() as String</h3>\\n<p>Returns the string \\\"CECStatus\\\".</p>\\n<h3 id=\\\"getindex-as-integer\\\">GetIndex() as Integer</h3>\\n<p>The index value of this event is not used and is always set to 0.</p>\\n<h3 id=\\\"getinfo-as-object\\\">GetInfo() as Object</h3>\\n<p>Returns an associative array with the following key/value pairs:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>active</td>\\n<td>Boolean</td>\\n<td>Indicates whether the device is the active source (true if it is the active source; otherwise, false).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"subscription\\\">Subscription</h2>\\n<p>A BrightScript app subscribes to roCECStatusEvent by creating an \\\"roCECStatus\\\" object. For example:</p>\\n<pre><code>cecstatus = CreateObject(\\\"roCECStatus\\\")\\nm.port = CreateObject(\\\"roMessagePort\\\")\\ncecstatus.SetMessagePort(m.port)\\n...\\nmsg = wait(0, m.port)\\nmsgType = type(msg)\\nif msgType = \\\"roCECStatusEvent\\\"\\n    info = msg.GetInfo()\\n    active = info[\\\"Active\\\"]\\n    ...\\nend if\\n</code></pre>\\n<h2 id=\\\"expected-results\\\">Expected Results</h2>\\n<p>Channels subscribing to the event are notified when the active-source status of the device changes.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/rochannelstoreevent.md":"{\n  \"content\": \"<h1 id=\\\"rochannelstoreevent\\\">roChannelStoreEvent</h1>\\n<p>The roChannelStore sends an roChannelStoreEvent in response to a call to any of several Get* methods in <a href=\\\"/docs/references/brightscript/interfaces/ifchannelstore.md\\\" title=\\\"ifChannelStore\\\">ifChannelStore</a>. The following predicates indicate its valid event types:</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"isrequestsucceeded-as-boolean\\\">isRequestSucceeded() as Boolean</h3>\\n<p>Checks whether the previous GET request has completed successfully.</p>\\n<h4 id=\\\"getsourceidentity-as-integer\\\">GetSourceIdentity() as Integer</h4>\\n<p>Returns a unique number that can be matched with the value returned by ifChannelStore.GetIdentity() to determine which roChannelStore object this event came from</p>\\n<h4 id=\\\"getresponse-as-object\\\">GetResponse() as Object</h4>\\n<p>Returns an roList of roAssociativeArray items for the previous GET method invocation. The format of each roAssociativeArray item depends on which GETmethod was invoked. See <a href=\\\"/docs/references/brightscript/interfaces/ifchannelstore.md\\\" title=\\\"ifChannelStore\\\">ifChannelStore</a> for more details.</p>\\n<p>In the case of a successfully completed ifChannelStore.DoOrder() initiated purchase transaction, the object returned by GetResponse() is an associative array containing the following information:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>amount</td>\\n<td>Price of each purchased item</td>\\n</tr>\\n<tr>\\n<td>code</td>\\n<td>Product code. This corresponds to the product identifier that the developer assigns to the specific in-app purchase product</td>\\n</tr>\\n<tr>\\n<td>purchaseID</td>\\n<td>Contains the unique transaction ID of the transaction. Channels often use this value to entitle users to purchased subscriptions, etc. in their back end systems</td>\\n</tr>\\n<tr>\\n<td>qty</td>\\n<td>Quantity of the specific product purchased</td>\\n</tr>\\n<tr>\\n<td>total</td>\\n<td>Total purchase amount (including taxes) in the local currency</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"isrequestfailed-as-boolean\\\">isRequestFailed() as Boolean</h3>\\n<p>Checks whether the previous GET request has completed failed.</p>\\n<h4 id=\\\"getsourceidentity-as-integer-1\\\">GetSourceIdentity() as Integer</h4>\\n<p>Returns a unique number that can be matched with the value returned by ifChannelStore.GetIdentity() to determine which roChannelStore object this event came from.</p>\\n<h4 id=\\\"getstatus-as-integer\\\">GetStatus() as Integer</h4>\\n<p>Checks for the reason for failure. This method returns one of the following codes that indicate the reason for failure:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Integer code</th>\\n<th>Failure reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>2</td>\\n<td>Interrupted</td>\\n</tr>\\n<tr>\\n<td>-1</td>\\n<td>HTTP timeout</td>\\n</tr>\\n<tr>\\n<td>-2</td>\\n<td>Other timeouts</td>\\n</tr>\\n<tr>\\n<td>-3</td>\\n<td>Unknown error</td>\\n</tr>\\n<tr>\\n<td>-4</td>\\n<td>Empty list</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"getstatusmessage-as-string\\\">GetStatusMessage() as String</h4>\\n<p>Describes the status of the completed request. This method returns a human-readable string describing the status of the completed request.</p>\\n<h3 id=\\\"isrequestinterrupted-as-boolean\\\">isRequestInterrupted() as Boolean</h3>\\n<p>Checks if the previous GET request did not complete. This method returns true if the request was not complete; otherwise, it returns false. </p>\\n<h4 id=\\\"getsourceidentity-as-integer-2\\\">GetSourceIdentity() as Integer</h4>\\n<p>Returns a unique number that can be matched with the value returned by ifChannelStore.GetIdentity() to determine which roChannelStore object this event came from.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/rodeviceinfoevent.md":"{\n  \"content\": \"<h1 id=\\\"rodeviceinfoevent\\\">roDeviceInfoEvent</h1>\\n<p><em>Available since Roku OS 8</em></p>\\n<p>The roDeviceInfo component sends the roDeviceInfoEvent with the following predicates that indicate its valid event types:</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"isstatusmessage-as-boolean\\\">isStatusMessage() as Boolean</h3>\\n<p>Checks if the device status has changed. This method returns true if the device status has changed; otherwise, it returns false.</p>\\n<h4 id=\\\"getinfo-as-object\\\">GetInfo() as Object</h4>\\n<p>Checks the current status of the device. This method returns an roAssociativeArray containing one of the following members:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Member</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>linkStatus</td>\\n<td>Boolean</td>\\n<td>True if the device currently seems to have an active network connection. The linkStatus event will only ever get fired if <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#enablelinkstatuseventenable-as-boolean-as-boolean\\\" title=\\\"ifDeviceInfo.EnableLinkStatusEvent(true)\\\">ifDeviceInfo.EnableLinkStatusEvent(true)</a>  is called before entering the message loop</td>\\n</tr>\\n<tr>\\n<td>audioGuideEnabled</td>\\n<td>Boolean</td>\\n<td>True if the screen reader is enabled. The audioGuideEnabled event will only ever get fired if <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#enableaudioguidechangedeventenable-as-boolean-as-dynamic\\\" title=\\\"ifDeviceInfo.EnableAudioGuideChangedEvent(true)\\\">ifDeviceInfo.EnableAudioGuideChangedEvent(true)</a> called before entering the message loop</td>\\n</tr>\\n<tr>\\n<td>exitedScreensaver</td>\\n<td>Boolean</td>\\n<td>True if the screensaver was exited. The exitedScreensaver event will only ever get fired if <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#enablescreensaverexitedeventenable-as-boolean-as-dynamic\\\" title=\\\"ifDeviceInfo.EnableScreensaverExitedEvent(true)\\\">ifDeviceInfo.EnableScreensaverExitedEvent(true)</a> is called before entering the message loop</td>\\n</tr>\\n<tr>\\n<td>appFocus</td>\\n<td>Boolean</td>\\n<td>It is set to False when the System Overlay takes focus and True when the channel regains focus</td>\\n</tr>\\n<tr>\\n<td>generalMemoryLevel</td>\\n<td>String</td>\\n<td><em>Available since Roku OS 8.1</em><br /><br />Fires notifications to the channel about memory levels. This event will be sent first when the OS transitions from \\\"normal\\\" to \\\"low\\\" state and will continue to be sent while in \\\"low\\\" or \\\"critical\\\" states.<br /><br />The events will be throttled so as to not overwhelm the application listening for these events. The application may voluntarily free up memory by invalidating references to objects (e.g. release ContentNodes held in a cache, release offscreen renderable nodes, etc.). <br /><br />The \\\"low\\\" and \\\"critical\\\" events will be sent to the OS forces the application to exit. <ul>\\n<li>\\\"normal\\\" means that the general memory is within acceptable levels</li>\\n<li>\\\"low\\\" means that the general memory is below acceptable levels but not critical</li>\\n<li>\\\"critical\\\" means that general memory are at dangerously low level and that the OS may force terminate the application</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>audioCodecCapabilityChanged</td>\\n<td>Boolean</td>\\n<td><em>Available since Roku OS 9.1</em><br /><br />The audio codec capability has changed if true. If your application receives this event, you can check the current audio playback capability using the <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#ifDeviceInfo-CanDecodeAudio(audio_formatasObject)asObject\\\"><code>roDeviceInfo.CanDecodeAudio</code></a> and <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#ifDeviceInfo-GetAudioDecodeInfo()asObject\\\"><code>roDeviceInfo.GetAudioDecodeInfo</code></a> methods. <br /><br />This event is only fired if the <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#ifDeviceInfo-EnableAudioGuideChangedEvent(enableasBoolean)\\\"><code>ifDeviceInfo.EnableCodecCapChangedEvent(true)</code></a> is called before entering the message loop.</td>\\n</tr>\\n<tr>\\n<td>videoCodecCapabilityChanged</td>\\n<td>Boolean</td>\\n<td><em>Available since Roku OS 9.1</em><br /><br />The video codec capability has changed if true. If your application receives this event, you can check the current video playback capability using the <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#ifDeviceInfo-CanDecodeVideo(video_formatasObject)asObject\\\"><code>roDeviceInfo.CanDecodeVideo</code></a> method.<br /><br />This event is only fired if <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#ifDeviceInfoEnableAudioGuideChangedEvent(enableasBoolean)\\\"><code>ifDeviceInfo.EnableCodecCapChangedEvent(true)</code></a> is called before entering the message loop.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"iscaptionmodechanged-as-boolean\\\">isCaptionModeChanged() as Boolean</h3>\\n<p>Indicates whether the user has changed the closed caption mode or track.  This method returns true if the caption mode changed; otherwise, it returns false.</p>\\n<p>Call the <a href=\\\"#getinfo-as-object\\\">GetInfo()</a> method to get the caption mode.</p>\\n<h4 id=\\\"getinfo-as-object-1\\\">GetInfo() as Object</h4>\\n<p>Indicates the current global setting for the Mode property, which may be one of the following values:</p>\\n<ul>\\n<li>\\\"On\\\"</li>\\n<li>\\\"Off\\\"</li>\\n<li>\\\"Instant replay\\\"</li>\\n<li>\\\"When mute\\\" (Only returned for a TV; this option is not available on STBs).</li>\\n</ul>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/rofilesystemevent.md":"{\n  \"content\": \"<h1 id=\\\"rofilesystemevent\\\">roFileSystemEvent</h1>\\n<p>The roFileSystem component sends the roFileSystemEvent with the following predicates that indicate its valid event types:</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"isstoragedeviceadded-as-boolean\\\">isStorageDeviceAdded() as Boolean</h3>\\n<p>Checks if a storage device was inserted in the USB port. This method returns true if a storage device was inserted; otherwise, it returns false. </p>\\n<h4 id=\\\"getmessage-as-string\\\">GetMessage() as String</h4>\\n<p>Returns the volume name of the device inserted into the USB port. </p>\\n<h3 id=\\\"isstoragedeviceremoved-as-boolean\\\">isStorageDeviceRemoved() as Boolean</h3>\\n<p>Checks if a storage device was removed from the USB port. This method returns true if a storage device was removed; otherwise, it returns false. </p>\\n<h4 id=\\\"getmessage-as-string-1\\\">GetMessage() as String</h4>\\n<p>Returns the volume name of the device removed from the USB port. </p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/rohdmistatusevent.md":"{\n  \"content\": \"<h1 id=\\\"rohdmistatusevent\\\">roHdmiStatusEvent</h1>\\n<p>The roHdmiStatus sends the roHdmiStatusEvent with the following predicates that indicate its valid event types:</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"ishdmistatus-as-boolean\\\">isHdmiStatus() as Boolean</h3>\\n<p>Checks if an HDMI status event has occurred. This method returns true if an HDMI status event has occurred; otherwise, it returns false. </p>\\n<h4 id=\\\"getmessage-as-string\\\">GetMessage() as String</h4>\\n<p>Returns the string \\\"HdmiHotPlug\\\".</p>\\n<h4 id=\\\"getinfo-as-object\\\">GetInfo() as Object</h4>\\n<p>Retrieves the HDMI information. This method returns an associative array with the following key/value pairs:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>PortType</td>\\n<td>string</td>\\n<td>“Rx” for input ports and “Tx” for output ports</td>\\n</tr>\\n<tr>\\n<td>PortNumber</td>\\n<td>integer</td>\\n<td>The HDMI input or output port number starting from 0</td>\\n</tr>\\n<tr>\\n<td>Plugged</td>\\n<td>Boolean</td>\\n<td>True if an HDMI device is plugged in, and false of the port is unplugged</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"getindex-as-integer\\\">GetIndex() as Integer</h4>\\n<p>The index value of this event is not used and is always set to 0.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/roinputevent.md":"{\n  \"content\": \"<h1 id=\\\"roinputevent\\\">roInputEvent</h1>\\n<p>The roInput component sends the roInputEvent with the following predicates that indicate its valid event types:</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"isinput-as-boolean\\\">isInput() as Boolean</h3>\\n<p>Checks if an input event was received. This method returns true if an input event was received; otherwise, it returns false.</p>\\n<h3 id=\\\"getinfo-as-object\\\">GetInfo() as Object</h3>\\n<p>Returns an roAssociativeArray describing the input event, which may be one of the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>type</td>\\n<td>string</td>\\n<td>The type of event, which may be one of the following values:<ul>\\n<li><strong>transport</strong>. The channel received a voice request to control the playback of content or select a user from a profile selection screen.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>id</td>\\n<td>LongInteger</td>\\n<td>The unique ID associated with the generated transport event</td>\\n</tr>\\n<tr>\\n<td>command</td>\\n<td>string</td>\\n<td>The type of command: <ul>\\n<li>\\\"action\\\" (<em>Available since Roku OS 10.5</em>). Indicates that the channel has received an utterance matching a name or word previously registered with the <a href=\\\"/docs/references/brightscript/interfaces/ifappmanager.md#setvoiceactionstringsactions-as-object-as-void\\\">roAppManager.SetVoiceActionStrings()</a> method.</li>\\n<li>\\\"select\\\" (<em>Available since Roku OS 10.5</em>).  Indicates that the channel has received a command for selecting an item via an ordinal number.</li>\\n<li>\\\"forward\\\"</li>\\n<li>\\\"next\\\"</li>\\n<li>\\\"pause\\\"</li>\\n<li>\\\"play\\\"</li>\\n<li>\\\"replay\\\"</li>\\n<li>\\\"resume\\\"</li>\\n<li>\\\"rewind\\\"</li>\\n<li>\\\"seek\\\"</li>\\n<li>\\\"stop\\\"</li>\\n<li>\\\"startover\\\"</li>\\n<li>\\\"nowplaying\\\"</li>\\n<li>\\\"skip\\\"</li>\\n<li>\\\"shuffle\\\"</li>\\n<li>\\\"loop\\\"</li>\\n<li>\\\"like\\\"</li>\\n<li>\\\"dislike\\\"</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>direction</td>\\n<td>string</td>\\n<td>For the \\\"seek\\\" transport command only. Specifies the direction of the seek command, which may be \\\"forward\\\" or \\\"backward\\\".</td>\\n</tr>\\n<tr>\\n<td>duration</td>\\n<td>string</td>\\n<td>For the \\\"seek\\\" transport command only. Specifies the number of seconds to skip forward or backward.</td>\\n</tr>\\n<tr>\\n<td>text<br /><br /><em>Available since Roku OS 10.5</em></td>\\n<td>string</td>\\n<td>If the <strong>type</strong> is set to \\\"transport\\\" and the <strong>command</strong> is set to \\\"action\\\", this field contains the utterance matching the name or word previously registered for the channel with the <a href=\\\"/docs/references/brightscript/interfaces/ifappmanager.md#setvoiceactionstringsactions-as-object-as-void\\\">roAppManager.SetVoiceActionStrings()</a> method.</td>\\n</tr>\\n<tr>\\n<td>ordinal<br /><br /><br /><em>Available since Roku OS 10.5</em></td>\\n<td>string</td>\\n<td>If the <strong>type</strong> is \\\"transport\\\" and the <strong>command</strong> is \\\"select\\\", this field includes a numerical value that corresponds to the ordinal number spoken by the user. Values may range between 1–6 (one-base indexing is used).</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/romicrophoneevent.md":"{\n  \"content\": \"<h1 id=\\\"romicrophoneevent\\\">roMicrophoneEvent</h1>\\n<p>The <a href=\\\"/docs/references/brightscript/components/romicrophone.md\\\" title=\\\"roMicrophone\\\">roMicrophone</a> component sends the <code>roMicrophoneEvent</code> with the following predicates that indicate its valid event types:</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"isrecordingdone-as-boolean\\\">IsRecordingDone() as Boolean</h3>\\n<p>Checks if the microphone recording session has been closed.  This method returns true if the recording session is closed; otherwise, it returns false. </p>\\n<h3 id=\\\"isrecordinginfo-as-boolean\\\">IsRecordingInfo() as Boolean</h3>\\n<p>Checks whether the microphone is open. This method returns true when the microphone is open; otherwise, it returns false. </p>\\n<h4 id=\\\"getinfo-as-object\\\">GetInfo() as Object</h4>\\n<p>Returns the information regarding a particular microphone recording session. This method returns an roAssociativeArray containing the following information:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>format</td>\\n<td>string</td>\\n<td>The audio data format (ex. pcm-s16-le)</td>\\n</tr>\\n<tr>\\n<td>num_channels</td>\\n<td>integer</td>\\n<td>The number of channels (ex. 1 for mono)</td>\\n</tr>\\n<tr>\\n<td>sample_rate</td>\\n<td>integer</td>\\n<td>The audio sample rate (ex. 16000 for 16kHz)</td>\\n</tr>\\n<tr>\\n<td>sample_data</td>\\n<td>roByteArray</td>\\n<td>Signed 16-bit integer containing audio data as PCM (little-endian format)</td>\\n</tr>\\n<tr>\\n<td>level</td>\\n<td>integer</td>\\n<td>Value displaying a calculated volume level between 0 (silence) and 100 (maximum)</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/rosgnodeevent.md":"{\n  \"content\": \"<h1 id=\\\"rosgnodeevent\\\">roSGNodeEvent</h1>\\n<p>An roSGNode object sends roSGNodeEvent messages to a specified port when changes occur in nodes.  An roSGNodeEvent is also sent as the argument of field observer callback functions.  Both of these cases allow a SceneGraph application to respond to events.  roSGNodeEvent supports the following methods.</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getdata-as-dynamic\\\">getData() as Dynamic</h3>\\n<p>Retrieves the new field value at the time of the change.</p>\\n<h3 id=\\\"getfield-as-dynamic\\\">getField() as Dynamic</h3>\\n<p>Retrieves the name of the field that changed.</p>\\n<h3 id=\\\"getrosgnode-as-dynamic\\\">getRoSGNode() as Dynamic</h3>\\n<p>Retrieves a pointer to the node. This can be used for nodes without an ID.</p>\\n<h3 id=\\\"getnode-as-dynamic\\\">getNode() as Dynamic</h3>\\n<p>Retrieves the ID of the node that changed.</p>\\n<h3 id=\\\"getinfo-as-object\\\">getInfo() as Object</h3>\\n<p>Retrieves an AA that contains the values of selected \\\"context\\\" fields, which\\nwere <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefield.md#event-field-aggregation\\\">specified in an earlier-executed call</a> to <code>observeField()</code> or <code>observeFieldScoped()</code>.\\n(If no such \\\"context\\\" fields were designated previously, <code>getInfo()</code> returns an empty AA.)\\nThe array is keyed on the names of the \\\"context\\\" fields, and the entry values are the\\ninstantaneous values of the corresponding fields,\\nat the point when the observed field changed.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/rosgscreenevent.md":"{\n  \"content\": \"<h1 id=\\\"rosgscreenevent\\\">roSGScreenEvent</h1>\\n<p><strong>roSGScreenEvents</strong> are events sent to a scene graph <strong>roSGScreen</strong> by the framework.  Other than when notifying the channel's main BrightScript thread that the screen is being closed, and thus that the channel should be terminated, channels do not generally handle these events.</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"isscreenclosed-as-boolean\\\">isScreenClosed() as Boolean</h3>\\n<p>Checks whether the screen has been closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false. </p>\\n<p>Channels respond to this event by exiting the main BrightScript thread to exit the application.</p>\\n<h4 id=\\\"example-handling-the-isscreenclosed-event-to-terminate-a-channel-in-sourcemainbrs\\\">Example: Handling the isScreenClosed event to terminate a channel in source/main.brs</h4>\\n<pre><code>sub Main()\\n    showChannelSGScreen()\\nend sub\\n\\nsub showChannelSGScreen()\\n    screen = CreateObject(\\\"roSGScreen\\\")\\n    m.port = CreateObject(\\\"roMessagePort\\\")\\n    screen.setMessagePort(m.port)\\n    m.scene = screen.CreateScene(\\\"SimpleCaptionsScene\\\")\\n    screen.show()\\n    while(true)\\n        msg = wait(0, m.port)\\n        msgType = type(msg)\\n        if msgType = \\\"roSGScreenEvent\\\"\\n            if msg.isScreenClosed() then return\\n        end if\\n    end while\\nend sub\\n</code></pre>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/rosocketevent.md":"{\n  \"content\": \"<h1 id=\\\"rosocketevent\\\">roSocketEvent</h1>\\n<p>An roStreamSocket or roDataGramSocket object sends the roSocketEvent to indicate a change in the status of the socket. The socket must enable specific event notifications via the notify methods of ifSocketAsync.</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getsocketid-as-integer\\\">GetSocketID() as Integer</h3>\\n<p>Returns the ID of the socket this event is for. The ID of a socket can be obtained from ifSocketAsync.GetID(). Use <a href=\\\"/docs/references/brightscript/interfaces/ifsocketstatus.md\\\" title=\\\"ifSocketStatus\\\">ifSocketStatus</a> or <a href=\\\"/docs/references/brightscript/interfaces/ifsocketconnectionstatus.md\\\" title=\\\"ifSocketConnectionStatus\\\">ifSocketConnectionStatus</a> on the indicated socket to query the new status for the socket.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/rosystemlogevent.md":"{\n  \"content\": \"<h1 id=\\\"rosystemlogevent\\\">roSystemLogEvent</h1>\\n<p>roSystemLogEvents are sent when enabled via <a href=\\\"/docs/references/brightscript/components/rosystemlog.md\\\" title=\\\"roSystemLog\\\">roSystemLog</a>. roSystemLogEvent has the following method:</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getinfo-as-object\\\">GetInfo() as Object</h3>\\n<p>Returns an AssociativeArray containing information describing the event, which may be one of the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>LogType</td>\\n<td>String</td>\\n<td>Identifies the specific type of event. Valid types are listed at <a href=\\\"/docs/references/brightscript/components/rosystemlog.md\\\" title=\\\"roSystemLog\\\">roSystemLog</a>.</td>\\n</tr>\\n<tr>\\n<td>DateTime</td>\\n<td>roDateTime</td>\\n<td>The GMT time of the event, with a resolution of one second.</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>If LogType is \\\"http.connect\\\" or \\\"http.error\\\", the event AA contains the base keys and the following additional keys:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Url</td>\\n<td>String</td>\\n<td>The URL that was requested</td>\\n</tr>\\n<tr>\\n<td>OrigUrl</td>\\n<td>String</td>\\n<td>The original URL. If the original URL was redirected, then Url represents the new redirected URL and OrigURL the original. OrigURL is included so that it's easy to correlate between events and URLs passed to components</td>\\n</tr>\\n<tr>\\n<td>Method</td>\\n<td>String</td>\\n<td>The HTTP method. \\\"GET\\\", \\\"POST\\\", or \\\"HEAD\\\"</td>\\n</tr>\\n<tr>\\n<td>Status</td>\\n<td>String</td>\\n<td>If LogType is \\\"http.connect\\\", this will be \\\"ok\\\". Otherwise, it will be one of the following: <ul>\\n<li>unknownerror</li>\\n<li>dnsfailure</li>\\n<li>dnstimeout</li>\\n<li>noroutetohost</li>\\n<li>connectiontimeout</li>\\n<li>connectionrefused</li>\\n<li>untrustedcert</li>\\n<li>expiredcert</li>\\n<li>nocipher</li>\\n<li>handshakefailed</li>\\n<li>generalsocketerror</li>\\n<li>httperror</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>TargetIp</td>\\n<td>String</td>\\n<td>The IP address of the target server</td>\\n</tr>\\n<tr>\\n<td>HttpCode</td>\\n<td>Integer</td>\\n<td>The IP address of the target server</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>If LogType is \\\"bandwidth.minute\\\", the event AA contains the base keys and the following additional key:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Bandwidth</td>\\n<td>Integer</td>\\n<td>Measured bandwidth in kbps</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/rotexttospeechevent.md":"{\n  \"content\": \"<h1 id=\\\"rotexttospeechevent\\\">roTextToSpeechEvent</h1>\\n<blockquote>\\n<p>Please note this component is only available on the following devices: Roku Streaming Stick (3600X), Roku Express (3700X) and Express+ (3710X), Roku Premiere (4620X) and Premiere+ (4630X), Roku Ultra (4640X), and any Roku TV running Roku OS version 7.2 and later.</p>\\n</blockquote>\\n<p>The <a href=\\\"/docs/references/brightscript/components/rotexttospeech.md\\\" title=\\\"roTextToSpeech\\\">roTextToSpeech</a> component sends the roTextToSpeechEvent with the following predicates that indicate its valid event types.</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getdata-as-integer\\\">GetData() as Integer</h3>\\n<p>Returns the description of the speech, which may be one of the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>ID</th>\\n<th>Interpretation</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>0</td>\\n<td>Started speech</td>\\n</tr>\\n<tr>\\n<td>1</td>\\n<td>Speech has completed</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td>Speech has been interrupted/flushed</td>\\n</tr>\\n<tr>\\n<td>3</td>\\n<td>Text to speech has been either enabled or disabled</td>\\n</tr>\\n<tr>\\n<td>4</td>\\n<td>Current language has been changed</td>\\n</tr>\\n<tr>\\n<td>5</td>\\n<td>Current voice has been changed</td>\\n</tr>\\n<tr>\\n<td>6</td>\\n<td>Speech rate has been changed</td>\\n</tr>\\n<tr>\\n<td>7</td>\\n<td>Speech volume has been changed</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getinfo-as-object\\\">GetInfo() as Object</h3>\\n<p>Returns an associative array with the following key-value pairs, depending the value returned by the <a href=\\\"/docs/references/brightscript/events/rotexttospeechevent.md#getinfo-as-object\\\" title=\\\"GetData()\\\">GetData()</a> method:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Enabled</td>\\n<td>Boolean</td>\\n<td>If GetData() returned 3, indicates the enabled/disabled status of text to speech</td>\\n</tr>\\n<tr>\\n<td>Language</td>\\n<td>String</td>\\n<td>If GetData() returned 4, indicates the new language</td>\\n</tr>\\n<tr>\\n<td>Voice</td>\\n<td>String</td>\\n<td>If GetData() returned 5, indicates the new voice</td>\\n</tr>\\n<tr>\\n<td>Rate</td>\\n<td>Integer</td>\\n<td>If GetData() returned 6, indicates the new speech rate</td>\\n</tr>\\n<tr>\\n<td>Volume</td>\\n<td>Integer</td>\\n<td>If GetData() returned 7, indicates the new speech volume</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getindex-as-integer\\\">GetIndex() as Integer</h3>\\n<p>The text to speech service may be shared among any number of clients; therefore, the IDs returned to a given client are not necessarily contiguous. The value is only meaningful if <a href=\\\"/docs/references/brightscript/events/rotexttospeechevent.md#getinfo-as-object\\\" title=\\\"GetData()\\\">GetData()</a> returned 0, 1 or 2; it returns 0 otherwise.</p>\\n<p>This method returns the ID of the speech as returned by either the <a href=\\\"/docs/references/brightscript/interfaces/iftexttospeech.md#saytext-as-string-as-integer\\\" title=\\\"Say()\\\">Say()</a>\\\" or <a href=\\\"/docs/references/brightscript/interfaces/iftexttospeech.md#silenceduration-as-integer-as-integer\\\" title=\\\"Silence()\\\">Silence()</a> methods of the <a href=\\\"/docs/references/brightscript/interfaces/iftexttospeech.md\\\" title=\\\"ifTextToSpeech\\\">ifTextToSpeech</a> interface.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/rotexturerequestevent.md":"{\n  \"content\": \"<h1 id=\\\"rotexturerequestevent\\\">roTextureRequestEvent</h1>\\n<p>The <a href=\\\"/docs/references/brightscript/components/rotexturemanager.md\\\" title=\\\"roTextureManager\\\">roTextureManager</a> sends the roTextureRequestEvent after completing a request.</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getid-as-integer\\\">GetId() as Integer</h3>\\n<p>Returns the unique id of the request.</p>\\n<h3 id=\\\"getstate-as-integer\\\">GetState() as Integer</h3>\\n<p>Returns the state of the request. See <a href=\\\"/docs/references/brightscript/interfaces/iftexturerequest.md\\\" title=\\\"ifTextureRequest\\\">ifTextureRequest</a>.GetState() for the list of states.</p>\\n<h3 id=\\\"geturi-as-string\\\">GetURI() as String</h3>\\n<p>Returns the URI of the request.</p>\\n<h3 id=\\\"getbitmap-as-object\\\">GetBitmap() as Object</h3>\\n<p>Returns an roBitmap from the request if the state is ready.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/rouniversalcontrolevent.md":"{\n  \"content\": \"<h1 id=\\\"rouniversalcontrolevent\\\">roUniversalControlEvent</h1>\\n<p>The roScreen object sends the roUniversalControlEvent with the following related methods. If an app constrains the events processed to just the roUniversalControlEvent, the app will work with any controller. The GetID(), GetChar(), GetKey(), and IsPress() methods can be used instead of parsing the GetInt() return value to more effectively distinguish between remote control and keyboard key presses, and the key press and release events.</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getint-as-integer\\\">GetInt() as Integer</h3>\\n<p>Returns an integer representing pressed or released keys on the remote. This table can be accessed at runtime by calling <code>bslCore.brs: bslUniversalControlEventCodes()</code>: </p>\\n<table>\\n<thead>\\n<tr>\\n<th>Button</th>\\n<th>When Pressed</th>\\n<th>When Released</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Back</td>\\n<td>0</td>\\n<td>100</td>\\n</tr>\\n<tr>\\n<td>Up</td>\\n<td>2</td>\\n<td>102</td>\\n</tr>\\n<tr>\\n<td>Down</td>\\n<td>3</td>\\n<td>103</td>\\n</tr>\\n<tr>\\n<td>Left</td>\\n<td>4</td>\\n<td>104</td>\\n</tr>\\n<tr>\\n<td>Right</td>\\n<td>5</td>\\n<td>105</td>\\n</tr>\\n<tr>\\n<td>Select</td>\\n<td>6</td>\\n<td>106</td>\\n</tr>\\n<tr>\\n<td>Instant Replay</td>\\n<td>7</td>\\n<td>107</td>\\n</tr>\\n<tr>\\n<td>Rewind</td>\\n<td>8</td>\\n<td>108</td>\\n</tr>\\n<tr>\\n<td>Fast Forward</td>\\n<td>9</td>\\n<td>109</td>\\n</tr>\\n<tr>\\n<td>Info</td>\\n<td>10</td>\\n<td>110</td>\\n</tr>\\n<tr>\\n<td>Play</td>\\n<td>13</td>\\n<td>113</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getkey-as-integer\\\">GetKey() as Integer</h3>\\n<p>Returns the ID of the remote button that generated an event.</p>\\n<h3 id=\\\"getremoteid-as-string\\\">GetRemoteID() as String</h3>\\n<p>Returns an identifier associated with the type and ID of the remote control that generated the event.  For example, if multiple wireless remotes are paired, this may be used to distinguish the event sources.  Some remote controls, such as IR remotes, can not be distinguished using this API.</p>\\n<h3 id=\\\"getid-as-integer\\\">GetID() as Integer</h3>\\n<p>Returns the ID of the remote button or character value represented by the event.  Values 0x20..0x10FFFF represent a Unicode character value.  Other values represent a remote button ID.  GetID() returns the same value for a release event as for the press event.</p>\\n<h3 id=\\\"ispress-as-boolean\\\">IsPress() as Boolean</h3>\\n<p>Checks whether a press event has occurred. This method returns true if a press event has occurred; otherwise, it returns false. </p>\\n<h3 id=\\\"getchar-as-integer\\\">GetChar() as Integer</h3>\\n<p>Returns the Unicode character value generated by a keyboard key press event.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/rourlevent.md":"{\n  \"content\": \"<h1 id=\\\"rourlevent\\\">roUrlEvent</h1>\\n<p>The roUrlTransfer component sends the roUrlEvent with the following methods:</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"getint-as-integer\\\">GetInt() as Integer</h3>\\n<p>Returns the type of event, which may be one of the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Event Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>1</td>\\n<td>transfer complete</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td>transfer started. Headers are available for suitable protocols. (Not currently implemented)</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getresponsecode-as-integer\\\">GetResponseCode() as Integer</h3>\\n<p>Returns the protocol response code associated with this event. For a successful HTTP request this will be the HTTP status code 200. For unexpected errors the return value is negative. There are lots of possible negative errors from the CURL library but it's often best just to look at the text version via GetFailureReason(). </p>\\n<p>The following table lists some of the potential errors (not all of them can be generated):</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Status</th>\\n<th>Name</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>-1</td>\\n<td>CURLE_UNSUPPORTED_PROTOCOL</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-2</td>\\n<td>CURLE_FAILED_INIT</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-3</td>\\n<td>CURLE_URL_MALFORMAT</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-4</td>\\n<td>CURLE_NOT_BUILT_IN</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-5</td>\\n<td>CURLE_COULDNT_RESOLVE_PROXY</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-6</td>\\n<td>CURLE_COULDNT_RESOLVE_HOST</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-7</td>\\n<td>CURLE_COULDNT_CONNECT</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-8</td>\\n<td>CURLE_FTP_WEIRD_SERVER_REPLY</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-9</td>\\n<td>CURLE_REMOTE_ACCESS_DENIED</td>\\n<td>A service was denied by the server due to lack of access - when login fails this is not returned</td>\\n</tr>\\n<tr>\\n<td>-11</td>\\n<td>CURLE_FTP_WEIRD_PASS_REPLY</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-13</td>\\n<td>CURLE_FTP_WEIRD_PASV_REPLY</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-14</td>\\n<td>CURLE_FTP_WEIRD_227_FORMAT</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-15</td>\\n<td>CURLE_FTP_CANT_GET_HOST</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-16</td>\\n<td>CURLE_HTTP2</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-17</td>\\n<td>CURLE_FTP_COULDNT_SET_TYPE</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-18</td>\\n<td>CURLE_PARTIAL_FILE</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-19</td>\\n<td>CURLE_FTP_COULDNT_RETR_FILE</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-21</td>\\n<td>CURLE_QUOTE_ERROR</td>\\n<td>Quote command failure</td>\\n</tr>\\n<tr>\\n<td>-22</td>\\n<td>CURLE_HTTP_RETURNED_ERROR</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-23</td>\\n<td>CURLE_WRITE_ERROR</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-25</td>\\n<td>CURLE_UPLOAD_FAILED</td>\\n<td>Failed upload \\\"command\\\"</td>\\n</tr>\\n<tr>\\n<td>-26</td>\\n<td>CURLE_READ_ERROR</td>\\n<td>Could open/read from file</td>\\n</tr>\\n<tr>\\n<td>-27</td>\\n<td>CURLE_OUT_OF_MEMORY</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-28</td>\\n<td>CURLE_OPERATION_TIMEDOUT</td>\\n<td>The timeout time was reached</td>\\n</tr>\\n<tr>\\n<td>-30</td>\\n<td>CURLE_FTP_PORT_FAILED</td>\\n<td>FTP PORT operation failed</td>\\n</tr>\\n<tr>\\n<td>-31</td>\\n<td>CURLE_FTP_COULDNT_USE_REST</td>\\n<td>The REST command failed</td>\\n</tr>\\n<tr>\\n<td>-33</td>\\n<td>CURLE_RANGE_ERROR</td>\\n<td>RANGE \\\"command\\\" didn't work</td>\\n</tr>\\n<tr>\\n<td>-34</td>\\n<td>CURLE_HTTP_POST_ERROR</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-35</td>\\n<td>CURLE_SSL_CONNECT_ERROR</td>\\n<td>Wrong when connecting with SSL</td>\\n</tr>\\n<tr>\\n<td>-36</td>\\n<td>CURLE_BAD_DOWNLOAD_RESUME</td>\\n<td>Couldn't resume download</td>\\n</tr>\\n<tr>\\n<td>-37</td>\\n<td>CURLE_FILE_COULDNT_READ_FILE</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-38</td>\\n<td>CURLE_LDAP_CANNOT_BIND</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-39</td>\\n<td>CURLE_LDAP_SEARCH_FAILED</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-41</td>\\n<td>CURLE_FUNCTION_NOT_FOUND</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-42</td>\\n<td>CURLE_ABORTED_BY_CALLBACK</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-43</td>\\n<td>CURLE_BAD_FUNCTION_ARGUMENT</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>-45</td>\\n<td>CURLE_INTERFACE_FAILED</td>\\n<td>CURLOPT_INTERFACE failed</td>\\n</tr>\\n<tr>\\n<td>-47</td>\\n<td>CURLE_TOO_MANY_REDIRECTS</td>\\n<td>Catch endless re-direct loops</td>\\n</tr>\\n<tr>\\n<td>-48</td>\\n<td>CURLE_UNKNOWN_TELNET_OPTION</td>\\n<td>User specified an unknown option</td>\\n</tr>\\n<tr>\\n<td>-49</td>\\n<td>CURLE_TELNET_OPTION_SYNTAX</td>\\n<td>Malformed telnet option</td>\\n</tr>\\n<tr>\\n<td>-51</td>\\n<td>CURLE_PEER_FAILED_VERIFICATION</td>\\n<td>Peer's certificate or fingerprint wasn't verified fine</td>\\n</tr>\\n<tr>\\n<td>-52</td>\\n<td>CURLE_GOT_NOTHING</td>\\n<td>When this is a specific error</td>\\n</tr>\\n<tr>\\n<td>-53</td>\\n<td>CURLE_SSL_ENGINE_NOTFOUND</td>\\n<td>SSL crypto engine not found</td>\\n</tr>\\n<tr>\\n<td>-54</td>\\n<td>CURLE_SSL_ENGINE_SETFAILED</td>\\n<td>Can not set SSL crypto engine as default</td>\\n</tr>\\n<tr>\\n<td>-55</td>\\n<td>CURLE_SEND_ERROR</td>\\n<td>Failed sending network data</td>\\n</tr>\\n<tr>\\n<td>-56</td>\\n<td>CURLE_RECV_ERROR</td>\\n<td>Failure in receiving network data</td>\\n</tr>\\n<tr>\\n<td>-58</td>\\n<td>CURLE_SSL_CERTPROBLEM</td>\\n<td>Problem with the local certificate</td>\\n</tr>\\n<tr>\\n<td>-59</td>\\n<td>CURLE_SSL_CIPHER</td>\\n<td>Couldn't use specified cipher</td>\\n</tr>\\n<tr>\\n<td>-60</td>\\n<td>CURLE_SSL_CACERT</td>\\n<td>Problem with the CA cert (path?)</td>\\n</tr>\\n<tr>\\n<td>-61</td>\\n<td>CURLE_BAD_CONTENT_ENCODING</td>\\n<td>Unrecognized transfer encoding</td>\\n</tr>\\n<tr>\\n<td>-62</td>\\n<td>CURLE_LDAP_INVALID_URL</td>\\n<td>Invalid LDAP URL</td>\\n</tr>\\n<tr>\\n<td>-63</td>\\n<td>CURLE_FILESIZE_EXCEEDED</td>\\n<td>Maximum file size exceeded</td>\\n</tr>\\n<tr>\\n<td>-64</td>\\n<td>CURLE_USE_SSL_FAILED</td>\\n<td>Requested FTP SSL level failed</td>\\n</tr>\\n<tr>\\n<td>-65</td>\\n<td>CURLE_SEND_FAIL_REWIND</td>\\n<td>Sending the data requires a rewind that failed</td>\\n</tr>\\n<tr>\\n<td>-66</td>\\n<td>CURLE_SSL_ENGINE_INITFAILED</td>\\n<td>Failed to initialize ENGINE</td>\\n</tr>\\n<tr>\\n<td>-67</td>\\n<td>CURLE_LOGIN_DENIED</td>\\n<td>User, password or similar was not accepted and we failed to login</td>\\n</tr>\\n<tr>\\n<td>-68</td>\\n<td>CURLE_TFTP_NOTFOUND</td>\\n<td>File not found on server</td>\\n</tr>\\n<tr>\\n<td>-69</td>\\n<td>CURLE_TFTP_PERM</td>\\n<td>Permission problem on server</td>\\n</tr>\\n<tr>\\n<td>-70</td>\\n<td>CURLE_REMOTE_DISK_FULL</td>\\n<td>Out of disk space on server</td>\\n</tr>\\n<tr>\\n<td>-71</td>\\n<td>CURLE_TFTP_ILLEGAL</td>\\n<td>Illegal TFTP operation</td>\\n</tr>\\n<tr>\\n<td>-72</td>\\n<td>CURLE_TFTP_UNKNOWNID</td>\\n<td>Unknown transfer ID</td>\\n</tr>\\n<tr>\\n<td>-73</td>\\n<td>CURLE_REMOTE_FILE_EXISTS</td>\\n<td>File already exists</td>\\n</tr>\\n<tr>\\n<td>-74</td>\\n<td>CURLE_TFTP_NOSUCHUSER</td>\\n<td>No such user</td>\\n</tr>\\n<tr>\\n<td>-75</td>\\n<td>CURLE_CONV_FAILED</td>\\n<td>Conversion failed</td>\\n</tr>\\n<tr>\\n<td>-76</td>\\n<td>CURLE_CONV_REQD</td>\\n<td>Caller must register conversion callbacks using curl_easy_setopt options CURLOPT_CONV_FROM_NETWORK_FUNCTION, CURLOPT_CONV_TO_NETWORK_FUNCTION, and CURLOPT_CONV_FROM_UTF8_FUNCTION</td>\\n</tr>\\n<tr>\\n<td>-77</td>\\n<td>CURLE_SSL_CACERT_BADFILE</td>\\n<td>Could not load CACERT file, missing or wrong format</td>\\n</tr>\\n<tr>\\n<td>-78</td>\\n<td>CURLE_REMOTE_FILE_NOT_FOUND</td>\\n<td>Remote file not found</td>\\n</tr>\\n<tr>\\n<td>-79</td>\\n<td>CURLE_SSH</td>\\n<td>Error from the SSH layer, somewhat generic so the error message will be of interest when this has happened</td>\\n</tr>\\n<tr>\\n<td>-80</td>\\n<td>CURLE_SSL_SHUTDOWN_FAILED</td>\\n<td>Failed to shut down the SSL connection</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getfailurereason-as-string\\\">GetFailureReason() as String</h3>\\n<p>Returns a description of the failure that occurred.</p>\\n<h3 id=\\\"getstring-as-string\\\">GetString() as String</h3>\\n<p>For transfer complete AsyncGetToString, AsyncPostFromString and AsnycPostFromFile requests this will be the actual response body from the server. This method returns the string associated with the event.</p>\\n<h3 id=\\\"getsourceidentity-as-integer\\\">GetSourceIdentity() as Integer</h3>\\n<p>Returns a magic number that can be matched with the value returned by the <a href=\\\"/docs/references/brightscript/interfaces/ifurltransfer.md#getidentity-as-integer\\\">roUrlTransfer.GetIdentity()</a> method to determine the source of the roUrlTransfer event.</p>\\n<h3 id=\\\"getresponseheaders-as-object\\\">GetResponseHeaders() as Object</h3>\\n<p>Returns an <a href=\\\"/docs/references/brightscript/components/roassociativearray.md\\\" title=\\\"roAssociativeArray\\\">roAssociativeArray </a>containing all the headers returned by the server for appropriate protocols (such as HTTP). Headers are only returned when the status code is greater than or equal to 200 and less than 300</p>\\n<h3 id=\\\"gettargetipaddress-as-string\\\">GetTargetIpAddress() as String</h3>\\n<p>Returns the IP address of the destination. </p>\\n<h3 id=\\\"getresponseheadersarray-as-object\\\">GetResponseHeadersArray() as Object</h3>\\n<p>This method returns an <a href=\\\"/docs/references/brightscript/components/roarray.md\\\" title=\\\"roArray\\\">roArray</a> of <a href=\\\"/docs/references/brightscript/components/roassociativearray.md\\\" title=\\\"roAssociativeArray\\\">roAssociativeArrays</a>, where each associative array contains a single header name/value pair. Use this function if you need access to duplicate headers, since GetResponseHeaders() returns only the last name/value pair for a given name. All headers are returned regardless of the status code</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/brightscript/events/rovideoplayerevent.md":"{\n  \"content\": \"<h1 id=\\\"rovideoplayerevent\\\">roVideoPlayerEvent</h1>\\n<p>The roVideoPlayer sends the roVideoPlayerEvent with the following predicates that indicate its valid event types:</p>\\n<h2 id=\\\"supported-methods\\\">Supported methods</h2>\\n<h3 id=\\\"ispaused-as-boolean\\\">isPaused() as Boolean</h3>\\n<p>Checks whether video playback was paused by the user. This method returns true if video playback was paused; otherwise, it returns false.</p>\\n<h3 id=\\\"islistitemselected-as-boolean\\\">isListItemSelected() as Boolean</h3>\\n<p>Checks whether the video player is about to start playing a new item in the content list. This method returns true if a new item in the content list was selected; otherwise, it returns false.</p>\\n<h4 id=\\\"getindex-as-integer\\\">GetIndex() as Integer</h4>\\n<p>Returns the index of the item that is about to start playing.</p>\\n<h3 id=\\\"isformatdetected-as-boolean\\\">isFormatDetected() as Boolean</h3>\\n<p>Checks whether an event has been fired when the format of all tracks in the media stream have been identified.</p>\\n<p>Specific information about the event can be obtained by calling the GetMessages() and GetInfo() methods on the event.</p>\\n<h4 id=\\\"getmessage-as-string\\\">GetMessage() as String</h4>\\n<p>Returns a description of the message (for exampe, \\\"Format Detected\\\").</p>\\n<h4 id=\\\"getinfo-as-object\\\">GetInfo() as Object</h4>\\n<p>Returns information about the video player event. This method returns an roAssociativeArray that contains the following keys:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>audio</td>\\n<td>The format of the audio stream, if any</td>\\n</tr>\\n<tr>\\n<td>captions</td>\\n<td>The format of the captioning data, if any</td>\\n</tr>\\n<tr>\\n<td>video</td>\\n<td>The format of the video stream, if any</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"isrequestfailed-as-boolean\\\">isRequestFailed() as Boolean</h3>\\n<p>Checks whether video playback has failed. This method returns true if video playback failed; otherwise, it returns false.</p>\\n<p>Specific information about the event can be obtained by calling the GetMessage(), GetIndex(), and GetInfo() methods on the event.</p>\\n<h4 id=\\\"getmessage-as-string-1\\\">GetMessage() as String</h4>\\n<p>Returns a description of the message (for example, \\\"Segment download started\\\").</p>\\n<h4 id=\\\"getindex-as-integer-1\\\">GetIndex() as Integer</h4>\\n<p>Returns the error ID, which may be one of the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>0</td>\\n<td>Network error : server down or unresponsive, server is unreachable, network setup problem on the client.</td>\\n</tr>\\n<tr>\\n<td>-1</td>\\n<td>HTTP error: malformed headers or HTTP error result.</td>\\n</tr>\\n<tr>\\n<td>-2</td>\\n<td>Connection timed out</td>\\n</tr>\\n<tr>\\n<td>-3</td>\\n<td>Unknown error</td>\\n</tr>\\n<tr>\\n<td>-4</td>\\n<td>Empty list; no streams were specified to play</td>\\n</tr>\\n<tr>\\n<td>-5</td>\\n<td>Media error; the media format is unknown or unsupported</td>\\n</tr>\\n<tr>\\n<td>-6</td>\\n<td>DRM error</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"getinfo-as-object-1\\\">GetInfo() as Object</h4>\\n<p>Returns an associative array containing information about the event failure. The associative array contains the following key-value pairs:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>ClipIdx</td>\\n<td>Integer</td>\\n<td>The zero starting index of the item in the content list this event is related to.</td>\\n</tr>\\n<tr>\\n<td>Ignored</td>\\n<td>Boolean</td>\\n<td>True if the error was ignored and the player skipped to the next item in the content list.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"issegmentdownloadstarted-as-boolean\\\">isSegmentDownloadStarted() as Boolean</h3>\\n<p>Checks whether the individual segments in an HLS or smooth stream are about to be downloaded. This method returns true if segments in the stream are going to be downloaded; otherwise, it returns false.</p>\\n<p>Specific information about the event can be obtained by calling the GetMessages() and GetInfo() methods on the event.</p>\\n<h4 id=\\\"getmessage-as-string-2\\\">GetMessage() as String</h4>\\n<p>Returns a description of the message (for example, \\\"Segment download started\\\").</p>\\n<h4 id=\\\"getinfo-as-object-2\\\">GetInfo() as Object</h4>\\n<p>Returns an associative array containing the following information about the segment download event:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Sequence</td>\\n<td>Stream segment sequence number</td>\\n</tr>\\n<tr>\\n<td>SegBitrate</td>\\n<td>Bitrate of the segment, in kilobits per second</td>\\n</tr>\\n<tr>\\n<td>StartTime</td>\\n<td>Timestamp of the start of the segment data</td>\\n</tr>\\n<tr>\\n<td>EndTime</td>\\n<td>Timestamp of the end of the segment data</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"isstreamstarted-as-boolean\\\">isStreamStarted() as Boolean</h3>\\n<p>Checks whether the video stream has started playing. This method returns true if the video stream has started playing; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetIndex() and GetInfo() methods on the event.</p>\\n<h4 id=\\\"getindex-as-integer-2\\\">GetIndex() as Integer</h4>\\n<p>Returns the segment sequence number.</p>\\n<h4 id=\\\"getinfo-as-object-3\\\">GetInfo() as Object</h4>\\n<p>Returns an associative array containing the following information about the stream started event:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Url</td>\\n<td>String</td>\\n<td>URL of video stream</td>\\n</tr>\\n<tr>\\n<td>StreamBitrate</td>\\n<td>Integer</td>\\n<td>average bitrate of stream, in bits per second</td>\\n</tr>\\n<tr>\\n<td>MeasuredBitrate</td>\\n<td>Integer</td>\\n<td>measured network bandwidth in kibibits per second, used to select stream</td>\\n</tr>\\n<tr>\\n<td>IsUnderrun</td>\\n<td>Boolean</td>\\n<td>true if this is a rebuffer due to an underrun</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"isstatusmessage-as-boolean\\\">isStatusMessage() as Boolean</h3>\\n<p>Checks whether status information or other diagnostic message is available. This method returns true if status information or  diagnostic message is available; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetMessage() method on the event.</p>\\n<h4 id=\\\"getmessage-as-string-3\\\">GetMessage() as String</h4>\\n<p>Returns status information or other diagnostic message, which may be one of the following:</p>\\n<ul>\\n<li>\\\"startup progress\\\"</li>\\n<li>\\\"start of play\\\"</li>\\n<li>\\\"playback stopped\\\"</li>\\n<li>\\\"end of stream\\\" (deprecated)</li>\\n<li>\\\"end of playlist\\\" (deprecated)</li>\\n</ul>\\n<h3 id=\\\"isfullresult-as-boolean\\\">isFullResult() as Boolean</h3>\\n<p>Checks whether video playback has completed at the end of the content list. This method returns true if video playback has completed at the end of the content list; otherwise, it returns false.</p>\\n<h3 id=\\\"isresumed-as-boolean\\\">isResumed() as Boolean</h3>\\n<p>Checks whether video playback has resumed. This method returns true if video playback has resumed; otherwise, it returns false.</p>\\n<h3 id=\\\"iscaptionmodechanged-as-boolean\\\">isCaptionModeChanged() as Boolean</h3>\\n<p>Checks whether closed caption mode or track has been changed by the user. This method returns true if closed caption mode or track has been changed by the user; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetMessage(), GetIndex(), and GetInfo() methods on the event.</p>\\n<h4 id=\\\"getmessage-as-string-4\\\">GetMessage() as String</h4>\\n<p>Returns a caption track name, such as: \\\"eia608/1\\\" ,\\\"eia608/3\\\", and so on.</p>\\n<h4 id=\\\"getindex-as-integer-3\\\">GetIndex() as Integer</h4>\\n<p>Returns the index of the captions mode, which may be one of the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Index</th>\\n<th>Mode</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>0</td>\\n<td>Off</td>\\n</tr>\\n<tr>\\n<td>1</td>\\n<td>On</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td>Instant replay</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"getinfo-as-object-4\\\">GetInfo() as Object</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Return Type</th>\\n<th>Return Value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>GetInfo</td>\\n<td>Object</td>\\n<td>Invalid</td>\\n<td>This method always returns invalid.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"example-iscaptionmodechanged-event\\\">Example: isCaptionModeChanged() Event</h4>\\n<pre><code>Function showVideoScreen(episode As Object)\\n  port = CreateObject(\\\"roMessagePort\\\")\\n  screen = CreateObject(\\\"roVideoScreen\\\")\\n  'some video stream\\n  '...\\n  'etc...\\n  episode.SubtitleConfig : {\\n    TrackName : \\\"eia608/1\\\"\\n    }\\n  screen.SetContent(episode)\\n  screen.SetMessagePort(port)\\n  screen.Show()\\n  while true\\n    msg = wait(0, port)\\n    if type(msg) = \\\"roVideoScreenEvent\\\" then\\n      if msg.isCaptionModeChanged()\\n        print \\\"Caption Mode Changed\\\"\\n        print \\\"Caption Mode: \\\"; msg.GetIndex()\\n        print \\\"Caption track: \\\"; msg.GetMessage()\\n      end if\\n    end if\\n  end while\\nEnd Function\\n</code></pre>\\n<h3 id=\\\"istimedmetadata-as-boolean\\\">isTimedMetaData() as Boolean</h3>\\n<p>Checks whether an ID3 timecode has passed with an event that includes key-value pairs for timed metadata that the BrightScript channel is interested in.</p>\\n<p>All timed metadata is released after it is delivered to the BrightScript channel.  It is also released without delivery if the BrightScript channel did not indicate its interest in the data with a <a href=\\\"/docs/references/brightscript/interfaces/ifvideoplayer.md#settimedmetadataforkeyskeys-as-dynamic-as-void\\\">SetTimedMetaDataForKeys()</a> method call.</p>\\n<p>This method returns true if an ID3 timecode has passed; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetMessage(), GetIndex(), and GetInfo() methods on the event.</p>\\n<h4 id=\\\"getmessage-as-string-5\\\">GetMessage() as String</h4>\\n<p>Returns the string \\\"Timed Metadata\\\".</p>\\n<h4 id=\\\"getindex-as-integer-4\\\">GetIndex() as Integer</h4>\\n<p>Returns the PTS timecode.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Return Type</th>\\n<th>Return Value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>GetIndex</td>\\n<td>Integer</td>\\n<td>PTS timecode.</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"getinfo-as-object-5\\\">GetInfo() as Object</h4>\\n<p>Returns an associative array with timedMetadata at the PTS timecode specified in the index.</p>\\n<h3 id=\\\"isplaybackposition-as-boolean\\\">isPlaybackPosition() as Boolean</h3>\\n<p>Checks whether the current position in the video stream has changed. This event is sent periodically while playing, as determined by the last call to <a href=\\\"/docs/references/brightscript/interfaces/ifvideoplayer.md#setpositionnotificationperiodperiod-as-integer-as-void\\\" title=\\\"ifVideoPlayer.SetPositionNotificationPeriod\\\">ifVideoPlayer.SetPositionNotificationPeriod</a>. This method returns true if the current position in the video stream has changed; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetIndex() and GetInfo() methods on the event.</p>\\n<h3 id=\\\"getindex-as-integer-5\\\">GetIndex() as Integer</h3>\\n<p>Returns current position in the stream (in seconds) from the beginning.</p>\\n<h3 id=\\\"getinfo-as-object-6\\\">GetInfo() as Object</h3>\\n<p>Returns an roAssociativeArray array with the following key-value pairs:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Member</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>ClipIdx</td>\\n<td>Integer</td>\\n<td>The zero starting index of the item in the content list this event is related to</td>\\n</tr>\\n<tr>\\n<td>ClipPos</td>\\n<td>Integer</td>\\n<td>The player position relative to the start of the clip in milliseconds</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"isstreamsegmentinfo-as-boolean\\\">isStreamSegmentInfo() as Boolean</h3>\\n<p>Checks whether playback has begun of a segment in an HLS, DASH, or smooth stream. This method returns true if the playback of a segment in an HLS, DASH, or smooth stream has begun; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetMessage(), GetIndex() and GetInfo() methods on the event.</p>\\n<h4 id=\\\"getmessage-as-string-6\\\">GetMessage() as String</h4>\\n<p>Returns a description of the message (for example, \\\"Stream segment info\\\").</p>\\n<h4 id=\\\"getindex-as-integer-6\\\">GetIndex() as Integer</h4>\\n<p>Returns the segment start time in seconds.</p>\\n<h4 id=\\\"getinfo-as-object-7\\\">GetInfo() as Object</h4>\\n<p>Returns an associative array with the following information about the stream segment:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>StreamBandwidth</td>\\n<td>Bandwidth of the stream being played in kbps</td>\\n</tr>\\n<tr>\\n<td>SegStartTime</td>\\n<td>Segment start time (offset from start of stream) in milliseconds</td>\\n</tr>\\n<tr>\\n<td>Sequence</td>\\n<td>Stream segment sequence number</td>\\n</tr>\\n<tr>\\n<td>SegUrl</td>\\n<td>Stream segment URL (i.e., .ts file for HLS, stream fragment URL for smooth)</td>\\n</tr>\\n<tr>\\n<td>HdrMode<br /><br /><em>Available since Roku OS 10.5</em></td>\\n<td>Indicates the HDR format of the content, which may be one of the following values:<ul>\\n<li>0: UNKNOWN</li>\\n<li>1: NONE (SDR)</li>\\n<li>2: HDR10</li>\\n<li>3: DOLBY_VISION</li>\\n<li>4: HLG10</li>\\n<li>5: HDR10_PLUS</li>\\n<li>6: SL_HDR2</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"isdownloadsegmentinfo-as-boolean\\\">isDownloadSegmentInfo() as Boolean</h3>\\n<p>Checks whether a segment in an adaptive stream (HLS, Smooth, or DASH) has been downloaded. This method returns true if a segment in an adaptive stream (HLS, Smooth, or DASH) has been downloaded; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetMessage(), GetIndex() and GetInfo() methods on the event.</p>\\n<h4 id=\\\"getmessage-as-string-7\\\">GetMessage() as String</h4>\\n<p>Returns a description of the message (for example, \\\"Download segment info\\\").</p>\\n<h4 id=\\\"getindex-as-integer-7\\\">GetIndex() as Integer</h4>\\n<p>Returns the segment sequence number.</p>\\n<h4 id=\\\"getinfo-as-object-8\\\">GetInfo() as Object</h4>\\n<p>Returns an associative array containing the following information about the segment download:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Status</td>\\n<td>Status of the download: 0 = success, nonzero = error</td>\\n</tr>\\n<tr>\\n<td>Sequence</td>\\n<td>Stream segment sequence number (same as returned by GetIndex)</td>\\n</tr>\\n<tr>\\n<td>SegUrl</td>\\n<td>Stream segment URL (i.e., .ts file for HLS, stream fragment URL for smooth)</td>\\n</tr>\\n<tr>\\n<td>DownloadDuration</td>\\n<td>Amount of time spent downloading the segment, in milliseconds</td>\\n</tr>\\n<tr>\\n<td>SegSize</td>\\n<td>Segment size, in bytes</td>\\n</tr>\\n<tr>\\n<td>SegType</td>\\n<td>Type of data in the segment: 1=audio, 2=video, 3=captions, 0=mux</td>\\n</tr>\\n<tr>\\n<td>Bitrate</td>\\n<td>Bitrate of the segment, in bits per second</td>\\n</tr>\\n<tr>\\n<td>SegBitrate</td>\\n<td>Bitrate of the segment, in kilobits per second (equal to Bitrate / 1000)</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"isrequestsucceeded-as-boolean\\\">isRequestSucceeded() as Boolean</h3>\\n<p>Checks whether the player has finished playing an item in the content list. This method returns true if the  player has finished playing a content list item; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetIndex() method on the event.</p>\\n<h4 id=\\\"getindex-as-integer-8\\\">GetIndex() as Integer</h4>\\n<p>Returns the index of the item in the content list that finished playing.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/node.md":"{\n  \"content\": \"<h1 id=\\\"node\\\">Node</h1>\\n<p>The abstract base class of all SceneGraph nodes and the equivalent of the BrightScript roSGNode component. See <a href=\\\"/docs/references/brightscript/components/rosgnode.md\\\" title=\\\"roSGNode\\\">roSGNode</a> for supported interfaces.</p>\\n<p><strong>Node</strong> class objects do not draw anything and are skipped in the render traversal of the SceneGraph node tree. The Node class provides the core parenting and key focus management functionality used by all nodes.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>id</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Adds a dictionary entry that allows the node to be retrieved with <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodedict.md\\\" title=\\\"ifSGNodeDict\\\">ifSGNodeDict</a> findNode() function.</td>\\n</tr>\\n<tr>\\n<td>focusedChild</td>\\n<td>N/A</td>\\n<td>N/A</td>\\n<td>READ_WRITE</td>\\n<td>When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefocus.md\\\" title=\\\"ifSGNodeFocus\\\">ifSGNodeFocus</a> functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</td>\\n</tr>\\n<tr>\\n<td>focusable</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Provides a hint as to whether or not this node can take the key focus.</td>\\n</tr>\\n<tr>\\n<td>change</td>\\n<td>associative array</td>\\n<td>{ Index1: 0, Index2: 0, Operation: none }</td>\\n<td>READ_ONLY</td>\\n<td>Operations affecting the set of children of a Node are recorded in this field if, and only if, this field has been observed. The field associative array indicates the operation and two indexes, index1 and index 2, involved in the change. The operation is denoted by these value strings: <table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>none</td>\\n<td>No operation on the children nodes since the change field was observed, indexes are irrelevant</td>\\n</tr>\\n<tr>\\n<td>insert</td>\\n<td>A child node was inserted at <em>index1</em>. If multiple child nodes were inserted (for example, via the <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodechildren.md#insertchildrenchild_nodes-as-object-index-as-integer-as-boolean\\\">insertChildren() function</a>), the last inserted child node is stored at <em>index2</em>.</td>\\n</tr>\\n<tr>\\n<td>add</td>\\n<td>A child node was added to the end of the children node tree (at <em>index 1</em>). If multiple child nodes were added (for example, via the <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodechildren.md#appendchildrenchild_nodes-as-object-as-boolean\\\">appendChildren() function</a>), the last added child node is stored at <em>index2</em>.</td>\\n</tr>\\n<tr>\\n<td>remove</td>\\n<td>A child node was removed from position <em>index1</em>, and if <em>index2</em>><em>index1</em>, all the children nodes between <em>index1</em> and <em>index2</em> inclusive were removed</td>\\n</tr>\\n<tr>\\n<td>set</td>\\n<td>The child node at position <em>index1</em> was replaced with a new child node</td>\\n</tr>\\n<tr>\\n<td>clear</td>\\n<td>All the children nodes were removed</td>\\n</tr>\\n<tr>\\n<td>move</td>\\n<td>The child node at position <em>index1</em> was moved to the new position <em>index2</em></td>\\n</tr>\\n<tr>\\n<td>setall</td>\\n<td>All the children nodes were replaced</td>\\n</tr>\\n<tr>\\n<td>modify</td>\\n<td>A pre-defined content meta-data field of a <strong>ContentNode</strong> node child at <em>index1</em> was changed (<em>only</em> set for <strong>ContentNode</strong> node children when a pre-defined content meta-data field changes)</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/scene.md":"{\n  \"content\": \"<h1 id=\\\"scene\\\">Scene</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a></p>\\n<p>The <strong>Scene</strong> node class serves as the root of a SceneGraph node tree. Every <strong>roSGScreen</strong> object must have a <strong>Scene</strong> node, or a node that derives from the <strong>Scene</strong> node class as its root, including an XML markup component that extends the Scene node class or subclass. That node must be created using the <strong>roSGScreen</strong> createScene() function, with an argument that is a string of the name of the <strong>Scene</strong> node object created. For example:</p>\\n<pre><code>screen = CreateObject(\\\"roSGScreen\\\")\\nscene = screen.CreateScene(\\\"Scene\\\")\\n</code></pre>\\n<p>While it is technically possible to have more than one scene per channel, we recommend you only have one <strong>roSGScreen</strong> and one <strong>Scene</strong> node. Child nodes of the scene can be treated as different \\\"scenes\\\" where you can then implement transitions between them.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>backgroundURI</td>\\n<td>uri</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a graphic image file to be used for the Scene node background.</td>\\n</tr>\\n<tr>\\n<td>backgroundColor</td>\\n<td>color</td>\\n<td>0x000000FF</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a background color for the scene. This color is only used if the backgroundURI field is set to an empty string. For example:  <br /><br />scene.backgroundColor=\\\"0xEB1010FF\\\"  <br />scene.backgroundUri = \\\"\\\"</td>\\n</tr>\\n<tr>\\n<td>backExitsScene</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>If true, a Back key press causes the scene to exit, back to the last user-focused item. If false, a Back key press does not cause the scene to exit. In order for the Back key to cause the scene to exit, the remote control focus must be explicitly set on the scene, or a child of the scene, using the <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefocus.md\\\" title=\\\"ifSGNodeFocus\\\">ifSGNodeFocus</a> interface setFocus(true) function. A Home key press always causes the scene to exit.</td>\\n</tr>\\n<tr>\\n<td>dialog</td>\\n<td>Node</td>\\n<td>invalid</td>\\n<td></td>\\n<td>Setting this field to a node extended from a <strong>Dialog</strong> node causes the dialog to be displayed</td>\\n</tr>\\n<tr>\\n<td>currentDesignResolution</td>\\n<td>assocarray</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>This read-only field is set when the Scene is initialized. It indicates which of a channel's design resolutions (per manifest's ui_resolutions value) is being used, based on the player model and connected display type. Previously, a developer could deduct the same information by using both <a href=\\\"/docs/references/brightscript/interfaces/ifdeviceinfo.md#getuiresolution-as-object()\\\" title=\\\"roDeviceInfo.GetUIResolution\\\">roDeviceInfo.GetUIResolution</a> and <a href=\\\"/docs/references/brightscript/interfaces/ifappinfo.md#getvaluekey-as-string-as-string\\\" title=\\\"roAppInfo.getValue\\\">roAppInfo.getValue</a>(\\\"ui_resolutions\\\"). This new field simplifies the process.  <br /><br />The field is set to an AA with two numeric-valued keys — width and height — as well as a string value indicating the current design resolution (\\\"HD\\\", \\\"FHD\\\" or \\\"SD\\\"). <br /><br /><pre><code>Brightscript Debugger> ? myNode.getScene().currentDesignResolution\\n&#x3C;Component: roAssociativeArray> =\\n{\\n    height: 720\\n    resolution: \\\"HD\\\"\\n    width: 1280\\n}\\n</code></pre></td>\\n</tr>\\n<tr>\\n<td>palete</td>\\n<td>RSGPalette node</td>\\n<td>not set</td>\\n<td>READ_WRITE</td>\\n<td>Defines the default color palette used by those nodes that have a <strong>palette</strong> field (for example, the <strong>Scene</strong> node, <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-dialog.md\\\">standard dialogs</a>, <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\">dynamic custom voice keyboards</a>, and so on).<br /><br />Channels typically set the <strong>Scene.palette</strong> field to consistently color the standard dialogs and keyboards in the channel.<br /><br />Nodes that include a <strong>palette</strong> field can be set to an <strong>RSGPalette</strong> node to override the default colors specified in the <strong>Scene</strong> node.<br /><br />If a node that supports a palette does not set its <strong>palette</strong> filed, the node looks up the scene graph until it finds a node with its <strong>palette</strong> field set.<br /><br />If no ancestor node is found with its palette field set, the default color palette is used (grey with white text).<br /><br />The RSGPalette color values used by the Scene node are as follows:<br /><table>\\n<thead>\\n<tr>\\n<th>Palette Color Name</th>\\n<th>Usages</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>PrimaryTextColor</td>\\n<td>The text color used for the entered text displayed in the VoiceTextEditBox node.</td>\\n</tr>\\n<tr>\\n<td>SecondaryTextColor</td>\\n<td>The text color used for the hints displayed in the VoiceTextEditBox.</td>\\n</tr>\\n<tr>\\n<td>InputFieldColor</td>\\n<td>The blend color applied to the VoiceTextEditBox background</td>\\n</tr>\\n<tr>\\n<td>DialogBackgroundColor</td>\\n<td>Blend color for dialog's background bitmap.</td>\\n</tr>\\n<tr>\\n<td>DialogItemColor</td>\\n<td>Blend color for the following items:<br /><ul>\\n<li><a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-progress-item.md\\\">StdDlgProgressItem's</a> spinner bitmap</li>\\n<li><a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-determinate-progress-item.md\\\">StdDlgDeterminateProgressItem's</a> graphic</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>DialogTextColor</td>\\n<td>Color for the text in the following items:<br /><ul>\\n<li><a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-text-item.md\\\">StdDlgTextItem</a> and <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-graphic-item.md\\\">StdDlgGraphicItem</a> if the <strong>namedTextStyle</strong> field is set to \\\"normal\\\" or \\\"bold\\\".</li>\\n<li>All <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\">content area items</a>, except for <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-text-item.md\\\">StdDlgTextItem</a> and <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-graphic-item.md\\\">StdDlgGraphicItem</a>.</li>\\n<li><a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-title-area.md#fields\\\">Title area</a>. Unfocused button.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>DialogFocusColor</td>\\n<td>Blend color for the following:<br /><ul>\\n<li>The <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-button-area.md#fields\\\">button area</a> focus bitmap.</li>\\n<li>The focused scrollbar thumb.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>DialogFocusItemColor</td>\\n<td>Color for the text of the focused button.</td>\\n</tr>\\n<tr>\\n<td>DialogSecondaryTextColor</td>\\n<td>Color for the text of in the following items:<br /><ul>\\n<li><a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-text-item.md\\\">StdDlgTextItem</a> and <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-graphic-item.md\\\">StdDlgGraphicItem</a> if the <strong>namedTextStyle</strong> field is set to \\\"secondary\\\".</li>\\n<li>Disabled button.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>DialogSecondaryItemColor</td>\\n<td>Color for the following items:<br /><ul>\\n<li>The divider displayed below the title area.</li>\\n<li>The unfilled portion of the <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-determinate-progress-item.md\\\">StdDlgDeterminateProgressItem's</a> graphic.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>DialogInputFieldColor</td>\\n<td>The blend color for the text edit box background bitmap for keyboards used inside dialogs.</td>\\n</tr>\\n<tr>\\n<td>DialogKeyboardColor</td>\\n<td>The blend color for the keyboard background bitmap for keyboards used inside dialogs</td>\\n</tr>\\n<tr>\\n<td>DialogFootprintColor</td>\\n<td>The blend color for the following items:<br /><ul>\\n<li>The button focus footprint bitmap that is displayed when the <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-button-area.md#fields\\\">button area</a> does not have focus.</li>\\n<li>Unfocused scrollbar thumb and scrollbar track.</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/abstract-nodes/animationbase.md":"{\n  \"content\": \"<h1 id=\\\"animationbase\\\">AnimationBase</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\" title=\\\"**Node**\\\"><strong>Node</strong></a></p>\\n<p>AnimationBase is an abstract node class that contains the fields common to the <a href=\\\"/docs/references/scenegraph/animation-nodes/animation.md\\\" title=\\\"Animation\\\">Animation</a>, <a href=\\\"/docs/references/scenegraph/animation-nodes/sequentialanimation.md\\\" title=\\\"SequentialAnimation\\\">SequentialAnimation</a>, and <a href=\\\"/docs/references/scenegraph/animation-nodes/parallelanimation.md\\\" title=\\\"ParallelAnimation\\\">ParallelAnimation</a> nodes. The purpose of the AnimationBase node class is to provide the basic functionality needed to animate screen elements, such as moving them across the display screen, fading them in and out of view, or changing their color. All node classes extended from AnimationBase require the use of the interpolator node classes <a href=\\\"/docs/references/scenegraph/animation-nodes/floatfieldinterpolator.md\\\" title=\\\"FloatFieldInterpolator\\\">FloatFieldInterpolator</a>, <a href=\\\"/docs/references/scenegraph/animation-nodes/vector2dfieldinterpolator.md\\\" title=\\\"Vector2DFieldInterpolator\\\">Vector2DFieldInterpolator</a>, and <a href=\\\"/docs/references/scenegraph/animation-nodes/colorfieldinterpolator.md\\\" title=\\\"ColorFieldInterpolator\\\">ColorFieldInterpolator</a> as child nodes to achieve a specific animation effect.</p>\\n<blockquote>\\n<p>AnimationBase is not meant to be instantiated directly by channel code</p>\\n</blockquote>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>control</td>\\n<td>option string</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>Controls the animation. Supported options include: <table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>none</td>\\n<td>Initial state with no associated action</td>\\n</tr>\\n<tr>\\n<td>start</td>\\n<td>Always plays the animation from the beginning</td>\\n</tr>\\n<tr>\\n<td>stop</td>\\n<td>Stops the animation in its current state</td>\\n</tr>\\n<tr>\\n<td>pause</td>\\n<td>Pauses the animation in its current state</td>\\n</tr>\\n<tr>\\n<td>resume</td>\\n<td>If paused, resumes the animation from its current state. If the animation is not paused, plays the animation from the beginning.</td>\\n</tr>\\n<tr>\\n<td>finish</td>\\n<td>Jumps to the end of the animation, then stops. All animated fields will be immediately set to their final values as if the animation had completed.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>state</td>\\n<td>value string</td>\\n<td>stopped</td>\\n<td>READ_ONLY</td>\\n<td>Indicates the state of the animation. Values include: <table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>running</td>\\n<td>Indicates that the animation is in progress</td>\\n</tr>\\n<tr>\\n<td>paused</td>\\n<td>Indicates that the animation has been paused</td>\\n</tr>\\n<tr>\\n<td>stopped</td>\\n<td>Indicates that the animation has either run to completion or has been explicitly stopped</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>repeat</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Controls whether the animation stops when it finishes (false) or repeats from the beginning (true)</td>\\n</tr>\\n<tr>\\n<td>delay</td>\\n<td>time</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Delays the start of the animation by the specified number of seconds</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/abstract-nodes/arraygrid.md":"{\n  \"content\": \"<h1 id=\\\"arraygrid\\\">ArrayGrid</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a> </p>\\n<p>The ArrayGrid node class is an abstract base class that provides functionality to the list and grid node classes that are extended from ArrayGrid. The field value settings and their effect in this abstract base class depend in many cases on whether a list, or a grid, node class is extended from ArrayGrid, and the specific type of list or grid.</p>\\n<p>The following node classes extended from ArrayGrid derive their basic functionality from the ArrayGrid abstract node class:</p>\\n<ul>\\n<li><a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/labellist.md\\\" title=\\\"LabelList\\\">LabelList</a></li>\\n<li><a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/markuplist.md\\\" title=\\\"MarkupList\\\">MarkupList</a></li>\\n<li><a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/postergrid.md\\\" title=\\\"PosterGrid\\\">PosterGrid</a></li>\\n<li><a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/markupgrid.md\\\" title=\\\"MarkupGrid\\\">MarkupGrid</a></li>\\n<li><a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/rowlist.md\\\" title=\\\"RowList\\\">RowList</a></li>\\n</ul>\\n<blockquote>\\n<p>ArrayGrid is not meant to be instantiated directly by channel code</p>\\n</blockquote>\\n<h3 id=\\\"data-bindings\\\">Data Bindings</h3>\\n<p>Each node class extended from the ArrayGrid abstract node class will have custom data bindings.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>content</td>\\n<td>ContentNode</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the content meta-data for the list or grid. This field must be set with a ContentNode that specifies the content meta-data for the list or grid in order for the list or grid to be displayed. See the Data Bindings section of each list or grid reference description for details on the content meta-data that must be specified in the ContentNode</td>\\n</tr>\\n<tr>\\n<td>itemSize</td>\\n<td>vector2d</td>\\n<td>[0,0]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width and height of each item in the list or grid. For list or grid items that are posters, itemSize is the value of a basePosterSize field and any sub-elements included with the poster</td>\\n</tr>\\n<tr>\\n<td>itemSpacing</td>\\n<td>vector2d</td>\\n<td>[0,0]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the horizontal and vertical spacing between the list or grid items. For lists, the vector2d Y-value specifies the vertical spacing between items in the list, and the vector2d X-value is ignored</td>\\n</tr>\\n<tr>\\n<td>numRows</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the number of visible rows displayed. Note that the actual number of rows may be more or less than the number specified depending on the number of items in the list or grid content</td>\\n</tr>\\n<tr>\\n<td>numColumns</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the number of columns in a grid. This field is not used for lists</td>\\n</tr>\\n<tr>\\n<td>focusRow</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the row that will have fixed focus if the vertFocusAnimationStyle field value is set to fixedFocusWrap</td>\\n</tr>\\n<tr>\\n<td>focusColumn</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the column that will have fixed focus for grids if the horizFocusAnimationStyle field value is set to fixedFocusWrap. This field is not used for lists</td>\\n</tr>\\n<tr>\\n<td>horizFocusAnimationStyle</td>\\n<td>option string</td>\\n<td>floatingFocus</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the how the focus indicator moves in a row of grid items in response to the remote direction pad Left and Right key presses. This field is not used for lists. The possible values are: <table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>floatingFocus</td>\\n<td>Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible.</td>\\n</tr>\\n<tr>\\n<td>fixedFocusWrap</td>\\n<td>Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>vertFocusAnimationStyle</td>\\n<td>option string</td>\\n<td>floatingFocus</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the how the focus indicator moves in a list or a column of grid items in response to the remote direction pad Up and Down key presses. The possible values are: <table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>floatingFocus</td>\\n<td>Causes the focus indicator to float up or down until it reaches the end of the list or grid column, at which point the focus indicator will stay fixed on the first or last item in the list or grid column, and the items will scroll up or down if there are items that were not visible. Note that when this style is set, section dividers are not rendered.</td>\\n</tr>\\n<tr>\\n<td>fixedFocusWrap</td>\\n<td>Causes the column to wrap around when the focus indicator reaches the first or last item in the list or grid column, as long as the list or grid column contains enough items to fill the list or grid column. If the list or grid column does not contain enough items to fill the list or grid column, the focus indicator will float up and down.</td>\\n</tr>\\n<tr>\\n<td>fixedFocus</td>\\n<td>Causes the focus to stay fixed on the upper leftmost item. As the user scrolls down, the row containing the previously selected item scrolls up off screen. Scrolling continues until the last row is reached.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>drawFocusFeedbackOnTop</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>If the drawFocusFeedback field value is set to true, specifies whether the specified focus indicator bitmap is drawn on top of the focused list or grid items. The default value draws the specified focus indicator bitmap below the focused list or grid item</td>\\n</tr>\\n<tr>\\n<td>drawFocusFeedback</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Causes a specified bitmap to be drawn on list or grid items to indicate focus has moved to that item</td>\\n</tr>\\n<tr>\\n<td>fadeFocusFeedbackWhenAutoScrolling</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>When set to true, the focus feedback indicator will quickly fade out when scrolling multiple items and fade back in when the scrolling ends. The focus feedback indicator will also after in and out when using the FFW/Rewind keys to scroll a page at a time. Additionally, the focus behavior has been modified for situations where all the items in a RowList row are visible on screen at once. In the past, the focus would step once, then begin to scroll smoothly. Now, the focus steps one-by-one through each item.</td>\\n</tr>\\n<tr>\\n<td>itemcurrFocusFeedbackOpacity</td>\\n<td>Float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>This field provides access to the current opacity of the focus feedback indicator. It can be used to have other items on the screen fade in/out when the focus feedback indicator fades in/out. Additionally, the focus behavior has been modified for situations where all the items in a RowList row are visible on screen at once. In the past, the focus would step once, then begin to scroll smoothly. Now, the focus steps one-by-one through each item.</td>\\n</tr>\\n<tr>\\n<td>currFocusFeedbackOpacity</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>This field provides access to the current opacity of the focus feedback indicator. It can be used to have other items on the screen fade in/out when the focus feedback indicator fades in/out.</td>\\n</tr>\\n<tr>\\n<td>focusBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>If the drawFocusFeedback field value is set to true, specifies a custom bitmap to be drawn on list or grid items to indicate the focus has moved to that item. Only set this field to use a bitmap with a different appearance than the system default. In most cases, you will want to use a 9-patch PNG bitmap with both expandable regions as well as margins to fit around the item, which is the type of bitmap used as the system default</td>\\n</tr>\\n<tr>\\n<td>focusFootprintBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>If the drawFocusFeedback field value is set to true, specifies a custom bitmap to be drawn on list or grid items to indicate focus on that item, when the list or grid itself does not have focus. Only set this field to use a bitmap with a different appearance than the system default. In most cases, you will want to use a 9-patch PNG bitmap with both expandable regions as well as margins to fit around the item, which is the type of bitmap used as the system default</td>\\n</tr>\\n<tr>\\n<td>focusBitmapBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Blend the graphic image specified by focusBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by focusBitmapUri</td>\\n</tr>\\n<tr>\\n<td>focusFootprintBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Blend the graphic image specified by focusFootprintBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus footprint indicator graphic image with a different color than the image specified by focusFootprintBitmapUri</td>\\n</tr>\\n<tr>\\n<td>skipFocusAnimations<br /><br /><em>Available since Roku OS 11.5</em></td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether changes in the focus item should be animated. If this field is set to true, any scrolling or repositioning/scaling of the focus indicator occurs without an animation. This causes fields reflecting the focus status (itemFocused, currFocusRow, currFocusColumn) to be updated instantly and not transition smoothly between old and new values.  For example, currFocusRow will go directly from 3.0 to 4.0 instead of taking on values between 3.0 and 4.0.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>If the vertFocusAnimationStyle field value is set to fixedFocusWrap, specifies a custom bitmap to use as a visual divider between the last and first list or grid items, when the list or grid wraps. Only set this field to use a bitmap with a different appearance than the system default. In most cases, you will want to use a 9-patch PNG bitmap with both expandable regions, which is the type of bitmap used as the system default</td>\\n</tr>\\n<tr>\\n<td>wrapDividerWidth</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Additionally, the focus behavior has been modified for situations where all the items in a RowList row are visible on screen at once. In the past, the focus would step once, then begin to scroll smoothly. Now, the focus steps one-by-one through each item.If the vertFocusAnimationStyle field value is set to fixedFocusWrap, specifies the width of a bitmap used as a visual divider between the last and first list or grid items when the list or grid wraps. Only set this field to use a value with a different appearance than the system default</td>\\n</tr>\\n<tr>\\n<td>wrapDividerHeight</td>\\n<td>float</td>\\n<td>36</td>\\n<td>READ_WRITE</td>\\n<td>If the vertFocusAnimationStyle field value is set to fixedFocusWrap, specifies the height of a bitmap used as a visual divider between the last and first list or grid items, when the list or grid wraps. Only set this field to use a value with a different appearance than the system default</td>\\n</tr>\\n<tr>\\n<td>fixedLayout</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies that a grid will have a layout of items of different widths configured by parameters included in a ContentNode for the grid. This field is not used by lists</td>\\n</tr>\\n<tr>\\n<td>numRenderPasses</td>\\n<td>integer</td>\\n<td>1</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the number of rendering operations to display a complex list or grid. This allows you to achieve a performance increase by specifying that individual sub-elements of the list or grid items occur on sequential rendering operations, rather than all of the item sub-elements being rendered in one rendering operation, which is the default. If you set this field to a value greater than 1, you must specify the rendering operation number for each of the item sub-elements as the renderPass field value for that sub-element. No sub-element that has a renderPass field value of 0 (the default), or has a renderPass field value greater than the value of the numRenderPasses field, will render</td>\\n</tr>\\n<tr>\\n<td>rowHeights</td>\\n<td>array of floats</td>\\n<td>[]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies differing heights for each list or grid row, to allow the height of each row to vary from row to row. The specified values override the itemSize field vector2d Y-value for each list or grid row corresponding to its position in the array, in top to bottom order. If the array contains fewer elements than the number of rows needed to display all the items in the list or grid, the itemSize field vector2d Y-value is used for any unspecified rows</td>\\n</tr>\\n<tr>\\n<td>columnWidths</td>\\n<td>array of floats</td>\\n<td>[]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies differing widths for each grid column, to allow the width of each column to vary from column to column. This field is not used by lists. The specified values override the itemSize field vector2d X-value for each grid column corresponding to its position in the array, in left to right order. If the array contains fewer elements than the number of columns needed to display all the items in the grid, the itemSize field vector2d X-value is used for any unspecified columns</td>\\n</tr>\\n<tr>\\n<td>rowSpacings</td>\\n<td>array of floats</td>\\n<td>[]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies differing spaces between each list or grid row, to allow the spacing between rows to vary from row to row. The specified values override the itemSpacing field vector2d Y-value for each list or grid row corresponding to its position in the array, in top to bottom order. If the array contains fewer elements than the number of rows needed to display all the items in the list or grid, the itemSpacing field vector2d Y-value is used for any unspecified rows</td>\\n</tr>\\n<tr>\\n<td>columnSpacings</td>\\n<td>array of floats</td>\\n<td>[]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies differing spaces between each grid column, to allow the spacing between columns to vary from column to column. This field is not used by lists. The specified values override the itemSpacing field vector2d X-value for each grid column corresponding to its position in the array, in left to right order. If the array contains fewer elements than the number of columns needed to display all the items in the grid, the itemSpacing field vector2d X-value is used for any unspecified columns</td>\\n</tr>\\n<tr>\\n<td>sectionDividerBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>If the ContentNode specifies sections for a list or grid, specifies a custom bitmap to use as a visual divider between the sections of the list or grid. Only set this field to use a bitmap with a different appearance than the system default. For sections that do not include an icon or a title, the system default or custom bitmap specified as the wrapDividerBitmapUri field value is used for the section dividers. In most cases, you will want to use a 9-patch PNG bitmap with both expandable regions, which is the type of bitmap used as the system default</td>\\n</tr>\\n<tr>\\n<td>sectionDividerFont</td>\\n<td>font</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>If the ContentNode specifies sections for a list or grid, specifies a custom font to use for the section title text. Only set this field to use a different font than the system default</td>\\n</tr>\\n<tr>\\n<td>sectionDividerTextColor</td>\\n<td>color</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>If the ContentNode specifies sections for a list or grid, specifies a custom color to use for the section title text. Only set this field to use a different text color than the system default</td>\\n</tr>\\n<tr>\\n<td>sectionDividerSpacing</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>If the ContentNode specifies sections for a list or grid, and the section dividers are specified to include an icon and/or a label, specifies the spacing between the icon, label, and section divider bitmap</td>\\n</tr>\\n<tr>\\n<td>sectionDividerWidth</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>If the ContentNode specifies sections for a list or grid, specifies the width of the section divider bitmap</td>\\n</tr>\\n<tr>\\n<td>sectionDividerHeight</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>If the ContentNode specifies sections for a list or grid, specifies the height of the section divider bitmap</td>\\n</tr>\\n<tr>\\n<td>sectionDividerMinWidth</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>If the ContentNode specifies sections for a list or grid, specifies the minimum width of the section divider bitmap</td>\\n</tr>\\n<tr>\\n<td>sectionDividerLeftOffset</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>If the ContentNode specifies sections for a list or grid, specifies the left offset of the section divider from the list or grid</td>\\n</tr>\\n<tr>\\n<td>itemClippingRect</td>\\n<td>rect2d</td>\\n<td>[ 0.0, 0.0, 0.0, 0.0 ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a clipping region for the list or grid items</td>\\n</tr>\\n<tr>\\n<td>itemSelected</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a list or grid item is selected, set to the index of the selected item</td>\\n</tr>\\n<tr>\\n<td>itemFocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When focus moves to a list or grid item, set to the index of the focused item</td>\\n</tr>\\n<tr>\\n<td>itemUnfocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When focus moves away from a list or grid item, set to the index of the unfocused item</td>\\n</tr>\\n<tr>\\n<td>jumpToItem</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid item index, causes the list or grid to immediately update so that the item at the specified index moves into focus, or focus moves to the item</td>\\n</tr>\\n<tr>\\n<td>animateToItem</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid item index, causes the list or grid to quickly scroll so that the item at the specified index moves into focus, or focus moves to the item</td>\\n</tr>\\n<tr>\\n<td>currFocusRow</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Gives access to which row of a grid is in the focus position as the items scrolling around. So, currFocusRow = 3.7 would mean that item 3 occupies 30% of the focus position while item 4 occupies 70% of the focus position. To maximize performance, the field should be kept to a minimum, as these scripts will run once during each render</td>\\n</tr>\\n<tr>\\n<td>currFocusColumn</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Gives access to which column of a grid is in the focus position as the items scrolling around. So, currFocusColumn = 3.7 would mean that item 3 occupies 30% of the focus position while item 4 occupies 70% of the focus position. To maximize performance, the field should be kept to a minimum, as these scripts will run once during each render</td>\\n</tr>\\n<tr>\\n<td>currFocusSection</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Gives access to which section of a grid is in the focus position as the items scrolling around. So, currFocusSection = 3.7 would mean that item 3 occupies 30% of the focus position while item 4 occupies 70% of the focus position. To maximize performance, the field should be kept to a minimum, as these scripts will run once during each render</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/renderable-nodes/poster.md":"{\n  \"content\": \"<h1 id=\\\"poster\\\">Poster</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\"><strong>Group</strong></a></p>\\n<p>The Poster node class draws an image with the top/left corner located at the origin of the node local coordinate system. Because the Poster node class extends the Group node class, a Poster node can have child nodes. For example, a Poster node might have a Label node as a child that draws an annotation on top of the poster.</p>\\n<p>The Poster node class supports JPEG, PNG and (since Roku OS 9.4) <a href=\\\"https://developers.google.com/speed/webp/\\\">WebP</a> image files. Please observe <a href=\\\"/docs/specs/media/streaming-specifications.md#special-webp-considerations\\\">Special WebP considerations</a> when using the latter.</p>\\n<p>The Poster node class includes the capability to automatically scale graphical images to different sizes as they are loaded, by setting the loadWidth and loadHeight field values. After the graphical images are loaded, the images can be scaled to fit within the target screen element area specified by the width and height field values. To use this capability, select the scaling option you want as the value of the loadDisplayMode field.</p>\\n<p>See SceneGraph's <a href=\\\"/docs/developer-program/performance-guide/memory-management.md#texture-memory\\\" title=\\\"Texture Memory\\\">Texture Memory</a> feature for more information.</p>\\n<blockquote>\\n<p>In order for the load scaling options to work, the option fields must be set in XML markup before the uri field</p>\\n</blockquote>\\n<h3 id=\\\"best-practice-when-using-this-node\\\">Best Practice when using this node</h3>\\n<ul>\\n<li>\\n<p>Avoid loading either very large images (larger than the target screen dimensions), or very small images, with the intent of the Roku OS scaling to a certain design intention. These can cause an unsatisfactory appearance, or even application issues such as degraded performance.</p>\\n</li>\\n<li>\\n<p>For the best appearance and application performance load images either identical to, or close to, the intended target screen dimensions of the Poster node in your application design.</p>\\n</li>\\n<li>\\n<p>Set the dimensions of an image in your design by setting the Poster node width and height fields.\\nIf you do not set these fields, designs implemented in certain forms of XML markup may not render as intended, unless you use an explicit callback layout function triggered by the Poster node loadStatus field, to render the screen element after the image has loaded and the dimensions are known.</p>\\n</li>\\n</ul>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p>The following example is a poster image placed using Poster node:</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/poster-node-sample.png\\\" alt=\\\"roku815px - poster-node-sample\\\" title=\\\"poster-node-sample\\\"></p>\\n<p>The following displays a graphic image from the application images directory near the top left of the display screen.</p>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;!--********** Copyright 2015 Roku Corp.  All Rights Reserved. **********-->\\n\\n&#x3C;component name=\\\"postertest\\\" extends=\\\"Group\\\" >\\n\\n&#x3C;script type=\\\"text/brightscript\\\" >\\n&#x3C;![CDATA[\\n\\nsub init()\\n  m.top.setFocus(true)\\nend sub\\n\\n]]>\\n&#x3C;/script>\\n\\n&#x3C;Poster\\n  id=\\\"testPoster\\\"\\n  uri=\\\"pkg:/images/rokuowds.png\\\"\\n  width=\\\"0.0\\\"\\n  height=\\\"0.0\\\"\\n  translation=\\\"[160,8]\\\" />\\n\\n&#x3C;/component>\\n</code></pre>\\n<h3 id=\\\"autoscaling\\\">Autoscaling</h3>\\n<p>When autoscaling between FHD/HD, there may be cases where using images with widths or heights that are not divisible by 2 (i.e. even numbers) do not work correctly.</p>\\n<h3 id=\\\"rotation\\\">Rotation</h3>\\n<p>Rotation of Posters is supported. On platforms that do not support OpenGL, only rotations of 0, 90, 180, and 270 degrees are supported.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<p><a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md#fields\\\" title=\\\"Fields\\\">Fields</a>  derived from the Group base class can also be used.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>uri</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the URI of the image file. Images included as part of the application package can be referenced using the pkg:/images prefix. Images included as part of the application package that are to be localized can be referenced using the pkg:/locale/images/ prefix (see <a href=\\\"/docs/developer-program/core-concepts/localization.md#localizing-graphical-images-in-the-application-package\\\" title=\\\"Localizing Graphical Images in the Application Package\\\">Localizing Graphical Images in the Application Package</a>)</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width of the image in local coordinates. If set to 0.0, the width of the bitmap from the image file is used. If set to a value greater than 0.0, the bitmap is scaled to that width</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the image in local coordinates. If set to 0.0, the height of the bitmap from the image file is used. If set to a value greater than 0.0, the bitmap is scaled to that height</td>\\n</tr>\\n<tr>\\n<td>loadSync</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Controls whether the image is loaded synchronously in the render thread, and appears immediately, or loaded asynchronously in a background thread, and may not appear immediately. If set to true, and the uri field specifies a local file (in the pkg:/images directory), the image is loaded synchronously, and appears immediately. If set to false, or if the uri field specifies a file from a remote server (a URL starting with http: or https:), the image is loaded asynchronously in a background thread, and may not appear immediately. Be careful when setting this field to true, as it might cause brief glitches in the rendering while the image is being fetched and loaded</td>\\n</tr>\\n<tr>\\n<td>loadWidth</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Scale the graphical image to the specified width when loaded, preserving aspect ratio. If set to the default, no load-time scaling occurs. If the width field is not set, the loadWidth field is used as the default width of the displayed image</td>\\n</tr>\\n<tr>\\n<td>loadHeight</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Scale the graphical image to the specified height when loaded, preserving aspect ratio. If set to the default, no load-time scaling occurs. If the height field is not set, the loadHeight field is used as the default height of the displayed image</td>\\n</tr>\\n<tr>\\n<td>loadDisplayMode</td>\\n<td>option string</td>\\n<td>noScale</td>\\n<td>READ_WRITE</td>\\n<td>Provides automatic scaling of graphical images after loading. If you intend to load very large graphical images, such as larger than the user interface resolution, you must set one of the scaling options other than noScale, otherwise the image may fail to load. The following are the possible field values: <table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>limitSize</td>\\n<td>Scale the image while loading it into texture memory so that the maximum width and height in either dimension does not exceed the specified loadWidth or loadHeight values. If the image is smaller in both dimensions than the specified values, the image is loaded at its regular size. Aspect ratio is preserved.</td>\\n</tr>\\n<tr>\\n<td>noScale</td>\\n<td>The bitmap will be loaded at the image's original resolution. If the Poster's width and height differ from the bitmap's resolution, it will be scaled to fill the Poster's dimensions. Aspect ratio is not preserved.</td>\\n</tr>\\n<tr>\\n<td>scaleToFit</td>\\n<td>Scale the image to fit into the target screen element area, preserving the aspect ratio but \\\"letterboxing\\\" or \\\"pillarboxing\\\" the image (background-color bars at the top/bottom or left/right of the image).</td>\\n</tr>\\n<tr>\\n<td>scaleToFill</td>\\n<td>Stretch the image dimensions to fill the target screen element area, distorting the image if the target screen element area has a different aspect ratio than the image.</td>\\n</tr>\\n<tr>\\n<td>scaleToZoom</td>\\n<td>Scale the image to fill the target screen element area, preserving the aspect ratio but not \\\"letterboxing\\\" or \\\"pillarboxing\\\" the image, with some of the image cropped out.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>loadStatus</td>\\n<td>value string</td>\\n<td>none</td>\\n<td>READ_ONLY</td>\\n<td>Can be used to track the progress of loading the graphical image file. A typical use of this field is to set an observer so that when the field value changes to ready, an action can be triggered. The possible values are: <table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>none</td>\\n<td>No loading or decoding of the graphical image file is taking place</td>\\n</tr>\\n<tr>\\n<td>loading</td>\\n<td>Graphical image file is being fetched and decoded</td>\\n</tr>\\n<tr>\\n<td>ready</td>\\n<td>Graphical image file has been fetched and decoded and is ready to be drawn</td>\\n</tr>\\n<tr>\\n<td>failed</td>\\n<td>Graphical image file could not be loaded for some reason, such as the uri field value is set to a non-existent file location</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>bitmapWidth</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_ONLY</td>\\n<td>After the graphical image file is loaded, contains the width of the graphical image in pixels</td>\\n</tr>\\n<tr>\\n<td>bitmapHeight</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_ONLY</td>\\n<td>After the graphical image file is loaded, contains the height of the graphical image in pixels</td>\\n</tr>\\n<tr>\\n<td>bitmapMargins</td>\\n<td>associative array</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>This field is set to an associative array with four elements \\\"left\\\", \\\"right\\\", \\\"top\\\" and \\\"bottom\\\". If the Poster's bitmap is a 9-patch image, the associative array is set to margin info encoded along the right and bottom edges of the image. If the Poster's bitmap is not a 9-patch image, all values in the associative array are set to 0. The bitmapMargins field is set whenever the Poster's loadStatus field changes (e.g. when the bitmap has been loaded).</td>\\n</tr>\\n<tr>\\n<td>blendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Can be used to tint the image by multiplying the color of each pixel by the specified value. If this value is not set to a value other than the default value, no color blending will be performed</td>\\n</tr>\\n<tr>\\n<td>loadingBitmapUri</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies a bitmap file to display while the poster image is loading.<br /><br />To execute a seamless cross-fade transition between posters, set the <strong>loadingBitmapUri</strong> of the next poster to be shown to the uri of the currently displayed poster.</td>\\n</tr>\\n<tr>\\n<td>loadingBitmapOpacity</td>\\n<td>float</td>\\n<td>1.0</td>\\n<td>READ_WRITE</td>\\n<td>Used to control the rendering opacity of the graphical image that indicates a bitmap is loading. This value multiplies the Poster node opacity</td>\\n</tr>\\n<tr>\\n<td>failedBitmapUri</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies a bitmap file to display when the poster image failed to load</td>\\n</tr>\\n<tr>\\n<td>failedBitmapOpacity</td>\\n<td>float</td>\\n<td>1.0</td>\\n<td>READ_WRITE</td>\\n<td>Used to control the rendering opacity of the graphical image that indicates a bitmap failed to load. This value multiplies the Poster node opacity</td>\\n</tr>\\n<tr>\\n<td>audioGuideText</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>If muteAudioGuide is false, this string will be spoken when the poster is focused</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/screen%20elements/renderable%20nodes/PosterExample\\\">PosterExample</a> is a sample channel demonstrating Poster in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/renderable-nodes/rectangle.md":"{\n  \"content\": \"<h1 id=\\\"rectangle\\\">Rectangle</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a></p>\\n<p>The Rectangle node class draws a solid color rectangle with the top/left corner of the rectangle drawn at the origin of the node local coordinate system. Because the Rectangle node class extends the Group node class, it can have child nodes. For example, a Rectangle node might have a child Label node, resulting in text being drawn inside of a box.</p>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p>The following are examples using the Rectangle node.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/rectangle-node.png\\\" alt=\\\"roku815px - rectangle-node\\\" title=\\\"rectangle-node\\\"></p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/rectangle-node-rotated.png\\\" alt=\\\"roku815px - rectangle-node-rotated\\\" title=\\\"rectangle-node-rotated\\\"></p>\\n<p>Rectangle Node Class Example:</p>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;!--********** Copyright 2015 Roku Corp.  All Rights Reserved. **********-->\\n\\n&#x3C;component name=\\\"rectangleexample\\\" extends=\\\"Group\\\" >\\n\\n&#x3C;script type=\\\"text/brightscript\\\" >\\n&#x3C;![CDATA[\\n\\nsub init()\\n  m.top.setFocus(true)\\nend sub\\n\\n]]>\\n&#x3C;/script>\\n\\n&#x3C;children>\\n\\n&#x3C;Rectangle\\n  id=\\\"testRectangle\\\"\\n  color=\\\"0x880088FF\\\"\\n  width=\\\"1280\\\"\\n  height=\\\"60\\\"\\n  translation=\\\"[0,0]\\\" />\\n\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h3 id=\\\"rotation\\\">Rotation</h3>\\n<p>Rotation of Rectangles is supported. On platforms that do not support OpenGL, only rotations of 0, 90, 180, and 270 degrees are supported.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<p><a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md#fields\\\" title=\\\"Fields\\\">Fields</a> derived from the Group base class can also be used.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width of the rectangle in local coordinates</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of rectangle in local coordinates</td>\\n</tr>\\n<tr>\\n<td>color</td>\\n<td>color (string containing hex value e.g. RGBA)</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the rectangle</td>\\n</tr>\\n<tr>\\n<td>blendingEnabled</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies if the rectangle should be alpha blended with the nodes that are behind it</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/screen%20elements/renderable%20nodes/RectangleExample\\\">RectangleExample</a> is a sample channel demonstrating Rectangle in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/renderable-nodes/simplelabel.md":"{\n  \"content\": \"<h1 id=\\\"simplelabel\\\">SimpleLabel</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a></p>\\n<p>The SimpleLabel node class is used to display a single line of text. SimpleLabel is a lightweight complement to the Label node. It supports simplified font style specification and is more memory efficient than the Label node.</p>\\n<p>The SimpleLabel node class supports:</p>\\n<ul>\\n<li>Specifying either a built-in system font or a TrueType/OpenType font file</li>\\n<li>Specifying the color of the font</li>\\n<li>Customizable Horizontal and Vertical origin</li>\\n</ul>\\n<p>The following shows a text layout derived from the SimpleLabel node:</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/simplelabel.png\\\" alt=\\\"roku815px - simpleLabel node\\\" title=\\\"simplelabel\\\"></p>\\n<p>With ui_resolutions=hd specified in the manifest, the following displays the text string \\\"Application Development Made Easy!\\\" using the medium bold system font, centered horizontally on display, and with the baseline of the text at the vertical center of the display.</p>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;!--********** Copyright 2018 Roku Corp.  All Rights Reserved. **********-->\\n\\n&#x3C;component name=\\\"simpleLabeltest\\\" extends=\\\"Group\\\" >\\n\\n&#x3C;script type=\\\"text/brightscript\\\" >\\n&#x3C;![CDATA[\\n\\n  sub init()\\n    m.top.setFocus(true)\\n  end sub\\n\\n]]>\\n&#x3C;/script>\\n\\n&#x3C;SimpleLabel\\n  id=\\\"testLabel\\\"\\n  font=\\\"fontUri:MediumBoldSystemFont\\\"\\n  text = \\\"Application Development Made Easy!\\\"\\n  horizOrigin = \\\"left\\\"\\n  vertOrigin = \\\"baseline\\\"\\n  translation=\\\"[640,360]\\\" />\\n\\n&#x3C;/component>\\n</code></pre>\\n<h3 id=\\\"text-origin\\\">Text Origin</h3>\\n<p>The SimpleLabel node uses the horizOrigin and vertOrigin fields to control the origin of the coordinate system for the node.</p>\\n<h4 id=\\\"horizontal-origin\\\">Horizontal Origin</h4>\\n<p>The horizOrigin field allows controlling the x=0 position of the SimpleLabel node's local coordinate system.</p>\\n<p>There are three possible values for the horizOrigin field:</p>\\n<ul>\\n<li>\\n<p>left\\nThe left edge of the text is located at the 0 x-coordinate position of the SimpleLabel node's local coordinate system</p>\\n</li>\\n<li>\\n<p>center\\nThe horizontal center of the text is positioned at the 0 x-coordinate position of the SimpleLabel node's local coordinate system</p>\\n</li>\\n<li>\\n<p>right\\nThe right edge of the text is positioned at the 0 x-coordinate position of the SimpleLabel node's local coordinate system</p>\\n</li>\\n</ul>\\n<h4 id=\\\"vertical-origin\\\">Vertical Origin</h4>\\n<p>The vertOrigin field allows controlling the y=0 position of the SimpleLabel node's local coordinate system.</p>\\n<p>There are four possible values for the vertOrigin field:</p>\\n<ul>\\n<li>\\n<p>top\\nThe top edge of the text is located at the 0 y-coordinate position of the SimpleLabel node's local coordinate system</p>\\n</li>\\n<li>\\n<p>center\\nThe vertical center of the text is located at the 0 y-coordinate position of the SimpleLabel node's local coordinate system</p>\\n</li>\\n<li>\\n<p>baseline\\nThe baseline of the text is located at the 0 y-coordinate position of the SimpleLabel node's local coordinate system</p>\\n</li>\\n<li>\\n<p>bottom\\nThe bottom edge of the text is located at the 0 y-coordinate position of the SimpleLabel node's local coordinate system</p>\\n</li>\\n</ul>\\n<h4 id=\\\"simplelabel-origin-example\\\">SimpleLabel Origin Example</h4>\\n<p>The following image illustrates the horizontal and vertical origin options supported by the SimpleLabel node. The manifest includes ui_resolutions=fhd, so all coordinate values are in the range 1920x1080.</p>\\n<ul>\\n<li>\\n<p>On the top left, in the image below, a Group node is displayed that has a 1-pixel wide Rectangle node and three SimpleLabel nodes as children. The Group node's x-translation is set to 200, and the x translation of the Rectangle and all three SimpleLabel nodes is set to 0.</p>\\n<ul>\\n<li>The Rectangle serves as a visual reference of where x=0 is located in its parent Group's local coordinate system.</li>\\n<li>The three SimpleLabel nodes illustrate each option for the horizOrigin field (i.e., SimpleLabel horizontal origin at the left edge, center, and right edge of the text).</li>\\n</ul>\\n</li>\\n<li>\\n<p>In the bottom of the image, a Group node is displayed that has a 1-pixel tall Rectangle node and four SimpleLabel nodes as children.</p>\\n<ul>\\n<li>The Group node's y-translation is set to 480, and the y translation of the Rectangle and all four SimpleLabel nodes is set to 0.</li>\\n<li>The Rectangle serves as a visual reference of where y=0 is located in its parent Group's local coordinate system.</li>\\n<li>The four SimpleLabel nodes illustrate each option for the vertOrigin field (i.e., SimpleLabel vertical origin at the top edge, center, baseline, and bottom edge of the text).</li>\\n</ul>\\n</li>\\n</ul>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/simpleLabelOriginExample.jpg\\\" alt=\\\"roku815px - simple_label_origin\\\" title=\\\"simplelabel origin example\\\"></p>\\n<h3 id=\\\"rotation\\\">Rotation</h3>\\n<p>Rotation of SimpleLabel nodes is supported. The center of rotation is determined by the origin point as determined by the horizOrigin and vertOrigin fields. On platforms that do not support OpenGL, only rotations divisible by 90 are supported (e.g., 0, 90, 180, and 270 degrees). For those platforms, other values are rendered using the nearest 90-degree value (e.g., 103 degrees is rendered as a 90-degree rotation, -262 degrees is rendered as a -270 rotation).</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>Specifies the text to be displayed</td>\\n</tr>\\n<tr>\\n<td>color</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>Specifies the text color</td>\\n</tr>\\n<tr>\\n<td>fontUri</td>\\n<td>string</td>\\n<td>system default</td>\\n<td>Specifies either a path to a TrueType or OpenType font file or a built-in system font name.<br /><br />For TrueType or OpenType font files, the file must be included with the application (e.g. <code>pkg:/fonts/SomeFontFile.ttf</code>). If no fontUri is specified, the System Default font is used.<br /><br />The table below shows the options for using built-in system fonts. The \\\"<strong>Fixed Size?\\\"</strong> column indicates whether the <code>fontSize</code> field of the <strong>SimpleLabel</strong> is respected or not. For those where the size is fixed, the font size cannot be modified.<table>\\n<thead>\\n<tr>\\n<th>fontUri String</th>\\n<th>Fixed Size?</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>font:SmallestSystemFont</code></td>\\n<td>Yes</td>\\n</tr>\\n<tr>\\n<td><code>font:SmallSystemFont</code></td>\\n<td>Yes</td>\\n</tr>\\n<tr>\\n<td><code>font:MediumSystemFont</code></td>\\n<td>Yes</td>\\n</tr>\\n<tr>\\n<td><code>font:LargeSystemFont</code></td>\\n<td>Yes</td>\\n</tr>\\n<tr>\\n<td><code>font:SmallestBoldSystemFont</code></td>\\n<td>Yes</td>\\n</tr>\\n<tr>\\n<td><code>font:SmallBoldSystemFont</code></td>\\n<td>Yes</td>\\n</tr>\\n<tr>\\n<td><code>font:MediumBoldSystemFont</code></td>\\n<td>Yes</td>\\n</tr>\\n<tr>\\n<td><code>font:LargeBoldSystemFont</code></td>\\n<td>Yes</td>\\n</tr>\\n<tr>\\n<td><code>font:SystemFontFile</code></td>\\n<td>No</td>\\n</tr>\\n<tr>\\n<td><code>font:BoldSystemFontFile</code></td>\\n<td>No</td>\\n</tr>\\n<tr>\\n<td>System Default (field not set)</td>\\n<td>Yes</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>fontSize</td>\\n<td>integer</td>\\n<td>system default</td>\\n<td>Specifies the size of the font in points. As noted in the description of the <code>fontUri</code> field, the use of fixed size system fonts ignores the value of the <code>fontSize</code> field.</td>\\n</tr>\\n<tr>\\n<td>horizOrigin</td>\\n<td>string</td>\\n<td>left</td>\\n<td>See <a href=\\\"/docs/references/scenegraph/renderable-nodes/simplelabel.md#SimpleLabel-HorizontalOrigin\\\"><strong>Horizontal Origin</strong></a></td>\\n</tr>\\n<tr>\\n<td>vertOrigin</td>\\n<td>string</td>\\n<td>top</td>\\n<td>See <a href=\\\"/docs/references/scenegraph/renderable-nodes/simplelabel.md#SimpleLabel-VerticalOrigin\\\"><strong>Vertical Origin</strong></a></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>The following <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md#fields\\\" title=\\\"Fields\\\">Fields</a> derived from the Group base class can also be used:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>scaleRotateCenter</td>\\n<td>vector2d</td>\\n<td>[0.0,0.0]</td>\\n<td>READ_WRITE</td>\\n<td>Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</td>\\n</tr>\\n<tr>\\n<td>visible</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>If true, the node and its children are rendered. If false, the node and its children do not render</td>\\n</tr>\\n<tr>\\n<td>inheritParentOpacity</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value</td>\\n</tr>\\n<tr>\\n<td>rotation</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, specifically Roku Players without OpenGL graphics support, only rotations of 0, 90, 180 and 270 degrees (in equivalent radians) are supported. (See <a href=\\\"/docs/specs/hardware.md#current-models\\\" title=\\\"Roku Models and Features\\\">Roku Models and Features</a> for information on OpenGL support)</td>\\n</tr>\\n<tr>\\n<td>scale</td>\\n<td>vector2d</td>\\n<td>[1.0,1.0]</td>\\n<td>READ_WRITE</td>\\n<td>Defines the scale factor to be applied to the node local coordinate</td>\\n</tr>\\n<tr>\\n<td>renderTracking</td>\\n<td>option as string</td>\\n<td>disabled</td>\\n<td>READ_WRITE</td>\\n<td>renderTracking is set to \\\"disabled\\\" when enableRenderTracking is set to false. The following options are only available when enableRenderTracking is set to true: <table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>\\\"none\\\"</code></td>\\n<td>renderTracking is set to <code>\\\"none\\\"</code> if <strong>one or more</strong> of these conditions is true:<br />the node's <code>visible</code> field is set to <code>false</code>the node's <code>opacity</code> field is set to <code>0.0</code>no <code>clippingRect</code> is specified and the node is completely offscreena <code>clippingRect</code> is specified and the node lies completely outside that <code>clippingRect's</code> coordinates or is completely offscreen</td>\\n</tr>\\n<tr>\\n<td><code>\\\"partial\\\"</code></td>\\n<td>renderTracking is set to <code>\\\"partial\\\"</code> if <strong>all</strong> of the following conditions are true:<br />the node's <code>visible</code> field is set to <code>true</code>the node's <code>opacity</code> field is greater than <code>0.0</code>no <code>clippingRect</code> is specified and the node is partially offscreena <code>clippingRect</code> is specified and the node lies partially inside the <code>clippingRect's</code> coordinates</td>\\n</tr>\\n<tr>\\n<td><code>\\\"full\\\"</code></td>\\n<td>renderTracking is set to <code>\\\"full\\\"</code> if <strong>all</strong> of the following conditions are true:<br />the node's <code>visible</code> field is set to <code>true</code>the node's <code>opacity</code> field is greater than <code>0.0</code>no <code>clippingRect</code> is specified and the node is completely onscreena <code>clippingRect</code> is specified and the node lies completely inside the <code>clippingRect's</code> coordinates</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>inheritParentTransform</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the SceneGraph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the SceneGraph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the SceneGraph (that is, the Scene component)</td>\\n</tr>\\n<tr>\\n<td>renderPass</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Used in combination with the numRenderPasses field of nodes extended from the <a href=\\\"/docs/references/scenegraph/abstract-nodes/arraygrid.md\\\" title=\\\"ArrayGrid\\\">ArrayGrid</a> abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render</td>\\n</tr>\\n<tr>\\n<td>childRenderOrder</td>\\n<td>option as string</td>\\n<td>renderLast</td>\\n<td>READ_WRITE</td>\\n<td><table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>\\\"renderFirst\\\"</code></td>\\n<td>any drawing done by this node will be done <strong>before</strong> the node children are rendered</td>\\n</tr>\\n<tr>\\n<td><code>\\\"renderLast\\\"</code></td>\\n<td>any drawing done by this node will be done <strong>after</strong> the node children are rendered</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>clippingRect</td>\\n<td>array of float</td>\\n<td>[ 0.0, 0.0, 0.0, 0.0 ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area. <ul>\\n<li><code>ClippingRects</code> can be specified by the node or by any of its ancestors in the SceneGraph.</li>\\n<li><code>ClippingRects</code> are automatically set by some nodes such as lists and grids.</li>\\n<li><code>ClippingRects</code> are always clipped to the screen boundaries, so if a <code>clippingRect</code> is specified that is partially or completely offscreen, it will be clipped to the screen boundaries. With respect to render tracking, although the node could be completely within the bounds of the specified <code>clippingRect</code>, it's <code>renderTracking</code> field could be set to <code>\\\"none\\\"</code> if the portion of the <code>clippingRect</code> it occupies is completely offscreen.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>enableRenderTracking</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>If true, renderTracking will be set to a string describing how much of the node is rendered on screen</td>\\n</tr>\\n<tr>\\n<td>translation</td>\\n<td>vector2d</td>\\n<td>[0.0,0.0]</td>\\n<td>READ_WRITE</td>\\n<td>Defines the origin of the node local coordinate system relative to its parent node</td>\\n</tr>\\n<tr>\\n<td>opacity</td>\\n<td>float</td>\\n<td>1.0</td>\\n<td>READ_WRITE</td>\\n<td>Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the SceneGraph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the SceneGraph to fade in and out by animating the opacity of the node at the root of the branch</td>\\n</tr>\\n<tr>\\n<td>muteAudioGuide</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Set to true to suppress the default CVAA text to speech. This allows channels to provide their own custom implementation</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/screen%20elements/renderable%20nodes/LabelExample\\\">LabelExample</a> is a sample channel demonstrating Label in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/label-nodes/label-base.md":"{\n  \"content\": \"<h1 id=\\\"labelbase\\\">LabelBase</h1>\\n<p><em>Available since Roku OS 10.5</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\"><strong>Group</strong></a></p>\\n<p>The LabelBase node is an abstract base class for the <a href=\\\"/docs/references/scenegraph/label-nodes/label.md\\\"><strong>Label</strong></a> and <a href=\\\"/docs/references/scenegraph/label-nodes/multi-style-label.md\\\"><strong>MultiStyleLabel</strong></a> nodes. The Label node is used to display a string of text with a single style; the MultiStyleLabel node is used display a string of text with mixed styles (for example, plain and bold text, different fonts, and/or multiple colors). The LabelBase node provides the dimensions, text alignment, wrapping, auto-truncating, and other common functionality for its child nodes.</p>\\n<blockquote>\\n<p>The LabelBase node was introduced in Roku OS 10.5 to provide a single base class for the Label node and the new MultiStyleLabel node, which was added as part of the Roku OS 10.5 release. The Label node now inherits most of its functionality from LabelBase node class. Developers, however, do not need to update their channel application code to account for this refactoring.</p>\\n</blockquote>\\n<h3 id=\\\"text-alignment\\\">Text Alignment</h3>\\n<p>The LabelBase node uses the horizAlign and vertAlign fields to allow you to position the rendered text relative to a specified bounding rectangle.</p>\\n<h4 id=\\\"horizontal-alignment\\\">Horizontal Alignment</h4>\\n<p>The horizAlign field allows you to position text horizontally relative to the computed width of the label. The computed width is determined in one of two ways:</p>\\n<ul>\\n<li>If the width field is greater than zero, the computed width is the value of the width field.</li>\\n<li>If the width field is equal to zero, the computed width is the rendered width of the text.</li>\\n</ul>\\n<p>There are three possible values for the horizAlign field:</p>\\n<ul>\\n<li>\\n<p>left\\nThe left edge of the text is drawn at the 0 x-coordinate position of the LabelBase node local coordinate system.</p>\\n</li>\\n<li>\\n<p>center\\nThe horizontal center of each line of text is positioned at the x-coordinate corresponding to half the computed width of the LabelBase node local coordinate system.</p>\\n</li>\\n<li>\\n<p>right\\nThe right edge of each line of text is positioned at x-coordinate position corresponding to the computed width of the LabelBase node local coordinate system.</p>\\n</li>\\n</ul>\\n<blockquote>\\n<p>If the width field is equal to zero, a single line of text will be rendered (see <a href=\\\"/docs/references/scenegraph/label-nodes/label-base.md#wrapping-text\\\" title=\\\"Wrapping\\\">Wrapping</a> for more details). In that case, all three values of the horizAlign field have the same result, since the computed width equals the rendered width of the text.</p>\\n</blockquote>\\n<h4 id=\\\"vertical-alignment\\\">Vertical Alignment</h4>\\n<p>The vertAlign field allows you to position text vertically relative to the computed height of the label. The computed height is determined in one of four ways, which in some cases depend on the values set in the numLines and maxLines fields:</p>\\n<ul>\\n<li>\\n<p>If the height field is greater than zero, the computed height is the value of the height field. In this case, the numLines and maxLines field values are ignored.</p>\\n</li>\\n<li>\\n<p>If the height field is zero and the numLines field is greater than zero, the computed height is the height required to render the number of lines specified by the numLines field value. Note that the computed height is set to the height required to render the number of lines even if the rendered text contains fewer lines. For example, if the numLines field value is 4, and the rendered text only occupies two lines, the computed height is still equal to the height required to render four lines. In this case, the value of the maxLines field is ignored.</p>\\n</li>\\n<li>\\n<p>If both the height and numLines field values are set to zero, and the maxLines field value is greater than zero, the rendered text will be limited to the number of lines set in the maxLines field value. In this case, the computed height is the height of the rendered text, but that text will be limited to no more than the number of lines set in the maxLines field value. For example, if the maxLines field value is 3, and the rendered text only occupies two lines, the computed height is the height required to render two lines of text. If the maxLines field value is 3, and the rendered text would occupy five lines, only three lines are drawn, and the computed height is the height required to render those three lines.</p>\\n</li>\\n<li>\\n<p>If the height, numLines and maxLines field values are all zero, the computed height is the height of the rendered text.</p>\\n</li>\\n</ul>\\n<p>There are three possible values for the vertAlign field:</p>\\n<ul>\\n<li>\\n<p>top\\nThe top edge of the text is drawn at 0 y-coordinate position of the LabelBase node local coordinate system.</p>\\n</li>\\n<li>\\n<p>center\\nThe vertical center of the rendered text is positioned at y-coordinate position corresponding to half the computed height of the LabelBase node local coordinate system.</p>\\n</li>\\n<li>\\n<p>bottom\\nThe text is drawn so that bottom edge of the rendered text is positioned at the y-coordinate position corresponding to the computed height of the LabelBase node local coordinate system.</p>\\n</li>\\n</ul>\\n<p>Note that if the computed height equals the actual height of the rendered text (such as when the height and numLines field values are both zero), all three values of the vertAlign field have the same result, since the computed height equals the rendered height of the text.</p>\\n<h4 id=\\\"text-alignment-example\\\">Text Alignment Example</h4>\\n<p>The following image shows a Rectangle node with a width of 1000 pixels and a height of 500 pixels. The Rectangle node has nine Label child nodes. Each Label child node has its width field value set to 1000 and its height field value set to 500. All nine combinations of the horizAlign and vertAlign fields are used to position the labels relative to the 1000x500 bounding rectangle.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/TextAlign.png\\\" alt=\\\"roku815px - TextAlign\\\" title=\\\"TextAlign\\\"></p>\\n<h3 id=\\\"wrapping-text\\\">Wrapping Text</h3>\\n<p>The wrap field is used to control how the text is broken into multiple lines. The two possible field values are true and false.</p>\\n<p><strong>wrap = false</strong></p>\\n<p>In this case, a single line of text will be displayed.</p>\\n<p>If the width field value is zero, and the text does not contain any newline characters, the entire text string is rendered. If the text contains newline characters, the part of the text up to the first newline character is rendered.</p>\\n<p>If the width field value is greater than zero, the text is truncated or ellipsized so only the portion of text is rendered that fits within the specified width.</p>\\n<p><strong>wrap = true</strong></p>\\n<p>In this case, if the width field value is greater than zero, the text is broken into several lines, each of which has width no larger than the computed width. Each newline character in the text results in a new line of text. Also, the text is broken into lines at any space or hyphen character. If any word in the text exceeds the computed width, it is broken into lines arbitrarily.</p>\\n<p>If the width field value is zero and the wrap field value is true, no text is rendered.</p>\\n<p>The actual numbers of lines displayed is dependent upon the values set in the height, numLines and maxLines fields.</p>\\n<p>If the height field value is greater than zero, the text is broken into lines based on the value of the width field, but only the number of lines that fit into the specified height are rendered. If the displayPartialLines field value is set to true (the default), only full lines of text are rendered. If the displayPartialLines field value is false, the top or bottom line of text may be clipped vertically.</p>\\n<p>If the height field value is zero, and the numLines field value is greater than zero, the text is broken into lines based on the value of the width field, and up to the number of lines of text set in the numLines field value are rendered.</p>\\n<p>If both the height and numLines field values are zero, and the maxLines field value is greater than zero, the text is broken into lines based on the value of the width field, and no more than the number of lines of text set in the maxLines field value are rendered.</p>\\n<h3 id=\\\"rotation-of-labels\\\">Rotation of Labels</h3>\\n<p>Rotation of LabelBase nodes is supported. On platforms that do not support OpenGL, only rotations of 0, 90, 180, and 270 degrees are supported.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<p>Fields derived from the <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md#fields\\\">Group</a> base class can also be used.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text to be displayed</td>\\n</tr>\\n<tr>\\n<td>color</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text color</td>\\n</tr>\\n<tr>\\n<td>font</td>\\n<td>Font</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the Font node to be used</td>\\n</tr>\\n<tr>\\n<td>horizAlign</td>\\n<td>string</td>\\n<td>left</td>\\n<td>READ_WRITE</td>\\n<td>See <a href=\\\"/docs/references/scenegraph/typographic-nodes/scrollinglabel.md#alignment\\\" title=\\\"Vertical Alignment\\\">Horizontal Alignment</a></td>\\n</tr>\\n<tr>\\n<td>vertAlign</td>\\n<td>string</td>\\n<td>top</td>\\n<td>READ_WRITE</td>\\n<td>See <a href=\\\"/docs/references/scenegraph/label-nodes/label-base.md#wrapping-text\\\" title=\\\"Wrapping\\\">Vertical Alignment</a></td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width of the label. If set to zero, the text is always displayed as a single line</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the label. If set to zero, the actual height is determined by the value of the numLines field if it is greater than zero. See <a href=\\\"/docs/references/scenegraph/typographic-nodes/scrollinglabel.md#alignment\\\" title=\\\"Vertical Alignment\\\">Vertical Alignment</a> and <a href=\\\"/docs/references/scenegraph/label-nodes/label-base.md#wrapping-text\\\" title=\\\"Wrapping\\\">Wrapping</a> for more details.</td>\\n</tr>\\n<tr>\\n<td>numLines</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>If the height field value is zero, provides an alternate way to specify the height of the bounding rectangle of the label. See <a href=\\\"/docs/references/scenegraph/typographic-nodes/scrollinglabel.md#alignment\\\" title=\\\"Vertical Alignment\\\">Vertical Alignment</a> and <a href=\\\"/docs/references/scenegraph/label-nodes/label-base.md#wrapping-text\\\" title=\\\"Wrapping\\\">Wrapping</a> for more details.</td>\\n</tr>\\n<tr>\\n<td>maxLines</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>If the height and numLines field values are both zero, specifies the maximum number of lines of text to be displayed. See <a href=\\\"/docs/references/scenegraph/typographic-nodes/scrollinglabel.md#alignment\\\" title=\\\"Vertical Alignment\\\">Vertical Alignment</a> and <a href=\\\"/docs/references/scenegraph/label-nodes/label-base.md#wrapping-text\\\" title=\\\"Wrapping\\\">Wrapping</a> for more details.</td>\\n</tr>\\n<tr>\\n<td>wrap</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>See <a href=\\\"/docs/references/scenegraph/typographic-nodes/scrollinglabel.md#alignment\\\" title=\\\"Horizontal Alignment\\\">Horizontal Alignment</a></td>\\n</tr>\\n<tr>\\n<td>ellipsizeOnBoundary</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>If the width field value is greater than zero, controls whether or not the last line of text displayed should be ellipsized if it extends beyond the specified width. It is ignored if the truncateOnDelimiter field value is set to a non-empty string <ul>\\n<li>When set to true, text will be ellipsized by whole words. Example: \\\"This is the last line of...\\\"</li>\\n<li>When set to false, text will be ellipsized by characters. Example: \\\"This is the last line of tex...\\\"</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>wordBreakChars</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>By default, space and hyphen characters are used to determine where lines can be divided. In addition, this field can specify additional characters to be used to determine where the text can be broken into lines</td>\\n</tr>\\n<tr>\\n<td>ellipsisText</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>By default, three dots (...) are used to ellipsize the last line of text that extends beyond the bounding rectangle. This field specifies alternate characters to be displayed when the last line of text is ellipsized</td>\\n</tr>\\n<tr>\\n<td>isTextEllipsized</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_ONLY</td>\\n<td>Indicates whether the last line of text has been ellipsized</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/label-nodes/multi-style-label.md":"{\n  \"content\": \"<h1 id=\\\"multistylelabel\\\">MultiStyleLabel</h1>\\n<p><em>Available since Roku OS 10.5</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/label-nodes/label-base.md\\\"><strong>LabelBase</strong></a></p>\\n<p>The MultiStyleLabel node class is used to create labels with mixed styles. For example, this node can be used to create a single label with plain and bold text, different fonts, and/or multiple colors.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/emoji-multistylelabel.jpg\\\" alt=\\\"roku815px - img\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<p>Fields derived from the <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md#fields\\\" title=\\\"Fields\\\">Group</a> and <a href=\\\"/docs/references/scenegraph/label-nodes/label-base.md#fields\\\">LabelBase</a> classes can be used.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>drawingStyles</td>\\n<td>associative array of associative arrays</td>\\n<td>Defines the size, URI, and color of a font style. This field may contain one or more font styles.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"example\\\">Example</h2>\\n<p>The MultiStyleLabel <strong>drawingStyles</strong> field contains one or more associative arrays that represent font styles. Each font style contains <strong>fontSize</strong>, <strong>fontUri</strong>, and <strong>color</strong> properties.</p>\\n<p>The MultiStyleLabel <strong>text</strong> field uses a simple markup style. Markup tags with the names of the styles defined in the <strong>drawingStyles</strong> field are used to delineate the boundaries of the label text to be rendered in that specific style.</p>\\n<pre><code>m.MultiStyleLabel.drawingStyles = {\\n\\n    \\\"HandprintedRed\\\": {\\n        \\\"fontSize\\\": 36\\n        \\\"fontUri\\\": \\\"pkg:/fonts/vSHandprinted.otf\\\"\\n        \\\"color\\\": \\\"#FF0000FF\\\"\\n    }\\n        \\\"HandprintedGreen\\\": {\\n            \\\"fontSize\\\": 36\\n            \\\"fontUri\\\": \\\"pkg:/fonts/vSHandprinted.otf\\\"\\n            \\\"color\\\": \\\"#00FF00FF\\\"\\n    }\\n    \\\"default\\\": {\\n        \\\"fontSize\\\": 36\\n        \\\"fontUri\\\": \\\"font:LargeSystemFont\\\"\\n        \\\"color\\\": \\\"#000000FF\\\"\\n    }\\n}\\n\\nm.MultiStyleLabel.text = \\\"Default Text &#x3C;HandprintedRed>Red text followed by&#x3C;/HandprintedRed>&#x3C;HandprintedGreen>more text in a funny style thaty the world has never seen before...&#x3C;/HandprintedGreen>\\\"\\n</code></pre>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/screen%20elements/renderable%20nodes/MultiStyleLabelExample\\\">sample channel</a> that demonstrates how to use the MultiStyleLabel node.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/label-nodes/label.md":"{\n  \"content\": \"<h1 id=\\\"label\\\">Label</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/label-nodes/label-base.md\\\"><strong>LabelBase</strong></a></p>\\n<blockquote>\\n<p>As of Roku OS 10.5, the Label node inherits most of its functionality from <a href=\\\"/docs/references/scenegraph/label-nodes/label-base.md\\\">LabelBase</a> node class. Developers, however, do not need to update their channel application code to account for this refactoring.</p>\\n</blockquote>\\n<p>The Label node class is used to display a string of text.</p>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p>The following example shows a text layout derived from the Label node.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/label-node-sample.png\\\" alt=\\\"roku815px - label-node-sample\\\" title=\\\"label-node-sample\\\"></p>\\n<p>The following displays the text string \\\"Application Development Made Easy!\\\" in the medium bold system font near the left top of the display screen.</p>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;!--********** Copyright 2015 Roku Corp.  All Rights Reserved. **********-->\\n\\n&#x3C;component name=\\\"labeltest\\\" extends=\\\"Group\\\" >\\n\\n&#x3C;script type=\\\"text/brightscript\\\" >\\n&#x3C;![CDATA[\\n\\n  sub init()\\n    m.top.setFocus(true)\\n  end sub\\n\\n]]>\\n&#x3C;/script>\\n\\n&#x3C;Label\\n  id=\\\"testLabel\\\"\\n  height=\\\"44\\\"\\n  width=\\\"0\\\"\\n  font=\\\"font:MediumBoldSystemFont\\\"\\n  text = \\\"Application Development Made Easy!\\\"\\n  horizAlign = \\\"left\\\"\\n  vertAlign = \\\"center\\\"\\n  translation=\\\"[318,8]\\\" />\\n\\n&#x3C;/component>\\n</code></pre>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<p>Fields derived from the <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md#fields\\\" title=\\\"Fields\\\">Group</a> and <a href=\\\"/docs/references/scenegraph/label-nodes/label-base.md#fields\\\">LabelBase</a> classes can be used.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>lineSpacing</td>\\n<td>float</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>If the text is displayed on more than one line, specifies the amount of additional space added between lines</td>\\n</tr>\\n<tr>\\n<td>displayPartialLines</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>If the height field value is greater than zero, used to determine whether or not the last line of visible text is displayed if it would be clipped vertically</td>\\n</tr>\\n<tr>\\n<td>truncateOnDelimiter</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>If the width field value is greater than zero, provides a set of characters that are used to determine how to truncate the last line of text that is displayed if it extends beyond the specified width. If none of the characters in the last line of text are included in the truncateOnDelimiter field value string, the entire last line is not displayed. When the value is set to a non-empty string, the ellipsizeOnBoundary field value is ignored</td>\\n</tr>\\n<tr>\\n<td>leadingEllipsis<br /><br /><em>Available since Roku OS 11.0</em></td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether to display the end or beginning of text that overflows its available width:<br /><ul>\\n<li><strong>true</strong>. The end of the text is shown. For example, \\\"the quick brown fox jumps over the lazy dog\\\" would be truncated to \\\"...jumps over the lazy dog\\\". </li>\\n<li><strong>false</strong>. The start of the text is shown (for example, \\\"the quick brown fox jumps...\\\").</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/screen%20elements/renderable%20nodes/LabelExample\\\">sample channel</a> that demonstrates how to use the Label node.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/label-nodes/info-pane.md":"{\n  \"content\": \"<h1 id=\\\"infopane\\\">InfoPane</h1>\\n<p><em>Available since Roku OS 10.5</em></p>\\n<p>The <strong>InfoPane</strong> node class is used to display an opaque, white-bordered, rounded rectangular label with text providing help for a specific setting. This component can be used to help customers successfully configure settings related to their account profile, closed captioning, parental controls, and so on.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/infopane.jpg\\\" alt=\\\"roku815px - info-pane\\\" title=\\\"info-pane\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>infoText</td>\\n<td>string</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>The text to be displayed in the label.</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>The width of the label.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>The height of the label.</td>\\n</tr>\\n<tr>\\n<td>textColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>The color of the text displayed in the label.</td>\\n</tr>\\n<tr>\\n<td>bulletText</td>\\n<td>array of strings</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>List of strings preceded by a bullet (for example,  [\\\"Bullet 1\\\",\\\"Bullet 2\\\"]).</td>\\n</tr>\\n<tr>\\n<td>infoText2</td>\\n<td>string</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>A second text string that can be offset from the first.</td>\\n</tr>\\n<tr>\\n<td>infoText2Color</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the <strong>infoText2</strong> string color</td>\\n</tr>\\n<tr>\\n<td>infoText2BottomAlign</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the <strong>infoText2</strong> string is vertically aligned to the bottom of the info pane</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/screen%20elements/renderable%20nodes/InfoPaneExample\\\">sample channel</a> that demonstrates how to use the MultiStyleLabel node.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/animation-nodes/animation.md":"{\n  \"content\": \"<h1 id=\\\"animation\\\">Animation</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/abstract-nodes/animationbase.md\\\"><strong>AnimationBase</strong></a></p>\\n<p>The Animation node class provides animations of renderable nodes, by applying interpolator functions to the values in specified renderable node fields. For an animation to take effect, an Animation node definition must include a child field interpolator node (<a href=\\\"/docs/references/scenegraph/animation-nodes/floatfieldinterpolator.md\\\" title=\\\"FloatFieldInterpolator\\\">FloatFieldInterpolator</a>, <a href=\\\"/docs/references/scenegraph/animation-nodes/vector2dfieldinterpolator.md\\\" title=\\\"Vector2DFieldInterpolator\\\">Vector2DFieldInterpolator</a>, <a href=\\\"/docs/references/scenegraph/animation-nodes/colorfieldinterpolator.md\\\" title=\\\"ColorFieldInterpolator\\\">ColorFieldInterpolator</a>) definition for each renderable node field that is animated.</p>\\n<p>The Animation node class provides a simple linear interpolator function, where the animation takes place smoothly and simply from beginning to end. The Animation node class also provides several more complex interpolator functions to allow custom animation effects. For example, you can move a graphic image around the screen at differing speeds and curved trajectories at different times in the animation by specifying the appropriate function in the easeFunction field (quadratic and exponential are two examples of functions that can be specified). The interpolator functions are divided into two parts: the beginning of the animation (ease-in), and the end of the animation (ease-out). You can apply a specified interpolator function to either or both ease-in and ease-out, or specify no function for either or both (which is the linear function). You can also change the portion of the animation that is ease-in and ease-out to arbitrary fractional values for a quadratic interpolator function applied to both ease-in and ease-out.</p>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids/PosterGridExampleanimation-markup.md\\\" title=\\\"Animation Markup\\\">Animation Markup</a> in the <a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids/PosterGridExampleoverview.md\\\" title=\\\"SceneGraph Samples\\\">SceneGraph Samples</a> provides several simple examples of Animation node definitions that use all of the field interpolator nodes. Other simple examples of using the field interpolators can be found in the <a href=\\\"/docs/references/scenegraph/animation-nodes/floatfieldinterpolator.md\\\" title=\\\"FloatFieldInterpolator\\\">FloatFieldInterpolator</a>, <a href=\\\"/docs/references/scenegraph/animation-nodes/vector2dfieldinterpolator.md\\\" title=\\\"Vector2DFieldInterpolator\\\">Vector2DFieldInterpolator</a>, and <a href=\\\"/docs/references/scenegraph/animation-nodes/colorfieldinterpolator.md\\\" title=\\\"ColorFieldInterpolator\\\">ColorFieldInterpolator</a>.</p>\\n<p>The following example shows how to use some simple animations. It uses two Animation nodes, each with its own Vector2DFieldInterpolator. The first defines a translation animation of the poster image, and the second defines a scale animation. They are both launched in an init() function using BrightScript. When run together, the effect is to \\\"bloom\\\" the poster image on the screen.</p>\\n<h4 id=\\\"animation-brightscript-example\\\">Animation BrightScript example</h4>\\n<pre><code>function init()\\n   scaleAnimation = m.top.FindNode(\\\"scaleAnimation\\\")\\n   transAnimation = m.top.FindNode(\\\"transAnimation\\\")\\n   scaleAnimation.control = \\\"start\\\"\\n   transAnimation.control = \\\"start\\\"\\nend function\\n</code></pre>\\n<h4 id=\\\"animation-xml-example\\\">Animation XML example</h4>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n&#x3C;component name=\\\"SimpleScaleAnimation\\\" extends=\\\"Group\\\" >\\n&#x3C;script type=\\\"text/brightscript\\\" uri=\\\"pkg:/xml/SimpleAnimation.brs\\\" />\\n\\n&#x3C;children>\\n\\n&#x3C;Poster id=\\\"myPoster\\\"\\n    opacity=\\\"1.0\\\"\\n    uri=\\\"pkg:/images/myImage.jpg\\\" />\\n&#x3C;Animation id=\\\"scaleAnimation\\\"\\n       duration=\\\"1\\\"\\n       repeat=\\\"true\\\"\\n       easeFunction=\\\"linear\\\" >\\n    &#x3C;Vector2DFieldInterpolator id = \\\"myInterp\\\"\\n    key=\\\"[0.0, 0.25, 0.5, 0.75, 1.0]\\\"\\n    keyValue=\\\"[ [0.0, 0.0], [0.25, 0.25], [0.5, 0.5], [0.75, 0.75], [1.0, 1.0]]\\\"\\n    fieldToInterp=\\\"myPoster.scale\\\" />\\n&#x3C;/Animation>\\n&#x3C;Animation id=\\\"transAnimation\\\"\\n       duration=\\\"1\\\"\\n       repeat=\\\"true\\\"\\n       easeFunction=\\\"linear\\\" >\\n    &#x3C;Vector2DFieldInterpolator id = \\\"myInterp2\\\"\\n        key=\\\"[0.0, 1.0]\\\"\\n        keyValue=\\\"[ [640.0, 320.0], [100.0, 100.0] ]\\\"\\n    fieldToInterp=\\\"myPoster.translation\\\" />\\n&#x3C;/Animation>\\n\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>duration</td>\\n<td>Time</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Sets the duration of the animation in seconds</td>\\n</tr>\\n<tr>\\n<td>easeFunction</td>\\n<td>string</td>\\n<td>\\\"outCubic\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the interpolator function to be used for the animation: <table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Ease-In/Ease-Out Function</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>linear</td>\\n<td>No ease-in or ease-out</td>\\n</tr>\\n<tr>\\n<td>inQuad</td>\\n<td>Quadratic ease-in function, no ease-out</td>\\n</tr>\\n<tr>\\n<td>inCubic</td>\\n<td>Cubic ease-in function, no ease-out</td>\\n</tr>\\n<tr>\\n<td>inQuartic</td>\\n<td>Quartic ease-in function, no ease-out</td>\\n</tr>\\n<tr>\\n<td>inQuintic</td>\\n<td>Quintic ease-in function, no ease-out</td>\\n</tr>\\n<tr>\\n<td>inExpo</td>\\n<td>Exponential ease-in function, no ease-out</td>\\n</tr>\\n<tr>\\n<td>outQuad</td>\\n<td>Quadratic ease-out function, no ease-in</td>\\n</tr>\\n<tr>\\n<td>outCubic</td>\\n<td>Cubic ease-out function, no ease-in</td>\\n</tr>\\n<tr>\\n<td>outQuartic</td>\\n<td>Quartic ease-out function, no ease-in</td>\\n</tr>\\n<tr>\\n<td>outQuintic</td>\\n<td>Quintic ease-out function, no ease-in</td>\\n</tr>\\n<tr>\\n<td>outExpo</td>\\n<td>Exponential ease-out function, no ease-in</td>\\n</tr>\\n<tr>\\n<td>inOutQuad</td>\\n<td>Quadratic ease-in and ease-out function</td>\\n</tr>\\n<tr>\\n<td>inOutCubic</td>\\n<td>Cubic ease-in and ease-out function</td>\\n</tr>\\n<tr>\\n<td>inOutQuartic</td>\\n<td>Quartic ease-in and ease-out function</td>\\n</tr>\\n<tr>\\n<td>inOutQuintic</td>\\n<td>Quintic ease-in and ease-out function</td>\\n</tr>\\n<tr>\\n<td>inOutExpo</td>\\n<td>Exponential ease-in and ease-out function</td>\\n</tr>\\n<tr>\\n<td>piecewise</td>\\n<td>Quadratic ease-in and ease-out function with extra control over the percentage of the duration during which ease-in and ease-out occurs. The extra control is specified using the <code>easeInPercent</code> and <code>easeOutPercent</code> fields.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>easeInPercent</td>\\n<td>float</td>\\n<td>0.5</td>\\n<td>READ_WRITE</td>\\n<td>If easeFunction is set to piecewise, easeInPercent sets the percentage of the animation duration during which ease-in is applied. Note that the values of easeInPercent plus easeOutPercent must be less than or equal to 1. For all other values of easeFunction, easeInPercent is ignored</td>\\n</tr>\\n<tr>\\n<td>easeOutPercent</td>\\n<td>float</td>\\n<td>0.5</td>\\n<td>READ_WRITE</td>\\n<td>If easeFunction is set to piecewise, easeOutPercent sets the percentage of the animation duration during which ease-out is applied. Note that the values of easeInPercent plus easeOutPercent must be less than or equal to 1. For all other values of easeFunction, easeOutPercent is ignored</td>\\n</tr>\\n<tr>\\n<td>optional</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Set to true to skip animations on lower performing Roku devices (Paolo, Giga, Jackson, Tyler, and Sugarland). See <a href=\\\"/docs/specs/hardware.md#current-models\\\" title=\\\"Roku Devices\\\">Roku Devices</a> for model numbers and code names. When an Animation has optional set to true, setting the control field to start will cause the state field to change to running and immediately change again to finished. These state changes allow any logic tied to state field observers that run at the start and end of the Animation to be properly called</td>\\n</tr>\\n<tr>\\n<td>willBeSkipped<br /><br />(<em>Available since Roku OS 10.0</em>)</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_ONLY</td>\\n<td>Indicates whether the animation runs or jumps to the end (effectively skipping the animation and rendering it in its final state).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/animation\\\">SimpleAnimation</a> demonstrates Animation in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/animation-nodes/sequentialanimation.md":"{\n  \"content\": \"<h1 id=\\\"sequentialanimation\\\">SequentialAnimation</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/abstract-nodes/animationbase.md\\\"><strong>AnimationBase</strong></a></p>\\n<p>The SequentialAnimation node class allows you to specify that a set of animations should occur sequentially. The children of the SequentialAnimation node specify the set of animations to be executed. Note that the use of the delay field in the child animations allows a delay between any two animations to be specified, if desired.</p>\\n<p>The state field is set to running when any of the child animations is in progress. Once all the animations have run to completion, the state field is set to stopped. </p>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p>The following example animates a group of rectangles to expand and change opacity sequentially from left to right. </p>\\n<h4 id=\\\"sequentialanimation-node-class-example\\\">SequentialAnimation Node Class Example</h4>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;!--********** Copyright 2015 Roku Corp.  All Rights Reserved. **********-->\\n\\n&#x3C;component name=\\\"animationsequentialtest\\\" extends=\\\"Group\\\" >\\n    &#x3C;script type=\\\"text/brightscript\\\" >\\n        &#x3C;![CDATA[\\n            function init()\\n              m.testsequentialanimation = m.top.FindNode(\\\"testSequentialAnimation\\\")\\n              m.testsequentialanimation.repeat = \\\"true\\\"\\n              m.testsequentialanimation.control = \\\"start\\\"\\n              m.top.setFocus(true)\\n            end function\\n         ]]>\\n    &#x3C;/script>\\n\\n&#x3C;children>\\n\\n    &#x3C;LayoutGroup   id = \\\"dancingbars\\\"  translation = \\\"[640,360]\\\"  itemSpacings = \\\"[10]\\\"  layoutDirection = \\\"horizontal\\\"  horizAlignment = \\\"center\\\"  vertAlignment = \\\"center\\\" >\\n        &#x3C;Rectangle      id=\\\"R1\\\"      color=\\\"0x00FF00FF\\\"      opacity = \\\".2\\\"     width = \\\"50\\\"      height = \\\"100\\\"      scaleRotateCenter = \\\"[25, 50]\\\"     translation = \\\"[0, 0]\\\"/>\\n        &#x3C;Rectangle      id=\\\"R2\\\"      color=\\\"0x00FF00FF\\\"      opacity = \\\".2\\\"     width = \\\"50\\\"      height = \\\"100\\\"      scaleRotateCenter = \\\"[25, 50]\\\"     translation = \\\"[60, 0]\\\"/>\\n        &#x3C;Rectangle      id=\\\"R3\\\"      color=\\\"0x00FF00FF\\\"      opacity = \\\".2\\\"     width = \\\"50\\\"      height = \\\"100\\\"      scaleRotateCenter = \\\"[25, 50]\\\"     translation = \\\"[120, 0]\\\"/>\\n        &#x3C;Rectangle      id=\\\"R4\\\"      color=\\\"0x00FF00FF\\\"      opacity = \\\".2\\\"     width = \\\"50\\\"      height = \\\"100\\\"      scaleRotateCenter = \\\"[25, 50]\\\"     translation = \\\"[180, 0]\\\"/>\\n        &#x3C;Rectangle      id=\\\"R5\\\"      color=\\\"0x00FF00FF\\\"      opacity = \\\".2\\\"     width = \\\"50\\\"      height = \\\"100\\\"      scaleRotateCenter = \\\"[25, 50]\\\"     translation = \\\"[240, 0]\\\"/>\\n    &#x3C;/LayoutGroup>\\n    &#x3C;Label   text = \\\"Bars Should Be Dancing\\\"  width = \\\"1280\\\"  translation = \\\"[0,500]\\\"  horizAlign = \\\"center\\\"  vertAlign = \\\"center\\\"  />\\n    &#x3C;SequentialAnimation   id = \\\"testSequentialAnimation\\\" >\\n    &#x3C;Animation        id = \\\"R1Animation\\\"       duration = \\\"2\\\"       easeFunction = \\\"linear\\\" >\\n        &#x3C;Vector2DFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ [1, 1], [1, 2], [1, 1] ]\\\"    fieldToInterp=\\\"R1.scale\\\" />        \\n        &#x3C;FloatFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ 0.2, 1, 0.2 ]\\\"    fieldToInterp=\\\"R1.opacity\\\" />\\n    &#x3C;/Animation>\\n    &#x3C;Animation        id = \\\"R2Animation\\\"       duration = \\\"2\\\"       easeFunction = \\\"linear\\\" >\\n         &#x3C;Vector2DFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ [1, 1], [1, 2], [1, 1] ]\\\"    fieldToInterp=\\\"R2.scale\\\" />\\n         &#x3C;FloatFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ 0.2, 1, 0.2 ]\\\"    fieldToInterp=\\\"R2.opacity\\\" />\\n    &#x3C;/Animation>\\n    &#x3C;Animation        id = \\\"R3Animation\\\"       duration = \\\"2\\\"       easeFunction = \\\"linear\\\" >\\n        &#x3C;Vector2DFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ [1, 1], [1, 2], [1, 1] ]\\\"    fieldToInterp=\\\"R3.scale\\\" />\\n        &#x3C;FloatFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ 0.2, 1, 0.2 ]\\\"    fieldToInterp=\\\"R3.opacity\\\" />\\n    &#x3C;/Animation>\\n    &#x3C;Animation        id = \\\"R4Animation\\\"       duration = \\\"2\\\"       easeFunction = \\\"linear\\\" >\\n        &#x3C;Vector2DFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ [1, 1], [1, 2], [1, 1] ]\\\"    fieldToInterp=\\\"R4.scale\\\" />\\n        &#x3C;FloatFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ 0.2, 1, 0.2 ]\\\"    fieldToInterp=\\\"R4.opacity\\\" />\\n    &#x3C;/Animation>\\n    &#x3C;Animation       id = \\\"R5Animation\\\"      duration = \\\"2\\\"      easeFunction = \\\"linear\\\" >\\n        &#x3C;Vector2DFieldInterpolator   key= \\\"[0, 0.5, 1]\\\"   keyValue= \\\"[ [1, 1], [1, 2], [1, 1] ]\\\"   fieldToInterp=\\\"R5.scale\\\" />\\n        &#x3C;FloatFieldInterpolator   key= \\\"[0, 0.5, 1]\\\"   keyValue= \\\"[ 0.2, 1, 0.2 ]\\\"   fieldToInterp=\\\"R5.opacity\\\" />\\n    &#x3C;/Animation>\\n    &#x3C;/SequentialAnimation>\\n\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/animation/AnimationSequentialExample\\\">AnimationSequentialExample</a> is a sample channel demonstrating SequentialAnimation in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/animation-nodes/parallelanimation.md":"{\n  \"content\": \"<h1 id=\\\"parallelanimation\\\">ParallelAnimation</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/abstract-nodes/animationbase.md\\\"><strong>AnimationBase</strong></a></p>\\n<p>The ParallelAnimation node class allows you to specify that a set of animations should occur simultaneously. The children of a ParallelAnimation node specify the set of animations to be executed. Note that the use of the delay field in the child animations allows the start of the child animations to be offset from one another, if desired.</p>\\n<p>The state field is set to running when any of the child animations is in progress. Once all the animations have run to completion, the state field is set to stopped. </p>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p>The following example animates a group of rectangles to expand and change opacity at the same time. </p>\\n<h4 id=\\\"parallelanimation-node-class-example\\\">ParallelAnimation Node Class Example</h4>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;!--********** Copyright 2015 Roku Corp.  All Rights Reserved. **********-->\\n\\n&#x3C;component name=\\\"animationparalleltest\\\" extends=\\\"Group\\\" >\\n    &#x3C;script type=\\\"text/brightscript\\\" >\\n        &#x3C;![CDATA[\\n            function init()\\n              m.testparallelanimation = m.top.FindNode(\\\"testParallelAnimation\\\")\\n              m.testparallelanimation.repeat = \\\"true\\\"\\n              m.testparallelanimation.control = \\\"start\\\"\\n              m.top.setFocus(true)\\n            end function\\n        ]]>\\n    &#x3C;/script>\\n\\n&#x3C;children>\\n\\n    &#x3C;LayoutGroup   id = \\\"dancingbars\\\"  translation = \\\"[640,360]\\\"  itemSpacings = \\\"[10]\\\"  layoutDirection = \\\"horizontal\\\"  horizAlignment = \\\"center\\\"  vertAlignment = \\\"center\\\" >\\n      &#x3C;Rectangle      id=\\\"R1\\\"      color=\\\"0x00FF00FF\\\"      opacity = \\\".2\\\"     width = \\\"50\\\"      height = \\\"100\\\"      scaleRotateCenter = \\\"[25, 50]\\\"     translation = \\\"[0, 0]\\\"/>\\n      &#x3C;Rectangle      id=\\\"R2\\\"      color=\\\"0x00FF00FF\\\"      opacity = \\\".2\\\"     width = \\\"50\\\"      height = \\\"100\\\"      scaleRotateCenter = \\\"[25, 50]\\\"     translation = \\\"[60, 0]\\\"/>\\n      &#x3C;Rectangle      id=\\\"R3\\\"      color=\\\"0x00FF00FF\\\"      opacity = \\\".2\\\"     width = \\\"50\\\"      height = \\\"100\\\"      scaleRotateCenter = \\\"[25, 50]\\\"     translation = \\\"[120, 0]\\\"/>\\n      &#x3C;Rectangle      id=\\\"R4\\\"      color=\\\"0x00FF00FF\\\"      opacity = \\\".2\\\"     width = \\\"50\\\"      height = \\\"100\\\"      scaleRotateCenter = \\\"[25, 50]\\\"     translation = \\\"[180, 0]\\\"/>\\n      &#x3C;Rectangle      id=\\\"R5\\\"      color=\\\"0x00FF00FF\\\"      opacity = \\\".2\\\"     width = \\\"50\\\"      height = \\\"100\\\"      scaleRotateCenter = \\\"[25, 50]\\\"     translation = \\\"[240, 0]\\\"/>\\n    &#x3C;/LayoutGroup>\\n    &#x3C;Label   text = \\\"Bars Should Be Dancing\\\"  width = \\\"1280\\\"  translation = \\\"[0,500]\\\"  horizAlign = \\\"center\\\"  vertAlign = \\\"center\\\"  />\\n    &#x3C;ParallelAnimation   id = \\\"testParallelAnimation\\\" > &#x3C;!--** ParallelAnimation   id = \\\"testParallelAnimation\\\"   repeat = \\\"true\\\" **-->\\n    &#x3C;Animation id = \\\"R1Animation\\\" duration = \\\"2\\\" easeFunction = \\\"linear\\\" >\\n        &#x3C;Vector2DFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ [1, 1], [1, 2], [1, 1] ]\\\"    fieldToInterp=\\\"R1.scale\\\" /> \\n        &#x3C;FloatFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ 0.2, 1, 0.2 ]\\\"    fieldToInterp=\\\"R1.opacity\\\" />\\n    &#x3C;/Animation>\\n     &#x3C;Animation        id = \\\"R2Animation\\\"       duration = \\\"2\\\"       easeFunction = \\\"linear\\\" > \\n         &#x3C;Vector2DFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ [1, 1], [1, 2], [1, 1] ]\\\"    fieldToInterp=\\\"R2.scale\\\" />\\n             &#x3C;FloatFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ 0.2, 1, 0.2 ]\\\"    fieldToInterp=\\\"R2.opacity\\\" />\\n     &#x3C;/Animation>\\n     &#x3C;Animation        id = \\\"R3Animation\\\"       duration = \\\"2\\\"       easeFunction = \\\"linear\\\" > \\n         &#x3C;Vector2DFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ [1, 1], [1, 2], [1, 1] ]\\\"    fieldToInterp=\\\"R3.scale\\\" />\\n             &#x3C;FloatFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ 0.2, 1, 0.2 ]\\\"    fieldToInterp=\\\"R3.opacity\\\" />\\n     &#x3C;/Animation>\\n     &#x3C;Animation        id = \\\"R4Animation\\\"       duration = \\\"2\\\"       easeFunction = \\\"linear\\\" >\\n         &#x3C;Vector2DFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ [1, 1], [1, 2], [1, 1] ]\\\"    fieldToInterp=\\\"R4.scale\\\" />\\n             &#x3C;FloatFieldInterpolator    key= \\\"[0, 0.5, 1]\\\"    keyValue= \\\"[ 0.2, 1, 0.2 ]\\\"    fieldToInterp=\\\"R4.opacity\\\" />\\n     &#x3C;/Animation>\\n     &#x3C;Animation       id = \\\"R5Animation\\\"      duration = \\\"2\\\"      easeFunction = \\\"linear\\\" >\\n         &#x3C;Vector2DFieldInterpolator   key= \\\"[0, 0.5, 1]\\\"   keyValue= \\\"[ [1, 1], [1, 2], [1, 1] ]\\\"   fieldToInterp=\\\"R5.scale\\\" />\\n         &#x3C;FloatFieldInterpolator   key= \\\"[0, 0.5, 1]\\\"   keyValue= \\\"[ 0.2, 1, 0.2 ]\\\"   fieldToInterp=\\\"R5.opacity\\\" />\\n     &#x3C;/Animation>\\n    &#x3C;/ParallelAnimation>\\n\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/animation/AnimationParallelExample\\\">AnimationParallelExample</a> is a sample channel demonstrating ParallelAnimation in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/animation-nodes/colorfieldinterpolator.md":"{\n  \"content\": \"<h1 id=\\\"colorfieldinterpolator\\\">ColorFieldInterpolator</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\"><strong>Node</strong></a></p>\\n<p>The ColorFieldInterpolator node class specifies a keyframe animation sequence to be applied to the color field of a node (such as the color field of a Label node).</p>\\n<p>All field interpolators include a set of key/keyValue field pairs that define a keyframe of the animation. Field interpolators are generally used as children of an Animation node. As the animation progresses, it sets the fraction field of its field interpolators to a value between 0 and 1, indicating the fraction of the animation progress. The keyframe fields of the interpolator are key, the percentage where the keyframe should occur, and keyValue, the value that the field should have at that fraction of the animation.</p>\\n<p>For example, if a ColorFieldInterpolator node had three keyframes:</p>\\n<ul>\\n<li>0.0, 0xFF0000FF (red)</li>\\n<li>0.4, 0x00FF00FF (green)</li>\\n<li>1.0, 0x0000FFFF (blue)</li>\\n</ul>\\n<p>When the interpolator fraction field value was 0.0 (that is, 0%), the color field value would be set to red. When the fraction field value was 0.4 (that is, 40%), the color field value would be set to green. When the fraction field value was 1.0 (that is, 100%), the color field value would be set to blue.</p>\\n<p>For values of the fraction field between 0.0 and 0.4 (such as 0.2 or 20%), the field value is determined by linearly interpolating the keyValue field values for the first two keyframes. In this case, since the key of 0.2 is halfway between the key at 0.0 and the key at 0.4, the field would be set to a color halfway between red and green. Similarly, when the fraction field value is between the second and third keys (that is, between 0.4 and 1.0), the field value is determined by linearly interpolating the keyValue field values of the second and third keyframes.</p>\\n<p>If the first keyframe has a key field fraction value greater than zero, then the field value is equal to the keyValue field value of the first keyframe until the fraction field value reaches the first keyframe key field fraction value. Similarly, if the last keyframe has a key field fraction value less than one, the color field value is set to the keyValue field value of the last keyframe, from when the fraction field value equals the last keyframe key field fraction value percentage, and will not change as the fraction field value increases from that value to 1.0.</p>\\n<p>The ColorFieldInterpolator node class works in the HSV color space. Doing the interpolation in the HSV color space produces the most intuitive, visually pleasing results when animating color values.</p>\\n<blockquote>\\n<p>While linear interpolation is used to compute the keyValue field values for fraction field values between successive keys, non-linear easing functions may be applied to the fraction field values computed by the Animation node, so the overall animation may vary in speed.</p>\\n</blockquote>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p>The following changes the color of a rectangle, from blue to very dark blue, and back to blue, in 10 seconds, repeatedly.  </p>\\n<h4 id=\\\"colorfieldinterpolator-node-class-example\\\">ColorFieldInterpolator Node Class Example</h4>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;!--********** Copyright 2015 Roku Corp.  All Rights Reserved. **********-->\\n\\n    &#x3C;component name=\\\"animationcolortest\\\" extends=\\\"Group\\\" >\\n\\n        &#x3C;script type=\\\"text/brightscript\\\" >\\n            &#x3C;![CDATA[\\n                function init()\\n                   m.top.setFocus(true)\\n                end function\\n            ]]>\\n        &#x3C;/script>\\n\\n&#x3C;children>\\n\\n    &#x3C;Rectangle   id=\\\"testRectangle\\\"   color=\\\"0x0000CCFF\\\"   width=\\\"810\\\"   height=\\\"44\\\"   translation=\\\"[310,8]\\\" />\\n    &#x3C;Animation   id=\\\"testAnimation\\\"  duration=\\\"10\\\"  repeat=\\\"true\\\"  control=\\\"start\\\"  easeFunction=\\\"linear\\\" >\\n        &#x3C;ColorFieldInterpolator id = \\\"testColor\\\"   key=\\\"[0.0, 0.5, 1.0]\\\"    keyValue=\\\"[ 0x0000CCFF, 0x00000FFF, 0x0000CCFF ]\\\"       fieldToInterp=\\\"testRectangle.color\\\"   />\\n    &#x3C;/Animation>\\n\\n\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldToInterp</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the field to interpolate. This generally refers to the field on a SceneGraph node that contains the color to animate, such as testRectangle.color field in the example below</td>\\n</tr>\\n<tr>\\n<td>key</td>\\n<td>array of floats</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the key fractions for the interpolator keyframes. Each key fraction should be a unique value from 0 to 1 indicating the fraction of the animation where the keyValue field value should occur. Behavior is undefined if the number of values in the key field does not match the number of values in the keyValue field</td>\\n</tr>\\n<tr>\\n<td>keyValue</td>\\n<td>array of colors</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the key values for the interpolator keyframes. Each value in the keyValue field array corresponds to a value in the key field array. Behavior is undefined if the number of values in the key field does not match the number of values in the keyValue field</td>\\n</tr>\\n<tr>\\n<td>fraction</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the fraction to be used to compute a value for the field</td>\\n</tr>\\n<tr>\\n<td>reverse</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Enables animation to be played in reverse</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/animation/AnimationColorExample\\\">AnimationColorExample</a> is a sample channel demonstrating ColorFieldInterpolator in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/animation-nodes/floatfieldinterpolator.md":"{\n  \"content\": \"<h1 id=\\\"floatfieldinterpolator\\\">FloatFieldInterpolator</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\"><strong>Node</strong></a></p>\\n<p>The FloatFieldInterpolator node class specifies a keyframe animation sequence to be applied to a floating point field of a node (such as, an opacity, width or height value.)</p>\\n<p>All field interpolators include a set of key/keyValue pairs that define a keyframe of the animation. Field interpolators are generally used as children of an Animation node. As the animation progresses, it sets the fraction field of its field interpolators to a value between 0 and 1, indicating the percentage of the Animation's progress. The keyframes of the interpolator include a \\\"key\\\", the percentage where the keyframe should occur, and a \\\"keyValue\\\", the value that the field should have at that percentage.</p>\\n<p>For example, if a FloatFieldInterpolator had three keyframes, (0.0, 10.0), (0.4, 200.0) and (1.0, 87.0), then when the interpolator's fraction field was 0.0 (i.e. 0%), the field would be set to 10.0. When fraction was 0.4 (i.e. 40%), the field would be set to 200.0. When fraction was 1.0 (i.e. 100%), the field would be set to 87.0.</p>\\n<p>For values of fraction between 0.0 and 0.4 (e.g. 0.2 or 20%), the field value is determined by linearly interpolating the keyValues for the first two keyframes. In this case, since the key of 0.2 is halfway between the key at 0.0 and the key at 0.4, the field would be set to 10.0 + 0.5 * (10.0 + 200.0) = 105.0. Similarly, when fraction is between the second and third keys (i.e. between 0.4 and 1.0), the field value is determined by linearly interpolating the keyValues of the second and third keyframes.</p>\\n<p>If the first keyframe has a key percentage greater than zero, then the field value will be equal to the keyValue of the first keyframe until fraction reaches the first keyframe's key percentage. Similarly, if the last keyframe has a key percentage less than one, the field value will be set to the keyValue of the last keyframe from when fraction equals the the last keyframe's key percentage and will not change as fraction increases from that value to 1.0.</p>\\n<blockquote>\\n<p>While linearly interpolation is used to compute the keyValue's for fraction values between successive keys, non-linear easing functions may be applied to the fraction values computed by the Animation node, so the overall animation may vary in speed.</p>\\n</blockquote>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p>The following changes the opacity of a graphical image, gradually making it invisible, then back to visible, in 10 seconds, repeatedly.</p>\\n<h4 id=\\\"floatfieldinterpolator-node-class-example\\\">FloatFieldInterpolator Node Class Example</h4>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;!--********** Copyright 2015 Roku Corp.  All Rights Reserved. **********-->\\n\\n    &#x3C;component name=\\\"animationfloattest\\\" extends=\\\"Group\\\" >\\n\\n        &#x3C;script type=\\\"text/brightscript\\\" >\\n            &#x3C;![CDATA[\\n                function init()\\n                    m.top.setFocus(true)\\n                end function\\n            ]]>\\n        &#x3C;/script>\\n\\n&#x3C;children>\\n\\n    &#x3C;Poster  id=\\\"testPoster\\\"  uri=\\\"pkg:/images/rokuowds.png\\\"  width=\\\"0.0\\\"  height=\\\"0.0\\\"  translation=\\\"[160,8]\\\"  opacity=\\\"0.0\\\" />\\n    &#x3C;Animation   id=\\\"testAnimation\\\"  duration=\\\"10\\\"  repeat=\\\"true\\\"  control=\\\"start\\\"  easeFunction=\\\"linear\\\" >\\n        &#x3C;FloatFieldInterpolator    id = \\\"testFloat\\\"   key=\\\"[0.0, 0.5, 1.0]\\\"    keyValue=\\\"[ 1.0, 0.0, 1.0 ]\\\"       fieldToInterp=\\\"testPoster.opacity\\\"   />\\n    &#x3C;/Animation>\\n\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldToInterp</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the field to interpolate. The string should contain the ID of a node in the scene and the name of a field of that node, separated by a dot \\\".\\\". For example, \\\"title.width\\\" would indicate that the interpolator should be applied to the width field of a node whose id field was \\\"title\\\". The specified field must be of type float</td>\\n</tr>\\n<tr>\\n<td>key</td>\\n<td>array of float's</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the key percentages for the interpolator's keyframes. Each key percentage should be a unique value from 0 to 1 indicating the percentage of the animation where the keyValue should occur. Behavior is undefined if the number of values in the key field does not match the number of values in the keyValue field</td>\\n</tr>\\n<tr>\\n<td>keyValue</td>\\n<td>array of float's</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the key values or the interpolator's keyframes. Each value in the keyValue array corresponds to a value in the key field's array. The interpolator's behavior is undefined if the number of values in the key field does not match the number of values in the keyValue field</td>\\n</tr>\\n<tr>\\n<td>fraction</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the percentage to be used to compute a value for the field</td>\\n</tr>\\n<tr>\\n<td>reverse</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Enables animation to be played in reverse.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/animation/AnimationFloatExample\\\">AnimationFloatExample</a> is a sample channel demonstrating FloatFieldInterpolator in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/animation-nodes/vector2dfieldinterpolator.md":"{\n  \"content\": \"<h1 id=\\\"vector2dfieldinterpolator\\\">Vector2DFieldInterpolator</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\"><strong>Node</strong></a></p>\\n<p>Vector2DFieldInterpolator specifies a keyframe animation sequence to be applied to a pair Vector2D field of a node. Most typically, this is used to animate the (x,y) coordinates of a node's translation field.</p>\\n<p>All field interpolators include a set of key/keyValue pairs that define a keyframe of the animation. Field interpolators are generally used as children of an Animation node. As the animation progresses, it sets the fraction field of its field interpolators to a value between 0 and 1, indicating the percentage of the Animation's progress. The keyframes of the interpolator include a \\\"key\\\", the percentage where the keyframe should occur, and a \\\"keyValue\\\", the value that the field should have at that percentage.</p>\\n<p>For example, if a Vector2DFieldInterpolator had three keyframes, (0.0, [0.0, 0.0]), (0.4, [500.0, 0.0]) and (1.0, [500, 200.0]), then when the interpolator's fraction field was 0.0 (i.e. 0%), the field would be set to [0.0, 0.0]. When fraction was 0.4 (i.e. 40%), the field would be set to [500.0, 0.0]. When fraction was 1.0 (i.e. 100%), the field would be set to [500.0, 200.0].</p>\\n<p>For values of fraction between 0.0 and 0.4 (e.g. 0.2 or 20%), the field value is determined by linearly interpolating the keyValues for the first two keyframes. In this case, since the key of 0.2 is halfway between the key at 0.0 and the key at 0.4, the field would be set to [250.0, 0.0] (halfway between the point [0.0, 0.0] and [200.0, 0.0]. Similarly, when fraction is between the second and third keys (i.e. between 0.4 and 1.0), the field value is determined by linearly interpolating the keyValues of the second and third keyframes.</p>\\n<p>For this example, if the field being interpolated were the translation field of a Poster node parented to the Scene node, the Poster would originally be positioned with its top/left corner at the upper, left corner of the screen. As the animation proceeded from 0% to 40% complete, the Poster would slide horizontally to the right until it's top/left corner was at x=500.0, y=0.0. As the animation continued from 40% to 100% complete, the Poster would slide vertically down until its top/left corner was at x=500.0, y=200.0.</p>\\n<p>If the first keyframe has a key percentage greater than zero, then the field value will be equal to the keyValue of the first keyframe until fraction reaches the first keyframe's key percentage. Similarly, if the last keyframe has a key percentage less than one, the field value will be set to the keyValue of the last keyframe from when fraction equals the the last keyframe's key percentage and will not change as fraction increases from that value to 1.0.</p>\\n<blockquote>\\n<p>While linearly interpolation is used to compute the keyValue's for fraction values between successive keys, non-linear easing functions may be applied to the fraction values computed by the Animation node, so the overall animation may vary in speed.</p>\\n</blockquote>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p>The following scrolls the text string \\\"Application Development Made Easy!\\\" back and forth near the top of the display screen in 10 seconds, repeatedly.</p>\\n<h4 id=\\\"vector2dfieldinterpolator-node-class-example\\\">Vector2DFieldInterpolator Node Class Example</h4>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;!--********** Copyright 2015 Roku Corp.  All Rights Reserved. **********-->\\n\\n&#x3C;component name=\\\"animationv2dtest\\\" extends=\\\"Group\\\" >\\n\\n    &#x3C;script type=\\\"text/brightscript\\\" >\\n        &#x3C;![CDATA[\\n            function init()\\n                m.top.setFocus(true)\\n            end function\\n        ]]>\\n    &#x3C;/script>\\n\\n&#x3C;children>\\n\\n    &#x3C;Label\\n        id=\\\"testLabel\\\"\\n        height=\\\"44\\\"\\n        width=\\\"0\\\"\\n        font=\\\"font:MediumBoldSystemFont\\\"\\n        text = \\\"Application Development Made Easy!\\\"\\n        horizAlign = \\\"left\\\"\\n        vertAlign = \\\"center\\\"\\n        translation=\\\"[318,8]\\\" />\\n\\n        &#x3C;Animation\\n            id=\\\"testAnimation\\\"\\n            duration=\\\"10\\\"\\n            repeat=\\\"true\\\"\\n            control=\\\"start\\\"\\n            easeFunction=\\\"linear\\\">\\n            &#x3C;Vector2DFieldInterpolator\\n                id = \\\"testVector2D\\\"\\n                key=\\\"[0.0, 0.5, 1.0]\\\"\\n                keyValue=\\\"[ [318.0, 8.0], [656.0, 8.0], [318.0, 8.0] ]\\\"\\n                fieldToInterp=\\\"testLabel.translation\\\"   />\\n\\n        &#x3C;/Animation>\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fieldToInterp</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the field to interpolate. The string should contain the ID of a node in the scene and the name of a field of that node, separated by a dot \\\".\\\". For example, \\\"title.width\\\" would indicate that the interpolator should be applied to the width field of a node whose id field was \\\"title\\\". The specified field must be of type float</td>\\n</tr>\\n<tr>\\n<td>key</td>\\n<td>array of float's</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the key percentages for the interpolator's keyframes. Each key percentage should be a unique value from 0 to 1 indicating the percentage of the animation where the keyValue should occur. Behavior is undefined if the number of values in the key field does not match the number of values in the keyValue field</td>\\n</tr>\\n<tr>\\n<td>keyValue</td>\\n<td>array of float's</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the key values or the interpolator's keyframes. Each value in the keyValue array corresponds to a value in the key field's array. The interpolator's behavior is undefined if the number of values in the key field does not match the number of values in the keyValue field</td>\\n</tr>\\n<tr>\\n<td>fraction</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the percentage to be used to compute a value for the field</td>\\n</tr>\\n<tr>\\n<td>reverse</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Enables animation to be played in reverse.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/animation/AnimationV2DExample\\\">AnimationV2DExample</a> is a sample channel demonstrating Vector2DfieldInterpolator in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/typographic-nodes/font.md":"{\n  \"content\": \"<h1 id=\\\"font\\\">Font</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\"><strong>Node</strong></a></p>\\n<p>The Font node class specifies the font to be used by a Label node, or any other nodes that render text.</p>\\n<p>Nodes that use fonts include a field that stores a Font node. The font to use is specified by creating a Font node, and setting its uri and size fields.</p>\\n<p>The uri field can be set to any TrueType/OpenType font file. For example, to specify a font in XML markup:</p>\\n<pre><code>&#x3C;Label>\\n  &#x3C;Font role = \\\"font\\\" uri = \\\"pkg:/fonts/font.ttf\\\" size = \\\"24\\\" />\\n&#x3C;/Label>\\n</code></pre>\\n<p>A default system font can also be specified, such as in the following:</p>\\n<pre><code>&#x3C;Label id = \\\"myLabel\\\"\\n  width = \\\"200\\\"\\n  height = \\\"200\\\"\\n  text = \\\"Hello Label\\\"\\n  font = \\\"font:MediumBoldSystemFont\\\" \\n  />\\n</code></pre>\\n<p>Below is the list of all the possible system font values:</p>\\n<ul>\\n<li>SmallestSystemFont</li>\\n<li>SmallestBoldSystemFont</li>\\n<li>SmallSystemFont</li>\\n<li>SmallBoldSystemFont</li>\\n<li>MediumSystemFont</li>\\n<li>MediumBoldSystemFont</li>\\n<li>LargeSystemFont</li>\\n<li>LargeBoldSystemFont</li>\\n</ul>\\n<p>The font can also be specified in BrightScript, for example:</p>\\n<pre><code>label = CreateObject(\\\"roSGNode\\\", \\\"Label\\\")\\nfont  = CreateObject(\\\"roSGNode\\\", \\\"Font\\\")\\nfont.uri = \\\"pkg:/fonts/font.ttf\\\"\\nfont.size = 24\\nlabel.font = font\\n</code></pre>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>uri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a TrueType or OpenType font file. Currently only font files included in the application can be specified</td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td>integer</td>\\n<td>1</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the size of the font in points</td>\\n</tr>\\n<tr>\\n<td>fallbackGlyph</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>String representation of a Unicode character to display when an unsupported glyph is encountered. For example, \\\"u0020\\\" would render a space for any unrenderable characters</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/typographic-nodes/scrollinglabel.md":"{\n  \"content\": \"<h1 id=\\\"scrollinglabel\\\">ScrollingLabel</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a> </p>\\n<p>The ScrollingLabel node class provides an automatic way to make a string scroll horizontally if it does not fit within the specified width. If the string can be drawn within the specified maximum width it is just drawn. If it does not fit within the specified maximum width, it is drawn with an ellipsis (...) at the end, then it transitions to the full string, clipped to the maximum width that scrolls left to right until the end of the string is visible, then transition back to the partial string with the ellipsis at the end. By default, this repeats continuously unless the repeatCount field is set to limit the number of times the scrolling occurs.</p>\\n<h3 id=\\\"alignment\\\">Alignment</h3>\\n<p>The ScrollingLabel node class uses the horizAlign and vertAlign fields to allow you to position the rendered text relative to a specified bounding rectangle. </p>\\n<h4 id=\\\"horizontal-alignment\\\">Horizontal Alignment</h4>\\n<p>The horizAlign field allows you to position text horizontally relative to the maximum width of the label as specified by the maxWidth field.</p>\\n<p>There are three possible values for the horizAlign field:</p>\\n<ul>\\n<li>\\n<p>left \\nThe left edge of the text is drawn at the 0 x-coordinate position of the ScrollingLabel node's local coordinate system.</p>\\n</li>\\n<li>\\n<p>center \\nThe horizontal center of each line of text is positioned at the x-coordinate corresponding to half the computed width of the ScrollingLabel node's local coordinate system.</p>\\n</li>\\n<li>\\n<p>right \\nThe right edge of each line of text is positioned at x-coordinate position corresponding to the computed width of the ScrollingLabel node's local coordinate system.</p>\\n</li>\\n</ul>\\n<h4 id=\\\"vertical-alignment\\\">Vertical Alignment</h4>\\n<p>The vertAlign field allows you to position text vertically relative to the computed height of the label. The computed height is determined in one of two ways:</p>\\n<p>If the height field is greater than zero, the computed height is the value of the height field.</p>\\n<p>If the height field is zero, the computed height is the height of the line of rendered text, in which case the vertAlign field is ignored.</p>\\n<p>There are three possible values for the vertAlign field:</p>\\n<ul>\\n<li>\\n<p>top \\nThe top edge of the text is drawn at 0 y-coordinate position of the ScrollingLabel node's local coordinate system.</p>\\n</li>\\n<li>\\n<p>center \\nThe vertical center of the rendered text is positioned at y-coordinate position corresponding to half the computed height of the ScrollingLabel node's local coordinate system.</p>\\n</li>\\n<li>\\n<p>bottom \\nThe text is drawn so that bottom edge of the rendered text is positioned at the y-coordinate position corresponding to the computed height of the ScrollingLabel node's local coordinate system.</p>\\n</li>\\n</ul>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text to be displayed</td>\\n</tr>\\n<tr>\\n<td>color</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text color</td>\\n</tr>\\n<tr>\\n<td>font</td>\\n<td>Font</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the Font node to be used</td>\\n</tr>\\n<tr>\\n<td>maxWidth</td>\\n<td>float</td>\\n<td>500</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the maximum width of the rendered text. If the rendered text exceeds the maximum width, the scrolling behavior is automatically triggered</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the label. If set to zero, the actual height is determined by the value of the numLines field if it is greater than zero. See <a href=\\\"/docs/references/scenegraph/typographic-nodes/scrollinglabel.md#alignment\\\" title=\\\"Vertical Alignment\\\">Vertical Alignment</a></td>\\n</tr>\\n<tr>\\n<td>scrollSpeed</td>\\n<td>float</td>\\n<td>100</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the horizontal scrolling speed in pixels per second</td>\\n</tr>\\n<tr>\\n<td>repeatCount</td>\\n<td>float</td>\\n<td>-1</td>\\n<td>READ_WRITE</td>\\n<td>If set to the default value of -1, the text scrolling behavior repeats continuously. If set to zero, the text will remain ellipsized and never scroll. If set to a value greater than zero, the text will scroll the specified number of times, at the end of which the text is rendered with an ellipsis at the end</td>\\n</tr>\\n<tr>\\n<td>horizAlign</td>\\n<td>option string</td>\\n<td>left</td>\\n<td>READ_WRITE</td>\\n<td>See <a href=\\\"/docs/references/scenegraph/typographic-nodes/scrollinglabel.md#alignment\\\" title=\\\"Horizontal Alignment\\\">Horizontal Alignment</a></td>\\n</tr>\\n<tr>\\n<td>vertAlign</td>\\n<td>option string</td>\\n<td>top</td>\\n<td>READ_WRITE</td>\\n<td>See <a href=\\\"/docs/references/scenegraph/typographic-nodes/scrollinglabel.md#alignment\\\" title=\\\"Vertical Alignment\\\">Vertical Alignment</a></td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/text/ScrollingLabelExample\\\">ScrollingLabelExample</a> is a sample channel demonstrating ScrollingLabel in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/typographic-nodes/scrollabletext.md":"{\n  \"content\": \"<h1 id=\\\"scrollabletext\\\">ScrollableText</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a></p>\\n<p>The ScrollableText node class provides an interactive, vertically scrolling pane of text. This is typically used to display several paragraphs of text to the user that are too long to fit onto the display, such as a license agreement.</p>\\n<h3 id=\\\"alignment\\\">Alignment</h3>\\n<p>The ScrollableText node class uses the horizAlign and vertAlign fields to allow you to position the rendered text relative to a specified bounding rectangle.</p>\\n<h4 id=\\\"horizontal-alignment\\\">Horizontal Alignment</h4>\\n<p>The horizAlign field allows you to position text horizontally relative to the computed width of the ScrollableText node. The computed width is determined by subtracting the width of the scrollbar from the value specified by the width field.</p>\\n<p>There are three possible values for the horizAlign field:</p>\\n<ul>\\n<li>\\n<p>left \\nThe left edge of the text is drawn at the 0 x-coordinate position of the ScrollableText node's local coordinate system.</p>\\n</li>\\n<li>\\n<p>center \\nThe horizontal center of each line of text is positioned at the x-coordinate corresponding to half the computed width of the ScrollableText node's local coordinate system.</p>\\n</li>\\n<li>\\n<p>right \\nThe right edge of each line of text is positioned at x-coordinate position corresponding to the computed width of the ScrollableText node's local coordinate system.</p>\\n</li>\\n</ul>\\n<p>In most cases, the horizAlign field should remain set to left.</p>\\n<h4 id=\\\"vertical-alignment\\\">Vertical Alignment</h4>\\n<p>The vertAlign field allows you to position text vertically relative to the height of the ScrollableText node, as specified by the height field.</p>\\n<p>There are three possible values for the vertAlign field:</p>\\n<ul>\\n<li>\\n<p>top \\nThe top edge of the text is drawn at 0 y-coordinate position of the ScrollableText node's local coordinate system.</p>\\n</li>\\n<li>\\n<p>center \\nThe vertical center of the rendered text is positioned at y-coordinate position corresponding to half the computed height of the ScrollableText node's local coordinate system.</p>\\n</li>\\n<li>\\n<p>bottom \\nThe text is drawn so that bottom edge of the rendered text is positioned at the y-coordinate position corresponding to the computed height of the ScrollableText node's local coordinate system.</p>\\n</li>\\n</ul>\\n<p>In most cases, the vertAlign field should remain set to top.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text to be displayed</td>\\n</tr>\\n<tr>\\n<td>color</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text color</td>\\n</tr>\\n<tr>\\n<td>font</td>\\n<td>Font</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the Font node to be used</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width of the node. This includes both the area where the text is rendered in addition to the scroll bar on the right</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the node. If the text to be displayed is larger than this height, a scrollbar is automatically added on the right, allowing users to scroll up and down using the remote's arrow keys</td>\\n</tr>\\n<tr>\\n<td>lineSpacing</td>\\n<td>float</td>\\n<td>8</td>\\n<td>READ_WRITE</td>\\n<td>If the text is displayed on more than one line, specifies the amount of additional space added between lines</td>\\n</tr>\\n<tr>\\n<td>horizAlign</td>\\n<td>string</td>\\n<td>left</td>\\n<td>READ_WRITE</td>\\n<td>See <a href=\\\"/docs/references/scenegraph/typographic-nodes/scrollinglabel.md#alignment\\\" title=\\\"Horizontal Alignment\\\">Horizontal Alignment</a></td>\\n</tr>\\n<tr>\\n<td>vertAlign</td>\\n<td>string</td>\\n<td>top</td>\\n<td>READ_WRITE</td>\\n<td>See <a href=\\\"/docs/references/scenegraph/typographic-nodes/scrollinglabel.md#alignment\\\" title=\\\"Vertical Alignment\\\">Vertical Alignment</a></td>\\n</tr>\\n<tr>\\n<td>scrollbarTrackBitmapUri</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the URI of an image file to be loaded to replace the default scrollbar track. This should be a 9-patch image so that it can be stretched to the appropriate height specifed by the height field</td>\\n</tr>\\n<tr>\\n<td>scrollbarThumbBitmapUri</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the URI of an image file to be loaded to replace the default scrollbar thumb. This should be a 9-patch image so that it can be stretched to the appropriate size</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/text/ScrollableTextExample\\\">ScrollableTextExample</a> is a sample channel demonstrating ScrollableText in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/control-nodes/contentnode.md":"{\n  \"content\": \"<h1 id=\\\"contentnode\\\">ContentNode</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\"><strong>Node</strong></a></p>\\n<p>The ContentNode class allows you to specify the data used to configure a node or component. Many nodes and components require a ContentNode as the specification of their content field in order to be properly configured. In general, lists, grids, and panels require a ContentNode for configuration. The data included in a ContentNode can be data such as the text for labels in the node or component, and the spacing between items in a list, grid, or panel, including data to create custom lists, grids, and panels. The reference information for every node or component that requires a ContentNode includes a section that details the requirements of the ContentNode for that node or component.</p>\\n<p>ContentNodes defined as the specification for a node or component content field are typically structured as one ContentNode parent node, with a hierarchy of child nodes that specify the actual data, and sections of data if needed. For example, a <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/labellist.md\\\" title=\\\"LabelList\\\">LabelList</a> node can have several sections that divide the entire list, each with their own section heading, and specific items in that section of the list. The ContentNode for that LabelList node should have two levels of child ContentNodes, one level for the data to configure the list sections, and then another level of child ContentNodes for the data for each item in that list section.</p>\\n<p>A ContentNode can also be used to specify the data for custom components with defined interfaces, and for nodes and components that require <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\" title=\\\" Content Meta-Data\\\">Content Meta-Data</a>. Also, you should use a ContentNode for complex structures of data for your application rather than associative arrays. ContentNode objects are passed by reference in the application, while associative array objects are copied. For large complex data structures, passing ContentNode objects is much quicker than passing the equivalent associative array object. You can use associative arrays for simpler data structures with just a few fixed members.</p>\\n<blockquote>\\n<p>All of the attributes listed in <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\" title=\\\"Content Meta-Data\\\">Content Meta-Data</a> can be set as fields in a Content node. However, when creating a Content node, the fields themselves are not created until the valid attributes are set as fields, using either assignment (=), or set using <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefield.md#setfieldfieldname-as-string-value-as-object-as-boolean\\\" title=\\\"setField\\\">setField()</a> or <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefield.md#setfieldsfields-as-object-as-boolean.\\\" title=\\\"setFields()\\\">setFields()</a></p>\\n</blockquote>\\n<h3 id=\\\"creating-contentnodes\\\">Creating ContentNodes</h3>\\n<p>To create a ContentNode object and populate it with data, you can define the ContentNode in XML markup, or create it using BrightScript. In both cases, you will usually be first creating or defining a parent ContentNode, then creating or defining children ContentNodes below the parent, with possibly other levels of children ContentNodes.</p>\\n<p>As an example, to define a ContentNode with one level of children ContentNodes, you should generally:</p>\\n<pre><code>&#x3C;ContentNode role= or id= >\\n  &#x3C;ContentNode content_meta-data_attribute = \\\"attribute\\\" ... />\\n  ...\\n&#x3C;/ContentNode>\\n</code></pre>\\n<p>The parent ContentNode is defined with either an XML role attribute or an id field, depending on how you want to assign or use the content data. For the nodes classes that have a content field that is to be assigned a ContentNode, such as LabelList nodes, the parent ContentNode should be defined as a child node of the node:</p>\\n<pre><code>&#x3C;LabelList  id = \\\"labellist\\\" >\\n  &#x3C;ContentNode  role = \\\"content\\\" >\\n    &#x3C;ContentNode title = \\\"Renderable Nodes\\\" description = \\\"Basic Nodes That Show Things\\\" />\\n    &#x3C;ContentNode title = \\\"Z-Order/Parent-Child\\\" description = \\\"SceneGraph Tree Order Matters\\\" />\\n    &#x3C;ContentNode title = \\\"Animations\\\" description = \\\"Moving Stuff Around and Flashing Lights\\\" />\\n    &#x3C;ContentNode title = \\\"Events and Observers\\\" description = \\\"Reacting When Stuff Happens\\\" />\\n  &#x3C;/ContentNode>\\n&#x3C;/LabelList>\\n</code></pre>\\n<p>In other cases, you can just use the id field to allow you to access the ContentNode later as an object for any purpose. In both cases, define additional ContentNodes with content fields as children of the parent ContentNode.</p>\\n<p>To create a ContentNode in BrightScript, you should generally:</p>\\n<ol>\\n<li>Create the ContentNode object using createObject()</li>\\n<li>Create child ContentNode objects using createChild()</li>\\n<li>Assign the data to the field(s) of each ContentNode child object</li>\\n</ol>\\n<p>As follows:</p>\\n<pre><code>ContentNode_object = createObject(\\\"RoSGNode\\\",\\\"ContentNode\\\")\\nContentNode_child_object = ContentNode_object.createChild(\\\"ContentNode\\\")\\nContentNode_child_object.field_name = data\\n...\\n</code></pre>\\n<h3 id=\\\"assigning-contentnode-data-to-nodescomponents\\\">Assigning ContentNode Data To Nodes/Components</h3>\\n<p>For nodes and components that require a ContentNode as the specification of their content field, you can define it as a child of the node or component in XML markup using the role attribute, or just assign the ContentNode object to the content field as follows:</p>\\n<pre><code>NodeComponent.content = ContentNode_object\\n</code></pre>\\n<p>For other nodes and components that don't require a ContentNode, you can use getChild() or a similar function to locate the specific child ContentNode object that contains the data you want to assign to a particular node/component field:</p>\\n<pre><code>ContentNode_child_object = ContentNode_object.getChild(child_number)\\nNodeComponent.field_name = ContentNode_child_object.field_name\\n</code></pre>\\n<blockquote>\\n<p>If you are assigning a component node field with child elements of a ContentNode, you should create the ContentNode and all child elements, then assign the ContentNode to the component node field. It is more efficient than creating a ContentNode, assigning the ContentNode to the component node field, then creating and assigning each child element using getChild(). This is particularly true when creating and assigning ContentNode data in different threads, which can be very inefficient. Also avoid getting individual data items or child elements repeatedly if it is more efficient to copy the data value locally and avoid the repetitive object accesses, particularly in two different threads.</p>\\n</blockquote>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p>The following creates a component with a LabelList node populated with some specific content. To configure the content, a ContentNode is created for the content field of the LabelList node. The LabelList node is divided into several sections, so for each section, a child ContentNode object is added to the parent ContentNode using the addSection() function. Then the individual items in each section of the list are added as child nodes of the section ContentNode object using the addItem() function. The functions access the global variables for the ContentNode object reference m.content for the parent ContentNode, and m.sectionContent for the section ContentNodes.</p>\\n<h4 id=\\\"contentnode-class-example\\\">ContentNode Class Example</h4>\\n<pre><code>&#x3C;?xml version = \\\"1.0\\\" encoding = \\\"utf-8\\\" ?>\\n\\n&#x3C;!--********** Copyright 2015 Roku Corp.  All Rights Reserved. **********-->\\n\\n&#x3C;component name = \\\"NodeSelectionList\\\" extends = \\\"Group\\\" initialFocus = \\\"coreList\\\" >\\n\\n  &#x3C;script type=\\\"text/brightscript\\\" >\\n\\n    &#x3C;![CDATA[\\n\\n    sub init()\\n      m.list = m.top.FindNode(\\\"coreList\\\")\\n\\n      m.content = createObject(\\\"RoSGNode\\\",\\\"ContentNode\\\")\\n\\n      addSection(\\\"Renderable Nodes\\\")\\n      addItem(\\\"Rectangle\\\")\\n      addItem(\\\"Rotated Rectangle\\\")\\n      addItem(\\\"Label\\\")\\n      addItem(\\\"Poster\\\")\\n      addItem(\\\"Video\\\")\\n      addItem(\\\"Video Zoom\\\")\\n\\n      addSection(\\\"Animation Nodes\\\")\\n      addItem(\\\"Animation Vector 2D Interpolator\\\")\\n      addItem(\\\"Animation Color Interpolator\\\")\\n      addItem(\\\"Animation Float Interpolator\\\")\\n      addItem(\\\"Sequential Animation\\\")\\n      addItem(\\\"Parallel Animation\\\")\\n      addItem(\\\"Fade-In Animation\\\")\\n      addItem(\\\"Fade-Out Animation\\\")\\n\\n      addSection(\\\"Control Nodes\\\")\\n      addItem(\\\"Timer\\\")\\n\\n      addSection(\\\"Lists and Grids\\\")\\n      addItem(\\\"Poster Grid\\\")\\n      addItem(\\\"Markup Grid\\\")\\n\\n      m.list.content = m.content\\n\\n      m.top.setFocus(true)\\n    end sub\\n\\n    sub addSection(sectiontext as string)\\n      m.sectionContent = m.content.createChild(\\\"ContentNode\\\")\\n      m.sectionContent.CONTENTTYPE = \\\"SECTION\\\"\\n      m.sectionContent.TITLE = sectiontext\\n    end sub\\n\\n    sub addItem(itemtext as string)\\n      item = m.sectionContent.createChild(\\\"ContentNode\\\")\\n      item.title = itemtext\\n    end sub\\n\\n    ]]>\\n\\n  &#x3C;/script>\\n\\n  &#x3C;children>\\n\\n    &#x3C;LabelList\\n      id = \\\"coreList\\\"\\n      translation = \\\"[ 160, 92 ]\\\"\\n      itemSize = \\\"[ 440, 48 ]\\\"\\n      itemSpacing = \\\"[ 0, 0 ]\\\"\\n      sectionDividerHeight = \\\"48.0\\\"\\n      sectionDividerFont = \\\"font:MediumBoldSystemFont\\\"\\n      sectionDividerTextColor = \\\"0x880088FF\\\" />\\n\\n  &#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<p>All of the attributes listed in <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\" title=\\\"Content Meta-Data\\\">Content Meta-Data</a> are accessible as fields using dot (.) notation on a ContentNode object. For example, for a ContentNode object iteminfo, the Content Meta-Data Description attribute can be read or written as follows:</p>\\n<pre><code>iteminfo.description\\n</code></pre>\\n<p>You can also access ContentNode attributes as fields using dot (.) notation if you add the attribute as an <a href=\\\"/docs/references/scenegraph/xml-elements/interface.md\\\" title=\\\"<interface>\\\">&#x3C;interface></a> element field to an extended ContentNode component. For example, you could extend a ContentNode as a custom listitemcontent component with a componentname field to include an XML component name in a list item:</p>\\n<pre><code>&#x3C;component  name = \\\"listitemcontent\\\" extends = \\\"ContentNode\\\" >\\n\\n  &#x3C;interface >\\n    &#x3C;field id = \\\"componentname\\\" type = \\\"string\\\" />\\n  &#x3C;/interface>\\n\\n&#x3C;/component>\\n</code></pre>\\n<p>Then for a listitemcontent ContentNode object iteminfo, you can read or write the componentname field in the same way as if it were a Content Meta-Data attribute:</p>\\n<pre><code>iteminfo.componentname\\n</code></pre>\\n<blockquote>\\n<p>You can only use dot (.) notation to access ContentNode fields as attributes found in <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\" title=\\\"Content Meta-Data\\\">Content Meta-Data</a>, or defined as an <a href=\\\"/docs/references/scenegraph/xml-elements/interface.md\\\" title=\\\"<interface>\\\">&#x3C;interface></a> element field in a custom ContentNode component.</p>\\n</blockquote>\\n<h2 id=\\\"content-feed-video-lesson\\\">Content feed video lesson</h2>\\n<p>You can learn how to link the content metadata in your channel's feed to a ContentNode by watching the <a href=\\\"/videos/courses/rsg/debugging.md\\\">Creating the content feed</a> video lesson in Roku's <a href=\\\"https://developer.roku.com/videos/courses/rsg/overview.md\\\">SceneGraph: Build a Channel online video course</a>. </p>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/control/ContentNodeExample\\\">ContentNodeExample</a> is a sample channel demonstrating ContentNode in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/control-nodes/task.md":"{\n  \"content\": \"<h1 id=\\\"task\\\">Task</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\"><strong>Node</strong></a></p>\\n<p>The Task node class allows you to specify a function to be spawned in a different thread, and run asynchronously with respect to both the scene rendering thread and the main application thread. A Task node also allows you to run functions that cannot be run in SceneGraph node or component, typically BrightScript code functions involving operations such as reading data from servers and file system manipulation. (You also cannot, and should not, run functions in a SceneGraph application for operations that are functionally the same as SceneGraph nodes and components, such as playing videos.) A list of all the BrightScript functions and components that cannot be used in SceneGraph applications or can only be used in a Task node can be found in <a href=\\\"/docs/developer-program/core-concepts/scenegraph-brightscript/brightscript-support.md\\\" title=\\\"BrightScript Support\\\">BrightScript Support</a>.</p>\\n<p>A Task node is typically used to read data from a server to create a ContentNode to configure a SceneGraph node or component (see <a href=\\\"/docs/references/scenegraph/control-nodes/contentnode.md\\\" title=\\\"ContentNode\\\">ContentNode</a>). A Task node used for this purpose can be thought of as a content reader. Since ContentNodes are required to configure many components rendered in a scene, such as lists, panels, and grids, and you will generally want to read the data for those types of nodes from your server, you should create a Task node as a content reader for each of those components that you use in your scene.</p>\\n<p>The Task node class was designed with three general development use cases:</p>\\n<ul>\\n<li>A new Task node object is created for each asynchronous operation. The input data needed for the operation is set in the Task node object <a href=\\\"/docs/references/scenegraph/xml-elements/interface.md\\\" title=\\\"<interface>\\\">&#x3C;interface></a> fields in the render thread, along with an observer of the output  field data, and the Task node control field is set to RUN. After the output data is returned to the render thread, the Task node object is not used again.</li>\\n<li>A Task node object is used multiple times for several identical asynchronous operations. In this case, the input data for each operation is set in the existing Task node object, with another observer for the output  field data, and the Task node control field is again set to RUN. This may be more efficient than creating a new Task node object for each of the identical operations.</li>\\n<li>A Task node observes its input  fields using the port form of the ifSGNodeField <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefield.md#observefieldfieldname-as-string-functionname-as-string-as-boolean\\\" title=\\\"observeField()\\\">observeField()</a> method, and returns output data with each field change. In this case, the Task node acts like a continuous server.</li>\\n</ul>\\n<p>Since Task nodes launch asynchronous threads, and have no provisions for locks and mutexes, you must be careful to avoid race, deadlock, and other asynchronous thread errors. Here are a few tips for using Task nodes:</p>\\n<ul>\\n<li>Avoid accessing files which must be persistent before thread completion, to avoid a subsequent Task node or other thread access of the same file before the thread completes. It is easier and safer to use a dynamically-created string or other data object to hold temporary thread data to avoid having a subsequent or existing thread overwrite and corrupt the data.</li>\\n<li>Be very careful if you access any object in a Task node that may exist in another thread. It is better to completely separate all objects in any other possible thread from the Task node thread by setting the  fields of the Task node with copies of the minimum amount of data needed to run the thread.</li>\\n<li>In the Task node init() function, perform the minimum required amount of initialization of the Task node and any included thread functions. If you intend to trigger an asynchronous task based on a Task node input  field change, in many cases, you should only set up the observer for the field in init().</li>\\n<li>Use the port form of the ifSGNodeField <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefield.md#observefieldfieldname-as-string-functionname-as-string-as-boolean\\\" title=\\\"observeField()\\\">observeField()</a> rather than the onChange attribute. This will avoid triggering the thread in response to a render thread event before the Task node observers are set up.</li>\\n<li>It is more efficient to use a persistent Task node that is triggered by an \\\\\\\\ field change than to create a new Task node every time a particular asynchronous thread is required. If needed, you can communicate that the particular asynchronous thread is no longer required through an  field as well, either through the triggering field, or a special field used for control of the Task node.</li>\\n<li>You can use a single Task node object to run any number of different asynchronous threads by setting the functionName field to the Task node function you want before setting the control field to RUN. If you do not use the input data  fields to trigger running the thread, this is equivalent to calling an asynchronous function, and passing the input data fields as arguments to the function. The output data  fields can likewise be considered as the return value of a asynchronous function call, but to avoid blocking you must observe the fields, or the state field, as a callback event to handle the results in the calling thread.</li>\\n</ul>\\n<p>Also review \\\"<a href=\\\"/docs/developer-program/core-concepts/threads.md\\\" title=\\\"SceneGraph\\\">SceneGraph threads</a>\\\" for in-depth information on using Task nodes most efficiently.  </p>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p>The following reads attributes from an XML file on a server containing the content for a PosterGrid node into a ContentNode, which can then be assigned to the content field of the PosterGrid node to configure and populate the grid.</p>\\n<h4 id=\\\"task-node-example\\\">Task Node Example</h4>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;!--********** Copyright 2016 Roku Corp.  All Rights Reserved. **********-->\\n\\n&#x3C;component name = \\\"postergridCR\\\" extends = \\\"Task\\\" >\\n\\n  &#x3C;interface>\\n    &#x3C;field id = \\\"postergriduri\\\" type = \\\"string\\\" />\\n    &#x3C;field id = \\\"postergridcontent\\\" type = \\\"node\\\" />\\n  &#x3C;/interface>\\n\\n  &#x3C;script type = \\\"text/brightscript\\\" >\\n    &#x3C;![CDATA[\\n\\n    sub init()\\n      m.top.functionName = \\\"getContent\\\"\\n    end sub\\n\\n    sub getContent()\\n      postergridcontent = createObject(\\\"RoSGNode\\\",\\\"ContentNode\\\")\\n\\n      postergridxml = createObject(\\\"roXMLElement\\\")\\n\\n      readInternet = createObject(\\\"roUrlTransfer\\\")\\n      readInternet.setUrl(m.top.postergriduri)\\n      postergridxml.parse(readInternet.GetToString())\\n\\n      if postergridxml.getName()=\\\"PosterGrid\\\"\\n        for each poster in postergridxml.GetNamedElements(\\\"poster\\\")\\n          postercontent = postergridcontent.createChild(\\\"ContentNode\\\")\\n          postercontent.setFields(poster.getAttributes())\\n        end for\\n      end if\\n\\n      m.top.postergridcontent = postergridcontent\\n    end sub\\n\\n    ]]>\\n  &#x3C;/script>\\n\\n&#x3C;/component>\\n</code></pre>\\n<p>In addition to this example, a much simpler, complete example, including the scene that creates the Task node, can be found here: <a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/control\\\">SimpleTask example</a>. That example simply uses a Task node to increment a counter and display the current counter value on the screen.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>functionName</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>The name of the function in the Task node component to be executed when the state field changes to RUN. The function must be declared within the scope of the Task node component</td>\\n</tr>\\n<tr>\\n<td>control</td>\\n<td>option string</td>\\n<td>init</td>\\n<td>WRITE_ONLY</td>\\n<td>Requests a change in the run state of the spawned task. The valid options are the same as for the state field, but case-insensitive (i.e. can set \\\"RUN\\\" or \\\"run\\\")</td>\\n</tr>\\n<tr>\\n<td>state</td>\\n<td>value string</td>\\n<td>init</td>\\n<td>READ_ONLY</td>\\n<td>Inquires about the run state of the spawned task. Note that the values are in lowercase: \\\"init\\\", \\\"stop\\\", \\\"run\\\", \\\"done\\\"</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/control/TaskExample\\\">TaskExample</a> is a sample channel demonstrating Task in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/control-nodes/maskgroup.md":"{\n  \"content\": \"<h1 id=\\\"maskgroup\\\">MaskGroup</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a></p>\\n<p>The MaskGroup node class allows an alpha mask bitmap to be applied to the rendering of its children. This allows effects such as having a list fade out at the bottom to be easily created.</p>\\n<blockquote>\\n<p>MaskGroup nodes do not work on all Roku players (specifically, MaskGroup nodes only work on players that support OpenGL). On players whose graphics do not support OpenGL, a MaskGroup node just renders its children without applying the extra alpha mask. For this reason, you should avoid using the MaskGroup node for anything other than decorative purposes, such as creating a fading effect at the bottom of the screen, where the user interface information value of the screen element is not affected by the lack of the MaskNode node rendering.</p>\\n</blockquote>\\n<p>Unlike other bitmaps, the MaskGroup node class does not work with 9-patch images. If the bitmap size does not match the group bounding rectangle, the edge rows of the mask are repeated as needed.</p>\\n<p>For example, suppose the MaskGroup node bounding rectangle has an origin at (0, 0), a width of 150 and a height of 80. If the mask bitmap were also 150 by 80, and the maskOffset and maskSize field values were left at their default values of [ 0, 0 ], then each pixel of the mask bitmap would be applied to the corresponding pixel of the MaskGroup node bounding rectangle. The figure below illustrates that case. On the right is a MaskGroup node that contains a Poster node. In the center is an alpha bitmap with the same size as the Poster node. On the right is the result of rendering the MaskGroup node with the image in the center used as a mask.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/maskExample1.png\\\" alt=\\\"roku815px - maskExample1\\\" title=\\\"maskExample1\\\"></p>\\n<p>The maskSize and maskOffset field values can be used to scale and offset the mask bitmap relative to the group coordinate system, as shown in the figure below. The mask is the same bitmap as in the figure above. In the below figure, the maskOffset field value has been set to (50, 30), offsetting the origin of the mask bitmap coordinate system relative to the origin of the MaskGroup node coordinate system 50 pixels to the left and 30 pixels down.The maskSize field value has been set to (100, 50), This causes the width of the mask bitmap to be scaled from 150 to 100, and the height of the mask bitmap to be scaled from 80 to 50, so that the mask right edge aligns with the right edge of the MaskGroup node bounding rectangle, and the mask bottom edge aligns with the bottom edge of the MaskGroup node bounding rectangle. The center of the figure shows the mask with the maskOffset and maskSize field values applied overlaid on top of the MaskGroup node. The right side of the figure shows the result of applying the mask to the MaskGroup node. Notice that the left column of pixels in the mask is used as the mask for all columns of the MaskGroup node that lie to the left of the mask, causing those columns to be rendered with full opacity. Similarly, and the top row of the mask is used as the mask for all rows of the MaskGroup node that lie above the mask, causing each of the rows to fade out on the right.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/maskExample2.png\\\" alt=\\\"roku815px - maskExample2\\\" title=\\\"maskExample2\\\"></p>\\n<p>As shown in above, the transformed mask may not overlay all the rendered pixels of the MaskGroup node. In that case, the leftmost (rightmost) columns of the mask bitmap are used as the mask for any MaskGroup node pixels that are to the left (right) of the transformed mask. The top (bottom) row of the mask bitmap is used as the mask for MaskGroup node pixels that are above (below) the transformed mask.</p>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/control\\\">MaskGroup.zip</a> shows how to use a MaskGroup node to conceal and reveal a poster.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>maskUri</td>\\n<td>URI string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap to use for the group alpha mask. The alpha value of each pixel rendered in the group is multiplied by the value of a pixel in the alpha mask. The mapping from pixel coordinates in the group to mask pixel coordinates is controlled by the maskSize and maskOffset field values. Those fields define a coordinate system for the mask bitmap relative to the group coordinate system. This mask coordinate system is used to map mask pixels to their corresponding pixels in the MaskGroup node</td>\\n</tr>\\n<tr>\\n<td>maskSize</td>\\n<td>vector2d</td>\\n<td>[ 0, 0 ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a scaling factor of the alpha mask coordinate system relative to the group coordinate system. If either element of the maskSize field value does not match the corresponding size of the mask bitmap, the mask bitmap is scaled to the specified size in the dimension. Setting either element of the maskSize field vector to 0 causes the mask bitmap to be used at its actual size in that dimension</td>\\n</tr>\\n<tr>\\n<td>maskOffset</td>\\n<td>vector2d</td>\\n<td>[0, 0 ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies an offset of the mask coordinate system relative to the group coordinate system. For example, if the maskOffset field value is set to [ 100, 0 ], then mask pixel [0, 0] is used as the alpha value for pixels rendered for the MaskGroup node coordinate [100, 0]</td>\\n</tr>\\n<tr>\\n<td>maskBitmapWidth</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>Contains the actual width of the mask bitmap. The mask bitmap can be stretched horizontally by setting the x-dimension of the maskSize field value to a different value than the maskBitmapWidth field value</td>\\n</tr>\\n<tr>\\n<td>maskBitmapHeight</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>Contains the actual height of the mask bitmap. The mask bitmap can be stretched vertically by setting the y-dimension of the maskSize field value to a different value than the maskBitmapHeight field value</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/control/MaskGroupExample\\\">MaskGroupExample</a> is a sample channel demonstrating MaskGroup in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/control-nodes/timer.md":"{\n  \"content\": \"<h1 id=\\\"timer\\\">Timer</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\"><strong>Node</strong></a></p>\\n<p>The Timer node class generates an observable event after a specified amount of time has elapsed.</p>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p>The following changes the text string on the display screen every five seconds as the Timer node generates a fire field observable event.  </p>\\n<h4 id=\\\"timer-node-class-example\\\">Timer Node Class Example</h4>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;!--********** Copyright 2015 Roku Corp.  All Rights Reserved. **********-->\\n\\n&#x3C;component   name=\\\"timertest\\\"   extends=\\\"Group\\\" >\\n\\n&#x3C;script type=\\\"text/brightscript\\\" >\\n&#x3C;![CDATA[\\n\\nsub init()\\n  m.testtimer = m.top.findNode(\\\"testTimer\\\")\\n  m.testtimer.control = \\\"start\\\"\\n  m.defaulttext = \\\"Wait for it, wait for it...\\\"\\n  m.alternatetext = \\\"Timer fired!!!\\\"\\n\\n  m.testtimerlabel = m.top.FindNode(\\\"testTimerLabel\\\")\\n  m.testtimerlabel.text = m.defaulttext\\n  m.textchange = false\\n  m.testtimer.ObserveField(\\\"fire\\\",\\\"changetext\\\")\\n  m.top.setFocus(true)\\nend sub\\n\\nsub changetext()\\n  if (m.textchange = false) then\\n    m.testtimerlabel.text = m.alternatetext\\n    m.textchange = true\\n   else\\n     m.testtimerlabel.text = m.defaulttext\\n     m.textchange = false\\n   end if\\nend sub\\n\\n]]>\\n&#x3C;/script>\\n\\n&#x3C;children>\\n\\n&#x3C;Label\\n  id=\\\"testTimerLabel\\\"\\n  width = \\\"1280\\\"\\n  translation = \\\"[0,500]\\\"\\n  horizAlign = \\\"center\\\"\\n  vertAlign = \\\"center\\\"\\n/>\\n\\n&#x3C;Timer\\n  id=\\\"testTimer\\\"\\n  repeat=\\\"true\\\"\\n  duration=\\\"5\\\"\\n/>\\n\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>control</td>\\n<td>string</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>Used to control the operation of the Timer node. Recognized values include: <table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>none</td>\\n<td>No effect</td>\\n</tr>\\n<tr>\\n<td>start</td>\\n<td>Starts the <strong>Timer</strong> node operation</td>\\n</tr>\\n<tr>\\n<td>stop</td>\\n<td>Stops a running <strong>Timer</strong> node</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>repeat</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>If set to true, the Timer node fires repeatedly, each time the specified duration field value elapses. If set to false, the Timer node only fires once until restarted</td>\\n</tr>\\n<tr>\\n<td>duration</td>\\n<td>time</td>\\n<td>1</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the time in seconds before the Timer node fires after the control field value is set to start. To specify time values down to millisecond granularity, use a float type (0.001 equals one millisecond)</td>\\n</tr>\\n<tr>\\n<td>fire</td>\\n<td>Event</td>\\n<td>N/A</td>\\n<td>OBSERVE_ONLY</td>\\n<td>Triggers observer callback functions when the Timer node fires. Please note that the timer observer callback executes on the render thread</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/control/TimerExample\\\">TimerExample</a> is a sample channel demonstrating Timer in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/control-nodes/componentlibrary.md":"{\n  \"content\": \"<h1 id=\\\"componentlibrary\\\">ComponentLibrary</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\"><strong>Node</strong></a></p>\\n<p>The ComponentLibrary node class downloads a library of custom SceneGraph components to be used in an application. The ComponentLibrary node should be used in a Scene node, such as Scene or OverhangPanelSetScene. One way to ensure that the library downloads before the SceneGraph application begins to compile the components for the application, is to begin the download in the main.brs file that creates the Scene node, by adding an  field to the Scene node that can be used to monitor the download, and starts the application when the download is complete.</p>\\n<h2 id=\\\"loading-component-libraries\\\">Loading Component Libraries</h2>\\n<p>In addition to the custom components you create specifically for your application, you can also create custom component libraries that you can download as part of your application.</p>\\n<p>To do this, define a ComponentLibrary node in the Scene node for your application. Set the id field of the node to a unique library ID for your application, and specify the URL to download the library from in the uri field of the node. As the SceneGraph scene is constructed, the library will be downloaded from the specified URL, and component instances will be created as needed for the application.</p>\\n<blockquote>\\n<p><em>Since Roku OS 9.4</em>, compilation info/failure messages for Roku SceneGraph component libraries when running side-loaded channels appear on the developer console, port 8085. (Previously, such messages were sent to port 8885.)</p>\\n</blockquote>\\n<p>Component libraries can be packaged and signed the same way that channels are packaged and signed. You sideload your library, package it using the packaging tool, and then host it on the server of your choosing.</p>\\n<blockquote>\\n<p>Component libraries cannot be published to the Roku Channel Store for distribution.</p>\\n</blockquote>\\n<h3 id=\\\"manifest\\\">Manifest</h3>\\n<p>A component library must include a separate <a href=\\\"/docs/developer-program/getting-started/architecture/channel-manifest.md\\\">manifest file</a> in addition to the one for the channel. The component library's manifest must include the <a href=\\\"/docs/developer-program/getting-started/architecture/channel-manifest.md#special-purpose-attributes\\\"><strong>rsg_version</strong> flag</a> (<code>rsg_version=1.2</code>) to optimize channel performance. </p>\\n<h2 id=\\\"using-library-components\\\">Using Library Components</h2>\\n<p>Components declared in a component library can be used inside the app just like custom components. Make sure to specify it in format <em>libraryName</em>:<em>componentName</em>. So say if a component named LoadingIndicator is defined in the SampleComponentLib library, then it may be used like this:</p>\\n<pre><code>&#x3C;SampleComponentLib:LoadingIndicator imageUri=\\\"pkg:/images/loader.png\\\" translation=\\\"[700, 200]\\\"/>\\n</code></pre>\\n<h2 id=\\\"unsigned-component-libraries\\\">Unsigned Component Libraries</h2>\\n<p>Component libraries do not need to be packaged or signed with the same devid as the channel. However, unsigned component libraries are required to be served over HTTPS before they can be accessed by published channels. See additional cases below:</p>\\n<ul>\\n<li>Sideloaded channels can access unsigned component libraries over HTTP or HTTPS.</li>\\n<li>Published channels can only access unsigned component libraries over HTTPS.</li>\\n<li>Published channels can access signed component libraries over HTTP if the channel and the library share the same devid.</li>\\n</ul>\\n<h2 id=\\\"example\\\">Example</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/utilities\\\">ComponentLibraryTestChannel.zip</a> is a test channel that downloads the component library implemented from the source code in <a href=\\\"https://github.com/rokudev/samples/tree/master/utilities\\\">ComponentLibrary.zip</a>. The test channel then creates an instance of the  component implemented in the library.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>loadStatus</td>\\n<td>value string</td>\\n<td>\\\"none\\\"</td>\\n<td>READ_ONLY</td>\\n<td>Indicates the progress of the library download. The possible values are: <table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>none</td>\\n<td>The default if the library is not being downloaded</td>\\n</tr>\\n<tr>\\n<td>loading</td>\\n<td>Library is downloading</td>\\n</tr>\\n<tr>\\n<td>ready</td>\\n<td>Library has downloaded successfully</td>\\n</tr>\\n<tr>\\n<td>failed</td>\\n<td>Download of the library has failed</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>id</td>\\n<td>string</td>\\n<td>no default</td>\\n<td>READ_WRITE</td>\\n<td>Set to a unique ID for the library for the application</td>\\n</tr>\\n<tr>\\n<td>uri</td>\\n<td>uri</td>\\n<td>no default</td>\\n<td>READ_WRITE</td>\\n<td>The URL of the library to be downloaded</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/control-nodes/channelstore.md":"{\n  \"content\": \"<h1 id=\\\"channelstore\\\">ChannelStore</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\"><strong>Node</strong></a></p>\\n<p>The <strong>ChannelStore</strong> node class provides an interface to the Roku Channel Store. It provides functionality equivalent to the <a href=\\\"/docs/references/brightscript/interfaces/ifchannelstore.md\\\">roChannelStore</a> component. In general, the <strong>ChannelStore</strong> node class allows developers to issue one of several commands, which involves the following steps:</p>\\n<ol>\\n<li>Set the fields containing the data needed by the command (optional).</li>\\n<li>Set up an observer of the result field associated with the command.</li>\\n<li>Set the command field to the appropriate string to start the command execution.</li>\\n<li>The field associated with the command is set to a <strong>ContentNode</strong> object containing the results of the command.</li>\\n</ol>\\n<p>Each of the commands starts a sequence of actions associated with the financial transaction that are handled by the Roku OS outside of control or monitoring by the channel SceneGraph markup. The SceneGraph markup merely initiates the purchase and receives a final result.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<h3 id=\\\"command\\\">command</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>command</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the command to be executed:<br /><ul>\\n<li><a href=\\\"#getuserdata\\\">getUserData</a></li>\\n<li><a href=\\\"#getuserregiondata\\\">getUserRegionData</a> (<em>Available since Roku OS 9.4</em>)</li>\\n<li><a href=\\\"#getcatalog\\\">getCatalog</a> and <a href=\\\"#getstorecatalog\\\">getStoreCatalog</a></li>\\n<li><a href=\\\"#doorder\\\">doOrder</a></li>\\n<li><a href=\\\"#getpurchases\\\">getPurchases</a> and <a href=\\\"#getallpurchases\\\">getAllPurchases</a> (<em>Available since Roku OS 9.1</em>)</li>\\n<li><a href=\\\"#storechannelcreddata\\\">storeChannelCredData</a> (<em>Available since Roku OS 9.1</em>)</li>\\n<li><a href=\\\"#getchannelcred\\\">getChannelCred</a> (<em>Available since Roku OS 9.1</em>)</li>\\n<li><a href=\\\"#getdeviceattestationtoken\\\">getDeviceAttestationToken</a> (<em>Available since Roku OS 11.5</em>)</li>\\n<li><a href=\\\"#requestpartnerorder\\\">requestPartnerOrder</a></li>\\n<li><a href=\\\"#confirmpartnerorder\\\">confirmPartnerOrder</a></li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"requesteduserdata\\\">requestedUserData</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>requestedUserData</td>\\n<td>string</td>\\n<td>all</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the Roku customer account fields to be retrieved when the <a href=\\\"#getuserdata\\\"><strong>getUserData</strong></a> command is executed.<br /><br />The default value is \\\"all\\\", which causes a ContentNode object to be returned from <strong>getUserData</strong> that includes all of the available Roku customer account information.<br /><br />To request specific Roku customer account information items (for example, an email address, first name, and last name) set this field to a string containing a comma-separated list of values (for example, \\\"email, first name, lastname\\\"). The available values are as follows: <br /><ul>\\n<li>email</li>\\n<li>phone</li>\\n<li>firstname</li>\\n<li>lastname</li>\\n<li>street</li>\\n<li>city</li>\\n<li>state</li>\\n<li>zip</li>\\n<li>country</li>\\n<li>birth (<em>available since Roku OS 10.0</em>)</li>\\n<li>gender (<em>available since Roku OS 10.0</em>)</li>\\n</ul><br />In this case, the ContentNode object returned from the <strong>getUserData</strong> command includes the specified customer account information.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"requesteduserdatainfo\\\">requestedUserDataInfo</h3>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>requestedUserDataInfo</td>\\n<td>ContentNode</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the RFI screen is used for customer sign-ups or sign-ins. This may be one of the following values:<br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>context</td>\\n<td>string</td>\\n<td>\\\"signup\\\"</td>\\n<td>Specifies the context of the RFI screen, which may be one of the following values:<br /><ul>\\n<li>\\\"signup\\\": The RFI screen displays a \\\"Let's create your account\\\" title and lists the customer information specified in the <a href=\\\"#requesteduserdata\\\"><strong>requestedUserData</strong> field</a>. The RFI screen uses the \\\"signup\\\" context by default. See <a href=\\\"/docs/developer-program/roku-pay/signup-best-practices.md\\\">Sign-up requirements and best practices</a> for more information on implementing the channel sign-up UI.</li>\\n<li>\\\"signin: \\\"The RFI screen displays a \\\"Sign in\\\" title and lists only email or phone attributes, if specified in the <a href=\\\"#requesteduserdata\\\"><strong>requestedUserData</strong> field</a>. Other attributes are ignored, even if specified. See the <a href=\\\"#sign-in-example\\\">Sign-in example</a> for how to use this field. See <a href=\\\"/docs/developer-program/roku-pay/signin-best-practices.md\\\">Sign-in requirements and best practices</a> for more information on implementing the channel sign-in UI.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>forceShowData<br />(<em>Available since Roku OS 11.0</em>)</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>If true, the RFI signup screen displays the values of the requested customer information to be shared with the channel (for example, Jone Doe, jon.doe@emailaddress.com).<br /><br />By default, this flag is set to false, which means that the default RFI screen for the region is used. For example, in the US, the RFI screen displays the type of customer information being requested (email address, name, and so on).<br /><br />This flag has no effect if the context field is set to \\\"signin\\\" (the RFI sign-in screen always displays the customer information values). <br /><br /><strong>Example</strong>:<br /><pre><code>store = CreateObject(\\\"roSGNode\\\", \\\"ChannelStore\\\")\\n\\n' Doesn't show user data in dialog unless necessary in the user's region.\\nstore.requestedUserData = \\\"email,firstname,lastname,gender,birth\\\"\\nstore.command = \\\"getUserData\\\"\\n\\n' Shows user data in dialog.\\ninfo = CreateObject(\\\"roSGNode\\\", \\\"ContentNode\\\")\\ninfo.addFields({forceShowData: true})\\nstore.requestedUserDataInfo = info\\nstore.requestedUserData = \\\"email\\\"\\nstore.command = \\\"getUserData\\\"\\n</code></pre></td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"sign-up-example\\\">Sign-up example</h4>\\n<pre><code>store = CreateObject(\\\"roSGNode\\\", \\\"ChannelStore\\\")\\n\\n' Request several properties for sign-up\\nstore.requestedUserData = \\\"email, phone, firstname, lastname\\\"\\nstore.command = \\\"getUserData\\\"\\n\\n' Store requested properties\\n email = store.userdata.email\\n firstname = m.store.userData.firstname\\n lastname = m.store.userData.lastname\\n phone = m.store.userData.phone\\n</code></pre>\\n<h4 id=\\\"sign-in-example\\\">Sign-in example</h4>\\n<pre><code>store = CreateObject(\\\"roSGNode\\\", \\\"ChannelStore\\\")\\n\\n' Set sign-in context for RFI screen\\ninfo = CreateObject(\\\"roSGNode\\\", \\\"ContentNode\\\")\\ninfo.addFields({context: \\\"signin\\\"})\\nstore.requestedUserDataInfo = info\\n\\n' Request user's email for sign-in\\nstore.requestedUserData = \\\"email\\\"\\nstore.command = \\\"getUserData\\\"\\n\\n' Store requested properties\\n email = store.userdata.email\\n</code></pre>\\n<h3 id=\\\"userdata\\\">userData</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>userData</td>\\n<td>ContentNode</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Contains the results of a  <a href=\\\"#getuserdata\\\"><strong>getUserData</strong></a> command. The value stored in this field depends on whether the user clicks <strong>Continue</strong> or <strong>Cancel</strong> in the Request for Information (RFI) screen.<br /><br />If the user clicks <strong>Continue</strong>, this field is populated with the Roku customer account information that was requested in the <a href=\\\"#requesteduserdata\\\"><strong>requestedUserData</strong></a> field.<br /><br />If the user clicks <strong>Cancel</strong>, this field is set to \\\"invalid\\\".</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"order\\\">order</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>order</td>\\n<td>ContentNode</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Contains the order to be filled when the <a href=\\\"#doorder\\\"><strong>doOrder</strong></a> command is executed. This ContentNode contains one child ContentNode for each of the items to be purchased. The child ContentNode must contain the following fields:<br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>code</td>\\n<td>string</td>\\n<td>Identifies the product to be purchased, as entered in the <strong>Product Identifier</strong> field on the <a href=\\\"https://developer.roku.com/products\\\">In-Channel Product page in the Developer Dashboard</a> when the product was created. See <a href=\\\"#creating-an-order\\\">Creating an order</a> for more information.</td>\\n</tr>\\n<tr>\\n<td>qty</td>\\n<td>string</td>\\n<td>The quantity of the item to be purchased, which is typically 1 for most in-channel products.<br /><br />This is only typically more than 1 if the product is a \\\"packet\\\" of identical items (such as game points, number of viewings permitted of some item of content, and so on).</td>\\n</tr>\\n<tr>\\n<td>action</td>\\n<td>string</td>\\n<td><strong>For upgrades/downgrades only</strong>. Set this to \\\"Upgrade\\\" or \\\"Downgrade\\\" to change the subscription plan from a previous purchase (for example, <code>myOrder.action = \\\"Upgrade\\\"</code>). The required values are case-sensitive; do not pass \\\"upgrade\\\" or \\\"downgrade\\\". See <a href=\\\"/docs/developer-program/roku-pay/implementation/on-device-upgrade-downgrade.md\\\">On-device upgrade and downgrade</a> for more information.</td>\\n</tr>\\n</tbody>\\n</table><br />To clear an order, set the <strong>order</strong> field to \\\"invalid\\\".</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"creating-an-order\\\">Creating an order</h4>\\n<p>To create an order, this field needs to be set to a ContentNode that has one child ContentNode for each item to be purchased. There are two approaches to setting the <code>order</code> field: setting it directly, or setting the <code>deltaOrder</code> field.</p>\\n<p>To set the <code>order</code> field directly, first create a ContentNode, then create one child ContentNode with the <code>\\\"code\\\"</code> and <code>\\\"qty\\\"</code> fields set for each item to be purchased. Assuming <code>m.channelStore</code> is a ChannelStore node object, the following Brightscript code shows how to do this:</p>\\n<pre><code>myOrder = CreateObject(\\\"roSGNode\\\", \\\"ContentNode\\\")\\nmyFirstItem = myOrder.createChild(\\\"ContentNode\\\")\\nmyFirstItem.addFields({ \\\"code\\\": \\\"UPC2397\\\", \\\"qty\\\": 1})\\nmySecondItem = myOrder.createChild(\\\"ContentNode\\\")\\nmySecondItem.addField({ \\\"code\\\": \\\"UPC4321\\\", \\\"qty\\\": 1})\\nm.channelStore.order = myOrder\\n</code></pre>\\n<p>The <code>order</code> field can be set indirectly as well, by setting the <code>deltaOrder</code> field to add or modify the desired quantity of an item. Assuming <code>m.channelStore</code> is a ChannelStore node object, the following results in the <code>order</code> field containing the same items as the previous example:</p>\\n<pre><code>m.channelStore.deltaOrder = { \\\"code\\\": \\\"UPC2397\\\", \\\"qty\\\": 1}\\nm.channelStore.deltaOrder = { \\\"code\\\": \\\"UPC4321\\\", \\\"qty\\\": 1}\\n</code></pre>\\n<h3 id=\\\"deltaorder\\\">deltaOrder</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>deltaOrder</td>\\n<td>associative array</td>\\n<td>{}</td>\\n<td>WRITE_ONLY</td>\\n<td>Enables the <a href=\\\"#order\\\"><strong>order</strong></a> field to be populated incrementally. Each time this field is set, the <strong>order</strong> field is modified.<br /><br />The <strong>deltaOrder</strong> associative array should contain a \\\"code\\\" string that identifies an available item, and a \\\"qty\\\" integer value to indicate how the children of the order field <strong>ContentNode</strong> should be modified.  <br /><br />For example, if the order is invalid, setting the deltaOrder field to the following associative array:  <br /><br />  <code>{ \\\"code\\\": \\\"Merchandise1\\\", \\\"qty\\\": 1 }</code>  <br /><br />Would cause an order field to be set to a <strong>ContentNode</strong>, with one child <strong>ContentNode</strong> with a \\\"code\\\" field set to \\\"Merchandise1\\\", and a \\\"qty\\\" field set to 1.  <br /><br />If the deltaOrder field was then set to:  <br /><br />  <code>{ \\\"code\\\": \\\"MyItem2\\\", \\\"qty\\\": 1 }</code>  <br /><br />The order field <strong>ContentNode</strong> would have a second <strong>ContentNode</strong> child appended to it, with the specified \\\"code\\\" and \\\"qty\\\" field values.  <br /><br />The \\\"qty\\\" field can be set to a negative value to remove an item from an order. For example, if the order field was set as above, and the deltaOrder field was set to:  <br /><br />  <code>{ \\\"code\\\" MyItem2\\\", \\\"qty\\\": -1 }</code>  <br /><br />The order field <strong>ContentNode</strong> would have the second child <strong>ContentNode</strong> removed.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"requestpartnerorder\\\">requestPartnerOrder</h4>\\n<blockquote>\\n<p>See <a href=\\\"/docs/developer-program/roku-pay/implementation/tvod-channel.md\\\">Creating TVOD channels</a> for how to use this field for transactional purchases.</p>\\n</blockquote>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>requestPartnerOrder</td>\\n<td>ContentNode</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the product to be ordered from a TVOD channel. The order contains the following fields:<br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>code</td>\\n<td>string</td>\\n<td>Identifies the product to be purchased, as entered in the <strong>Product Identifier</strong> field on the <a href=\\\"https://developer.roku.com/products\\\">In-Channel Product page in the Developer Dashboard</a> when the product was created. For TVOD-exclusive channels, a single in-channel product may be used for all orders. <br /><br />A TVOD-exclusive channel only has transactional products such as movie rentals; it does not offer any subscription products.</td>\\n</tr>\\n<tr>\\n<td>priceDisplay</td>\\n<td>string</td>\\n<td>The original price of the product. Do not include a currency symbol (for example, set this to \\\"3.99\\\" instead of \\\"$3.99\\\").</td>\\n</tr>\\n<tr>\\n<td>price</td>\\n<td>string</td>\\n<td>The final price of the product, including any discounts. Do not include a currency symbol (for example, set this to \\\"3.99\\\" instead of \\\"$3.99\\\").</td>\\n</tr>\\n<tr>\\n<td>title</td>\\n<td>string</td>\\n<td>A description of the product (for example, the name of a rental movie).</td>\\n</tr>\\n<tr>\\n<td>couponCode</td>\\n<td>string</td>\\n<td>An alphanumeric string entered by the customer to receive a discounted price on the product.</td>\\n</tr>\\n<tr>\\n<td>contentKey</td>\\n<td>string</td>\\n<td>The publisher-specific SKU (or other unique identifier) for the product.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"confirmpartnerorder\\\">confirmPartnerOrder</h4>\\n<blockquote>\\n<p>See <a href=\\\"/docs/developer-program/roku-pay/implementation/tvod-channel.md\\\">Creating TVOD channels</a> for how to use this field for transactional purchases.</p>\\n</blockquote>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>confirmPartnerOrder</td>\\n<td>ContentNode</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Confirms the product being ordered from a TVOD channel. The order contains the following fields:<br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>orderId</td>\\n<td>string</td>\\n<td>The orderID returned by Roku in the <a href=\\\"#requestpartnerorderstatus\\\">RequestPartnerOrderStatus</a> content node.</td>\\n</tr>\\n<tr>\\n<td>code</td>\\n<td>string</td>\\n<td>The product identifier.</td>\\n</tr>\\n<tr>\\n<td>priceDisplay</td>\\n<td>string</td>\\n<td>The original price of the product. Do not include a currency symbol (for example, set this to \\\"3.99\\\" instead of \\\"$3.99\\\").</td>\\n</tr>\\n<tr>\\n<td>price</td>\\n<td>string</td>\\n<td>The final price of the product, including any discounts. Do not include a currency symbol (for example, set this to \\\"3.99\\\" instead of \\\"$3.99\\\").</td>\\n</tr>\\n<tr>\\n<td>title</td>\\n<td>string</td>\\n<td>The name of the product to be displayed on customers' invoices.</td>\\n</tr>\\n<tr>\\n<td>couponCode</td>\\n<td>string</td>\\n<td>An alphanumeric string entered by the customer to receive a discounted price on the product.</td>\\n</tr>\\n<tr>\\n<td>contentKey</td>\\n<td>string</td>\\n<td>The publisher-specific SKU (or other unique identifier) for the product.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"orderstatus\\\">orderStatus</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>orderStatus</td>\\n<td>ContentNode</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Contains the results of the <a href=\\\"#doorder\\\"><strong>doOrder</strong></a> command.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"purchases\\\">purchases</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>purchases</td>\\n<td>ContentNode</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Contains the results of a <a href=\\\"#getpurchases\\\"><strong>getPurchases</strong></a> or <a href=\\\"#getallpurchases\\\"><strong>getAllPurchases</strong></a> command.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"catalog\\\">catalog</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>catalog</td>\\n<td>ContentNode</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Contains the results of a <a href=\\\"#getcatalog\\\"><strong>getCatalog</strong></a> command.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"storecatalog\\\">storeCatalog</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>storeCatalog</td>\\n<td>ContentNode</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Contains the results of a <a href=\\\"#getstorecatalog\\\"><strong>getStoreCatalog</strong></a> command.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"requestpartnerorderstatus\\\">requestPartnerOrderStatus</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>requestPartnerOrderStatus</td>\\n<td>ContentNode</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Contains the results of a <a href=\\\"#requestpartnerorder\\\"><strong>requestPartnerOrder</strong></a> command.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"confirmpartnerorderstatus\\\">confirmPartnerOrderStatus</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>confirmPartnerOrderStatus</td>\\n<td>ContentNode</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Contains the results of a <a href=\\\"#confirmpartnerorder\\\"><strong>confirmPartnerOrder</strong></a> command.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"fakeserver\\\">fakeServer</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fakeServer</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Enables a test mode for the <strong>ChannelStore</strong> node. The test mode disables communication by the ChannelStore node with the Roku Channel Store server, and it causes responses to asynchronous queries and operations to come from test configuration files rather than the server. <br /><br />The <strong>fakeServer</strong> field must be set to false in a published channel to allow actual <a href=\\\"/docs/developer-program/roku-pay/quickstart/in-channel-products.md\\\">In-Channel Product</a> purchases by users.<p>It is recommended that developers use <a href=\\\"/docs/developer-program/roku-pay/testing/billing-testing.md\\\">billing testing</a> instead of the fakeServer.</p></td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"commands\\\">Commands</h2>\\n<p>Each of the actions associated with a command string are described in detail below.</p>\\n<h3 id=\\\"getuserdata\\\">getUserData</h3>\\n<p>Displays the Roku Pay Request for Information (RFI) screen, which prompts customers to confirm that Roku may share their Roku customer account information with the calling channel in order to sign up/sign in to that channel. This enables channels to create and update customer accounts in their system without requiring customers to manually enter their personal information in an account creation screen.</p>\\n<blockquote>\\n<p>To pass <a href=\\\"/docs/developer-program/certification/certification.md#2-purchases\\\">certification</a>, all authenticated channels (SVOD, TVOD, other subscription services, and AVOD) must use the <a href=\\\"/docs/references/scenegraph/control-nodes/channelstore.md#getuserdata\\\">getUserData</a> command to display a Request For Information (RFI) screen during the sign-up and sign-in workflows to enable customers to share their Roku account information with the channel. Only if the user declines the request may channels require the customer to manually enter their information.</p>\\n<ul>\\n<li>For SVOD, TVOD, other subscription services, this certification requirement is effective now.</li>\\n<li>For authenticated AVOD channels, this certification requirement is effective after September 30, 2021.</li>\\n</ul>\\n</blockquote>\\n<p>To use this command, follow these steps:</p>\\n<ol>\\n<li>\\n<p>Set the <a href=\\\"#requesteduserdata\\\"><strong>requestedUserData</strong> field</a> to the Roku customer account information to be requested. This may be set to either \\\"all\\\" to get all the available account information items, or a string with a comma-separated list of specific information items (for example, \\\"email, first name\\\"). Request the minimum amount of information required to create/update an account.</p>\\n<pre><code>store = CreateObject(\\\"roSGNode\\\", \\\"ChannelStore\\\")\\nstore.requesteduserdata = \\\"email, first name, lastname, phone\\\"\\n</code></pre>\\n</li>\\n</ol>\\n<ol start=\\\"2\\\">\\n<li>\\n<p>Send the <strong>getUserData</strong> command.</p>\\n<pre><code>m.store.command = \\\"getUserData\\\"\\n</code></pre>\\n</li>\\n</ol>\\n<ol start=\\\"3\\\">\\n<li>\\n<p>The RFI screen's asks the customer to use their Roku customer account information to sign up or sign in to the channel, and it lists the requested information.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/signup-rfi-getuserdata-v2.jpg\\\" alt=\\\"roku815px - signup-rfi-getuserdata-v2\\\"></p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/signin-2-rfi-splash-v2.jpg\\\" alt=\\\"roku815px - signin-2-rfi-splash\\\"></p>\\n</li>\\n</ol>\\n<ol start=\\\"4\\\">\\n<li>\\n<p>If the customer clicks <strong>Continue</strong> in the RFI screen to confirm that Roku can share their Roku customer account information with the channel, the <a href=\\\"#userdata\\\"><strong>userData</strong> field</a> field is populated with the Roku customer account information that was requested in the <a href=\\\"#requesteduserdata\\\"><strong>requestedUserData</strong></a> field. If the customer clicks <strong>Cancel</strong> in the RFI screen to decline sharing their information, the <strong>userData</strong> field is set to \\\"invalid\\\".</p>\\n<pre><code>email = store.userdata.email\\nfirstname = m.store.userData.firstname\\nlastname = m.store.userData.lastname\\nphone = m.store.userData.phone\\n</code></pre>\\n</li>\\n</ol>\\n<p>Overall, the <a href=\\\"#userdata\\\"><strong>userData</strong> field</a> field may contain the following Roku customer account information fields.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>firstName</td>\\n<td>string</td>\\n<td>The user first name</td>\\n</tr>\\n<tr>\\n<td>lastName</td>\\n<td>string</td>\\n<td>The user last name</td>\\n</tr>\\n<tr>\\n<td>email</td>\\n<td>string</td>\\n<td>The user email address</td>\\n</tr>\\n<tr>\\n<td>street1</td>\\n<td>string</td>\\n<td>The first line of the user street address</td>\\n</tr>\\n<tr>\\n<td>street2</td>\\n<td>string</td>\\n<td>The second line of the user street address</td>\\n</tr>\\n<tr>\\n<td>city</td>\\n<td>string</td>\\n<td>The city where the user lives</td>\\n</tr>\\n<tr>\\n<td>state</td>\\n<td>string</td>\\n<td>The state where the user lives</td>\\n</tr>\\n<tr>\\n<td>zip</td>\\n<td>string</td>\\n<td>The user postal code</td>\\n</tr>\\n<tr>\\n<td>country</td>\\n<td>string</td>\\n<td>The country where the user lives</td>\\n</tr>\\n<tr>\\n<td>phone</td>\\n<td>string</td>\\n<td>The user phone number</td>\\n</tr>\\n<tr>\\n<td>birth</td>\\n<td>string</td>\\n<td><em>Available since Roku OS 10.0</em> <br /><br />The user birthdate (MM/YY).</td>\\n</tr>\\n<tr>\\n<td>gender</td>\\n<td>string</td>\\n<td><em>Available since Roku OS 10.0</em> <br /><br />The user gender (\\\"Male\\\", \\\"Female\\\", or unspecified).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getuserregiondata\\\">getUserRegionData</h3>\\n<p><em>Available since Roku OS 9.4</em></p>\\n<p>The <strong>getUserRegionData</strong> command retrieves the state, zip code, and country associated with the customer's Roku account. The location information returned by this command can be used to determine a customer's eligibility for regional-specific subscription products and content.</p>\\n<p>When this command is invoked, the ContentNode stored in the <strong>userRegionData</strong> field contains the following fields:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>state</td>\\n<td>string</td>\\n<td>The state associated with the customer's Roku account.</td>\\n</tr>\\n<tr>\\n<td>zip</td>\\n<td>string</td>\\n<td>The zip code associated with the customer's Roku account.</td>\\n</tr>\\n<tr>\\n<td>country</td>\\n<td>String</td>\\n<td>The country associated with the customer's Roku account.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getcatalog\\\">getCatalog</h3>\\n<p>Lists the <a href=\\\"/docs/developer-program/roku-pay/quickstart/in-channel-products.md\\\">In-Channel Products</a> that are linked to the running channel. When this command completes, the <strong>catalog</strong> the completion status:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>status</td>\\n<td>integer</td>\\n<td>Contains the command completion status. which may be one of the following values:<br /> <ul>\\n<li>2:  Interrupted</li>\\n<li>1:  Success</li>\\n<li>0:  Network error</li>\\n<li>-1: HTTP Error/Timeout</li>\\n<li>-2: Timeout</li>\\n<li>-3: Unknown Error</li>\\n<li>-4: Invalid request</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>statusMessage</td>\\n<td>string</td>\\n<td>Contains a string describing the command completion status</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>If the command is successful, the <strong>catalog</strong> or <strong>storeCatalog</strong> ContentNode contains a child ContentNode for each product available for purchase. Each child ContentNode includes the following information related to the product:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>code</td>\\n<td>string</td>\\n<td>The product identifier, as entered in the <strong>Product Identifier</strong> field on the <a href=\\\"https://developer.roku.com/products\\\">In-Channel Product page in the Developer Dashboard</a> when the product was created.</td>\\n</tr>\\n<tr>\\n<td>name</td>\\n<td>string</td>\\n<td>The item name (this name will also be set as the description).</td>\\n</tr>\\n<tr>\\n<td>quantity</td>\\n<td>Integer</td>\\n<td>For one-time purchase/consumable products only. The number of the product purchased (for example \\\"1000\\\" game points, \\\"3\\\" viewings of a movie rental).</td>\\n</tr>\\n<tr>\\n<td>productType</td>\\n<td>string</td>\\n<td>The product type (ex. \\\"MonthlySub\\\")</td>\\n</tr>\\n<tr>\\n<td>cost</td>\\n<td>string</td>\\n<td>Localized cost of the product with local currency symbol</td>\\n</tr>\\n<tr>\\n<td>freeTrialQuantity</td>\\n<td>integer</td>\\n<td>If the product has a free trial offer, the length of the trial period. For example, <strong>1</strong> for a 1-month free trial or <strong>7</strong> for a 7-day free trial.</td>\\n</tr>\\n<tr>\\n<td>freeTrialType</td>\\n<td>string</td>\\n<td>If the product has a free trial offer, the unit of time used by the trial (\\\"Days\\\" or \\\"Months\\\")</td>\\n</tr>\\n<tr>\\n<td>trialCost</td>\\n<td>integer</td>\\n<td>If the product uses introductory pricing, the discounted price.</td>\\n</tr>\\n<tr>\\n<td>trialQuantity</td>\\n<td>integer</td>\\n<td>If the product uses introductory pricing, the number of months the discounted pricing is applicable.</td>\\n</tr>\\n<tr>\\n<td>trialType</td>\\n<td>string</td>\\n<td>Set to \\\"months\\\" for all products. All products using introductory pricing use \\\"months\\\" as the unit of time for the trial.</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>string</td>\\n<td>Indicates whether the product has been \\\"saved\\\" or \\\"approved for sale\\\".</td>\\n</tr>\\n<tr>\\n<td>purchaseDate</td>\\n<td>String</td>\\n<td>The subscription purchase date</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getstorecatalog\\\">getStoreCatalog</h3>\\n<p>Lists the globally available <a href=\\\"/docs/developer-program/roku-pay/quickstart/in-channel-products.md\\\">In-Channel Products</a>, which are available to all channels. When the command completes, the <strong>storeCatalog</strong> field is set to a ContentNode containing completion status. If successful, the <strong>storeCatalog</strong> field ContentNode has child <strong>ContentNodes</strong> for each available item. See the <a href=\\\"#getcatalog\\\"><strong>getCatalog</strong></a> command for the fields related to the product that are available in the child ContentNode.</p>\\n<h3 id=\\\"doorder\\\">doOrder</h3>\\n<p>Displays the Roku Pay order confirmation screen, which is populated with information about the current order (product name, price, any free trial or discount offer). The customer can then either approve and complete the purchase, or cancel the purchase.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/signup-order-confirmation-do-order.jpg\\\" alt=\\\"roku815px - signup-order-confirmation-do-order\\\"></p>\\n<p>When the command completes, the <a href=\\\"#orderstatus\\\"><strong>orderStatus</strong> field</a> is set to a ContentNode containing information about the command completion.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>status</td>\\n<td>integer</td>\\n<td>Contains the command's completion status, which may be on the following values:<br /> <ul>\\n<li>2:  Interrupted</li>\\n<li>1:  Success</li>\\n<li>0:  Network error</li>\\n<li>-1: HTTP Error/Timeout</li>\\n<li>-2: Timeout</li>\\n<li>-3: Unknown Error</li>\\n<li>-4: Invalid request</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>If this command is successful, the <a href=\\\"#orderstatus\\\"><strong>orderStatus</strong> field</a> ContentNode will have child ContentNodes for each item purchased. The fields for each child ContentNode include the same information when the <a href=\\\"#getpurchases\\\"><strong>getPurchases</strong> command</a> is sent, but only the following fields are populated when the transaction is made:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>amount</td>\\n<td>string</td>\\n<td>Localized amount of the item purchased (post transaction) with local currency symbol</td>\\n</tr>\\n<tr>\\n<td>code</td>\\n<td>string</td>\\n<td>The product identifier, as entered in the <strong>Product Identifier</strong> field on the <a href=\\\"https://developer.roku.com/products\\\">In-Channel Product page in the Developer Dashboard</a> when the product was created.</td>\\n</tr>\\n<tr>\\n<td>purchaseId</td>\\n<td>string</td>\\n<td>The transaction ID</td>\\n</tr>\\n<tr>\\n<td>qty</td>\\n<td>integer</td>\\n<td>The quantity purchased</td>\\n</tr>\\n<tr>\\n<td>total</td>\\n<td>string</td>\\n<td>Localized total of the item purchased (including tax if applicable) with local currency symbol</td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>As of Roku OS 9.4, if the back button is pressed from the <strong>Order Confirmation</strong> dialog, the <strong>doOrder</strong> command returns only a status of 2 (\\\"interrupted\\\"). Error handling in channels may need to be updated based on this behavior.</p>\\n</blockquote>\\n<h3 id=\\\"getpurchases\\\">getPurchases</h3>\\n<p>Returns the list of purchases of current subscription products associated with the Roku customer account.</p>\\n<p>When this command completes, the <a href=\\\"#purchases\\\"><strong>purchases</strong> field</a> is set to a ContentNode containing the completion status.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>status</td>\\n<td>integer</td>\\n<td>Contains the command's completion status, which may be one of the following values:<br /> <ul>\\n<li>2:  Interrupted</li>\\n<li>1:  Success</li>\\n<li>0:  Network error</li>\\n<li>-1: HTTP Error/Timeout</li>\\n<li>-2: Timeout</li>\\n<li>-3: Unknown Error</li>\\n<li>-4: Invalid request</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>If this command is successful, the <a href=\\\"#purchases\\\"><strong>purchases</strong> field</a> ContentNode will have child ContentNodes for each item purchased. The fields for each child ContentNode include the following information about the purchased item:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>amount</td>\\n<td>string</td>\\n<td>Localized amount of the item purchased (post transaction) with local currency symbol</td>\\n</tr>\\n<tr>\\n<td>code</td>\\n<td>string</td>\\n<td>The product identifier, as entered in the <strong>Product Identifier</strong> field on the <a href=\\\"https://developer.roku.com/products\\\">In-Channel Product page in the Developer Dashboard</a> when the product was created.</td>\\n</tr>\\n<tr>\\n<td>cost</td>\\n<td>string</td>\\n<td>Localized cost of the item (prior to purchase) with local currency symbol</td>\\n</tr>\\n<tr>\\n<td>expirationDate</td>\\n<td>string</td>\\n<td>The subscription expiration date (<a href=\\\"https://www.iso.org/iso-8601-date-and-time-format.html\\\">ISO 8601</a> format)</td>\\n</tr>\\n<tr>\\n<td>freeTrialQuantity</td>\\n<td>integer</td>\\n<td>The free trial amount associated with the freeTrialType. For example, <strong>1</strong> for a 1-month free trial or <strong>7</strong> for a 7-day free trial.</td>\\n</tr>\\n<tr>\\n<td>freeTrialType</td>\\n<td>string</td>\\n<td>The free trial type (\\\"Days\\\" or \\\"Months\\\")</td>\\n</tr>\\n<tr>\\n<td>inDunning<br /><br /><em>Available since Roku OS 10.5</em></td>\\n<td>string</td>\\n<td>A flag that indicates whether the purchased subscription is past due state because of an invalid method of payment.<br /><br />This flag is set to \\\"true\\\" if the subscription is in the dunning state. In this case, check the <strong>status</strong> field to determine whether to grant the customer access to content:<br /><ul>\\n<li>If the <strong>status</strong> field is set to \\\"Valid\\\", the subscription is in a grace period and the viewer can access content.  </li>\\n<li>If the <strong>status</strong> field is set to \\\"Invalid\\\", the subscription is on hold and the viewer cannot access content. If the viewer adds a valid method of payment, the subscription will be automatically renewed and the status will become \\\"Valid\\\".</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>name</td>\\n<td>string</td>\\n<td>The item name (this name will also be set as the description).</td>\\n</tr>\\n<tr>\\n<td>productType</td>\\n<td>string</td>\\n<td>The product type (ex. \\\"MonthlySub\\\")</td>\\n</tr>\\n<tr>\\n<td>purchaseChannel<br /><br /><em>Available since Roku OS 10.5</em></td>\\n<td>string</td>\\n<td>Indicates where the Roku Pay subscription purchase was made:<br /><ul>\\n<li><strong>web</strong>. Subscription was purchased from <a href=\\\"http://roku.com/\\\">Roku.com</a> (for example, through <a href=\\\"/docs/developer-program/discovery/instant-signup.md\\\">Instant Signup</a> during the device activation).</li>\\n<li><strong>device</strong>. Subscription was purchased on the Roku device (through the on-device sign-up flow).</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>purchaseContext<br /><br /><em>Available since Roku OS 10.5</em></td>\\n<td>string</td>\\n<td>Indicates how the subscription purchase was made:<br /><ul>\\n<li><strong>isu</strong>. Subscription was purchased via <a href=\\\"/docs/developer-program/discovery/instant-signup.md\\\">Instant Signup</a>.</li>\\n<li><strong>iap</strong>. Subscription was purchased via an in-application purchase.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>purchaseDate</td>\\n<td>string</td>\\n<td>The purchase date (<a href=\\\"https://www.iso.org/iso-8601-date-and-time-format.html\\\">ISO 8601</a> format)</td>\\n</tr>\\n<tr>\\n<td>purchaseId</td>\\n<td>string</td>\\n<td>The transaction ID</td>\\n</tr>\\n<tr>\\n<td>qty</td>\\n<td>integer</td>\\n<td>The quantity purchased</td>\\n</tr>\\n<tr>\\n<td>renewalDate</td>\\n<td>string</td>\\n<td>The subscription renewal date (<a href=\\\"https://www.iso.org/iso-8601-date-and-time-format.html\\\">ISO 8601</a> format)</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>string</td>\\n<td>Indicates whether the purchase is for a current subscription (\\\"Valid\\\") or for a subscription that has been canceled, expired, or terminated (\\\"Invalid\\\")</td>\\n</tr>\\n<tr>\\n<td>total</td>\\n<td>string</td>\\n<td>Localized total of the item purchased (including tax if applicable) with local currency symbol</td>\\n</tr>\\n<tr>\\n<td>trialCost</td>\\n<td>integer</td>\\n<td>If the product uses introductory pricing, the discounted price.</td>\\n</tr>\\n<tr>\\n<td>trialQuantity</td>\\n<td>integer</td>\\n<td>If the product uses introductory pricing, the number of months the discounted pricing is applicable.</td>\\n</tr>\\n<tr>\\n<td>trialType</td>\\n<td>string</td>\\n<td>Set to \\\"months\\\" for all products. All products using introductory pricing use \\\"months\\\" as the unit of time for the trial.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getallpurchases\\\">getAllPurchases</h3>\\n<p><em>Available since Roku OS 9.1</em></p>\\n<p>The <strong>getAllPurchases</strong> command is similar to the <a href=\\\"#getpurchases\\\"><strong>getPurchases</strong> command</a> except that it requests the historical list of all canceled, expired, and terminated subscriptions over the lifetime of the current user account—in addition to the active subscriptions. You can use this method to leverage purchase history in order to implement subscription renewal flows and more easily determine if subscriptions have expired.</p>\\n<p>When this command completes, the <a href=\\\"#purchases\\\"><strong>purchases</strong> field</a> is set to a ContentNode containing the completion status.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>status</td>\\n<td>integer</td>\\n<td>Contains the command's completion status, which may be one of the following values:<br /> <ul>\\n<li>2:  Interrupted</li>\\n<li>1:  Success</li>\\n<li>0:  Network error</li>\\n<li>-1: HTTP Error/Timeout</li>\\n<li>-2: Timeout</li>\\n<li>-3: Unknown Error</li>\\n<li>-4: Invalid request</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>If this command is successful, the <a href=\\\"#purchases\\\"><strong>purchases</strong> field</a> ContentNode has child ContentNodes for each item purchased. The fields for each child ContentNode include a <code>status</code> field that indicates whether the purchase is for a current subscription (\\\"Valid\\\") or for a subscription that has been canceled, expired, or terminated (\\\"Invalid\\\"), and the following information about the purchased item:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>amount</td>\\n<td>string</td>\\n<td>Localized amount of the item purchased (post transaction) with local currency symbol</td>\\n</tr>\\n<tr>\\n<td>code</td>\\n<td>string</td>\\n<td>The product identifier, as entered in the <strong>Product Identifier</strong> field on the <a href=\\\"https://developer.roku.com/products\\\">In-Channel Product page in the Developer Dashboard</a> when the product was created.</td>\\n</tr>\\n<tr>\\n<td>cost</td>\\n<td>string</td>\\n<td>Localized cost of the item (prior to purchase) with local currency symbol</td>\\n</tr>\\n<tr>\\n<td>expirationDate</td>\\n<td>string</td>\\n<td>The subscription expiration date (<a href=\\\"https://www.iso.org/iso-8601-date-and-time-format.html\\\">ISO 8601</a> format)</td>\\n</tr>\\n<tr>\\n<td>freeTrialQuantity</td>\\n<td>integer</td>\\n<td>If the product has a free trial offer, the length of the trial period. For example, <strong>1</strong> for a 1-month free trial or <strong>7</strong> for a 7-day free trial.</td>\\n</tr>\\n<tr>\\n<td>freeTrialType</td>\\n<td>string</td>\\n<td>If the product has a free trial offer, the unit of time used by the trial (\\\"Days\\\" or \\\"Months\\\")</td>\\n</tr>\\n<tr>\\n<td>inDunning<br /><br /><em>Available since Roku OS 10.5</em></td>\\n<td>string</td>\\n<td>A flag that indicates whether the purchased subscription is past due state because of an invalid method of payment.<br /><br />This flag is set to \\\"true\\\" if the subscription is in the dunning state. In this case, check the <strong>status</strong> field to determine whether to grant the customer access to content:<br /><ul>\\n<li>If the <strong>status</strong> field is set to \\\"Valid\\\", the subscription is in a grace period and the viewer can access content.  </li>\\n<li>If the <strong>status</strong> field is set to \\\"Invalid\\\", the subscription is on hold and the viewer cannot access content. If the viewer adds a valid method of payment, the subscription will be automatically renewed and the status will become \\\"Valid\\\".</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>name</td>\\n<td>string</td>\\n<td>The item name (this name will also be set as the description).</td>\\n</tr>\\n<tr>\\n<td>productType</td>\\n<td>string</td>\\n<td>The product type (ex. \\\"MonthlySub\\\")</td>\\n</tr>\\n<tr>\\n<td>purchaseChannel<br /><br /><em>Available since Roku OS 10.5</em></td>\\n<td>string</td>\\n<td>Indicates where the Roku Pay subscription purchase was made:<br /><ul>\\n<li><strong>web</strong>. Subscription was purchased from <a href=\\\"http://roku.com/\\\">Roku.com</a> (for example, through <a href=\\\"/docs/developer-program/discovery/instant-signup.md\\\">Instant Signup</a> during the device activation).</li>\\n<li><strong>device</strong>. Subscription was purchased on the Roku device (through the on-device sign-up flow).</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>purchaseContext<br /><br /><em>Available since Roku OS 10.5</em></td>\\n<td>string</td>\\n<td>Indicates how the subscription purchase was made:<br /><ul>\\n<li><strong>isu</strong>. Subscription was purchased via <a href=\\\"/docs/developer-program/discovery/instant-signup.md\\\">Instant Signup</a>.</li>\\n<li><strong>iap</strong>. Subscription was purchased via an in-application purchase.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>purchaseDate</td>\\n<td>string</td>\\n<td>The purchase date (<a href=\\\"https://www.iso.org/iso-8601-date-and-time-format.html\\\">ISO 8601</a> format)</td>\\n</tr>\\n<tr>\\n<td>purchaseId</td>\\n<td>string</td>\\n<td>The transaction ID</td>\\n</tr>\\n<tr>\\n<td>qty</td>\\n<td>integer</td>\\n<td>The quantity purchased</td>\\n</tr>\\n<tr>\\n<td>renewalDate</td>\\n<td>string</td>\\n<td>The subscription renewal date (<a href=\\\"https://www.iso.org/iso-8601-date-and-time-format.html\\\">ISO 8601</a> format)</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>string</td>\\n<td>Indicates whether the purchase is for a current subscription (\\\"Valid\\\") or for a subscription that has been canceled, expired, or terminated (\\\"Invalid\\\")</td>\\n</tr>\\n<tr>\\n<td>total</td>\\n<td>string</td>\\n<td>Localized total of the item purchased (including tax if applicable) with local currency symbol</td>\\n</tr>\\n<tr>\\n<td>trialCost</td>\\n<td>Integer</td>\\n<td>If the product uses introductory pricing, the discounted price.</td>\\n</tr>\\n<tr>\\n<td>trialQuantity</td>\\n<td>integer</td>\\n<td>If the product uses introductory pricing, the number of months the discounted pricing is applicable.</td>\\n</tr>\\n<tr>\\n<td>trialType</td>\\n<td>string</td>\\n<td>Set to \\\"months\\\" for all products. All products using introductory pricing use \\\"months\\\" as the unit of time for the trial.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"storechannelcreddata\\\">storeChannelCredData</h3>\\n<p><em>Available since Roku OS 9.1</em></p>\\n<p>Stores an OAuth token, custom token, or other custom data, which you can then retrieve with the <a href=\\\"#getchannelcred\\\">getChannelCred</a> command (the token is stored in the <strong>channelCred.json.channel_data</strong> field). This data is stored securely in the Roku cloud and can be retrieved by other devices linked to the same Roku account. As a result, users do not have to re-enter their account credentials when setting up new devices associated with the same Roku account. For more information, see <a href=\\\"/docs/developer-program/authentication/universal-authentication-protocol-for-single-sign-on.md\\\">Automatic Account Link</a>.</p>\\n<pre><code>function init():\\n    m.store.ObserveField(\\\"storeChannelCredDataStatus\\\", \\\"onStoreChannelCredData\\\")\\n    m.store.ObserveField(\\\"channelCred\\\", \\\"onGetChannelCred\\\")\\n\\n    ' trigger \\\"storeChannelCredData\\\" command with \\\"test channel cred data\\\" in m.store.channelCredData field.\\n    print \\\"StoreChannelCredData\\\"\\n    m.store.channelCredData = \\\"test channel cred data\\\"\\n    print \\\"store.channelCredData: \\\" m.store.channelCredData\\n    m.store.command = \\\"storeChannelCredData\\\"\\nend function\\n\\nfunction onStoreChannelCredData() as void\\n    print \\\"onStoreChannelCredData\\\"\\n    if (m.store.storeChannelCredDataStatus &#x3C;> invalid)\\n        print \\\"- response: \\\" m.store.storeChannelCredDataStatus.response\\n        print \\\"- status: \\\" m.store.storeChannelCredDataStatus.status\\n    end if\\n\\n    ' trigger \\\"getChannelCred\\\" command.\\n    print \\\"GetChannelCred\\\"\\n    m.store.command = \\\"getChannelCred\\\"\\nend function\\n\\nfunction isstr(value)\\n    return (value &#x3C;> invalid) and (GetInterface(value, \\\"ifString\\\") &#x3C;> invalid)\\nend function\\n\\nfunction isNullOrEmpty(obj)\\n    if obj = invalid return true\\n    if not isstr(obj) return true\\n    if Len(obj) = 0 return true\\n    return false\\nend function\\n\\nfunction onGetChannelCred() as void\\n    print \\\"onGetChannelCred\\\"\\n    if (m.store.channelCred &#x3C;> invalid)\\n        print \\\"- channelID: \\\" m.store.channelCred.channelID\\n        print \\\"- status: \\\" m.store.channelCred.status\\n        print \\\"- publisherDeviceID: \\\" m.store.channelCred.publisherDeviceID\\n        if (not isNullOrEmpty(m.store.channelCred.json))\\n            json = parsejson(m.store.channelCred.json)\\n            if (json &#x3C;> invalid) and (not isNullOrEmpty(json.roku_pucid))\\n                print \\\"- error: \\\" json.error\\n                print \\\"- roku_pucid: \\\" json.roku_pucid\\n                print \\\"- token_type: \\\" json.token_type\\n                print \\\"- channel_data: \\\" json.channel_data\\n            end if\\n        end if\\n    end if\\nend function\\n</code></pre>\\n<p>This command returns an roAssociativeArray with the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>response</td>\\n<td>json</td>\\n<td>A string in JSON format, with the following key-value pairs: <br /><table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>status</td>\\n<td>string</td>\\n<td>The request status, which may be \\\"success\\\" or \\\"failure\\\".</td>\\n</tr>\\n<tr>\\n<td>error</td>\\n<td>string</td>\\n<td>A description of the error (if any). This will be set to \\\"none\\\" for a successful request.</td>\\n</tr>\\n<tr>\\n<td>error_detail</td>\\n<td>string</td>\\n<td>A detailed description of the service error (if any). This value will be null (uninitialized) for a successful request.</td>\\n</tr>\\n</tbody>\\n</table><br /><br />if billing is not enabled for the channel, this field will include a string with a service error message.</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>Integer</td>\\n<td>An integer representing the request status. A successful request will return a status of 0.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getchannelcred\\\">getChannelCred</h3>\\n<p><em>Available since Roku OS 9.1</em></p>\\n<p>Retrieves an oAuth token, custom token, or other authentication artifact (<code>channel_data</code>), or a Roku Partner Unique Customer Identifier (<code>roku_pucid</code>) if the channel is using the <a href=\\\"/docs/developer-program/authentication/roku-sso-authentication-protocol.md\\\">Roku single-sign on (SSO) authentication service</a> for authenticating users. If successful, the ContentNode stored in the <code>channelCred</code> field represents the channel credentials with the following fields:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>channelID</td>\\n<td>string</td>\\n<td>A string representing the channel ID (ex. \\\"2213\\\" for Roku Media Player)</td>\\n</tr>\\n<tr>\\n<td>errorCode</td>\\n<td>string</td>\\n<td>A description of the service error (if any). This will be an empty string for a successful request.</td>\\n</tr>\\n<tr>\\n<td>json</td>\\n<td>string</td>\\n<td>A string in JSON format, with the following key-value pairs: <br /><table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>error</td>\\n<td>string</td>\\n<td>A string containing an error message (if any). This value will be null (uninitialized) for a successful request.</td>\\n</tr>\\n<tr>\\n<td>roku_pucid</td>\\n<td>string</td>\\n<td>An agnostic ID (in UUID format) representing the user. This value will be identical when retrieved in the same channel across devices linked to the same Roku account. <br /><br />If a channel is storing an access token in the Roku cloud, this field does not contain a PUCID value.</td>\\n</tr>\\n<tr>\\n<td>token_type</td>\\n<td>string</td>\\n<td>Type of the returned token, e.g. \\\"urn:roku:pucid:token_type:pucid_token\\\"</td>\\n</tr>\\n<tr>\\n<td>channel_data</td>\\n<td>String</td>\\n<td>The access token, oAuth token, or other authentication artifact stored by the channel in the Roku cloud via the <a href=\\\"#storechannelcreddata\\\">StoreChannelCredData</a> command. <br /><br />This field is not returned if the <a href=\\\"#storechannelcreddata\\\">StoreChannelCredData</a> command is not used to store an artifact in the Roku cloud.</td>\\n</tr>\\n</tbody>\\n</table><br /> If the request fails, this json string will be empty.</td>\\n</tr>\\n<tr>\\n<td>publisherDeviceID</td>\\n<td>string</td>\\n<td>A unique identifier of the device.</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>integer</td>\\n<td>An integer representing the request status. A successful request will return a status of 0.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"getdeviceattestationtoken\\\">getDeviceAttestationToken</h3>\\n<p><em>Available since Roku OS 11.5</em></p>\\n<p>Generates a signed JSON web token (JWT) in the Roku cloud and returns it to the channel application. This token can then be used by the publisher's web services to verify that a message originated from a genuine Roku device. The following example demonstrates how to generate the device attestation token:</p>\\n<pre><code>sub handleData(event)\\n  data = event.getData()\\n  print data.status\\n  print data.token\\nend sub\\n\\nm.channelstore_node= m.top.findNode(\\\"deviceAttestationToken\\\")\\nm.data.observeField(\\\"deviceAttestationToken\\\", \\\"handleData\\\")\\n..\\nm.channelstore_node.nonce = GetHexString(16)\\nm.channelstore_node.command = \\\"getDeviceAttestationToken\\\"\\n</code></pre>\\n<p><strong>Sample JWT</strong></p>\\n<p>The following demonstrates a sample JWT that is returned to the channel. Developers can use a <a href=\\\"https://jwt.io/#debugger-io\\\">JWT debugger</a> to decode this token.</p>\\n<pre><code>eyJ4NXUiOiJodHRwczovL2V4YW1wbGUucm9rdS5jb20vc2FtcGxlY2VydCIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJuYmYiOjE2NTYzNzQyNzQsIngtcm9rdS1hdHRlc3RhdGlvbi1kYXRhIjp7Im5vbmNlIjoiNUUwNjkyRTBBMzg5RjRGNiIsImNoYW5uZWxJZCI6ImRldiIsImRldmVsb3BlcklkIjoiY2FhNzNmYmI1ZTc1YTQ2YTRiNjExNGRlNTFhNWFkYTdkNjE2ZTJlZCIsInRpbWVzdGFtcE1zIjoxNjU2Mzc3ODczOTkwfSwiaXNzIjoidXJuOnJva3U6Y2xvdWQtc2VydmljZXM6ZGV2aWNlLWF0dGVzdGF0aW9uIiwiZXhwIjoxNjU2NDY0Mjc0fQ.nywDvSUys27oeaQZ3yXwNBfOnXbO-TUDuekOPZYjSssfZhNhWwRXvPLbJKHcNMR5Z0vFOQLVDFeqEVGauIMxMEke5UFLuCRxhr3ayBJJPt_BPfrEFbAvYjFEGdKkxJqYUhuFE38R8lU2k7dhO0iFxDw1Qq7W4w8_7CjmDy4YFf7IfyhV7Vf2kGiOx5C94Niw5N2td3s21F3z77Rq_bofQ51DOKIwo_cDVuvPQnDyxG-CNEydZKCZZwGPYCKEHMPrIOOXJ-S9ZjArgaEpBUpMXWJibFxnkpVUVzbC22GEaqz_SjOJXFMQU7TaCKkDeCYVKylgKwCvbvHRDlgogf7kqg\\n</code></pre>\\n<p><strong>Verifying the JWT</strong></p>\\n<p>To verify the JWT, developers must <a href=\\\"https://devtools.web.roku.com/device_attestation_token_cert/RokuDeviceAttestationIntermediateCA.cert.pem\\\">download the Roku device attestation token certificate</a> and authenticate that the token is signed by that certificate (see <a href=\\\"https://jwt.io/introduction\\\">https://jwt.io/introduction</a> for more information on JWT verification methods). The decoded JWT contains the following fields</p>\\n<p><strong>Decoded JWT</strong></p>\\n<p>The decoded JWT contains the following fields:</p>\\n<pre><code>\\\"x-roku-attestation-data\\\": {\\n    \\\"nonce\\\": \\\"5E0692E0A389F4F6\\\",\\n    \\\"channelId\\\": \\\"dev\\\",\\n    \\\"developerId\\\": \\\"caa73fbb5e75a46a4b6114de51a5ada7d616e2ed\\\",\\n    \\\"timestampMs\\\": 1656377873990\\n }\\n</code></pre>\\n<h3 id=\\\"requestpartnerorder-1\\\">requestPartnerOrder</h3>\\n<blockquote>\\n<p>See <a href=\\\"/docs/developer-program/roku-pay/implementation/tvod-channel.md\\\">Creating TVOD channels</a> for how to use this command for transactional purchases.</p>\\n</blockquote>\\n<p>Checks the user's billing status for transactional purchases. This is a prerequisite for sending the <a href=\\\"#confirmpartnerorder\\\">confirmPartnerOrder command</a>.</p>\\n<p>If this command is successful, the <a href=\\\"#requestpartnerorderstatus\\\"><strong>requestPartnerOrderStatus</strong> field</a> contains the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>orderId</td>\\n<td>String</td>\\n<td>The ID that must be included as a field in the <strong>confirmOrderInfo</strong> ContentNode used by the <a href=\\\"#confirmpartnerorder\\\">confirmPartnerOrder</a> command.</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>String</td>\\n<td>Success</td>\\n</tr>\\n<tr>\\n<td>tax</td>\\n<td>String</td>\\n<td>Cost of tax (if applicable)</td>\\n</tr>\\n<tr>\\n<td>total</td>\\n<td>String</td>\\n<td>Total cost of transaction</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>If this command fails, the <a href=\\\"#requestpartnerorderstatus\\\"><strong>requestPartnerOrderStatus</strong> field</a> contains the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>errorCode</td>\\n<td>String</td>\\n<td>An error code representing why the transaction failed</td>\\n</tr>\\n<tr>\\n<td>errorMessage</td>\\n<td>String</td>\\n<td>An error message explaining why the transaction failed</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>String</td>\\n<td>Failure</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"confirmpartnerorder-1\\\">confirmPartnerOrder</h3>\\n<blockquote>\\n<p>See <a href=\\\"/docs/developer-program/roku-pay/implementation/tvod-channel.md\\\">Creating TVOD channels</a> for how to use this command for transactional purchases.</p>\\n</blockquote>\\n<p>This command is equivalent to the <strong>doOrder</strong> command for transaction purchases. The user's billing status must first be confirmed with the <a href=\\\"#requestpartnerorder\\\">requestPartnerOrder command</a> before sending this command.</p>\\n<p>If this command is successful, the <a href=\\\"#confirmpartnerorderstatus\\\"><strong>confirmPartnerOrderStatus</strong> field</a> contains the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>purchaseId</td>\\n<td>String</td>\\n<td>The transaction ID</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>String</td>\\n<td>Success</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>If this command fails, the <a href=\\\"#confirmpartnerorderstatus\\\"><strong>confirmPartnerOrderStatus</strong> field</a> contains the following values:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>errorCode</td>\\n<td>String</td>\\n<td>An error code representing why the transaction failed</td>\\n</tr>\\n<tr>\\n<td>errorMessage</td>\\n<td>String</td>\\n<td>An error message explaining why the transaction failed</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>String</td>\\n<td>Failure</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/layout-group-nodes/group.md":"{\n  \"content\": \"<h1 id=\\\"group\\\">Group</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\"><strong>Node</strong></a> </p>\\n<p>Group is the base class of all renderable nodes. Group also provides fields that control the transformation, visibility and opacity of themselves and all of their children.</p>\\n<p>Each Group defines a local coordinate system relative to the coordinate system of its parent node. A 2D matrix that describes how points in the local coordinate system can be transformed into the parent node coordinate system is constructed from the values of the translation, rotation, scale, and scaleRotateCenter fields.</p>\\n<p>The 2D matrix is computed using the values of these four fields in the following order:</p>\\n<ul>\\n<li>translating by the negative of the scaleRotateCenter field value</li>\\n<li>scaling by the the scale field value</li>\\n<li>rotating by the rotation field value</li>\\n<li>translating by the the scaleRotateCenter field value</li>\\n<li>translating by the translation field value</li>\\n</ul>\\n<p>In matrix math terms, the overall 2D matrix is:</p>\\n<p>  M = C(-1) S R C T</p>\\n<p>Where:</p>\\n<ul>\\n<li>M is the total matrix</li>\\n<li>C is a 2D translation matrix that describes the location of the scale/rotation center in the node's local coordinate system</li>\\n<li>C(-1) is the inverse of C</li>\\n<li>S is a 2D scaling matrix</li>\\n<li>R is a 2D rotation matrix</li>\\n<li>T is a 2D translation matrix</li>\\n</ul>\\n<blockquote>\\n<p>In nearly all cases, either the default values for these four fields will be used (in which case, the local coordinate system of the node is the same as the parent node coordinate system), or only a translation will be specified (in which, the local coordinate system is a simple offset from the parent node coordinate system).</p>\\n</blockquote>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>visible</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>If true, the node and its children are rendered. If false, the node and its children do not render</td>\\n</tr>\\n<tr>\\n<td>opacity</td>\\n<td>float</td>\\n<td>1.0</td>\\n<td>READ_WRITE</td>\\n<td>Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the SceneGraph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the SceneGraph to fade in and out by animating the opacity of the node at the root of the branch</td>\\n</tr>\\n<tr>\\n<td>translation</td>\\n<td>vector2d</td>\\n<td>[0.0,0.0]</td>\\n<td>READ_WRITE</td>\\n<td>Defines the origin of the node local coordinate system relative to its parent node</td>\\n</tr>\\n<tr>\\n<td>rotation</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, specifically Roku Players without OpenGL graphics support, only rotations of 0, 90, 180 and 270 degrees (in equivalent radians) are supported. (See <a href=\\\"/docs/specs/hardware.md#current-models\\\" title=\\\"Roku Models and Features\\\">Roku Models and Features</a> for information on OpenGL support)</td>\\n</tr>\\n<tr>\\n<td>scale</td>\\n<td>vector2d</td>\\n<td>[1.0,1.0]</td>\\n<td>READ_WRITE</td>\\n<td>Defines the scale factor to be applied to the node local coordinate</td>\\n</tr>\\n<tr>\\n<td>scaleRotateCenter</td>\\n<td>vector2d</td>\\n<td>[0.0,0.0]</td>\\n<td>READ_WRITE</td>\\n<td>Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</td>\\n</tr>\\n<tr>\\n<td>childRenderOrder</td>\\n<td>option as string</td>\\n<td>renderLast</td>\\n<td>READ_WRITE</td>\\n<td><table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>\\\"renderFirst\\\"</code></td>\\n<td>any drawing done by this node will be done <strong>before</strong> the node children are rendered</td>\\n</tr>\\n<tr>\\n<td><code>\\\"renderLast\\\"</code></td>\\n<td>any drawing done by this node will be done <strong>after</strong> the node children are rendered</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>inheritParentTransform</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the SceneGraph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the SceneGraph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the SceneGraph (that is, the Scene component)</td>\\n</tr>\\n<tr>\\n<td>inheritParentOpacity</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value</td>\\n</tr>\\n<tr>\\n<td>clippingRect</td>\\n<td>array of float</td>\\n<td>[ 0.0, 0.0, 0.0, 0.0 ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area. <ul>\\n<li><code>ClippingRects</code> can be specified by the node or by any of its ancestors in the SceneGraph.</li>\\n<li><code>ClippingRects</code> are automatically set by some nodes such as lists and grids.</li>\\n<li><code>ClippingRects</code> are always clipped to the screen boundaries, so if a <code>clippingRect</code> is specified that is partially or completely offscreen, it will be clipped to the screen boundaries. With respect to render tracking, although the node could be completely within the bounds of the specified <code>clippingRect</code>, it's <code>renderTracking</code> field could be set to <code>\\\"none\\\"</code> if the portion of the <code>clippingRect</code> it occupies is completely offscreen.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>renderPass</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Used in combination with the numRenderPasses field of nodes extended from the <a href=\\\"/docs/references/scenegraph/abstract-nodes/arraygrid.md\\\" title=\\\"ArrayGrid\\\">ArrayGrid</a> abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render</td>\\n</tr>\\n<tr>\\n<td>muteAudioGuide</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Set to true to suppress the default CVAA text to speech. This allows channels to provide their own custom implementation</td>\\n</tr>\\n<tr>\\n<td>enableRenderTracking</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>If true, renderTracking will be set to a string describing how much of the node is rendered on screen</td>\\n</tr>\\n<tr>\\n<td>renderTracking</td>\\n<td>option as string</td>\\n<td>disabled</td>\\n<td>READ_WRITE</td>\\n<td>renderTracking is set to \\\"disabled\\\" when enableRenderTracking is set to false. The following options are only available when enableRenderTracking is set to true: <table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>\\\"none\\\"</code></td>\\n<td>renderTracking is set to: <code>\\\"none\\\"</code> if <strong>one or more</strong> of these conditions is true: <ul>\\n<li>the node's <code>visible</code> field is set to <code>false</code>.</li>\\n<li>the node's <code>opacity</code> field is set to <code>0.0</code>.</li>\\n<li>no <code>clippingRect</code> is specified and the node is completely offscreen.</li>\\n<li>a <code>clippingRect</code> is specified and the node lies completely outside that <code>clippingRect's</code> coordinates or is completely offscreen.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td><code>\\\"partial\\\"</code></td>\\n<td>renderTracking is set to <code>\\\"partial\\\"</code> if <strong>all</strong> of the following conditions are true: <ul>\\n<li>the node's <code>visible</code> field is set to <code>true</code>.</li>\\n<li>the node's <code>opacity</code> field is greater than <code>0.0</code>.</li>\\n<li>no <code>clippingRect</code> is specified and the node is partially offscreen.</li>\\n<li>a <code>clippingRect</code> is specified and the node lies partially inside the <code>clippingRect's</code> coordinates.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td><code>\\\"full\\\"</code></td>\\n<td>renderTracking is set to <code>\\\"full\\\"</code> if <strong>all</strong> of the following conditions are true: <ul>\\n<li>the node's <code>visible</code> field is set to <code>true</code>.</li>\\n<li>the node's <code>opacity</code> field is greater than <code>0.0</code>.</li>\\n<li>no <code>clippingRect</code> is specified and the node is completely onscreen.</li>\\n<li>a <code>clippingRect</code> is specified and the node lies completely inside the <code>clippingRect's</code> coordinates.</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/layout-group-nodes/buttongroup.md":"{\n  \"content\": \"<h1 id=\\\"buttongroup\\\">ButtonGroup</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/layoutgroup.md\\\" title=\\\"**LayoutGroup**\\\"><strong>LayoutGroup</strong></a></p>\\n<p>The ButtonGroup node class manages the layout, visual attributes, and focus management of a vertical list of Button nodes. When the ButtonGroup node has focus, it sets the key focus on a single one of its child Button nodes.</p>\\n<ul>\\n<li>The buttons can be easily created using default button appearances by setting the buttons field to an array of strings containing the labels for each button. </li>\\n<li>A single observer can watch for any of the Button nodes in the group to be selected by observing the buttonSelected field.</li>\\n<li>By default, Button nodes added to the group will have the default button appearance. Several fields exist that allow you to change an attribute of the appearance of all Button nodes in the group.</li>\\n</ul>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>textColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the button label color for all unfocused Button nodes in the group. Only set to override the system default</td>\\n</tr>\\n<tr>\\n<td>focusedTextColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the button label color for the Button node that has focus, if any. Only set to override the system default</td>\\n</tr>\\n<tr>\\n<td>textFont</td>\\n<td>Font</td>\\n<td>system: MediumSystemFont</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the <a href=\\\"/docs/references/scenegraph/typographic-nodes/font.md\\\" title=\\\"Font\\\">Font</a> node for all unfocused Button nodes in the group. Only set to override the system default. See Font for a list of all system fonts available</td>\\n</tr>\\n<tr>\\n<td>focusedTextFont</td>\\n<td>Font</td>\\n<td>system: MediumBoldSystemFont</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the <a href=\\\"/docs/references/scenegraph/typographic-nodes/font.md\\\" title=\\\"Font\\\">Font</a> node for the Button node that has focus, if any. Only set to override the system default. See Font  for a list of all system fonts available</td>\\n</tr>\\n<tr>\\n<td>focusBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap to be used as the background for the Button node that has focus. Only set to override the system default</td>\\n</tr>\\n<tr>\\n<td>focusFootprintBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap to be used as the focus footprint background, when focus is not on the ButtonGroup node. The focus footprint is a visual indicator of the button that will take focus when focus moves back onto the ButtonGroup node. Only set to override the system default</td>\\n</tr>\\n<tr>\\n<td>iconUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap for the button icon for all unfocused Button nodes in the group. Only set to override the system default</td>\\n</tr>\\n<tr>\\n<td>focusedIconUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap for the focused button icon. Only set to override the system default</td>\\n</tr>\\n<tr>\\n<td>minWidth</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the minimum width for the Button nodes in the group. The minWidth field must be less than or equal to the maxWidth field. Only set to override the system default</td>\\n</tr>\\n<tr>\\n<td>maxWidth</td>\\n<td>float</td>\\n<td>32767</td>\\n<td>READ_WRITE</td>\\n<td>When set, specifies the maximum width for the Button nodes in the group. The maxWidth field must be greater than or equal to the minWidth field</td>\\n</tr>\\n<tr>\\n<td>buttonHeight</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of each Button node in the group. Only set to override the system default</td>\\n</tr>\\n<tr>\\n<td>rightJustify</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the button labels and icons should be right- or left-justified. When right-justified and there is an icon, it appears to the right of the button label</td>\\n</tr>\\n<tr>\\n<td>buttonSelected</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>Set to the index of the selected button whenever the user selects a button in the group</td>\\n</tr>\\n<tr>\\n<td>buttonFocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>Set to the index of the focused button whenever a button in the group receives the key focus</td>\\n</tr>\\n<tr>\\n<td>focusButton</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td>Causes the button with the specified index to receive the focus when the ButtonGroup node has the key focus. Note that if the ButtonGroup node does not have the key focus when the focusButton field is set, the specified button will display the focus \\\"footprint\\\" as its background</td>\\n</tr>\\n<tr>\\n<td>buttons</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>WRITE_ONLY</td>\\n<td>Allows a set of Button nodes to be easily created by providing an array of button labels. Each string in the array will result in a Button node to be added to the ButtonGroup node, using the string as the button label</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/widgets/ButtonGroupExample\\\">ButtonGroupExample</a> is a sample channel demonstrating ButtonGroup in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/layout-group-nodes/layoutgroup.md":"{\n  \"content\": \"<h1 id=\\\"layoutgroup\\\">LayoutGroup</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a></p>\\n<p>The LayoutGroup node class manages the position of its child nodes by arranging them in a row from left to right (horizontal layout), or in a column from top to bottom (vertical layout). Fields provide options to control the spacing between children, the horizontal and vertical alignment, and the margins around the edges of the group.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>layoutDirection</td>\\n<td>string</td>\\n<td>vert</td>\\n<td>READ_WRITE</td>\\n<td>Controls the layout direction <table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Use</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>horiz</td>\\n<td>Positions the children in a row from left to right</td>\\n</tr>\\n<tr>\\n<td>vert</td>\\n<td>Positions the children in a column from top to bottom</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>horizAlignment</td>\\n<td>string</td>\\n<td>left</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the alignment point in the horizontal direction. The effect of the value set depends on the whether the layoutDirection field value is set to either horiz or vert <table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>layoutDirection</th>\\n<th>Use</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>left</td>\\n<td>vert</td>\\n<td>Aligns the left edges of each child in the column, and sets the LayoutGroup node local x-coordinate origin at the left edge of the children</td>\\n</tr>\\n<tr>\\n<td>left</td>\\n<td>horiz</td>\\n<td>Sets the LayoutGroup node local x-coordinate origin at the left edge of the first child</td>\\n</tr>\\n<tr>\\n<td>center</td>\\n<td>vert</td>\\n<td>Aligns the centers of each child in the column, and sets the LayoutGroup node local x-coordinate origin at the center alignment point</td>\\n</tr>\\n<tr>\\n<td>center</td>\\n<td>horiz</td>\\n<td>Sets the LayoutGroup node local x-coordinate origin at the center of the horizontal row of children</td>\\n</tr>\\n<tr>\\n<td>right</td>\\n<td>vert</td>\\n<td>Aligns the right edges of each child in the column, and sets the <strong>LayoutGroup</strong> node local x-coordinate origin is at the right edge of the children</td>\\n</tr>\\n<tr>\\n<td>right</td>\\n<td>horiz</td>\\n<td>Sets the LayoutGroup node local x-coordinate origin at the right edge of the last child</td>\\n</tr>\\n<tr>\\n<td>custom</td>\\n<td>vert</td>\\n<td>Explicitly set the x translation of each child of the LayoutGroup. If the layoutDirection is \\\"horiz\\\", custom will not be a valid setting. Instead, \\\"left\\\" will be used to do the child layout.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>vertAlignment</td>\\n<td>string</td>\\n<td>top</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the alignment point in the vertical direction. The effect of the value set depends on the whether the layoutDirection field value is set to either horiz or vert <table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>layoutDirection</th>\\n<th>Use</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>top</td>\\n<td>horiz</td>\\n<td>Aligns the top edges of each child in the row, and sets the <strong>LayoutGroup</strong> node local y-coordinate origin at the top edge of the children</td>\\n</tr>\\n<tr>\\n<td>top</td>\\n<td>vert</td>\\n<td>Sets the LayoutGroup node local y-coordinate origin at the top edge of the first child</td>\\n</tr>\\n<tr>\\n<td>center</td>\\n<td>horiz</td>\\n<td>Aligns the centers of each child in the row, and sets the LayoutGroup node local y-coordinate origin at the center alignment point</td>\\n</tr>\\n<tr>\\n<td>vert</td>\\n<td>vert</td>\\n<td>Sets the <strong>LayoutGroup</strong> node local y-coordinate origin at the center of the vertical column of children</td>\\n</tr>\\n<tr>\\n<td>bottom</td>\\n<td>horiz</td>\\n<td>Aligns the bottom edges of each child in the row, and sets the <strong>LayoutGroup</strong> node local y-coordinate origin at the bottom edge of the children</td>\\n</tr>\\n<tr>\\n<td>bottom</td>\\n<td>vert</td>\\n<td>Sets the LayoutGroup node local y-coordinate origin at the bottom edge of the last child</td>\\n</tr>\\n<tr>\\n<td>custom</td>\\n<td>horiz</td>\\n<td>Explicitly set the y translation of each child of the LayoutGroup. If the layoutDirection is \\\"vert\\\", custom will not be a valid setting. Instead, \\\"top\\\" will be used to do the child layout.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>itemSpacings</td>\\n<td>array of floats</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Controls the spacing before or after each child in the layout direction. By default, no space is added between the children</td>\\n</tr>\\n<tr>\\n<td>addItemSpacingAfterChild</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Controls how the spaces specified in the itemSpacings field are inserted. By default, the field value is set to true. This causes the specified spaces to be inserted after the child is positioned. If the field value is set to false, the specified item space is inserted before the child is positioned</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/layout-group-nodes/targetgroup.md":"{\n  \"content\": \"<h1 id=\\\"targetgroup\\\">TargetGroup</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a> </p>\\n<p>The TargetGroup node class associates a set of rectangular regions that children of the group will occupy. Like MarkupList, the TargetGroup has a content field containing the data for each item and an itemComponentName field that specifies an RSG component that will be used to render a content item. It also has a targetSet field that contains a <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/targetset.md\\\" title=\\\"TargetSet\\\">TargetSet</a> that define a set of rectangular targets where children of the TargetGroup will be rendered.</p>\\n<p>The TargetGroup node is typically used to create a scrolling list (or row) of items where the focused item occupies more space than the other items.</p>\\n<p>For example, a TargetGroup could be used to create a full screen vertical scrolling list of item where the focused item is larger than the other items in the list. As the list items scroll, the appearance of the item moving into the focus region would be dynamically adjusted to fill the larger focus region. Simultaneously, the appearance of the item leaving the focus region would be dynamically adjust to return to the unfocused size. To set up this use case, you might set the targetSet field to a TargetSet node that specifies nine rectangles. The first rectangle would be specified to have the width and height of an unfocused item and be positioned so that it's bottom is above the top of the screen. The last rectangle would be specified to have the width and height of an unfocused item and be positioned so that's top is below the bottom of the screen. The remaining seven rectangles would define the rectangular regions of the onscreen items. Suppose the design calls for the focus item to be centered vertically at the center of the screen. To do that, you would specify the 5th rectangle to be larger than the other eight and position it so that it is centered vertically, you would specify the remaining rectangles to form a column of rectangular regions where the top three and bottom three visible items would be located.</p>\\n<p>The second step of setting up this use case would be to implement an RSG component that will be used to render each item.  The TargetGroup node manages the creation of the items for the visible components, associates each with a ContentNode, and updates fields of the item component with information such as the current width and height of the item and the focus status of the item.</p>\\n<p>The TargetGroup's jumpToItem field is set to identify which content item is to be located at the TargetSet's targetRects field target rectangle identified by the TargetSet's focusindex field. </p>\\n<p>The final step of setting up this use case would be to create a VerticalList component that extends TargetGroup, sets up the TargetGroup's TargetSet node, and as the user presses up and down buttons on the remote, sets the TargetGroup's animateToTargetItem field to the prior or next index. Setting the animateToTargetItem field causes the displayed items to smoothly animate from their current target region to another target region, such that the specified index ends up at the TargetSet's target rectangle that is identified by the TargetSet's focusIndex field.</p>\\n<p>The above use case specifies the most common use case for the TargetGroup node, but only hints at the possible uses. For example, you could create your own RSG components with various custom behaviors. There might include:</p>\\n<ul>\\n<li>A list where all the items are small when the list does not have the focus, but when the list receives the focus, all of the items smoothly adjust their size and position so that the focus item is largest, the items on either side of the focus item are slightly larger than the unfocused size and the remaining items remain the same size as the unfocused items. To do this, you would create two TargetSet's in your RSG component, one that defines the regions when the list is unfocused and one that defines the regions when the list is focused. Initially, the TargetGroup's targetSet field would be set to the unfocused TargetSet node. Then, when the list is focused, the targetSet's animateToTargetSet field would be set to the focused TargetSet node, causing all of the target regions to smoothly animate to their new size and position, taking along the associated item component's with them.</li>\\n<li>A horizontal scrolling list of items where the focused region floats across the screen as the user presses left/right until the focus region reaches the edge of the display, at which point the focus region remains stationary and the items scroll left or right. This would require the use of several TargetSet nodes (one for each possible position of the focus region). Initally, the TargetGroup's targetSet field would be set to one of these TargetSet's. Then while the focus region is not at one of the edges, key presses would set the animateToTargetSet field to animate the focus region to its next location. Once the focus region reaches an edge, another key press in the same direction would set the animateToTargetIndex field to cause the items to scroll so that the next content item occupies the focus region.</li>\\n<li>A list where when an item is selected, all of the items fly off the screen while the selected item zooms up and moves to the center of the screen. To set up this use case, you would specify a TargetSet for when the list items are onscreen and another TargetSet for the onscreen location of the focused item and the offscreen locations where each items will disappear.</li>\\n<li>A circular arrangement of a fixed number of items with the item at the 6 o'clock position being larger and having the focus. Note that in this case, no offscreen targets would be specified.</li>\\n</ul>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>itemComponentName</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the name of a XML component for the group items. An instance of this component is created on demand for each visible item of the group. The XML component must define a specific interface as detailed in <a href=\\\"/docs/references/scenegraph/layout-group-nodes/targetgroup.md#targetgroup-xml-component\\\" title=\\\"TargetGroup XML Component\\\">TargetGroup XML Component</a> below</td>\\n</tr>\\n<tr>\\n<td>content</td>\\n<td>ContentNode</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the content for the group. See <a href=\\\"/docs/references/scenegraph/layout-group-nodes/targetgroup.md#data-bindings\\\" title=\\\"Data Bindings\\\">Data Bindings</a> below for more details</td>\\n</tr>\\n<tr>\\n<td>targetSet</td>\\n<td>TargetSet</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the TargetSet to use to define the target regions of the items in the group. When set or modified, the target regions are immediately adjusted to use the new values</td>\\n</tr>\\n<tr>\\n<td>defaultTargetSetFocusIndex</td>\\n<td>int</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>For TargetSet's that do not specify a focusIndex, this value will be used as the index of the TargetSet where the focused item is located. If a TargetSet specifies any value for the focusIndex, that value will be used instead of defaultTargetSetFocusIndex</td>\\n</tr>\\n<tr>\\n<td>wrap</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the content items wraparound at the end of the TargetGroup to fill all of the targets rectangles</td>\\n</tr>\\n<tr>\\n<td>duration</td>\\n<td>Time</td>\\n<td>0.3 seconds</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the time, in seconds, to perform the animation when the animateToItem or animateToTargetSet fields are set</td>\\n</tr>\\n<tr>\\n<td>showTargetRects</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the current target rectangles (as defined in the read-only currTargetSet field's TargetSet) are drawn or not. Typically this would only be set to true while debugging a channel, although in some use cases its possible that you might want to display the current target rectangles. The rectangles are drawn using the color in the targetSet's TargetSet node's color field</td>\\n</tr>\\n<tr>\\n<td>currFocusItemIndex</td>\\n<td>float</td>\\n<td>-1.0</td>\\n<td>READ_ONLY</td>\\n<td>As the TargetGroup animation occurs, this field is constantly updated to represent the index of the ContentNode currently occupying the focus target region. When currFocusItemIndex is an integer value, the specified ContentNode occupies the focus target. When currFocusItemIndex has a fractional part, the value indicates that an animation is in process. For example, a value of 5.7 would indicate that items 5 and 6 are currently overlapping the focus region, with item 6 occupying 70% and item 5 the other 30%</td>\\n</tr>\\n<tr>\\n<td>currTargetSet</td>\\n<td>TargetSet</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>As the TargetGroup animation occurs that is initiated by setting the animateToTargetSet field, currTargetSet contains the current values of the target regions as the animation proceeds from the initial TargetSet's targets to the new TargetSet's targets</td>\\n</tr>\\n<tr>\\n<td>itemSelected</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a group item is selected, set to the index of the selected item</td>\\n</tr>\\n<tr>\\n<td>itemFocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a group item gains the key focus, set to the index of the focused item</td>\\n</tr>\\n<tr>\\n<td>itemUnfocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a group item loses the key focus, set to the index of the unfocused item</td>\\n</tr>\\n<tr>\\n<td>jumpToItem</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid item index, causes the group to immediately update so that the specified index moves to the target region specified by the TargetSet's focusIndex</td>\\n</tr>\\n<tr>\\n<td>animateToItem</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid item index, causes the group to quickly scroll so that the specified index moves into the to the target region specified by the TargetSet's focusIndex</td>\\n</tr>\\n<tr>\\n<td>animateToTargetSet</td>\\n<td>TargetSet</td>\\n<td>invalid</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid TargetSet, causes the group to quickly animate so that the target regions of the initial TargetSet node are smoothly interpolated to the corresponding target regions of the new TargetSet node. If the two TargetSet's focusIndex fields are different, the focusIndex is also animated from the old to the new value</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"targetgroup-xml-component\\\">TargetGroup XML Component</h2>\\n<p>The TargetGroup node itemComponentName field value should be set to the name of an XML component used to display each item in the grid. An instance of this component is created for each target region specified in the TargetSet's targetRects field.</p>\\n<p>If the XML component contains interface fields that match the names shown in the table below, those fields will be updated by the TargetGroup node. This allows the XML component to alter the item appearance based on changes to these interface fields.</p>\\n<p>Note that the fields are updated in the order presented in the table below. Any layout scripting you write based on these fields should be done in that order to avoid updating your layout based on a field that has not been updated yet.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field Name</th>\\n<th>Field Type</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>currTarget</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>Set to index of the current TargetSet's targetRect that should contain the item. If currTarget is an integer value, the item's currRect field will be the value of currTarget'th item in the TargetGroup node's currTargetSet field's targetRect's array. If currTarget is not an integer, it indicates that the item is animating from one targetRect index to another. <br /><br />For example, if the value is 5.7, the item is between the rectangles at index 5 and 6 of the TargetGroup node's currTargetSet's targetRect field. The item if 70% occupying the rectangle at index 6 and 30% occupying the rectangle at index 5.</td>\\n</tr>\\n<tr>\\n<td>currRect</td>\\n<td>rectangle</td>\\n<td>READ_ONLY</td>\\n<td>Set to the rectangle that the item should occupy. The rectangle values can be accessed either as an associative array with \\\"x\\\", \\\"y\\\", \\\"width\\\" and \\\"height\\\" elements or as an array of four float's containing the x, y, width and height values of the rectangles.<br /><br />Note that the item will be automatically translated so that its origin is at the (x,y) location of this rectangle relative to the origin of the TargetGroup node. Typically, the width and height of currRect is used to dynamically adjust the size of the item as it animates from one target to another.</td>\\n</tr>\\n<tr>\\n<td>index</td>\\n<td>integer</td>\\n<td>READ_ONLY</td>\\n<td>Set to the index of this item in the data model.</td>\\n</tr>\\n<tr>\\n<td>groupHasFocus</td>\\n<td>Boolean</td>\\n<td>READ_ONLY</td>\\n<td>Set to true if the <strong>TargetGroup</strong> node has focus, false otherwise.</td>\\n</tr>\\n<tr>\\n<td>itemContent</td>\\n<td><strong>ContentNode</strong></td>\\n<td></td>\\n<td>Contains the data to be displayed by the group item. The relationship between data in the <strong>ContentNode</strong> node and the visual elements of the grid item is determined by the markup and scripts in the item XML component. <br /><br />Typically, an observer callback function of the <code>itemContent</code> field is used to update the grid item when the content changes.</td>\\n</tr>\\n<tr>\\n<td>focusPercent</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>The fractional value, from 0.0 to 1.0, of a time delay after focus has moved from one item to the next. <br /><br />The fractional value increases incrementally from 0.0 to 1.0 for the newly-focused item, while simultaneously decreasing from 1.0 to 0.0 for the previously-focused item. <br /><br />This value can be used as a timing key to smoothly animate the appearance of the focused item as well as the previously-focused item, to indicate the movement of focus to the user.</td>\\n</tr>\\n<tr>\\n<td>itemHasFocus</td>\\n<td>Boolean</td>\\n<td>READ_ONLY</td>\\n<td>Indicates whether the item component currently is the TargetGroup's focused item. <br /><br />When scrolling starts, the itemHasFocus field for the currently focused item is set to false. When scrolling ends, the itemHasFocus field for the newly focused item is set to true. <br /><br />During the scrolling animation, all itemHasFocus fields are set to false.Only one item component of any TargetGroup should have itemHasFocus set to true. If the TargetGroup does not focus, all itemHasFocus fields of their item components should be set to false.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"data-bindings\\\">Data bindings</h2>\\n<p>A TargetGroup node should have a single ContentNode as the root node in its content field. One child ContentNode should be added to the root node for each item in the group (these child nodes can be thought of as item nodes). Item nodes should contain the data required by the TargetGroup node's XML component.</p>\\n<p>The specific data fields in the ContentNode should match the values referenced by the TargetGroup node's XML component.</p>\\n<h2 id=\\\"sample-channels\\\">Sample channels</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Sample</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"https://github.com/rokudev/samples/blob/master/ux%20components/screen%20elements/target_group/FloatingFocusWrap.zip\\\">FloatingFocusWrap.zip</a></td>\\n<td>TargetGroup example demonstrating floating focus and wrapping from the first and last items.</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"https://github.com/rokudev/samples/blob/master/ux%20components/screen%20elements/target_group/TwoRowFixedFocus.zip\\\">TwoRowFixedFocus.zip</a></td>\\n<td>A sample demonstrating an unfocused TargetList when more than one TargetList is present.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md":"{\n  \"content\": \"<h1 id=\\\"dynamickeyboardbase\\\">DynamicKeyboardBase</h1>\\n<p><em>Available since Roku OS 9.4</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a></p>\\n<blockquote>\\n<p>Channels must use Roku voice keyboards for <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard.md\\\">email</a>, <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-pinpad.md\\\">PIN</a>, <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard.md\\\">password</a> entry to pass <a href=\\\"/docs/developer-program/certification/certification.md#4-channel-operation\\\">certification</a>.</p>\\n</blockquote>\\n<p>The DynamicKeyboardBase is an abstract class that provides the functionality for dynamic voice-enabled keyboards. It combines <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-key-grid.md\\\"><strong>DynamicKeyGrid</strong></a> and <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/voice-text-edit-box.md\\\"><strong>VoiceTextEditBox</strong></a> nodes to provide a single node that supports text entry in multiple languages and voice entry in English.</p>\\n<ul>\\n<li>\\n<p>The <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-key-grid.md\\\"><strong>DynamicKeyGrid</strong></a> provides keyboard functionality. The layout of the keyboard is based on a JSON-formatted Key Definition File.</p>\\n<p>The classes derived from DynamicKeyboardBase (DynamicKeyboard, DynamicPinPad, and DynamicMiniKeyboard) have built-in Key Definition Files. For example, the DynamicKeyboard node uses a Key Definition File that matches the key layout of the <a href=\\\"/docs/references/scenegraph/widget-nodes/keyboard.md\\\">legacy Keyboard node</a>.</p>\\n<p>The <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-custom-keyboard.md\\\"><strong>DynamicCustomKeyboard</strong> node</a> enables developers to define a custom Key Definition File in order to configure the key layout. In the Key Definition File, the developer specifies the keys in each section and row of the keyboard. The keys support the characters in the Basic Latin, Latin 1 Supplement, Latin Extended-A, and Latin Extended-B blocks. This provides support for most Western European languages, including English, French, German, Italian, Portuguese, and Spanish.</p>\\n</li>\\n</ul>\\n<ul>\\n<li>The <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/voice-text-edit-box.md\\\"><strong>VoiceTextEditBox</strong></a> displays the text that has been entered or spoken. This node supports multiple voice entry modes for entering email addresses, passwords, street addresses, and PINs. This node currently supports voice entry in English only.</li>\\n</ul>\\n<blockquote>\\n<p>Developers should upgrade the <a href=\\\"/docs/references/scenegraph/widget-nodes/keyboard.md\\\">legacy keyboards</a> in their channels to dynamic voice-enabled keyboards in order to leverage the following benefits:</p>\\n<ul>\\n<li>\\n<p><strong>Faster on-device sign-ups and sign-ins.</strong> Enable customers to use voice entry to provide their information when subscribing to channels and logging in.</p>\\n</li>\\n<li>\\n<p><strong>Localized in-channel search</strong>: Enable customers to search for content in their native language.</p>\\n</li>\\n<li>\\n<p><strong>Localized customer information entry</strong>: Enable customers to enter their personal information in their native language.</p>\\n</li>\\n</ul>\\n</blockquote>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Contains the string of characters that has been entered. The text written to this field may also be displayed in the VoiceTextEditBox.</td>\\n</tr>\\n<tr>\\n<td>textEditBox</td>\\n<td><a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/voice-text-edit-box.md\\\"><strong>VoiceTextEditBox</strong> node</a></td>\\n<td>The VoiceTextEditBox associated with the keyboard</td>\\n<td>READ</td>\\n<td>The internal <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/voice-text-edit-box.md\\\">VoiceTextEditBox node</a> used by this DynamicKeyboardBase node.<br /><br />Do not set this field to null or to a different VoiceTextEditBox node; this field should be used only to access the fields of this node's internal VoiceTextEditBox node.</td>\\n</tr>\\n<tr>\\n<td>hideTextBox<br /><em>Available since Roku OS 11.0</em></td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Hides the keyboard's internal <strong>VoiceTextEditBox</strong>, and renders the keyboard's <strong>DynamicKeyGrid</strong> at the top of the node.</td>\\n</tr>\\n<tr>\\n<td>keyGrid</td>\\n<td><strong><a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-key-grid.md\\\">DynamicKeyGrid node</a></strong></td>\\n<td>The DynamicKeyGrid associated with the keyboard</td>\\n<td>READ</td>\\n<td>The internal <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-key-grid.md\\\">DynamicKeyGrid node</a> used by this DynamicKeyboardBase node.<br /><br />Do not set this field to null or to a different DynamicKeyGrid node; this field should be only used to access the fields of this node's internal DynamicKeyGrid node, such as the mode or horizWrapping fields.</td>\\n</tr>\\n<tr>\\n<td>domain</td>\\n<td>string</td>\\n<td>\\\"generic\\\"</td>\\n<td>READ_WRITE</td>\\n<td>The keyboard mode, which may be one of the following:<br /><ul>\\n<li>\\\"email\\\": letter-by-letter dictation for emails.</li>\\n<li>\\\"numeric\\\": letter-by-letter dictation for PIN codes, zip codes, and other numeric input.</li>\\n<li>\\\"alphanumeric\\\": letter-by-letter dication for street addresses or other sequences of numbers and letters.</li>\\n<li>\\\"generic\\\": Full word input for search queries or other sequences of numbers, letters and symbols.</li>\\n<li>\\\"password\\\": letter-by-letter dication for passwords.</li>\\n</ul><br />The domain may be used to:<br /><ul>\\n<li>Set options for the speech recognition system.</li>\\n<li>Identify when a complete string has been entered (for example, an email address).</li>\\n<li>Specify whether the entered string is displayed as a single string or a discrete sequence of characters (for example, a PIN code).</li>\\n<li>Enable key suggestions (for example, a pop-up for the ampersand key (&#x26;) to provide common email choices).</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/dynamic-voice-enabled-keyboards\\\">sample channel</a> that demonstrates how to create and configure dynamic voice-enabled keyboards. The sample channel includes a voice-enabled keyboard, PIN pad, mini-keyboard, and custom keyboard (an address keyboard form).</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard.md":"{\n  \"content\": \"<h1 id=\\\"dynamickeyboard\\\">DynamicKeyboard</h1>\\n<p><em>Available since Roku OS 9.4</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\" title=\\\"**DynamicKeyboardBase**\\\">DynamicKeyboardBase</a></p>\\n<p>The <strong>DynamicKeyboard</strong> node is similar to the <a href=\\\"/docs/references/scenegraph/widget-nodes/keyboard.md\\\">legacy <strong>Keyboard</strong> node</a>, but with additional voice entry functionality. It enables text entry of alphanumeric and Latin characters, and voice entry of alphanumeric characters. It is typically used for entering email addresses or passwords. </p>\\n<p>The key layout is fixed based on the node's pre-built Key Definition File.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/dynamic-keyboard-voice.jpg\\\" alt=\\\"roku815px - dynamic-keyboard-voice\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<p>The DynamicKeyboard node inherits all its fields from its parent <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\">DynamicKeyboardBase</a> node class. See the <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\">DynamicKeyboardBase</a> and its base classes (<a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\">Group</a> and <a href=\\\"/docs/references/scenegraph/node.md\\\">Node</a>) for descriptions of the fields that can be configured.</p>\\n<h2 id=\\\"default-voicetexteditbox-settings\\\">Default VoiceTextEditBox settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>voiceEntryType</td>\\n<td>string</td>\\n<td>\\\"alphanumeric\\\"</td>\\n<td>The type of characters accepted via voice entry.</td>\\n</tr>\\n<tr>\\n<td>voiceEnabled</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>Specifies whether voice entry is enabled for the text edit box of the dynamic keyboard.</td>\\n</tr>\\n<tr>\\n<td>maxTextLength</td>\\n<td>integer</td>\\n<td>75</td>\\n<td>The maximum number of characters that may be entered into the text edit box of the dynamic keyboard.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/dynamic-voice-enabled-keyboards\\\">sample channel</a> that demonstrates how to create and configure a dynamic voice-enabled keyboard.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-pinpad.md":"{\n  \"content\": \"<h1 id=\\\"dynamicpinpad\\\">DynamicPinPad</h1>\\n<p><em>Available since Roku OS 9.4</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\" title=\\\"**DynamicKeyboardBase**\\\">DynamicKeyboardBase</a></p>\\n<p>The <strong>DynamicPinPad</strong> node is similar to the <a href=\\\"/docs/references/scenegraph/widget-nodes/pinpad.md\\\">legacy <strong>PinPad</strong> node</a>, but with additional voice entry functionality. It enables text and voice entry of numeric characters. It is typically used for entering short numeric PIN codes. </p>\\n<p>The key layout is fixed based on the node's pre-built Key Definition File.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/dynamic-pinpad-voice.jpg\\\" alt=\\\"roku815px - dynamic-pinpad-voice\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<p>The DynamicPinPad node inherits all its fields from its parent <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\">DynamicKeyboardBase</a> node class. See the <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\">DynamicKeyboardBase</a> and its base classes (<a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\">Group</a> and <a href=\\\"/docs/references/scenegraph/node.md\\\">Node</a>) for descriptions of the fields that can be configured.</p>\\n<h2 id=\\\"default-voicetexteditbox-settings\\\">Default VoiceTextEditBox settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>voiceEntryType</td>\\n<td>string</td>\\n<td>\\\"numeric\\\"</td>\\n<td>The type of characters accepted via voice entry.</td>\\n</tr>\\n<tr>\\n<td>voiceEnabled</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>Specifies whether voice entry is enabled for the text edit box of the dynamic PIN pad.</td>\\n</tr>\\n<tr>\\n<td>maxTextLength</td>\\n<td>integer</td>\\n<td>4</td>\\n<td>The maximum number of characters that may be entered into the text edit box of the dynamic pinpad.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/dynamic-voice-enabled-keyboards\\\">sample channel</a> that demonstrates how to create and configure a dynamic voice-enabled PIN pad.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-mini-keyboard.md":"{\n  \"content\": \"<h1 id=\\\"dynamicminikeyboard\\\">DynamicMiniKeyboard</h1>\\n<p><em>Available since Roku OS 9.4</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\" title=\\\"**DynamicKeyboardBase**\\\">DynamicKeyboardBase</a></p>\\n<p>The <strong>DynamicMiniKeyboard</strong> node is similar to the <a href=\\\"/docs/references/scenegraph/widget-nodes/minikeyboard.md\\\">legacy <strong>MiniKeyboard</strong> node</a>, but with additional voice entry functionality. It enables text and voice entry of letters A-Z and digits 0-9. It is typically used for entering a search query. </p>\\n<p>The key layout is fixed based on the node's pre-built Key Definition File.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/dynamic-mini-keyboard.jpg\\\" alt=\\\"roku815px - dynamic-mini-keyboard\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<p>The DynamicMiniKeyboard node inherits all its fields from its parent <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\">DynamicKeyboardBase</a> node class. See the <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\">DynamicKeyboardBase</a> and its base classes (<a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\">Group</a> and <a href=\\\"/docs/references/scenegraph/node.md\\\">Node</a>) for descriptions of the fields that can be configured.</p>\\n<h2 id=\\\"default-voicetexteditbox-settings\\\">Default VoiceTextEditBox settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>voiceEntryType</td>\\n<td>string</td>\\n<td>\\\"alphanumeric\\\"</td>\\n<td>The type of characters accepted via voice entry.</td>\\n</tr>\\n<tr>\\n<td>voiceEnabled</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>Specifies whether voice entry is enabled for the text edit box of the <strong>DynamicMiniKeyboard</strong>.</td>\\n</tr>\\n<tr>\\n<td>maxTextLength</td>\\n<td>integer</td>\\n<td>75</td>\\n<td>The maximum number of characters that may be entered into the text edit box of the <strong>DynamicMiniKeyboard</strong>.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/dynamic-voice-enabled-keyboards\\\">sample channel</a> that demonstrates how to create and configure a dynamic voice-enabled mini-keyboard.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-custom-keyboard.md":"{\n  \"content\": \"<h1 id=\\\"dynamiccustomkeyboard\\\">DynamicCustomKeyboard</h1>\\n<p><em>Available since Roku OS 9.4</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\" title=\\\"DynamicKeyboardBase\\\">DynamicKeyboardBase</a></p>\\n<p>The <strong>DynamicCustomKeyboard</strong> node enables developers to create a voice-enabled keyboard that has a custom layout. As specified in its parent <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\" title=\\\"DynamicKeyboardBase\\\">DynamicKeyboardBase</a> class, the <strong>DynamicCustomKeyboard</strong> node has a built-in <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/voice-text-edit-box.md\\\"><strong>VoiceTextEditBox</strong></a> node for displaying the string of characters provided via text or voice entry, and it has a  <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-key-grid.md\\\"><strong>DynamicKeyGrid</strong></a> node that provides keyboard functionality.</p>\\n<p>The layout of the keyboard is customized based on a JSON-formatted Key Definition File. In the Key Definition File, the developer labels the individual keys and groups them into sections and rows. The key labels support the characters in the Basic Latin, Latin 1 Supplement, Latin Extended-A, and Latin Extended-B blocks. This provides support for most Western European languages, including English, French, German, Italian, Portuguese, and Spanish.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/address-keyboard-voice.jpg\\\" alt=\\\"roku815px - address-keyboard-voice\\\"></p>\\n<h2 id=\\\"accessing-the-key-definition-file\\\">Accessing the Key Definition File</h2>\\n<p>The instance of the <strong>DynamicKeyGrid</strong> node is accessed via the <strong>keyGrid</strong> field of the <strong>DynamicCustomKeyboard</strong> node. The <strong>keyGrid</strong> field includes a <strong>keyDefinitionUri</strong> field, which must be set to a valid Key Definition File. Typically, this is done by creating an RSG component that extends the <strong>DynamicCustomKeyboard</strong> and then defining an <strong>init()</strong> function for that component as demonstrated in the following example:</p>\\n<pre><code>sub init()\\n    m.top.keyGrid.keyDefinitionUri = \\\"pkg:/data/coolKeyboardLayoutKDF.json\\\"\\nend sub\\n</code></pre>\\n<p>In this example, the <strong>keyGrid</strong> is set to the <strong>coolKeyboardLayoutKDF.json</strong> file, which is located in the <strong>data</strong> directory of the channel package. The Key Definition File may be stored anywhere within the channel package.</p>\\n<h2 id=\\\"default-key-selection-handlers\\\">Default key selection handlers</h2>\\n<p>It is recommended that developers create a component that extends the <strong>DynamicCustomKeyboard</strong> node class. This provides default key selection handling for the following use cases:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Default Handler</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>\\\"label\\\" specified, but not \\\"strOut\\\"</td>\\n<td>The \\\"label\\\" string is inserted in the text field's string at the current cursor position.</td>\\n</tr>\\n<tr>\\n<td>\\\"strOut\\\" set to \\\"clear\\\" (\\\"clear\\\" is case insensitive)</td>\\n<td>The text field is set to the empty string.</td>\\n</tr>\\n<tr>\\n<td>\\\"strOut\\\" set to \\\"backspace\\\" (\\\"backspace\\\" is case insensitive)</td>\\n<td>The character to the left of the cursor position is deleted from the text field's string.</td>\\n</tr>\\n<tr>\\n<td>\\\"strOut\\\" set to \\\"space\\\" (\\\"space\\\" is case insensitive\\\")</td>\\n<td>A space is inserted in the text field's string at the current cursor position.</td>\\n</tr>\\n<tr>\\n<td>\\\"strOut\\\" set to some other string</td>\\n<td>By default, the \\\"strOut\\\" string is inserted in the text field's string at the current cursor position. In this case, the component typically provides a custom key selection handler (see <a href=\\\"#custom-key-selection-handler\\\">Custom key selection handlers</a> for more details).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"custom-key-selection-handlers\\\">Custom key selection handlers</h2>\\n<p>For most keys defined in the Key Definition File, the <a href=\\\"#default-key-selection-handlers\\\">default key selection handlers</a> will provide the desired behavior. If custom handling is needed, the component that extends the <strong>DynamicCustomKeyboard</strong> node class can implement an interface function. To do this, include a function within the component's  element that has the following signature:</p>\\n<pre><code>function keySelected(key as string) as boolean\\n</code></pre>\\n<p>The <em>key</em> parameter is set to the key's \\\"strOut\\\" field, if specified; otherwise, it is set to the key's \\\"label\\\" string.</p>\\n<p>The function should return <em>true</em> if it handles the key selection. Returning <em>false</em> causes the <a href=\\\"#default-key-selection-handler\\\">default key selection handler</a> behavior to be used.</p>\\n<h4 id=\\\"example-custom-key-select-handler\\\">Example custom key select handler</h4>\\n<p>The following example demonstrates a custom key handler:</p>\\n<ol>\\n<li>\\n<p>The Key Definition File for the component that extends <strong>DynamicCustomKeyboard</strong> node has a row that defines the following keys:</p>\\n<pre><code>\\\"keys\\\": [\\n    { \\\"label\\\": \\\"Aa\\\", \\\"strOut\\\": \\\"ChangeCase\\\" },\\n    &#x3C;OTHER KEYS>\\n]\\n</code></pre>\\n</li>\\n<li>\\n<p>When this key is selected, the keyboard's mode is changed from \\\"UpperCase\\\" to \\\"LowerCase\\\" (the Key Definition File would need to include grids for both modes). In this case, the child <strong>DynamicCustomKeyboard</strong> component includes a <strong>keySelected()</strong> function in its interface:</p>\\n<pre><code>&#x3C;component name=\\\"MyCustomKeyboard\\\" extends=\\\"DynamicCustomKeyboard>\\n    &#x3C;interface>\\n        &#x3C;function name=\\\"keySelected\\\" />\\n    &#x3C;/interface>\\n    &#x3C;OTHER COMPONENT ELEMENTS>\\n&#x3C;/component>\\n</code></pre>\\n</li>\\n<li>\\n<p>In the corresponding BrightScript file for the child <strong>DynamicCustomKeyboard</strong> component, the <strong>keySelected()</strong> function includes the following business logic:</p>\\n<pre><code>function keySelected(key as string) as boolean\\n    if key = \\\"ChangeCase\\\"\\n        if m.top.keyGrid.mode = \\\"UpperCase\\\"   ' m.top.keyGrid.mode would likely be initialized in the component's init()                                                \\n            m.top.keyGrid.mode = \\\"LowerCase\\\"  ' function just after m.top.keyGrid.keyDefinitionUri is set to the Key Definition File to use\\n        else\\n            m.top.keyGrid.mode = \\\"UpperCase\\\"\\n        end if\\n        return true    ' key selection is handled, return true\\n    end if\\n    ' if not handled, return false to use default DynamicCustomKeyboard keySelected handlers\\n    return false\\nend function\\n</code></pre>\\n</li>\\n</ol>\\n<h4 id=\\\"custom-key-handlers-that-modify-the-entered-text-string\\\">Custom key handlers that modify the entered text string</h4>\\n<p>In most cases, the default key selection handlers can be used for modifying the entered text string. However, if a custom key handler is used to do this, it must update the <strong>cursorPosition</strong> of the <strong>DynamicCustomKeyboard</strong>. The following example demonstrates a custom key handler that changes the text string:</p>\\n<ol>\\n<li>\\n<p>The Key Definition File includes a key definition with an action intended to duplicate the character to the left of the cursor position, positioning the cursor after the duplicated character:</p>\\n<pre><code>\\\"keys\\\": [\\n    { \\\"icon\\\": \\\"pkg:/images/Duplicate.png\\\", \\\"strOut\\\": \\\"DuplicateCharacter\\\" },\\n    &#x3C;OTHER KEYS>\\n]\\n</code></pre>\\n</li>\\n<li>\\n<p>The <strong>keySelected()</strong> function includes the following business logic:</p>\\n<pre><code>function keySelected(key as string) as boolean\\n    if key = \\\"DuplicateCharacter\\\"\\n        currString = m.top.text\\n        currStringLen = currString.Len()\\n        cursorPosition = m.top.textEditBox.cursorPosition\\n        charToDuplicate = currString.Mid(cursorPosition, 1)\\n     ' set the keyboard's text field to the edited string\\n        if cursorPosition > 0\\n            m.top.text = currString.Left(cursorPosition) + charToDuplicate + currString.Right(currStringLen - cursorPosition)\\n        end if\\n        ' update the VoiceTextEditBox's cursorPosition\\n        m.top.TextEditBox.cursorPosition = cursorPosition + 1\\n        return true   ' DuplicateCharacter key selection is handled\\n    end if\\n    ' if not handled, return false to use default DynamicCustomKeyboard keySelected handlers\\n    return false\\nend function\\n</code></pre>\\n</li>\\n</ol>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<p>See the <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\" title=\\\"DynamicKeyboardBase\\\">DynamicKeyboardBase</a> node and its base classes (<a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\">Group</a> and <a href=\\\"/docs/references/scenegraph/node.md\\\">Node</a>) for configuring the fields inherited by the <strong>DynamicCustomKeyboard</strong> node.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>keyGrid</td>\\n<td>DynamicKeyGrid node</td>\\n<td>The DynamicKeyGrid node associated with the keyboard</td>\\n<td>READ</td>\\n<td>Provides access to the internal <strong>DynamicKeyGrid</strong> node of this <strong>DynamicKeyboardBase</strong> component.<br /><br />Do not set this field to null or to a different DynamicKeyGrid node; this field should be used only to access the fields of this component's internal DynamicKeyGrid node.<br /><blockquote>\\n<p>The <strong>DynamicKeyGrid</strong>.<strong>keyDefinitionUri</strong> field must be set to the custom Key Definition File that defines the keyboard's layout.</p>\\n</blockquote></td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"default-voicetexteditbox-settings\\\">Default VoiceTextEditBox settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>voiceEntryType</td>\\n<td>string</td>\\n<td>\\\"generic\\\"</td>\\n<td>The type of characters accepted via voice entry.</td>\\n</tr>\\n<tr>\\n<td>voiceEnabled</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>Specifies whether voice entry is enabled for the text edit box of the dynamic keyboard.</td>\\n</tr>\\n<tr>\\n<td>maxTextLength</td>\\n<td>integer</td>\\n<td>75</td>\\n<td>The maximum number of characters that may be entered into the text edit box of the dynamic keyboard.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-key-definition-file\\\">Sample Key Definition File</h2>\\n<p>The following sample demonstrates a Key Definition File that defines five grids for <strong>DynamicCustomKeyboard</strong> node. See the <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/key-defintion-file.md\\\">Key Definition File specification</a> for more information.</p>\\n<pre><code>{\\n  \\\"keyboardWidthFHD\\\": 576,\\n  \\\"keyboardHeightFHD\\\": 432,\\n\\n  \\\"keyboardWidthHD\\\": 384,\\n  \\\"keyboardHeightHD\\\": 288,\\n  \\\"sections\\\": [\\n    {\\n      \\\"grids\\\": [\\n        {\\n          \\\"modes\\\": \\\"NameUpper\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"A\\\" },\\n                { \\\"label\\\": \\\"B\\\" },\\n                { \\\"label\\\": \\\"C\\\" },\\n                { \\\"label\\\": \\\"D\\\" },\\n                { \\\"label\\\": \\\"E\\\" },\\n                { \\\"label\\\": \\\"F\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"G\\\" },\\n                { \\\"label\\\": \\\"H\\\" },\\n                { \\\"label\\\": \\\"I\\\" },\\n                { \\\"label\\\": \\\"J\\\" },\\n                { \\\"label\\\": \\\"K\\\" },\\n                { \\\"label\\\": \\\"L\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"M\\\" },\\n                { \\\"label\\\": \\\"N\\\" },\\n                { \\\"label\\\": \\\"O\\\" },\\n                { \\\"label\\\": \\\"P\\\" },\\n                { \\\"label\\\": \\\"Q\\\" },\\n                { \\\"label\\\": \\\"R\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"S\\\" },\\n                { \\\"label\\\": \\\"T\\\" },\\n                { \\\"label\\\": \\\"U\\\" },\\n                { \\\"label\\\": \\\"V\\\" },\\n                { \\\"label\\\": \\\"W\\\" },\\n                { \\\"label\\\": \\\"X\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"Y\\\" },\\n                { \\\"label\\\": \\\"Z\\\" },\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SpaceKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SpaceKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"Space\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_DeleteKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_DeleteKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"Delete\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ClearKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ClearKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"Clear\\\"\\n                },\\n                {\\n                  \\\"label\\\": \\\"Aa\\\",\\n                  \\\"strOut\\\": \\\"UpperLower\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"Prev\\\", \\\"disabled\\\": 1 },\\n                { \\\"label\\\": \\\"Next\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"NameLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"a\\\" },\\n                { \\\"label\\\": \\\"b\\\" },\\n                { \\\"label\\\": \\\"c\\\" },\\n                { \\\"label\\\": \\\"d\\\" },\\n                { \\\"label\\\": \\\"e\\\" },\\n                { \\\"label\\\": \\\"f\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"g\\\" },\\n                { \\\"label\\\": \\\"h\\\" },\\n                { \\\"label\\\": \\\"i\\\" },\\n                { \\\"label\\\": \\\"j\\\" },\\n                { \\\"label\\\": \\\"k\\\" },\\n                { \\\"label\\\": \\\"l\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"m\\\" },\\n                { \\\"label\\\": \\\"n\\\" },\\n                { \\\"label\\\": \\\"o\\\" },\\n                { \\\"label\\\": \\\"p\\\" },\\n                { \\\"label\\\": \\\"q\\\" },\\n                { \\\"label\\\": \\\"r\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"s\\\" },\\n                { \\\"label\\\": \\\"t\\\" },\\n                { \\\"label\\\": \\\"u\\\" },\\n                { \\\"label\\\": \\\"v\\\" },\\n                { \\\"label\\\": \\\"w\\\" },\\n                { \\\"label\\\": \\\"x\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"y\\\" },\\n                { \\\"label\\\": \\\"z\\\" },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardSpaceOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardSpaceOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"Space\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardDeleteOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardDeleteOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"Delete\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardClearOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardClearOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"Clear\\\"\\n                },\\n                {\\n                  \\\"label\\\": \\\"Aa\\\",\\n                  \\\"strOut\\\": \\\"UpperLower\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"Prev\\\", \\\"disabled\\\": 1 },\\n                { \\\"label\\\": \\\"Next\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"Zip\\\",\\n          \\\"gridHeightFHD\\\": 360,\\n          \\\"gridHeightHD\\\": 240,\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"1\\\" },\\n                { \\\"label\\\": \\\"2\\\" },\\n                { \\\"label\\\": \\\"3\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"4\\\" },\\n                { \\\"label\\\": \\\"5\\\" },\\n                { \\\"label\\\": \\\"6\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"7\\\" },\\n                { \\\"label\\\": \\\"8\\\" },\\n                { \\\"label\\\": \\\"9\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardDeleteOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardDeleteOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"Delete\\\"\\n                },\\n                {\\n\\\"label\\\": \\\"0\\\"\\n},\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardClearOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardClearOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"Clear\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"Prev\\\" },\\n                { \\\"label\\\": \\\"Next\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"FullUpper\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"0\\\" },\\n                { \\\"label\\\": \\\"1\\\" },\\n                { \\\"label\\\": \\\"2\\\" },\\n                { \\\"label\\\": \\\"3\\\" },\\n                { \\\"label\\\": \\\"4\\\" },\\n                { \\\"label\\\": \\\"5\\\" },\\n                { \\\"label\\\": \\\"6\\\" },\\n                { \\\"label\\\": \\\"7\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"8\\\" },\\n                { \\\"label\\\": \\\"9\\\" },\\n                { \\\"label\\\": \\\"A\\\" },\\n                { \\\"label\\\": \\\"B\\\" },\\n                { \\\"label\\\": \\\"C\\\" },\\n                { \\\"label\\\": \\\"D\\\" },\\n                { \\\"label\\\": \\\"E\\\" },\\n                { \\\"label\\\": \\\"F\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"G\\\" },\\n                { \\\"label\\\": \\\"H\\\" },\\n                { \\\"label\\\": \\\"I\\\" },\\n                { \\\"label\\\": \\\"J\\\" },\\n                { \\\"label\\\": \\\"K\\\" },\\n                { \\\"label\\\": \\\"L\\\" },\\n                { \\\"label\\\": \\\"M\\\" },\\n                { \\\"label\\\": \\\"N\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"O\\\" },\\n                { \\\"label\\\": \\\"P\\\" },\\n                { \\\"label\\\": \\\"Q\\\" },\\n                { \\\"label\\\": \\\"R\\\" },\\n                { \\\"label\\\": \\\"S\\\" },\\n                { \\\"label\\\": \\\"T\\\" },\\n                { \\\"label\\\": \\\"U\\\" },\\n                { \\\"label\\\": \\\"V\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"W\\\" },\\n                { \\\"label\\\": \\\"X\\\" },\\n                { \\\"label\\\": \\\"Y\\\" },\\n                { \\\"label\\\": \\\"Z\\\" },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardSpaceOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardSpaceOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"Space\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardDeleteOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardDeleteOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"Delete\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardClearOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardClearOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"Clear\\\"\\n                },\\n                {\\n                  \\\"label\\\": \\\"Aa\\\",\\n                  \\\"strOut\\\": \\\"UpperLower\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"Prev\\\" },\\n                { \\\"label\\\": \\\"Next\\\", \\\"disabled\\\": 1 }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"FullLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"0\\\" },\\n                { \\\"label\\\": \\\"1\\\" },\\n                { \\\"label\\\": \\\"2\\\" },\\n                { \\\"label\\\": \\\"3\\\" },\\n                { \\\"label\\\": \\\"4\\\" },\\n                { \\\"label\\\": \\\"5\\\" },\\n                { \\\"label\\\": \\\"6\\\" },\\n                { \\\"label\\\": \\\"7\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"8\\\" },\\n                { \\\"label\\\": \\\"9\\\" },\\n                { \\\"label\\\": \\\"a\\\" },\\n                { \\\"label\\\": \\\"b\\\" },\\n                { \\\"label\\\": \\\"c\\\" },\\n                { \\\"label\\\": \\\"d\\\" },\\n                { \\\"label\\\": \\\"e\\\" },\\n                { \\\"label\\\": \\\"f\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"g\\\" },\\n                { \\\"label\\\": \\\"h\\\" },\\n                { \\\"label\\\": \\\"i\\\" },\\n                { \\\"label\\\": \\\"j\\\" },\\n                { \\\"label\\\": \\\"k\\\" },\\n                { \\\"label\\\": \\\"l\\\" },\\n                { \\\"label\\\": \\\"m\\\" },\\n                { \\\"label\\\": \\\"n\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"o\\\" },\\n                { \\\"label\\\": \\\"p\\\" },\\n                { \\\"label\\\": \\\"q\\\" },\\n                { \\\"label\\\": \\\"r\\\" },\\n                { \\\"label\\\": \\\"s\\\" },\\n                { \\\"label\\\": \\\"t\\\" },\\n                { \\\"label\\\": \\\"u\\\" },\\n                { \\\"label\\\": \\\"v\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"w\\\" },\\n                { \\\"label\\\": \\\"x\\\" },\\n                { \\\"label\\\": \\\"y\\\" },\\n                { \\\"label\\\": \\\"z\\\" },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardSpaceOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardSpaceOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"Space\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardDeleteOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardDeleteOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"Delete\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardClearOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardClearOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"Clear\\\"\\n                },\\n                {\\n                  \\\"label\\\": \\\"Aa\\\",\\n                  \\\"strOut\\\": \\\"UpperLower\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"Prev\\\" },\\n                { \\\"label\\\": \\\"Next\\\", \\\"disabled\\\": 1 }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n</code></pre>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/dynamic-voice-enabled-keyboards\\\">sample channel</a> that demonstrates how to create and configure a dynamic voice-enabled custom keyboard (an address keyboard form). This sample include an example KDF file that specifies the layout of this custom keyboard.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-key-grid.md":"{\n  \"content\": \"<h1 id=\\\"dynamickeygrid\\\">DynamicKeyGrid</h1>\\n<p><em>Available since Roku OS 9.4</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a></p>\\n<p>The <strong>DynamicKeyGrid</strong> node implements a grid of keys that are defined and organized in a <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/key-defintion-file.md\\\">Key Definition File</a>. It is typically used in a subclass of the <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\">DynamicKeyboardBase</a> node (DynamicKeyboard, DynamicPinPad, and DynamicMiniKeyboard) to display the string of characters entered via text or voice entry. It may also be used as an individual node.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>keyDefinitionUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/key-defintion-file.md\\\">Key Definition File </a> to use to define the key layout metadata.</td>\\n</tr>\\n<tr>\\n<td>mode</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the keyboard mode. When set, the value is used to select which Grid of each Section is used, based on the grid's mode as specified in the Key Definition File.</td>\\n</tr>\\n<tr>\\n<td>focusVisible</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Enables the grid's focus indicator to be hidden. This option is typically used in PinPads to hide the entered characters.</td>\\n</tr>\\n<tr>\\n<td>horizWrap</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the key grid uses horizontal wrapping.<br /><ul>\\n<li><strong>true</strong>: A horizontal arrow keypress causes the focus to wrap from the key at the left (or right) edge of the grid to the key at the right (or left) edge.</li>\\n<li><strong>false</strong>: The horizontal arrow keypress is not handled by the DynamicKeyGrid node; it is propagated up the scene graph so that it can be handled by one of its ancestor nodes.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>vertWrap</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the key grid uses vertical wrapping.<br /><ul>\\n<li><strong>true</strong>: A vertical arrow keypress causes the focus to wrap from the key at the top (or bottom) edge of the grid to the key at the bottom (or top) edge.</li>\\n<li><strong>false</strong>: The vertical arrow key press is not be handled by the DynamicKeyGrid node; it is propagated up the scene graph so that it can be handled by one of its ancestor nodes.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>palette</td>\\n<td>RSGPalette node</td>\\n<td>not set</td>\\n<td>READ_WRITE</td>\\n<td>The RSGPalette node contains the set of color values used by this DynamicKeyGrid node. By default, no RSGPalette is specified; therefore, the RSGPalette colors are inherited from the ancestor nodes in the scene graph.<br /><br />If the DynamicKeyboardBase node is used within a StandardDialog node, the following rules determine the color palette used by the keyboard:<br /><ul>\\n<li>If the <strong>palette</strong> field is set, the key grid uses it.</li>\\n<li>If the <strong>palette</strong> field is not set, the key grid looks up the scene graph until it finds a <strong>PaletteGroup</strong> node with its <strong>palette</strong> field set. This may be found in a <strong>DynamicKeyboard</strong> node, a <strong>StandardDialog</strong> node, or the <strong>Scene</strong> itself.</li>\\n<li>If no node has its <strong>palette</strong> field set, the key grid uses the default palette (gray background/white text). </li>\\n</ul><br />The RSGPalette color values used by the DynamicKeyboardBase are as follows:<br /><table>\\n<thead>\\n<tr>\\n<th>Palette Color Name</th>\\n<th>Usages</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>KeyboardColor</td>\\n<td>Blend color for key background bitmap.</td>\\n</tr>\\n<tr>\\n<td>PrimaryTextColor</td>\\n<td>Text color used for non-focused keys.<br />Blend color for the icons of non-focused keys.<br />Text color for the label of focused key suggestion items.</td>\\n</tr>\\n<tr>\\n<td>SecondaryItemColor</td>\\n<td>Text color for disabled keys.<br />Blend color for the icons of disabled keys.</td>\\n</tr>\\n<tr>\\n<td>FocusColor</td>\\n<td>Blend color for the focus indicator.<br />Blend color for the background of key suggestion pop-us.</td>\\n</tr>\\n<tr>\\n<td>FocusItemColor</td>\\n<td>Text color for the label of the focused key.<br />Blend color for the icons of the focused key and the focus indicator in key suggestion pop-ups.<br />Text color for the labels of non-focused key suggestion items.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>keyFocused</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ</td>\\n<td>Specifies the appearance of a key when it receives focus, based on the key's <strong>strOut</strong> value.<br /><ul>\\n<li>If the key's <strong>strOut</strong> value (as specified in the Key Definition File) is non-empty, this field is set to the <strong>strOut</strong> value.</li>\\n<li>If <strong>strOut</strong> is an empty string, this field is set to the key's label string.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>keySelected</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ</td>\\n<td>Specifies the appearance of a key when it is selected, based on the key's <strong>strOut</strong> value.<br /><ul>\\n<li>If the key's <strong>strOut</strong> value (as specified in the Key Definition File) is non-empty, this field is set to the <strong>strOut</strong> value.</li>\\n<li>If <strong>strOut</strong> is an empty string, this field is set to the key's label string.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>jumpToKey</td>\\n<td>array of integers</td>\\n<td>N/A</td>\\n<td>WRITE</td>\\n<td>Jumps the grid to the key to the coordinates specified in the provided array. The array must contain a valid section, row and key index for the current keyboard mode. If the array specifies an invalid key, no jump occurs.</td>\\n</tr>\\n<tr>\\n<td>disableKey<br /><em>Available since Roku OS 10.5</em></td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>WRITE-ONLY</td>\\n<td>Draws the key's label or icon with a disabled appearance and prevents the key from gaining focus.<br /><br />If the key has focus when it becomes disabled, the focus is automatically moved to an adjacent key that is not disabled (the key above the disabled key is checked first, then the key below, to the right, and then to the left).<br /><br />To disable/enable a key, set the respective field to the key's <strong>label</strong> or <strong>StrOut</strong> value as defined in the Key Definition File. For example, to disable the \\\"backspace\\\" key, which typically has a delete icon displayed on the keyboard, enter the following: m.keyboard.keyGrid.disableKey = \\\"backspace\\\".<br /><br />Multiple keys may be disabled at any time by setting the write-only <strong>disableKey</strong> field once for each key to be disabled.</td>\\n</tr>\\n<tr>\\n<td>enableKey<br /><em>Available since Roku OS 10.5</em></td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>WRITE-ONLY</td>\\n<td>Draws the key's label or icon with an enabled appearance and allows the key to gain focus.<br /><br />To disable/enable a key, set the respective field to the key's <strong>label</strong> or <strong>StrOut</strong> value as defined in the KDF file. For example, to enable the \\\"backspace\\\" key, which typically has a delete icon displayed on the keyboard, enter the following: m.keyboard.keyGrid.enableKey = \\\"backspace\\\".<br /><br />Multiple disabled keys may be re-enabled at any time by setting the write-only <strong>enableKey</strong> field once for each key to be enabled.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/dynamic-voice-keyboard-nodes/voice-text-edit-box.md":"{\n  \"content\": \"<h1 id=\\\"voicetexteditbox\\\">VoiceTextEditBox</h1>\\n<p><em>Available since Roku OS 9.4</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/widget-nodes/texteditbox.md\\\">TextEditBox</a></p>\\n<p>The <strong>VoiceTextEditBox</strong> node is similar to the <a href=\\\"/docs/references/scenegraph/widget-nodes/texteditbox.md\\\">legacy <strong>TextEditBox</strong> node</a>, but with additional voice entry functionality. Only one voice-enabled <strong>VoiceTextEditBox</strong> node may be on the screen at a time. If another VoiceTextEditBox is rendered on the screen, its voice functionality is disabled implicitly. </p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>voiceEnabled</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Enables the text box to be voice-enabled. In this case, it will display a mic icon and have a voice UI with voice hints.</td>\\n</tr>\\n<tr>\\n<td>voiceToolTipWidth</td>\\n<td>float</td>\\n<td>FHD: 321HD: 214</td>\\n<td>READ_WRITE</td>\\n<td>The maximum width of the voice hint tootip. The height scales based on the specified width.</td>\\n</tr>\\n<tr>\\n<td>voiceEntryType</td>\\n<td>string</td>\\n<td>\\\"generic\\\"</td>\\n<td>READ_WRITE</td>\\n<td>The type of voice entry mode to be used: <br /><ul>\\n<li>\\\"email\\\": letter-by-letter dictation for emails.</li>\\n<li>\\\"numeric\\\": letter-by-letter dictation for PIN codes, zip codes, and other numeric input.</li>\\n<li>\\\"alphanumeric\\\": letter-by-letter dication for street addresses or other sequences of numbers and letters.</li>\\n<li>\\\"generic\\\": Full word input for search queries or other sequences of numbers, letters and symbols.</li>\\n<li>\\\"password\\\": letter-by-letter dication for passwords.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>isDictating<br /><em>Available since Roku OS 10.5</em></td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ-ONLY</td>\\n<td>Checks whether the user is currently dictating to the keyboard.</td>\\n</tr>\\n<tr>\\n<td>voiceInputRegexFilter<br /><em>Available since Roku OS 10.5</em></td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>WRITE-ONLY</td>\\n<td>Specify which characters may or may not be entered on the keyboard via dictation. For example, setting this field to \\\"^[A-Za-z0-9_-]*$\\\" prevents any special characters from being entered.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/dynamic-voice-keyboard-nodes/key-defintion-file.md":"{\n  \"content\": \"<h1 id=\\\"key-defintion-file\\\">Key Defintion File</h1>\\n<p>The Key Definition File is a JSON-formatted file that specifies the layout of a keyboard. The Key Definition Files for the classes derived from <strong>DynamicKeyboardBase</strong> (<strong>DynamicKeyboard</strong>, <strong>DynamicPinPad</strong>, and <strong>DynamicMiniKeyboard</strong>) are built-in and cannot be modified because the keyboard layout for these nodes is fixed. Conversely, the <strong>DynamicCustomKeyboard</strong> node requires developers to create the Key Definition File in order to implement a custom keyboard layout. </p>\\n<p>The Key Definition File is a single JSON object with the following six hierarchal objects (listed in order from the top to the bottom of the hierarchy):</p>\\n<ol>\\n<li><a href=\\\"#keylayout\\\">KeyLayout</a></li>\\n<li><a href=\\\"#section\\\">Section</a></li>\\n<li><a href=\\\"#grid\\\">Grid</a></li>\\n<li><a href=\\\"#row\\\">Row</a></li>\\n<li><a href=\\\"#key\\\">Key</a></li>\\n<li><a href=\\\"#keysuggestions\\\">KeySuggestions</a></li>\\n</ol>\\n<p>Properties can be set at any level of the hierarchy and are used to determine the default values for the subparts at lower levels in the hierarchy. For example, setting the <strong>keyboardHeight</strong> property at the <strong>KeyLayout</strong> level will specify the default height of each <strong>Row</strong> in each <strong>Grid</strong> in each <strong>Section</strong> of the grid used. If a <strong>Grid</strong> specifies a <strong>gridHeight</strong> property, it is set as the default for each <strong>Row</strong> in that <strong>Grid</strong>. In both cases, if any <strong>Row</strong> in the <strong>Grid</strong> specifies a <strong>rowHeight</strong> property, that height will be used as the default for each <strong>Key</strong> in that <strong>Row</strong>.</p>\\n<h2 id=\\\"keylayout\\\">KeyLayout</h2>\\n<p>The <strong>KeyLayout</strong> object specifies the key configuration for a keyboard instance. Each Key Definition File includes a single <strong>KeyLayout</strong>. The <strong>KeyLayout</strong> contains one or more Section arrays.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>keyboardHeightFHD</td>\\n<td>unsigned</td>\\n<td>Overall height of the keyboard for FHD.</td>\\n</tr>\\n<tr>\\n<td>keyboardWidthFHD</td>\\n<td>unsigned</td>\\n<td>Overall width of the keyboard for FHD.</td>\\n</tr>\\n<tr>\\n<td>keyboardHeightHD</td>\\n<td>unsigned</td>\\n<td>Overall height of the keyboard for HD.</td>\\n</tr>\\n<tr>\\n<td>keyboardWidthHD</td>\\n<td>unsigned</td>\\n<td>Overall width of the keyboard for HD.</td>\\n</tr>\\n<tr>\\n<td>sections</td>\\n<td>array of <strong>Section</strong> objects</td>\\n<td>An array of <strong>Section</strong> objects in the <strong>KeyLayout</strong>. A <strong>KeyLayout</strong> object contains one or more <strong>Section</strong> objects (it must have at least one). Most have a single <strong>Section</strong> object (for example, a PIN pad). In some cases, however, a <strong>KeyLayout</strong> will have multiple <strong>Section</strong> objects (for example, Roku's WiFi keyboard has four sections).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"section\\\">Section</h2>\\n<p>A <strong>Section</strong> contains one or more <strong>Grid</strong> objects. </p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>sectionWidthFHD</td>\\n<td>unsigned</td>\\n<td>Width of the section for FHD. This attribute is only required if the <strong>KeyLayout</strong> includes multiple <strong>Section</strong> objects that have different widths.</td>\\n</tr>\\n<tr>\\n<td>sectionWidthHD</td>\\n<td>unsigned</td>\\n<td>Width of the section for HD. This attribute is only required if the <strong>KeyLayout</strong> includes multiple <strong>Section</strong> objects that have different widths.</td>\\n</tr>\\n<tr>\\n<td>grids</td>\\n<td>array of <strong>Grid</strong> objects</td>\\n<td>An array of Grid objects in the <strong>Section</strong>. A <strong>Section</strong> object contains one or more <strong>Grid</strong> objects (it must have at least one).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"grid\\\">Grid</h2>\\n<p>A <strong>Section</strong> may contain one or more <strong>Grid</strong> objects. A <strong>Section</strong> typically contains multiple <strong>Grid</strong> objects when defining different key layouts for a particular mode of the overall <strong>KeyLayout</strong>. For example, the \\\"alpha key\\\" section of Roku's current WiFi keyboard has six modes (\\\"alphanumLowerCase\\\", \\\"alphanumUpperCase\\\", \\\"symbolsLowerCase\\\", \\\"symbolsUpperCase\\\", \\\"accentsLowerCase\\\", \\\"accentsUpperCase\\\"). Each of the modes for these <strong>Section</strong> objects is specified using a different <strong>Grid</strong>.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>gridHeightFHD</td>\\n<td>unsigned</td>\\n<td>Height of the grid for FHD.This attribute is only required if the <strong>Section</strong> includes multiple <strong>Grid</strong> objects and the grid's height is different from the overall KeyLayout height.The gridHeight must be less than or equal to the overall KeyLayout height.</td>\\n</tr>\\n<tr>\\n<td>gridHeightHD</td>\\n<td>unsigned</td>\\n<td>Height of the grid for HD.This attribute is only required if the <strong>Section</strong> includes multiple <strong>Grid</strong> objects and the grid's height is different from the overall KeyLayout height.The gridHeight must be less than or equal to the overall KeyLayout height.</td>\\n</tr>\\n<tr>\\n<td>modes</td>\\n<td>string/array of strings</td>\\n<td>The keyboard mode when this grid is shown.If the <strong>mode</strong> field of a <strong><a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-key-grid.md\\\">DynamicKeyGrid</a></strong> node is set, the <strong>Grid</strong> object with the matching mode is displayed. In some cases, the same grid is shown for different keyboard modes. For example, Roku's WiFi keyboard shows the same numeric characters grid in both \\\"alphaNumUpperCase\\\" and \\\"alphaNumLowerCase\\\" modes.</td>\\n</tr>\\n<tr>\\n<td>rows</td>\\n<td>array of <strong>Row</strong> objects</td>\\n<td>An array of <strong>Row</strong> objects in the <strong>Grid</strong>. A <strong>Grid</strong> object contains one or more <strong>Row</strong> objects (it must have at least one).If the <em>rows</em> array contains a null Row (for example, {} in the <em>rows</em> array), a blank space will be shown (no key background, label or icon is drawn) and focus cannot be set on that Row object.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"row\\\">Row</h2>\\n<p>A <strong>Row</strong> is a container for a set of keys. A <strong>Grid</strong> may contain one or more <strong>Row</strong> objects.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>rowHeightFHD</td>\\n<td>unsigned</td>\\n<td>Height of the row for FHD. This attribute is only required if the <strong>Grid</strong> includes multiple <strong>Row</strong> objects with different heights.</td>\\n</tr>\\n<tr>\\n<td>rowHeightHD</td>\\n<td>unsigned</td>\\n<td>Height of the row for HD. This attribute is only required if the <strong>Grid</strong> includes multiple <strong>R**</strong>ow** objects with different heights.</td>\\n</tr>\\n<tr>\\n<td>keys</td>\\n<td>array of <strong>Key</strong> objects</td>\\n<td>An array of <strong>Key</strong> objects in the <strong>Row</strong>. A <strong>Row</strong> object contains one or more <strong>Key</strong> objects (it must have at least one).If the <strong>Key</strong> object does not include either a <strong>label</strong> field or an <strong>icon*</strong>/<strong>*focusIcon</strong> field, a blank key background will be drawn and focus cannot be set on that key.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"key\\\">Key</h2>\\n<p>A <strong>Key</strong> specifies a single key within a <strong>Row</strong> object. The <strong>Key</strong> defines the string or icon that is displayed on the key and the string that is sent when the key is focused or selected. Keys may either have a label or an icon, but may not have both.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>keyWidthFHD</td>\\n<td>unsigned</td>\\n<td>Width of the key for FHD. This attribute is only required if the <strong>Row</strong> includes multiple <strong>Key</strong> objects with different widths.</td>\\n</tr>\\n<tr>\\n<td>keyWidthHD</td>\\n<td>unsigned</td>\\n<td>Width of the key for HD. This attribute is only required if the <strong>Row</strong> includes multiple <strong>Key</strong> objects with different widths.</td>\\n</tr>\\n<tr>\\n<td>label</td>\\n<td>string</td>\\n<td>The string to be displayed on the key. Labels can be specified using the character itself or UTF-16 encoding. For example, the lowercase n tilde can be specified with \\\"ñ\\\" or \\\"\\\\u00F1\\\".If the <strong>strOut</strong> field is not specified, this is also the string that is sent when the key is focused or selected.</td>\\n</tr>\\n<tr>\\n<td>icon</td>\\n<td>uri</td>\\n<td>The icon to be displayed on the key. If an icon is specified, the <strong>strOut</strong> field must be specified to send the appropriate string when the key is focused or selected. If an icon is specified, do not specify a label.</td>\\n</tr>\\n<tr>\\n<td>focusIcon</td>\\n<td>uri</td>\\n<td>The icon to be displayed when the key has focus. If an icon is specified, do not specify a label.</td>\\n</tr>\\n<tr>\\n<td>strOut</td>\\n<td>string</td>\\n<td>The string to be sent when the key is focused or selected.</td>\\n</tr>\\n<tr>\\n<td>autoRepeat</td>\\n<td>unsigned</td>\\n<td>By default, this field is set to <strong>0</strong>, which means the action associated with the key occurs only once. If this field is not set to <strong>0</strong>, the action will continue until the key is released.</td>\\n</tr>\\n<tr>\\n<td>disabled</td>\\n<td>unsigned</td>\\n<td>If this field is set to <strong>0</strong>, the key's label or icon is drawn with a disabled appearance and the key cannot be focused.</td>\\n</tr>\\n<tr>\\n<td>suggestions</td>\\n<td>KeySuggestions</td>\\n<td>The alternate strings to be displayed in a pop-up when the key is triggered.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"keysuggestions\\\">KeySuggestions</h2>\\n<p>A <strong>KeySuggestions</strong> object specifies one or more optional values for the associated <strong>Key</strong> object. The optional values are displayed when one of the key's triggers occurs.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>options</td>\\n<td>string/array of strings</td>\\n<td>The optional strings associated with the <strong>Key</strong> object (for example, the @ key may have options of @<a href=\\\"http://gmail.com/\\\">gmail.com</a>, @<a href=\\\"http://msn.com/\\\">msn.com</a>, and so on).</td>\\n</tr>\\n<tr>\\n<td>triggers</td>\\n<td>string/array of strings</td>\\n<td>The actions that trigger the suggestions pop-up. This may be one or both of the following values:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>string</th>\\n<th>description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>select</td>\\n<td>The suggestions pop-up appears when the key is selected.</td>\\n</tr>\\n<tr>\\n<td>hover</td>\\n<td>The suggestions pop-up appears if focus remains on the key for a short interval.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"computing-key-sizes\\\">Computing Key Sizes</h2>\\n<p>Key sizes are computed based on the various width and height properties specified by the hierarchy of parts. In general, default key widths and heights are computed using the width/height values from higher levels in the hierarchy, but can be overridden by values specified lower in the hierarchy.</p>\\n<h3 id=\\\"key-height-computation\\\">Key Height Computation</h3>\\n<ul>\\n<li>The overall keyboard height is specified by the KeyLayout's <strong>keyboardHeight</strong> attribute.</li>\\n</ul>\\n<ul>\\n<li>All <strong>Section</strong> objects have the same height.</li>\\n</ul>\\n<ul>\\n<li>Key heights are computed based on the number of <strong>Row</strong> objects in a KeyGrid.</li>\\n</ul>\\n<ul>\\n<li>For equal height rows, if there are <em>N</em> Rows in a KeyGrid, the height of each key for each row in a KeyGrid is computed as follows: <code>keyHeight = (keyboardHeight) / N</code>.</li>\\n</ul>\\n<ul>\\n<li>To configure rows with varying heights, specify the <strong>rowHeight</strong> attribute for those rows. Those rows will use the explicitly specified heights and the heights of the remaining rows will be computed by equally dividing the remaining <strong>keyboardHeight</strong> evenly after subtracting the height of the rows with explicitly specified heights. For example, if there are <em>N</em> rows and Row 1 has its <strong>rowHeight</strong> explicitly specified as 75, the keys in Row 1 will have height 75, and the height of the keys in the other rows will be calculated as follows: <code>keyHeight = (keyboardHeight - 75) / (N - 1)</code>.</li>\\n</ul>\\n<h3 id=\\\"key-width-computation\\\">Key Width Computation</h3>\\n<ul>\\n<li>The overall keyboard width is specified by the KeyLayout's <strong>keyboardWidth</strong> attribute.</li>\\n</ul>\\n<ul>\\n<li>\\n<p>If there are <em>S</em> sections, the width of each section by default would be as follows: <code>sectionWidth = (keyboardWidth) / N</code>.</p>\\n</li>\\n<li>\\n<p>Individual sections can override the default section width by explicitly specifying a <strong>sectionWidth</strong> attribute. Those sections will use the explicitly specified widths, and the remaining <strong>keyboardWidth</strong> will be equally divided between the sections that do not specify explicit widths, similar to how the key height is computed above if the <strong>rowHeight</strong> is explicitly specified for some rows.</p>\\n</li>\\n</ul>\\n<ul>\\n<li>Each Grid in a Section object has the same width. </li>\\n</ul>\\n<ul>\\n<li>For keys with equal width in a Row object, if there are <em>K</em> keys in the Row, the height of each key is computed as follows: <code>keyWidth = (sectionWidth) / K</code>.</li>\\n</ul>\\n<ul>\\n<li>To configure keys with varying widths within in a Row, specify the <strong>keyWidth</strong> attribute for those keys. Those keys will use the explicitly specified widths, and the widths of the remaining keys will be computed by equally dividing the remaining <strong>sectionWidth</strong> evenly after subtracting the width of the keys with explicitly specified widths. For example, if there are <em>K</em> keys in a row and Key 1 has its <strong>keyWidth</strong> explicitly specified as 100, Key 1 will have width 100 and the other keys in the Row will be calculated as follows: <code>keyWidth = (sectionWidth - 100) / (K - 1)</code>.</li>\\n</ul>\\n<h2 id=\\\"examples\\\">Examples</h2>\\n<h3 id=\\\"pinpad\\\">PinPad</h3>\\n<p>This example uses a Key Definition File to specify a simple numeric PIN pad. The KeyLayout includes a single Section with a single Grid that has four Rows with three Keys each.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/pin-pad-kdf.jpg\\\" alt=\\\"roku815px - pin-pad-kdf\\\"></p>\\n<pre><code>{\\n  \\\"keyboardWidthFHD\\\": 495,\\n  \\\"keyboardHeightFHD\\\": 300,\\n  \\\"keyboardWidthHD\\\": 324,\\n  \\\"keyboardHeightHD\\\": 200,\\n  \\\"sections\\\": [\\n    {\\n      \\\"grids\\\": [\\n        {\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"1\\\" },\\n                { \\\"label\\\": \\\"2\\\" },\\n                { \\\"label\\\": \\\"3\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"4\\\" },\\n                { \\\"label\\\": \\\"5\\\" },\\n                { \\\"label\\\": \\\"6\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"7\\\" },\\n                { \\\"label\\\": \\\"8\\\" },\\n                { \\\"label\\\": \\\"9\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ClearKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ClearKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"clear\\\"\\n                },\\n                { \\\"label\\\": \\\"0\\\" },\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_DeleteKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_DeleteKeyFocusBitmap\\\",\\n          \\\"autoRepeat\\\": 1,\\n                  \\\"strOut\\\": \\\"backspace\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n</code></pre>\\n<h3 id=\\\"minikeyboard\\\">MiniKeyboard</h3>\\n<p>This example uses the Key Definition File for the Search \\\"MiniKeyboard\\\" used by the RokuOS. The KeyLayout has a single Section with a single Grid that has six rows, with six keys each for the characters a-z and 0-9. The seventh row of the grid has three double-width keys for <strong>Clear</strong>, <strong>Space</strong>, and <strong>Backspace</strong>.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/mini-keyboard-kdf-v2.jpg\\\" alt=\\\"roku815px - mini-keyboard-kdf\\\"></p>\\n<pre><code>{\\n  \\\"keyboardWidthFHD\\\": 576,\\n  \\\"keyboardHeightFHD\\\": 630,\\n  \\\"keyboardWidthHD\\\": 384,\\n  \\\"keyboardHeightHD\\\": 420,\\n  \\\"sections\\\": [\\n    {\\n      \\\"grids\\\": [\\n        {\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"a\\\" },\\n                { \\\"label\\\": \\\"b\\\" },\\n                { \\\"label\\\": \\\"c\\\" },\\n                { \\\"label\\\": \\\"d\\\" },\\n                { \\\"label\\\": \\\"e\\\" },\\n                { \\\"label\\\": \\\"f\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"g\\\" },\\n                { \\\"label\\\": \\\"h\\\" },\\n                { \\\"label\\\": \\\"i\\\" },\\n                { \\\"label\\\": \\\"j\\\" },\\n                { \\\"label\\\": \\\"k\\\" },\\n                { \\\"label\\\": \\\"l\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"m\\\" },\\n                { \\\"label\\\": \\\"n\\\" },\\n                { \\\"label\\\": \\\"o\\\" },\\n                { \\\"label\\\": \\\"p\\\" },\\n                { \\\"label\\\": \\\"q\\\" },\\n                { \\\"label\\\": \\\"r\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"s\\\" },\\n                { \\\"label\\\": \\\"t\\\" },\\n                { \\\"label\\\": \\\"u\\\" },\\n                { \\\"label\\\": \\\"v\\\" },\\n                { \\\"label\\\": \\\"w\\\" },\\n                { \\\"label\\\": \\\"x\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"y\\\" },\\n                { \\\"label\\\": \\\"z\\\" },\\n                { \\\"label\\\": \\\"1\\\" },\\n                { \\\"label\\\": \\\"2\\\" },\\n                { \\\"label\\\": \\\"3\\\" },\\n                { \\\"label\\\": \\\"4\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"5\\\" },\\n                { \\\"label\\\": \\\"6\\\" },\\n                { \\\"label\\\": \\\"7\\\" },\\n                { \\\"label\\\": \\\"8\\\" },\\n                { \\\"label\\\": \\\"9\\\" },\\n                { \\\"label\\\": \\\"0\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ClearKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ClearKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"clear\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SpaceKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SpaceKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"space\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_DeleteKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_DeleteKeyFocusBitmap\\\",\\n          \\\"autoRepeat\\\": 1,\\n                  \\\"strOut\\\": \\\"backspace\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n</code></pre>\\n<h3 id=\\\"address-keyboard\\\">Address Keyboard</h3>\\n<p>This is an example of a keyboard with a single Section that supports five different modes used for entering a name, zip code and an address. The five modes are as follow:</p>\\n<ul>\\n<li>NameUpper</li>\\n<li>NameLower</li>\\n<li>Zip</li>\\n<li>FullUpper</li>\\n<li>FullLower</li>\\n</ul>\\n<p>Each mode is associated with a different Grid layout.</p>\\n<p>The examples below show the Keyboard in the \\\"NameLower\\\", \\\"Zip\\\" and \\\"FullLower\\\" modes. These examples illustrate the following:</p>\\n<ul>\\n<li>For all of the modes, the same <strong>KeyboardWidth</strong> is used.</li>\\n<li>The grid used for the \\\"Zip\\\" mode has fewer rows than the other two modes. The <strong>SectionHeight</strong> for that mode is set so that the height of each row stays the same as in the other modes that use <strong>KeyboardHeight</strong>.</li>\\n<li>In the \\\"NameLower\\\" mode, the <strong>Prev</strong> key is disabled. Similarly, in the \\\"FullUpper\\\" mode, the <strong>Next</strong> key is disabled.</li>\\n</ul>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/key-grid-1-lower-kdf.jpg\\\" alt=\\\"roku815px - key-grid-1-lower-kdf\\\"></p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/key-grid-2-full-lower-kdf.jpg\\\" alt=\\\"roku815px - key-grid-2-full-lower\\\"></p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/key-grid-3-zip-kdf.jpg\\\" alt=\\\"roku815px - key-grid-3-zip\\\"></p>\\n<pre><code>{\\n  \\\"keyboardWidthFHD\\\": 576,\\n  \\\"keyboardHeightFHD\\\": 432,\\n  \\\"keyboardWidthHD\\\": 384,\\n  \\\"keyboardHeightHD\\\": 288,\\n  \\\"sections\\\": [\\n    {\\n      \\\"grids\\\": [\\n        {\\n          \\\"modes\\\": \\\"NameUpper\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"A\\\" },\\n                { \\\"label\\\": \\\"B\\\" },\\n                { \\\"label\\\": \\\"C\\\" },\\n                { \\\"label\\\": \\\"D\\\" },\\n                { \\\"label\\\": \\\"E\\\" },\\n                { \\\"label\\\": \\\"F\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"G\\\" },\\n                { \\\"label\\\": \\\"H\\\" },\\n                { \\\"label\\\": \\\"I\\\" },\\n                { \\\"label\\\": \\\"J\\\" },\\n                { \\\"label\\\": \\\"K\\\" },\\n                { \\\"label\\\": \\\"L\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"M\\\" },\\n                { \\\"label\\\": \\\"N\\\" },\\n                { \\\"label\\\": \\\"O\\\" },\\n                { \\\"label\\\": \\\"P\\\" },\\n                { \\\"label\\\": \\\"Q\\\" },\\n                { \\\"label\\\": \\\"R\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"S\\\" },\\n                { \\\"label\\\": \\\"T\\\" },\\n                { \\\"label\\\": \\\"U\\\" },\\n                { \\\"label\\\": \\\"V\\\" },\\n                { \\\"label\\\": \\\"W\\\" },\\n                { \\\"label\\\": \\\"X\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"Y\\\" },\\n                { \\\"label\\\": \\\"Z\\\" },\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SpaceKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SpaceKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"space\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_DeleteKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_DeleteKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"backspace\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ClearKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ClearKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"clear\\\"\\n                },\\n                {\\n                  \\\"label\\\": \\\"Aa\\\",\\n                  \\\"strOut\\\": \\\"UpperLower\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"Prev\\\", \\\"disabled\\\": 1 },\\n                { \\\"label\\\": \\\"Next\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"NameLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"a\\\" },\\n                { \\\"label\\\": \\\"b\\\" },\\n                { \\\"label\\\": \\\"c\\\" },\\n                { \\\"label\\\": \\\"d\\\" },\\n                { \\\"label\\\": \\\"e\\\" },\\n                { \\\"label\\\": \\\"f\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"g\\\" },\\n                { \\\"label\\\": \\\"h\\\" },\\n                { \\\"label\\\": \\\"i\\\" },\\n                { \\\"label\\\": \\\"j\\\" },\\n                { \\\"label\\\": \\\"k\\\" },\\n                { \\\"label\\\": \\\"l\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"m\\\" },\\n                { \\\"label\\\": \\\"n\\\" },\\n                { \\\"label\\\": \\\"o\\\" },\\n                { \\\"label\\\": \\\"p\\\" },\\n                { \\\"label\\\": \\\"q\\\" },\\n                { \\\"label\\\": \\\"r\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"s\\\" },\\n                { \\\"label\\\": \\\"t\\\" },\\n                { \\\"label\\\": \\\"u\\\" },\\n                { \\\"label\\\": \\\"v\\\" },\\n                { \\\"label\\\": \\\"w\\\" },\\n                { \\\"label\\\": \\\"x\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"y\\\" },\\n                { \\\"label\\\": \\\"z\\\" },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardSpaceOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardSpaceOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"space\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardDeleteOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardDeleteOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"backspace\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardClearOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardClearOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"clear\\\"\\n                },\\n                {\\n                  \\\"label\\\": \\\"Aa\\\",\\n                  \\\"strOut\\\": \\\"UpperLower\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"Prev\\\", \\\"disabled\\\": 1 },\\n                { \\\"label\\\": \\\"Next\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"Zip\\\",\\n          \\\"gridHeightFHD\\\": 360,\\n          \\\"gridHeightHD\\\": 240,\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"1\\\" },\\n                { \\\"label\\\": \\\"2\\\" },\\n                { \\\"label\\\": \\\"3\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"4\\\" },\\n                { \\\"label\\\": \\\"5\\\" },\\n                { \\\"label\\\": \\\"6\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"7\\\" },\\n                { \\\"label\\\": \\\"8\\\" },\\n                { \\\"label\\\": \\\"9\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardDeleteOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardDeleteOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"backspace\\\"\\n                },\\n                { \\\"label\\\": \\\"0\\\"},\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardClearOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardClearOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"clear\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"Prev\\\" },\\n                { \\\"label\\\": \\\"Next\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"FullUpper\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"0\\\" },\\n                { \\\"label\\\": \\\"1\\\" },\\n                { \\\"label\\\": \\\"2\\\" },\\n                { \\\"label\\\": \\\"3\\\" },\\n                { \\\"label\\\": \\\"4\\\" },\\n                { \\\"label\\\": \\\"5\\\" },\\n                { \\\"label\\\": \\\"6\\\" },\\n                { \\\"label\\\": \\\"7\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"8\\\" },\\n                { \\\"label\\\": \\\"9\\\" },\\n                { \\\"label\\\": \\\"A\\\" },\\n                { \\\"label\\\": \\\"B\\\" },\\n                { \\\"label\\\": \\\"C\\\" },\\n                { \\\"label\\\": \\\"D\\\" },\\n                { \\\"label\\\": \\\"E\\\" },\\n                { \\\"label\\\": \\\"F\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"G\\\" },\\n                { \\\"label\\\": \\\"H\\\" },\\n                { \\\"label\\\": \\\"I\\\" },\\n                { \\\"label\\\": \\\"J\\\" },\\n                { \\\"label\\\": \\\"K\\\" },\\n                { \\\"label\\\": \\\"L\\\" },\\n                { \\\"label\\\": \\\"M\\\" },\\n                { \\\"label\\\": \\\"N\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"O\\\" },\\n                { \\\"label\\\": \\\"P\\\" },\\n                { \\\"label\\\": \\\"Q\\\" },\\n                { \\\"label\\\": \\\"R\\\" },\\n                { \\\"label\\\": \\\"S\\\" },\\n                { \\\"label\\\": \\\"T\\\" },\\n                { \\\"label\\\": \\\"U\\\" },\\n                { \\\"label\\\": \\\"V\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"W\\\" },\\n                { \\\"label\\\": \\\"X\\\" },\\n                { \\\"label\\\": \\\"Y\\\" },\\n                { \\\"label\\\": \\\"Z\\\" },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardSpaceOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardSpaceOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"space\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardDeleteOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardDeleteOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"backspace\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardClearOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardClearOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"clear\\\"\\n                },\\n                {\\n                  \\\"label\\\": \\\"Aa\\\",\\n                  \\\"strOut\\\": \\\"UpperLower\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"Prev\\\" },\\n                { \\\"label\\\": \\\"Next\\\", \\\"disabled\\\": 1 }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"FullLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"0\\\" },\\n                { \\\"label\\\": \\\"1\\\" },\\n                { \\\"label\\\": \\\"2\\\" },\\n                { \\\"label\\\": \\\"3\\\" },\\n                { \\\"label\\\": \\\"4\\\" },\\n                { \\\"label\\\": \\\"5\\\" },\\n                { \\\"label\\\": \\\"6\\\" },\\n                { \\\"label\\\": \\\"7\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"8\\\" },\\n                { \\\"label\\\": \\\"9\\\" },\\n                { \\\"label\\\": \\\"a\\\" },\\n                { \\\"label\\\": \\\"b\\\" },\\n                { \\\"label\\\": \\\"c\\\" },\\n                { \\\"label\\\": \\\"d\\\" },\\n                { \\\"label\\\": \\\"e\\\" },\\n                { \\\"label\\\": \\\"f\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"g\\\" },\\n                { \\\"label\\\": \\\"h\\\" },\\n                { \\\"label\\\": \\\"i\\\" },\\n                { \\\"label\\\": \\\"j\\\" },\\n                { \\\"label\\\": \\\"k\\\" },\\n                { \\\"label\\\": \\\"l\\\" },\\n                { \\\"label\\\": \\\"m\\\" },\\n                { \\\"label\\\": \\\"n\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"o\\\" },\\n                { \\\"label\\\": \\\"p\\\" },\\n                { \\\"label\\\": \\\"q\\\" },\\n                { \\\"label\\\": \\\"r\\\" },\\n                { \\\"label\\\": \\\"s\\\" },\\n                { \\\"label\\\": \\\"t\\\" },\\n                { \\\"label\\\": \\\"u\\\" },\\n                { \\\"label\\\": \\\"v\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"w\\\" },\\n                { \\\"label\\\": \\\"x\\\" },\\n                { \\\"label\\\": \\\"y\\\" },\\n                { \\\"label\\\": \\\"z\\\" },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardSpaceOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardSpaceOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"space\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardDeleteOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardDeleteOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"backspace\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:KeyboardClearOnBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:KeyboardClearOffBitmap\\\",\\n                  \\\"strOut\\\": \\\"clear\\\"\\n                },\\n                {\\n                  \\\"label\\\": \\\"Aa\\\",\\n                  \\\"strOut\\\": \\\"UpperLower\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"Prev\\\" },\\n                { \\\"label\\\": \\\"Next\\\", \\\"disabled\\\": 1 }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n</code></pre>\\n<h3 id=\\\"wifi-keyboard\\\">WiFi Keyboard</h3>\\n<p>This example shows the Key Definition File for the WiFi keyboard used by the Roku OS. That keyboard has four Sections. Each Section supports one or more modes with the modes being associated with one or more Grid objects. Each Grid ha four Row's with varying numbers of keys.</p>\\n<p>The examples below show the keyboard in \\\"ABC123Lower\\\" mode as well as \\\"AccentsUpper\\\" mode. Note the following:</p>\\n<ul>\\n<li>The leftmost section does not change its Grid for different modes. In that case, the Section has a single Grid with its mode set to an array of all of the mode names.</li>\\n<li>In the \\\"SymbolsUpper\\\" mode, the third Section has some blank keys in the bottom two rows.</li>\\n</ul>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/wifi-keyboard-1-alphanum-kdf.jpg\\\" alt=\\\"roku815px - wifi-keyboard-1-alphanum-kdf\\\"></p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/wifi-keyboard-2-symbols-kdf.jpg\\\" alt=\\\"roku815px - wifi-keyboard-2-symbols-kdf\\\"></p>\\n<pre><code>{\\n  \\\"keyboardWidthFHD\\\": 1368,\\n  \\\"keyboardHeightFHD\\\": 336,\\n  \\\"keyboardWidthHD\\\": 912,\\n  \\\"keyboardHeightHD\\\": 224,\\n  \\\"sections\\\": [\\n    {\\n      \\\"sectionWidthFHD\\\": 180,\\n      \\\"sectionWidthHD\\\": 120,\\n      \\\"grids\\\": [\\n        {\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ShiftKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ShiftKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"shift\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SpaceKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SpaceKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"space\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_DeleteKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_DeleteKeyFocusBitmap\\\",\\n          \\\"autoRepeat\\\": 1,\\n                  \\\"strOut\\\": \\\"backspace\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_LeftKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_LeftKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"left\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_RightKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_RightKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"right\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    },\\n    {\\n      \\\"sectionWidthFHD\\\": 630,\\n      \\\"sectionWidthHD\\\": 420,\\n      \\\"grids\\\": [\\n        {\\n          \\\"modes\\\": \\\"ABC123Lower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"a\\\" },\\n                { \\\"label\\\": \\\"b\\\" },\\n                { \\\"label\\\": \\\"c\\\" },\\n                { \\\"label\\\": \\\"d\\\" },\\n                { \\\"label\\\": \\\"e\\\" },\\n                { \\\"label\\\": \\\"f\\\" },\\n                { \\\"label\\\": \\\"g\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"h\\\" },\\n                { \\\"label\\\": \\\"i\\\" },\\n                { \\\"label\\\": \\\"j\\\" },\\n                { \\\"label\\\": \\\"k\\\" },\\n                { \\\"label\\\": \\\"l\\\" },\\n                { \\\"label\\\": \\\"m\\\" },\\n                { \\\"label\\\": \\\"n\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"o\\\" },\\n                { \\\"label\\\": \\\"p\\\" },\\n                { \\\"label\\\": \\\"q\\\" },\\n                { \\\"label\\\": \\\"r\\\" },\\n                { \\\"label\\\": \\\"s\\\" },\\n                { \\\"label\\\": \\\"t\\\" },\\n                { \\\"label\\\": \\\"u\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"v\\\" },\\n                { \\\"label\\\": \\\"w\\\" },\\n                { \\\"label\\\": \\\"x\\\" },\\n                { \\\"label\\\": \\\"y\\\" },\\n                { \\\"label\\\": \\\"z\\\" },\\n                { \\\"label\\\": \\\"-\\\" },\\n                { \\\"label\\\": \\\"_\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"ABC123Upper\\\", \\\"ABC123Shift\\\" ],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"A\\\" },\\n                { \\\"label\\\": \\\"B\\\" },\\n                { \\\"label\\\": \\\"C\\\" },\\n                { \\\"label\\\": \\\"D\\\" },\\n                { \\\"label\\\": \\\"E\\\" },\\n                { \\\"label\\\": \\\"F\\\" },\\n                { \\\"label\\\": \\\"G\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"H\\\" },\\n                { \\\"label\\\": \\\"I\\\" },\\n                { \\\"label\\\": \\\"J\\\" },\\n                { \\\"label\\\": \\\"K\\\" },\\n                { \\\"label\\\": \\\"L\\\" },\\n                { \\\"label\\\": \\\"M\\\" },\\n                { \\\"label\\\": \\\"N\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"O\\\" },\\n                { \\\"label\\\": \\\"P\\\" },\\n                { \\\"label\\\": \\\"Q\\\" },\\n                { \\\"label\\\": \\\"R\\\" },\\n                { \\\"label\\\": \\\"S\\\" },\\n                { \\\"label\\\": \\\"T\\\" },\\n                { \\\"label\\\": \\\"U\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"V\\\" },\\n                { \\\"label\\\": \\\"W\\\" },\\n                { \\\"label\\\": \\\"X\\\" },\\n                { \\\"label\\\": \\\"Y\\\" },\\n                { \\\"label\\\": \\\"Z\\\" },\\n                { \\\"label\\\": \\\"-\\\" },\\n                { \\\"label\\\": \\\"_\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"SymbolsLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"!\\\" },\\n                { \\\"label\\\": \\\"?\\\" },\\n                { \\\"label\\\": \\\"\\\\u002A\\\" },\\n                { \\\"label\\\": \\\"\\\\u0023\\\" },\\n                { \\\"label\\\": \\\"\\\\u0024\\\" },\\n                { \\\"label\\\": \\\"\\\\u0025\\\" },\\n                { \\\"label\\\": \\\"\\\\u005E\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u0026\\\" },\\n                { \\\"label\\\": \\\"\\\\u002c\\\" },\\n                { \\\"label\\\": \\\"\\\\u003A\\\" },\\n                { \\\"label\\\": \\\"\\\\u003B\\\" },\\n                { \\\"label\\\": \\\"\\\\u0060\\\" },\\n                { \\\"label\\\": \\\"\\\\u0027\\\" },\\n                { \\\"label\\\": \\\"\\\\u0022\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u0028\\\" },\\n                { \\\"label\\\": \\\"\\\\u0029\\\" },\\n                { \\\"label\\\": \\\"\\\\u007B\\\" },\\n                { \\\"label\\\": \\\"\\\\u007D\\\" },\\n                { \\\"label\\\": \\\"\\\\u005B\\\" },\\n                { \\\"label\\\": \\\"\\\\u005D\\\" },\\n                { \\\"label\\\": \\\"\\\\u007E\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00A1\\\" },\\n                { \\\"label\\\": \\\"\\\\u00BF\\\" },\\n                { \\\"label\\\": \\\"\\\\u003C\\\" },\\n                { \\\"label\\\": \\\"\\\\u003E\\\" },\\n                { \\\"label\\\": \\\"\\\\u007C\\\" },\\n                { \\\"label\\\": \\\"\\\\u005C\\\" },\\n                { \\\"label\\\": \\\"\\\\u002F\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"SymbolsUpper\\\", \\\"SymbolsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u2022\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B7\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A5\\\" },\\n                { \\\"label\\\": \\\"\\\\u20AC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A7\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00AE\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A9\\\" },\\n                { \\\"label\\\": \\\"\\\\u2122\\\" },\\n                { \\\"label\\\": \\\"\\\\u00AB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00BB\\\" },\\n                { \\\"label\\\": \\\"\\\\u2039\\\" },\\n                { \\\"label\\\": \\\"\\\\u203A\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u2020\\\" },\\n                { \\\"label\\\": \\\"\\\\u2021\\\" },\\n                { \\\"label\\\": \\\"\\\\u0192\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B6\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B3\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00BA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00AA\\\" },\\n                { \\\"label\\\": \\\"\\\\u2026\\\" },\\n                {                   },\\n                {                   },\\n                {                   }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"AccentsLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00E0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E1\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E4\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E5\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E6\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00E8\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00EA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00EB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00EC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00ED\\\" },\\n                { \\\"label\\\": \\\"\\\\u00EE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00EF\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F4\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F5\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F6\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F8\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u0153\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E7\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F1\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"AccentsUpper\\\", \\\"AccentsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00C0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C1\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C4\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C5\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C6\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00C8\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CD\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00CF\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D4\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D5\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D6\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D8\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u0152\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00DA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00DB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00DC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C7\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D1\\\" }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    },\\n    {\\n      \\\"sectionWidthFHD\\\": 270,\\n      \\\"sectionWidthHD\\\": 180,\\n      \\\"grids\\\": [\\n        {\\n          \\\"modes\\\": [\\\"ABC123Lower\\\", \\\"ABC123Upper\\\", \\\"ABC123Shift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"1\\\" },\\n                { \\\"label\\\": \\\"2\\\" },\\n                { \\\"label\\\": \\\"3\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"4\\\" },\\n                { \\\"label\\\": \\\"5\\\" },\\n                { \\\"label\\\": \\\"6\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"7\\\" },\\n                { \\\"label\\\": \\\"8\\\" },\\n                { \\\"label\\\": \\\"9\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"@\\\" },\\n                { \\\"label\\\": \\\".\\\" },\\n                { \\\"label\\\": \\\"0\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"SymbolsLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00B4\\\" },\\n                { \\\"label\\\": \\\"\\\\u02C6\\\" },\\n                { \\\"label\\\": \\\"\\\\u02DC\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00A8\\\" },\\n                { \\\"label\\\": \\\"\\\\u00AF\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B8\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u003D\\\" },\\n                { \\\"label\\\": \\\"\\\\u002B\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D7\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00F7\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B1\\\" },\\n                { \\\"label\\\": \\\"\\\\u2030\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"SymbolsUpper\\\", \\\"SymbolsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00BC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00BD\\\" },\\n                { \\\"label\\\": \\\"\\\\u00BE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u201C\\\" },\\n                { \\\"label\\\": \\\"\\\\u201D\\\" },\\n                { \\\"label\\\": \\\"\\\\u201E\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u2018\\\" },\\n                { \\\"label\\\": \\\"\\\\u2019\\\" },\\n                { \\\"label\\\": \\\"\\\\u201A\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u2013\\\" },\\n                { \\\"label\\\": \\\"\\\\u2014\\\" },\\n                {                   }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"AccentsLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00FD\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FF\\\" },\\n                { \\\"label\\\": \\\"\\\\u0161\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u017E\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00DF\\\" },\\n                {                   },\\n                {                   }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {                   },\\n                {                   },\\n                {                   }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"AccentsUpper\\\", \\\"AccentsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00DD\\\" },\\n                { \\\"label\\\": \\\"\\\\u0178\\\" },\\n                { \\\"label\\\": \\\"\\\\u0160\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u017D\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00DE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {                   },\\n                {                   },\\n                {                   }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {                   },\\n                {                   },\\n                {                   }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    },\\n    {\\n      \\\"sectionWidthFHD\\\": 180,\\n      \\\"sectionWidthHD\\\": 120,\\n      \\\"grids\\\": [\\n        {\\n      \\\"modes\\\": [\\\"ABC123Lower\\\", \\\"ABC123Shift\\\" ],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOnKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": \\\"ABC123Upper\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOnKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": [\\\"SymbolsLower\\\", \\\"SymbolsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOffKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": \\\"SymbolsUpper\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOffKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": [\\\"AccentsLower\\\", \\\"AccentsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOffKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": \\\"AccentsUpper\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOffKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n</code></pre>\\n<h3 id=\\\"email-keyboard-with-pop-up-suggestions\\\">Email Keyboard with pop-up suggestions</h3>\\n<p>This example uses the same Key Definition File as the WiFi keyboard above, but with KeySuggestions added for the ampersand key. The suggestions pop-up is set to trigger when the key is focused for a short amount of time as well as when the key is selected.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/email-keyboard-kdf.jpg\\\" alt=\\\"roku815px - email-keyboard-kdf\\\"></p>\\n<pre><code>{\\n  \\\"keyboardWidthFHD\\\": 1368,\\n  \\\"keyboardHeightFHD\\\": 336,\\n  \\\"keyboardWidthHD\\\": 912,\\n  \\\"keyboardHeightHD\\\": 224,\\n \\\"sections\\\": [\\n    {\\n      \\\"sectionWidthFHD\\\": 180,\\n      \\\"sectionWidthHD\\\": 120,\\n      \\\"grids\\\": [\\n        {\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ShiftKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ShiftKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"shift\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SpaceKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SpaceKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"space\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_DeleteKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_DeleteKeyFocusBitmap\\\",\\n          \\\"autoRepeat\\\": 1,\\n                  \\\"strOut\\\": \\\"backspace\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_LeftKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_LeftKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"left\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_RightKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_RightKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"right\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    },\\n    {\\n      \\\"sectionWidthFHD\\\": 630,\\n      \\\"sectionWidthHD\\\": 420,\\n      \\\"grids\\\": [\\n        {\\n          \\\"modes\\\": \\\"ABC123Lower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"a\\\" },\\n                { \\\"label\\\": \\\"b\\\" },\\n                { \\\"label\\\": \\\"c\\\" },\\n                { \\\"label\\\": \\\"d\\\" },\\n                { \\\"label\\\": \\\"e\\\" },\\n                { \\\"label\\\": \\\"f\\\" },\\n                { \\\"label\\\": \\\"g\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"h\\\" },\\n                { \\\"label\\\": \\\"i\\\" },\\n                { \\\"label\\\": \\\"j\\\" },\\n                { \\\"label\\\": \\\"k\\\" },\\n                { \\\"label\\\": \\\"l\\\" },\\n                { \\\"label\\\": \\\"m\\\" },\\n                { \\\"label\\\": \\\"n\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"o\\\" },\\n                { \\\"label\\\": \\\"p\\\" },\\n                { \\\"label\\\": \\\"q\\\" },\\n                { \\\"label\\\": \\\"r\\\" },\\n                { \\\"label\\\": \\\"s\\\" },\\n                { \\\"label\\\": \\\"t\\\" },\\n                { \\\"label\\\": \\\"u\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"v\\\" },\\n                { \\\"label\\\": \\\"w\\\" },\\n                { \\\"label\\\": \\\"x\\\" },\\n                { \\\"label\\\": \\\"y\\\" },\\n                { \\\"label\\\": \\\"z\\\" },\\n                { \\\"label\\\": \\\"-\\\" },\\n                { \\\"label\\\": \\\"_\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"ABC123Upper\\\", \\\"ABC123Shift\\\" ],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"A\\\" },\\n                { \\\"label\\\": \\\"B\\\" },\\n                { \\\"label\\\": \\\"C\\\" },\\n                { \\\"label\\\": \\\"D\\\" },\\n                { \\\"label\\\": \\\"E\\\" },\\n                { \\\"label\\\": \\\"F\\\" },\\n                { \\\"label\\\": \\\"G\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"H\\\" },\\n                { \\\"label\\\": \\\"I\\\" },\\n                { \\\"label\\\": \\\"J\\\" },\\n                { \\\"label\\\": \\\"K\\\" },\\n                { \\\"label\\\": \\\"L\\\" },\\n                { \\\"label\\\": \\\"M\\\" },\\n                { \\\"label\\\": \\\"N\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"O\\\" },\\n                { \\\"label\\\": \\\"P\\\" },\\n                { \\\"label\\\": \\\"Q\\\" },\\n                { \\\"label\\\": \\\"R\\\" },\\n                { \\\"label\\\": \\\"S\\\" },\\n                { \\\"label\\\": \\\"T\\\" },\\n                { \\\"label\\\": \\\"U\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"V\\\" },\\n                { \\\"label\\\": \\\"W\\\" },\\n                { \\\"label\\\": \\\"X\\\" },\\n                { \\\"label\\\": \\\"Y\\\" },\\n                { \\\"label\\\": \\\"Z\\\" },\\n                { \\\"label\\\": \\\"-\\\" },\\n                { \\\"label\\\": \\\"_\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"SymbolsLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"!\\\" },\\n                { \\\"label\\\": \\\"?\\\" },\\n                { \\\"label\\\": \\\"\\\\u002A\\\" },\\n                { \\\"label\\\": \\\"\\\\u0023\\\" },\\n                { \\\"label\\\": \\\"\\\\u0024\\\" },\\n                { \\\"label\\\": \\\"\\\\u0025\\\" },\\n                { \\\"label\\\": \\\"\\\\u005E\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u0026\\\" },\\n                { \\\"label\\\": \\\"\\\\u002c\\\" },\\n                { \\\"label\\\": \\\"\\\\u003A\\\" },\\n                { \\\"label\\\": \\\"\\\\u003B\\\" },\\n                { \\\"label\\\": \\\"\\\\u0060\\\" },\\n                { \\\"label\\\": \\\"\\\\u0027\\\" },\\n                { \\\"label\\\": \\\"\\\\u0022\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u0028\\\" },\\n                { \\\"label\\\": \\\"\\\\u0029\\\" },\\n                { \\\"label\\\": \\\"\\\\u007B\\\" },\\n                { \\\"label\\\": \\\"\\\\u007D\\\" },\\n                { \\\"label\\\": \\\"\\\\u005B\\\" },\\n                { \\\"label\\\": \\\"\\\\u005D\\\" },\\n                { \\\"label\\\": \\\"\\\\u007E\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00A1\\\" },\\n                { \\\"label\\\": \\\"\\\\u00BF\\\" },\\n                { \\\"label\\\": \\\"\\\\u003C\\\" },\\n                { \\\"label\\\": \\\"\\\\u003E\\\" },\\n                { \\\"label\\\": \\\"\\\\u007C\\\" },\\n                { \\\"label\\\": \\\"\\\\u005C\\\" },\\n                { \\\"label\\\": \\\"\\\\u002F\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"SymbolsUpper\\\", \\\"SymbolsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u2022\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B7\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A5\\\" },\\n                { \\\"label\\\": \\\"\\\\u20AC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A7\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00AE\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A9\\\" },\\n                { \\\"label\\\": \\\"\\\\u2122\\\" },\\n                { \\\"label\\\": \\\"\\\\u00AB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00BB\\\" },\\n                { \\\"label\\\": \\\"\\\\u2039\\\" },\\n                { \\\"label\\\": \\\"\\\\u203A\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u2020\\\" },\\n                { \\\"label\\\": \\\"\\\\u2021\\\" },\\n                { \\\"label\\\": \\\"\\\\u0192\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B6\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B3\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00BA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00AA\\\" },\\n                { \\\"label\\\": \\\"\\\\u2026\\\" },\\n                {                   },\\n                {                   },\\n                {                   }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"AccentsLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00E0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E1\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E4\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E5\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E6\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00E8\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00EA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00EB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00EC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00ED\\\" },\\n                { \\\"label\\\": \\\"\\\\u00EE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00EF\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F4\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F5\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F6\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F8\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u0153\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E7\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F1\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"AccentsUpper\\\", \\\"AccentsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00C0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C1\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C4\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C5\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C6\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00C8\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CD\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00CF\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D4\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D5\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D6\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D8\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u0152\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00DA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00DB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00DC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C7\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D1\\\" }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    },\\n    {\\n      \\\"sectionWidthFHD\\\": 270,\\n      \\\"sectionWidthHD\\\": 180,\\n      \\\"grids\\\": [\\n        {\\n          \\\"modes\\\": [\\\"ABC123Lower\\\", \\\"ABC123Upper\\\", \\\"ABC123Shift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"1\\\" },\\n                { \\\"label\\\": \\\"2\\\" },\\n                { \\\"label\\\": \\\"3\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"4\\\" },\\n                { \\\"label\\\": \\\"5\\\" },\\n                { \\\"label\\\": \\\"6\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"7\\\" },\\n                { \\\"label\\\": \\\"8\\\" },\\n                { \\\"label\\\": \\\"9\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"label\\\": \\\"@\\\",\\n                  \\\"suggestions\\\": {\\n                      \\\"options\\\": [ \\\"@aol.com\\\", \\\"@msn.com\\\", \\\"@yahoo.com\\\", \\\"@mac.com\\\", \\\"@gmail.com\\\", \\\"@roku.com\\\" ],\\n              \\\"triggers\\\": [ \\\"hover\\\", \\\"select\\\" ]\\n                   }\\n                },\\n                { \\\"label\\\": \\\".\\\" },\\n                { \\\"label\\\": \\\"0\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"SymbolsLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00B4\\\" },\\n                { \\\"label\\\": \\\"\\\\u02C6\\\" },\\n                { \\\"label\\\": \\\"\\\\u02DC\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00A8\\\" },\\n                { \\\"label\\\": \\\"\\\\u00AF\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B8\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u003D\\\" },\\n                { \\\"label\\\": \\\"\\\\u002B\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D7\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00F7\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B1\\\" },\\n                { \\\"label\\\": \\\"\\\\u2030\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"SymbolsUpper\\\", \\\"SymbolsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00BC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00BD\\\" },\\n                { \\\"label\\\": \\\"\\\\u00BE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u201C\\\" },\\n                { \\\"label\\\": \\\"\\\\u201D\\\" },\\n                { \\\"label\\\": \\\"\\\\u201E\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u2018\\\" },\\n                { \\\"label\\\": \\\"\\\\u2019\\\" },\\n                { \\\"label\\\": \\\"\\\\u201A\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u2013\\\" },\\n                { \\\"label\\\": \\\"\\\\u2014\\\" },\\n                {                   }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"AccentsLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00FD\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FF\\\" },\\n                { \\\"label\\\": \\\"\\\\u0161\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u017E\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00DF\\\" },\\n                {                   },\\n                {                   }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {                   },\\n                {                   },\\n                {                   }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"AccentsUpper\\\", \\\"AccentsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00DD\\\" },\\n                { \\\"label\\\": \\\"\\\\u0178\\\" },\\n                { \\\"label\\\": \\\"\\\\u0160\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u017D\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00DE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {                   },\\n                {                   },\\n                {                   }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {                   },\\n                {                   },\\n                {                   }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    },\\n    {\\n      \\\"sectionWidthFHD\\\": 180,\\n      \\\"sectionWidthHD\\\": 120,\\n      \\\"grids\\\": [\\n        {\\n      \\\"modes\\\": [\\\"ABC123Lower\\\", \\\"ABC123Shift\\\" ],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOnKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": \\\"ABC123Upper\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOnKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": [\\\"SymbolsLower\\\", \\\"SymbolsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOffKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": \\\"SymbolsUpper\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOffKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": [\\\"AccentsLower\\\", \\\"AccentsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOffKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": \\\"AccentsUpper\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOffKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n</code></pre>\\n<h3 id=\\\"full-keyboard-with-extended-action-section\\\">Full Keyboard with Extended Action Section</h3>\\n<p>This example starts with the same Key Definition File used for the WiFi keyboard above, but adds a 5th Section that includes additional action keys. The <em>rows</em> array for that Section's Grid contains 4 elements. The 1st, 2nd and 4th Row's in that array contain a single Key (Close, Clear and Continue). The 3rd element of that array is a null Row. This causes a gap to be left between the 2nd and 4th rows of that Section. See the Section near of the bottom of the Key Definition File to see how a null Row is specified in the Grid's <em>rows</em> array.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/extended-action-keyboard-kdf.jpg\\\" alt=\\\"roku815px - extended-action-keyboard-kdf\\\"></p>\\n<pre><code>{\\n  \\\"keyboardWidthFHD\\\": 1584,\\n  \\\"keyboardHeightFHD\\\": 336,\\n  \\\"keyboardWidthHD\\\": 1056,\\n  \\\"keyboardHeightHD\\\": 224,\\n  \\\"sections\\\": [\\n    {\\n      \\\"sectionWidthFHD\\\": 180,\\n      \\\"sectionWidthHD\\\": 120,\\n      \\\"grids\\\": [\\n        {\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ShiftKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ShiftKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"shift\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SpaceKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SpaceKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"space\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_DeleteKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_DeleteKeyFocusBitmap\\\",\\n          \\\"autoRepeat\\\": 1,\\n                  \\\"strOut\\\": \\\"backspace\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_LeftKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_LeftKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"left\\\"\\n                },\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_RightKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_RightKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"right\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    },\\n    {\\n      \\\"sectionWidthFHD\\\": 630,\\n      \\\"sectionWidthHD\\\": 420,\\n      \\\"grids\\\": [\\n        {\\n          \\\"modes\\\": \\\"ABC123Lower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"a\\\" },\\n                { \\\"label\\\": \\\"b\\\" },\\n                { \\\"label\\\": \\\"c\\\" },\\n                { \\\"label\\\": \\\"d\\\" },\\n                { \\\"label\\\": \\\"e\\\" },\\n                { \\\"label\\\": \\\"f\\\" },\\n                { \\\"label\\\": \\\"g\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"h\\\" },\\n                { \\\"label\\\": \\\"i\\\" },\\n                { \\\"label\\\": \\\"j\\\" },\\n                { \\\"label\\\": \\\"k\\\" },\\n                { \\\"label\\\": \\\"l\\\" },\\n                { \\\"label\\\": \\\"m\\\" },\\n                { \\\"label\\\": \\\"n\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"o\\\" },\\n                { \\\"label\\\": \\\"p\\\" },\\n                { \\\"label\\\": \\\"q\\\" },\\n                { \\\"label\\\": \\\"r\\\" },\\n                { \\\"label\\\": \\\"s\\\" },\\n                { \\\"label\\\": \\\"t\\\" },\\n                { \\\"label\\\": \\\"u\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"v\\\" },\\n                { \\\"label\\\": \\\"w\\\" },\\n                { \\\"label\\\": \\\"x\\\" },\\n                { \\\"label\\\": \\\"y\\\" },\\n                { \\\"label\\\": \\\"z\\\" },\\n                { \\\"label\\\": \\\"-\\\" },\\n                { \\\"label\\\": \\\"_\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"ABC123Upper\\\", \\\"ABC123Shift\\\" ],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"A\\\" },\\n                { \\\"label\\\": \\\"B\\\" },\\n                { \\\"label\\\": \\\"C\\\" },\\n                { \\\"label\\\": \\\"D\\\" },\\n                { \\\"label\\\": \\\"E\\\" },\\n                { \\\"label\\\": \\\"F\\\" },\\n                { \\\"label\\\": \\\"G\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"H\\\" },\\n                { \\\"label\\\": \\\"I\\\" },\\n                { \\\"label\\\": \\\"J\\\" },\\n                { \\\"label\\\": \\\"K\\\" },\\n                { \\\"label\\\": \\\"L\\\" },\\n                { \\\"label\\\": \\\"M\\\" },\\n                { \\\"label\\\": \\\"N\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"O\\\" },\\n                { \\\"label\\\": \\\"P\\\" },\\n                { \\\"label\\\": \\\"Q\\\" },\\n                { \\\"label\\\": \\\"R\\\" },\\n                { \\\"label\\\": \\\"S\\\" },\\n                { \\\"label\\\": \\\"T\\\" },\\n                { \\\"label\\\": \\\"U\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"V\\\" },\\n                { \\\"label\\\": \\\"W\\\" },\\n                { \\\"label\\\": \\\"X\\\" },\\n                { \\\"label\\\": \\\"Y\\\" },\\n                { \\\"label\\\": \\\"Z\\\" },\\n                { \\\"label\\\": \\\"-\\\" },\\n                { \\\"label\\\": \\\"_\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"SymbolsLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"!\\\" },\\n                { \\\"label\\\": \\\"?\\\" },\\n                { \\\"label\\\": \\\"\\\\u002A\\\" },\\n                { \\\"label\\\": \\\"\\\\u0023\\\" },\\n                { \\\"label\\\": \\\"\\\\u0024\\\" },\\n                { \\\"label\\\": \\\"\\\\u0025\\\" },\\n                { \\\"label\\\": \\\"\\\\u005E\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u0026\\\" },\\n                { \\\"label\\\": \\\"\\\\u002c\\\" },\\n                { \\\"label\\\": \\\"\\\\u003A\\\" },\\n                { \\\"label\\\": \\\"\\\\u003B\\\" },\\n                { \\\"label\\\": \\\"\\\\u0060\\\" },\\n                { \\\"label\\\": \\\"\\\\u0027\\\" },\\n                { \\\"label\\\": \\\"\\\\u0022\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u0028\\\" },\\n                { \\\"label\\\": \\\"\\\\u0029\\\" },\\n                { \\\"label\\\": \\\"\\\\u007B\\\" },\\n                { \\\"label\\\": \\\"\\\\u007D\\\" },\\n                { \\\"label\\\": \\\"\\\\u005B\\\" },\\n                { \\\"label\\\": \\\"\\\\u005D\\\" },\\n                { \\\"label\\\": \\\"\\\\u007E\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00A1\\\" },\\n                { \\\"label\\\": \\\"\\\\u00BF\\\" },\\n                { \\\"label\\\": \\\"\\\\u003C\\\" },\\n                { \\\"label\\\": \\\"\\\\u003E\\\" },\\n                { \\\"label\\\": \\\"\\\\u007C\\\" },\\n                { \\\"label\\\": \\\"\\\\u005C\\\" },\\n                { \\\"label\\\": \\\"\\\\u002F\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"SymbolsUpper\\\", \\\"SymbolsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u2022\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B7\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A5\\\" },\\n                { \\\"label\\\": \\\"\\\\u20AC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A7\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00AE\\\" },\\n                { \\\"label\\\": \\\"\\\\u00A9\\\" },\\n                { \\\"label\\\": \\\"\\\\u2122\\\" },\\n                { \\\"label\\\": \\\"\\\\u00AB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00BB\\\" },\\n                { \\\"label\\\": \\\"\\\\u2039\\\" },\\n                { \\\"label\\\": \\\"\\\\u203A\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u2020\\\" },\\n                { \\\"label\\\": \\\"\\\\u2021\\\" },\\n                { \\\"label\\\": \\\"\\\\u0192\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B6\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B3\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00BA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00AA\\\" },\\n                { \\\"label\\\": \\\"\\\\u2026\\\" },\\n                {                   },\\n                {                   },\\n                {                   }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"AccentsLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00E0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E1\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E4\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E5\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E6\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00E8\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00EA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00EB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00EC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00ED\\\" },\\n                { \\\"label\\\": \\\"\\\\u00EE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00EF\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F4\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F5\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F6\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F8\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u0153\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00E7\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F1\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"AccentsUpper\\\", \\\"AccentsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00C0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C1\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C4\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C5\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C6\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00C8\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CD\\\" },\\n                { \\\"label\\\": \\\"\\\\u00CE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00CF\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D2\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D3\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D4\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D5\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D6\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D8\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u0152\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D9\\\" },\\n                { \\\"label\\\": \\\"\\\\u00DA\\\" },\\n                { \\\"label\\\": \\\"\\\\u00DB\\\" },\\n                { \\\"label\\\": \\\"\\\\u00DC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00C7\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D1\\\" }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    },\\n    {\\n      \\\"sectionWidthFHD\\\": 270,\\n      \\\"sectionWidthHD\\\": 180,\\n      \\\"grids\\\": [\\n        {\\n          \\\"modes\\\": [\\\"ABC123Lower\\\", \\\"ABC123Upper\\\", \\\"ABC123Shift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"1\\\" },\\n                { \\\"label\\\": \\\"2\\\" },\\n                { \\\"label\\\": \\\"3\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"4\\\" },\\n                { \\\"label\\\": \\\"5\\\" },\\n                { \\\"label\\\": \\\"6\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"7\\\" },\\n                { \\\"label\\\": \\\"8\\\" },\\n                { \\\"label\\\": \\\"9\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"@\\\" },\\n                { \\\"label\\\": \\\".\\\" },\\n                { \\\"label\\\": \\\"0\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"SymbolsLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00B4\\\" },\\n                { \\\"label\\\": \\\"\\\\u02C6\\\" },\\n                { \\\"label\\\": \\\"\\\\u02DC\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00A8\\\" },\\n                { \\\"label\\\": \\\"\\\\u00AF\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B8\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u003D\\\" },\\n                { \\\"label\\\": \\\"\\\\u002B\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D7\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00F7\\\" },\\n                { \\\"label\\\": \\\"\\\\u00B1\\\" },\\n                { \\\"label\\\": \\\"\\\\u2030\\\" }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"SymbolsUpper\\\", \\\"SymbolsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00BC\\\" },\\n                { \\\"label\\\": \\\"\\\\u00BD\\\" },\\n                { \\\"label\\\": \\\"\\\\u00BE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u201C\\\" },\\n                { \\\"label\\\": \\\"\\\\u201D\\\" },\\n                { \\\"label\\\": \\\"\\\\u201E\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u2018\\\" },\\n                { \\\"label\\\": \\\"\\\\u2019\\\" },\\n                { \\\"label\\\": \\\"\\\\u201A\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u2013\\\" },\\n                { \\\"label\\\": \\\"\\\\u2014\\\" },\\n                {                   }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": \\\"AccentsLower\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00FD\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FF\\\" },\\n                { \\\"label\\\": \\\"\\\\u0161\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u017E\\\" },\\n                { \\\"label\\\": \\\"\\\\u00F0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00FE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00DF\\\" },\\n                {                   },\\n                {                   }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {                   },\\n                {                   },\\n                {                   }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"modes\\\": [\\\"AccentsUpper\\\", \\\"AccentsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u00DD\\\" },\\n                { \\\"label\\\": \\\"\\\\u0178\\\" },\\n                { \\\"label\\\": \\\"\\\\u0160\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                { \\\"label\\\": \\\"\\\\u017D\\\" },\\n                { \\\"label\\\": \\\"\\\\u00D0\\\" },\\n                { \\\"label\\\": \\\"\\\\u00DE\\\" }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {                   },\\n                {                   },\\n                {                   }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {                   },\\n                {                   },\\n                {                   }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    },\\n    {\\n      \\\"sectionWidthFHD\\\": 180,\\n      \\\"sectionWidthHD\\\": 120,\\n      \\\"grids\\\": [\\n        {\\n      \\\"modes\\\": [\\\"ABC123Lower\\\", \\\"ABC123Shift\\\" ],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOnKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": \\\"ABC123Upper\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOnKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": [\\\"SymbolsLower\\\", \\\"SymbolsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOffKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": \\\"SymbolsUpper\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOffKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": [\\\"AccentsLower\\\", \\\"AccentsShift\\\"],\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOffKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n      \\\"modes\\\": \\\"AccentsUpper\\\",\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_CapsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_CapsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"capslock\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_ABC123ModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_ABC123ModOffKeyFocusBitmap\\\",\\n          \\\"strOut\\\": \\\"abc123\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_SymbolsModOffKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_SymbolsModOffKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"symbols\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"icon\\\": \\\"theme:DKB_AccentsModOnKeyBitmap\\\",\\n                  \\\"focusIcon\\\": \\\"theme:DKB_AccentsModOnKeyFocusBitmap\\\",\\n                  \\\"strOut\\\": \\\"accents\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    },\\n    {\\n      \\\"sectionWidthFHD\\\": 180,\\n      \\\"sectionWidthHD\\\": 120,\\n      \\\"grids\\\": [\\n        {\\n          \\\"rows\\\": [\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"label\\\": \\\"Close\\\",\\n                  \\\"strOut\\\": \\\"close\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"label\\\": \\\"Clear\\\",\\n          \\\"strOut\\\": \\\"clear\\\"\\n                }\\n              ]\\n            },\\n            {\\n            },\\n            {\\n              \\\"keys\\\": [\\n                {\\n                  \\\"label\\\": \\\"Continue\\\",\\n                  \\\"strOut\\\": \\\"continue\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n</code></pre>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/standard-dialog.md":"{\n  \"content\": \"<h1 id=\\\"standarddialog\\\">StandardDialog</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\">Group</a></p>\\n<p>The <strong>StandardDialog</strong> node is the base for Roku's pre-built standard message, keyboard, pinpad, and progress dialogs. It can also be used directly with a custom dialog structure built with the <strong>StdDialogItem</strong> nodes.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>0.0f</td>\\n<td>READ_WRITE</td>\\n<td>Sets the width of the dialog:<br /><ul>\\n<li>If set to 0, the standard system dialog width is used (1038 for FHD, 692 for HD). If the title or any button text is too wide to fit within the standard width, the dialog width will be automatically increased to show the full title or button text up to a preset maximum (1380 for FHD and 920 for HD).</li>\\n<li>If set to greater than 0, the specified width is used as the overall width of the dialog.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>0.0f</td>\\n<td>READ_WRITE</td>\\n<td>Sets the height of the dialog.<br /><br />If this field is set to greater than 0, and the layout of the dialog for the specified width results in a dialog with a height less than the value of this field, the dialog layout is increased so that the dialog height matches the value of this field. In this case, the button area is moved to the bottom of the dialog and a blank region exists between the content area and the button area.</td>\\n</tr>\\n<tr>\\n<td>buttonSelected</td>\\n<td>int</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>Indicates the index of the selected button when the user selects one of the buttons in the button area.</td>\\n</tr>\\n<tr>\\n<td>buttonFocused</td>\\n<td>int</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>Indicates the index of the button that gained focus when the user moved the focus onto one of the buttons in the button area.</td>\\n</tr>\\n<tr>\\n<td>palette</td>\\n<td>RSGPalette node</td>\\n<td>not set</td>\\n<td>READ_WRITE</td>\\n<td>Sets the color palette for the dialog's background, text, buttons, and other elements. <br /><br />By default, no palette is specified; therefore, the dialog inherits the color palette from the nodes higher in the scene graph (typically, from the dialog's <a href=\\\"/docs/references/scenegraph/scene.md\\\">Scene</a> node, which has a <strong>palette</strong> field that can be used to consistently color the standard dialogs and keyboards in the channel). <br /><br />The RSGPalette color values used by the StandardDialog node are as follows:<br /><table>\\n<thead>\\n<tr>\\n<th>Palette Color Name</th>\\n<th>Usages</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>DialogBackgroundColor</td>\\n<td>Blend color for dialog's background bitmap.</td>\\n</tr>\\n<tr>\\n<td>DialogItemColor</td>\\n<td>Blend color for the following items:<br /><ul>\\n<li><a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-progress-item.md\\\">StdDlgProgressItem's</a> spinner bitmap</li>\\n<li><a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-determinate-progress-item.md\\\">StdDlgDeterminateProgressItem's</a> graphic</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>DialogTextColor</td>\\n<td>Color for the text in the following items:<br /><ul>\\n<li><a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-text-item.md\\\">StdDlgTextItem</a> and <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-graphic-item.md\\\">StdDlgGraphicItem</a> if the <strong>namedTextStyle</strong> field is set to \\\"normal\\\" or \\\"bold\\\".</li>\\n<li>All <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\">content area items</a>, except for <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-text-item.md\\\">StdDlgTextItem</a> and <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-graphic-item.md\\\">StdDlgGraphicItem</a>.</li>\\n<li><a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-title-area.md#fields\\\">Title area</a>. Unfocused button.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>DialogFocusColor</td>\\n<td>Blend color for the following:<br /><ul>\\n<li>The <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-button-area.md#fields\\\">button area</a> focus bitmap.</li>\\n<li>The focused scrollbar thumb.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>DialogFocusItemColor</td>\\n<td>Color for the text of the focused button.</td>\\n</tr>\\n<tr>\\n<td>DialogSecondaryTextColor</td>\\n<td>Color for the text of in the following items:<br /><ul>\\n<li><a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-text-item.md\\\">StdDlgTextItem</a> and <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-graphic-item.md\\\">StdDlgGraphicItem</a> if the <strong>namedTextStyle</strong> field is set to \\\"secondary\\\".</li>\\n<li>Disabled button.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>DialogSecondaryItemColor</td>\\n<td>Color for the following items:<br /><ul>\\n<li>The divider displayed below the title area.</li>\\n<li>The unfilled portion of the <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-determinate-progress-item.md\\\">StdDlgDeterminateProgressItem's</a> graphic.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>DialogInputFieldColor</td>\\n<td>The blend color for the text edit box background bitmap for keyboards used inside dialogs.</td>\\n</tr>\\n<tr>\\n<td>DialogKeyboardColor</td>\\n<td>The blend color for the keyboard background bitmap for keyboards used inside dialogs</td>\\n</tr>\\n<tr>\\n<td>DialogFootprintColor</td>\\n<td>The blend color for the following items:<br /><ul>\\n<li>The button focus footprint bitmap that is displayed when the <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-button-area.md#fields\\\">button area</a> does not have focus.</li>\\n<li>Unfocused scrollbar thumb and scrollbar track.</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>close</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>WRITE_ONLY</td>\\n<td>Dismisses the dialog. The dialog is dismissed whenever the close field is set, regardless of whether the field is set to true or false.</td>\\n</tr>\\n<tr>\\n<td>wasClosed</td>\\n<td>event</td>\\n<td>N/A</td>\\n<td>READ_ONLY</td>\\n<td>An event that indicates the dialog was dismissed. This event is triggered when one of the following occurs:<br /><ul>\\n<li>The <strong>close</strong> field is set.</li>\\n<li>The Back, Home, or Options key is pressed.</li>\\n<li>Another dialog is displayed.</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/standard-message-dialog.md":"{\n  \"content\": \"<h1 id=\\\"standardmessagedialog\\\">StandardMessageDialog</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-dialog.md\\\" title=\\\"**Standard Dialog**\\\">StandardDialog</a></p>\\n<p>The <strong>StandardMessageDialog</strong> node is used to displays a message to the user. It is similar to the legacy <a href=\\\"/docs/references/scenegraph/dialog-nodes/dialog.md\\\">Dialog</a> node. It may contain the following items (from top to bottom):</p>\\n<ul>\\n<li>One or more blocks of text at the top.</li>\\n<li>One bulleted / numbered list.</li>\\n<li>One or more blocks of text at the bottom.</li>\\n</ul>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/standard-message-dialog.jpg\\\" alt=\\\"roku815px - standard-message-dialog\\\"></p>\\n<h2 id=\\\"structure\\\">Structure</h2>\\n<p>The StandardMessageDialog is comprised of the following areas and building block nodes:</p>\\n<ul>\\n<li>StdDlgTitleArea.</li>\\n<li>\\n<p>StdDlgContentArea, which may contain the following items:</p>\\n<ul>\\n<li>Zero or more StdDlgTextItem nodes (the block(s) of text with the main message).</li>\\n<li>Zero or more StdDlgBulletTextItem nodes (bulleted/numbered list).</li>\\n<li>Zero or more StdDlgTextItem nodes (the block(s) of text with the bottom message).</li>\\n</ul>\\n</li>\\n<li>StdDlgButtonArea, which may contain zero or more StdDlgButton nodes. </li>\\n</ul>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>title</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>The title to be displayed at the top of the dialog.</td>\\n</tr>\\n<tr>\\n<td>message</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>One or more blocks of informational text displayed at the top of the dialog's content area. Each string in the array is displayed as a separate block of text with the standard amount of space left between the blocks.<br /><blockquote>\\n<p>To separate lines of text, add each line as an element in the array. Do not use newline characters.</p>\\n</blockquote></td>\\n</tr>\\n<tr>\\n<td>bulletText</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>An array of strings displayed as a bulleted or numbered list. The list is displayed in the content area below the message and above the bottom message.</td>\\n</tr>\\n<tr>\\n<td>bulletType</td>\\n<td>string</td>\\n<td>\\\"bullet\\\"</td>\\n<td>READ_WRITE</td>\\n<td>If the <strong>bulletText</strong> field is set, specifies the type of list item delimiter, which may be one of the following:<br /><ul>\\n<li>\\\"bullet\\\" (this is the default)</li>\\n<li>\\\"numbered\\\"</li>\\n<li>\\\"lettered\\\"</li>\\n</ul>.</td>\\n</tr>\\n<tr>\\n<td>bottomMessage</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>One or more blocks of informational text displayed at the bottom of the dialog's content area. Each string in the array is displayed as a separate block of text with the standard amount of space left between the blocks.<br /><blockquote>\\n<p>To separate lines of text, add each line as an element in the array. Do not use newline characters.</p>\\n</blockquote></td>\\n</tr>\\n<tr>\\n<td>buttons</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>List of buttons to be displayed in the button area at the bottom of the dialog. Each string in the buttons array adds a new button to the button area.<br /><blockquote>\\n<p>Minimize the number of buttons in the dialog to ensure they are all visible when the dialog is displayed.</p>\\n</blockquote></td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/standard-dialog-framework\\\">sample channel</a> that demonstrates how to create a standard message dialog.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/standard-keyboard-dialog.md":"{\n  \"content\": \"<h1 id=\\\"standardkeyboarddialog\\\">StandardKeyboardDialog</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-dialog.md\\\" title=\\\"**Standard Dialog**\\\">StandardDialog</a></p>\\n<p>The <strong>StandardKeyboardDialog</strong> node enables text and voice entry of strings consisting of alphanumeric characters as well as many commonly used symbols. It is similar to the legacy <a href=\\\"/docs/references/scenegraph/dialog-nodes/keyboarddialog.md\\\">KeyboardDialog</a> node, but includes voice entry functionality, which is provided through its internal <strong>DynamicKeyboard</strong> node.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/keyboard-dialog.jpg\\\" alt=\\\"roku815px - keyboard-dialog\\\"></p>\\n<h2 id=\\\"structure\\\">Structure</h2>\\n<p>The StandardKeyboardDialog is comprised of the following areas and building block nodes:</p>\\n<ul>\\n<li>StdDlgTitleArea.</li>\\n<li>\\n<p>StdDlgContentArea, which may contain the following items:</p>\\n<ul>\\n<li>Zero or more StdDlgTextItem nodes.</li>\\n<li>One StdDlgKeyboardItem containing a DynamicKeyboard node</li>\\n</ul>\\n</li>\\n<li>StdDlgButtonArea, which may contain zero or more StdDlgButton nodes. </li>\\n</ul>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Field</td>\\n<td>Type</td>\\n<td>Default</td>\\n<td>Access Permission</td>\\n<td>Description</td>\\n</tr>\\n<tr>\\n<td>title</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>The title to be displayed at the top of the dialog.</td>\\n</tr>\\n<tr>\\n<td>message</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>One or more blocks of text, which are typically used to describe information about the data to be entered. Each string in the array is displayed as a separate block of text with the standard amount of space left between the blocks.<br /><blockquote>\\n<p>Minimize the message length to avoid having a scrollbar automatically added to the content area. If multiple strings are specified or any string is too long, the dialog may not be able to fit within the height of the display.</p>\\n</blockquote></td>\\n</tr>\\n<tr>\\n<td>buttons</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>List of buttons to be displayed in the button area at the bottom of the dialog. Each string in the buttons array adds a new button to the button area.<br /><blockquote>\\n<p>Minimize the number of buttons in the dialog to ensure that all buttons are visible without the user having to scroll up and down.</p>\\n</blockquote></td>\\n</tr>\\n<tr>\\n<td>textEditBox</td>\\n<td>VoiceTextEditBox node</td>\\n<td>The keyboard item's VoiceTextEditBox node</td>\\n<td>READ</td>\\n<td>The internal VoiceTextEditBox node used by this dialog's internal keyboard. This field should be used only to access the fields of this internal node.</td>\\n</tr>\\n<tr>\\n<td>keyboardDomain</td>\\n<td>string</td>\\n<td>\\\"generic\\\"</td>\\n<td>READ_WRITE</td>\\n<td>The type of text to be entered. This may be used by the keyboard to modify the voice entry method and to determine when a valid string has been entered. This may be one of the following values:<br /><ul>\\n<li>\\\"email\\\": letter-by-letter dictation for emails.</li>\\n<li>\\\"numeric\\\": letter-by-letter dictation for PIN codes, zip codes, and other numeric input.</li>\\n<li>\\\"alphanumeric\\\": letter-by-letter dication for street addresses or other sequences of numbers and letters.</li>\\n<li>\\\"generic\\\": Full word input for search queries or other sequences of numbers, letters and symbols.</li>\\n<li>\\\"password\\\": letter-by-letter dication for passwords.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>The default string to be displayed in the keyboard's text edit box. When the user enters the text, this field is updated with the currently entered string.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/standard-dialog-framework\\\">sample channel</a> that demonstrates how to create a standard keyboard dialog.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/standard-pinpad-dialog.md":"{\n  \"content\": \"<h1 id=\\\"standardpinpaddialog\\\">StandardPinPadDialog</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-dialog.md\\\" title=\\\"**Standard Dialog**\\\">StandardDialog</a></p>\\n<p>The <strong>StandardPinPadDialog</strong> node enables text and voice entry of numeric characters—typically, short numeric PIN codes. It is similar to the legacy <a href=\\\"/docs/references/scenegraph/dialog-nodes/pindialog.md\\\">PinDialog</a> node, but includes additional voice entry of the numeric digits. This additional functionality is provided through the node's internal DynamicPinPad and VoiceTextEditBox nodes.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/pin-pad-dialog.jpg\\\" alt=\\\"roku815px - pin-pad-dialog\\\"></p>\\n<h2 id=\\\"structure\\\">Structure</h2>\\n<p>The StandardKeyboardDialog is comprised of the following areas and building block nodes:</p>\\n<ul>\\n<li>StdDlgTitleArea.</li>\\n<li>\\n<p>StdDlgContentArea, which may contain the following items:</p>\\n<ul>\\n<li>Zero or more StdDlgTextItem nodes.</li>\\n<li>One StdDlgKeyboardItem containing a DynamicPinPad node</li>\\n</ul>\\n</li>\\n<li>StdDlgButtonArea, which may contain zero or more StdDlgButton nodes.</li>\\n</ul>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>title</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>The title to be displayed at the top of the dialog.</td>\\n</tr>\\n<tr>\\n<td>message</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>One or more blocks of text, which are typically used to describe information about the data to be entered. Each string in the array is displayed as a separate block of text with the standard amount of space left between the blocks.<br /><blockquote>\\n<p>Minimize the message length to avoid having a scrollbar automatically added to the content area. If multiple strings are specified or any string is too long, the dialog may not be able to fit within the height of the display.</p>\\n</blockquote></td>\\n</tr>\\n<tr>\\n<td>buttons</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>List of buttons to be displayed in the button area at the bottom of the dialog. Each string in the buttons array adds a new button to the button area.<br /><blockquote>\\n<p>Minimize the number of buttons in the dialog to ensure that all buttons are visible without the user having to scroll up and down.</p>\\n</blockquote></td>\\n</tr>\\n<tr>\\n<td>textEditBox</td>\\n<td>VoiceTextEditBox node</td>\\n<td>The keyboard item's VoiceTextEditBox node</td>\\n<td>READ</td>\\n<td>The internal VoiceTextEditBox node used by this dialog's internal keyboard. This field should be used only to access the fields of this internal node<br /><blockquote>\\n<p>Use the <strong>textEditBox.maxTextLength</strong> field to limit the length of the pin to be entered.</p>\\n</blockquote></td>\\n</tr>\\n<tr>\\n<td>pin</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Displays the entered PIN number in the text edit box. As the user enters each numeric digit, this field is updated with the currently entered value.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/standard-dialog-framework\\\">sample channel</a> that demonstrates how to create a standard PINPad dialog.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/standard-progress-dialog.md":"{\n  \"content\": \"<h1 id=\\\"standardprogressdialog\\\">StandardProgressDialog</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-dialog.md\\\" title=\\\"**Standard Dialog**\\\">StandardDialog</a></p>\\n<p>The StandardProgressDialog node displays a spinning progress indicator that includes a short progress message to the user. It is similar to the legacy <a href=\\\"/docs/references/scenegraph/dialog-nodes/progressdialog.md\\\">ProgressDialog</a> node. </p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/progress-dialog-title-v2.jpg\\\" alt=\\\"roku815px - progress-dialog-title\\\"></p>\\n<h2 id=\\\"structure\\\">Structure</h2>\\n<p>The StandardProgressDialog is comprised of the following areas and building block nodes:</p>\\n<ul>\\n<li>Zero or one StdDlgTitleArea.</li>\\n<li>\\n<p>StdDlgContentArea, which contains the following item:</p>\\n<ul>\\n<li>One StdDlgProgressItem</li>\\n</ul>\\n</li>\\n</ul>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>title</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>The title to be displayed at the top of the dialog.If no title is specified, the progress dialog will be displayed without a title area and will use the minimum width needed to show the spinning progress indicator and message</td>\\n</tr>\\n<tr>\\n<td>message</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>A string to be displayed next to the spinning progress indicator. It typically tells the user why they are waiting.<br /><blockquote>\\n<p>Minimize the message length.</p>\\n</blockquote></td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-area-base.md":"{\n  \"content\": \"<h1 id=\\\"stddlgareabase\\\">StdDlgAreaBase</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\">Group</a></p>\\n<p>The <strong>StdDlgAreaBase</strong> node is the base class and provides the common functionality for the three StandardDialog area nodes: <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-title-area.md\\\"><strong>StdDlgTitleArea</strong></a>, <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-content-area.md\\\"><strong>StdDlgContentArea</strong></a> and <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-button-area.md\\\"><strong>StdDlgButtonArea</strong></a>. </p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<p>The StdDlgAreaBase node does not have any fields.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-title-area.md":"{\n  \"content\": \"<h1 id=\\\"stddlgtitlearea\\\">StdDlgTitleArea</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-area-base.md\\\" title=\\\"**StdDlgAreaBase**\\\">StdDlgAreaBase</a></p>\\n<p>The <strong>StdDlgTitleArea</strong> node contains the dialog's title information, which is always displayed at the top of the dialog. The title area may also include optional icons that appear left or right justified. The <strong>StdDlgTitleArea</strong> should only be used as a child node of a <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-dialog.md\\\"><strong>StandardDialog</strong></a>. </p>\\n<p>A dialog may contain a single title area, and the title area is optional (but is typically used in nearly all cases)</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/title-area-icon.jpg\\\" alt=\\\"roku815px - title-area-icon\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>primaryTitle</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the title to be displayed in the dialog's title area.</td>\\n</tr>\\n<tr>\\n<td>primaryIcon</td>\\n<td>URL</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a bitmap to be displayed at the left edge of the dialog's title area (to the left of dialog's primary title).</td>\\n</tr>\\n<tr>\\n<td>primaryIconVertOffset</td>\\n<td>float</td>\\n<td>0.0f</td>\\n<td>READ_WRITE</td>\\n<td>Adjusts the vertical position of the primary icon relative to the baseline of the dialog's primary title. By default, the bottom of the primary icon is aligned with the primary title's baseline.</td>\\n</tr>\\n<tr>\\n<td>secondaryIcon</td>\\n<td>URL</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a bitmap to be displayed at the right edge of the dialog's title area.</td>\\n</tr>\\n<tr>\\n<td>secondaryIconVertOffset</td>\\n<td>float</td>\\n<td>0.0f</td>\\n<td>READ_WRITE</td>\\n<td>Adjusts the vertical position of the secondary icon relative to the baseline of the dialog's primary title. By default, the bottom of the secondary icon is aligned with the primary title's baseline.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-content-area.md":"{\n  \"content\": \"<h1 id=\\\"stddlgcontentarea\\\">StdDlgContentArea</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-area-base.md\\\" title=\\\"**StdDlgAreaBase**\\\">StdDlgAreaBase</a></p>\\n<p>The <strong>StdDlgContentArea</strong> node contains the main body of the dialog. It is positioned between the title area and the button area.</p>\\n<p>It contains zero or more child nodes that extend <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\"><strong>StdDlgItemBase</strong></a> (for example, <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-text-item.md\\\"><strong>StdDlgTextItem</strong></a>, <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-progress-item.md\\\"><strong>StdDlgProgressItem</strong></a>, <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-graphic-item.md\\\"><strong>StdDlgGraphicItem</strong></a>, and other dialog building blocks). The layout and position of the <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\"><strong>StdDlgItemBase</strong> nodes</a> are based on the dialog's width; the nodes are arranged vertically from top to bottom in the content area based on the order in which they are listed. The content area should contain only <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\"><strong>StdDlgItemBase</strong> nodes</a>; otherwise, its layout and rendering are undefined.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/content-area.jpg\\\" alt=\\\"roku815px - content-area\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<p>The <strong>StdDlgContentArea</strong> node does not have any fields.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-button-area.md":"{\n  \"content\": \"<h1 id=\\\"stddlgbuttonarea\\\">StdDlgButtonArea</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-area-base.md\\\" title=\\\"**StdDlgAreaBase**\\\">StdDlgAreaBase</a></p>\\n<p>The <strong>StdDlgButtonArea</strong> node is always positioned at the bottom of the <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-dialog.md\\\">StandardDialog</a>. It contains zero or more child nodes of type <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-button.md\\\"><strong>StdDlgButton</strong></a> or a type that extends <strong>StdDlgButton</strong>. Each of the <strong>StdDlgButton</strong> nodes provides an option to perform some task related to the purpose of the dialog. For example, dialogs often have \\\"Continue\\\" and \\\"Cancel\\\" buttons in the bottom area. The buttons are positioned and sized so that they are arranged vertically in the order in which their <strong>StdDlgButton</strong> child nodes are listed.</p>\\n<p>A dialog may only have a single button area, and the button area is optional.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/std-dlg-button-area.jpg\\\" alt=\\\"roku815px - std-dlg-button-area\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<p>The <strong>StdDlgButtonArea</strong> node does not have any fields.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-side-card-area.md":"{\n  \"content\": \"<h1 id=\\\"stddlgsidecardarea\\\">StdDlgSideCardArea</h1>\\n<p><em>Available since Roku OS 11.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-area-base.md\\\">StdDlgAreaBase</a></p>\\n<h2 id=\\\"description\\\">Description</h2>\\n<p>The <strong>StdDlgSideCardArea</strong> node is used to add a freeform area to the right or left side of a custom standard framework dialog for displaying decorative images or annotative text. </p>\\n<p>This node can be displayed on either the left or right side of the vertical column that contains the dialog's child <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-area-base.md\\\">StdDlgAreaBase</a> nodes (<a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-title-area.md\\\">TitleArea</a>, <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-content-area.md\\\">StdDlgContentArea(s)</a>, and/or <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-button-area.md\\\">StdDlgButtonArea</a>). The node can either extend to the edge of the dialog's background image or honor the background image's 9-patch boundaries.</p>\\n<p>The width of the vertical column containing the <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-area-base.md\\\">StdDlgAreaBase</a> child nodes does not extend across the full width of the dialog as it does for dialogs that do not contain a <strong>StdDlgSideCardArea</strong> node.</p>\\n<p>A dialog may contain only a single <strong>StdDlgSideCardArea</strong> node, and that node must be a child of the dialog. </p>\\n<p>The <strong>StdDlgSideCardArea</strong> node never gains key focus; therefore, it should not contain any other nodes that require direct user interaction.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>extendToDialogEdge</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the <strong>StdDlgSideCardArea</strong> node extends to the edge of the dialog's background image or respects the background image's 9-patch margins.<br /><ul>\\n<li><strong>true</strong>: The origin of the <strong>StdDlgSideCardArea</strong> node's coordinate system is set to the top/left edge of the dialog's background image.</li>\\n<li><strong>false</strong>: The origin of the <strong>StdDlgSideCardArea</strong> node's coordinate system is based on the background image's 9-patch margins.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>horizAlign</td>\\n<td>string</td>\\n<td>\\\"right\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies on which side of the custom dialog the StdDlgSideCardArea node appears: \\\"left\\\" or \\\"right\\\".</td>\\n</tr>\\n<tr>\\n<td>showDivider</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether a thin vertical divider line is displayed between the <strong>StdDlgSideCardArea</strong> and the vertical column that contains the dialog's child <strong>StdDlgAreaBase</strong> nodes (<a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-title-area.md\\\">TitleArea</a>, <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-content-area.md\\\">StdDlgContentArea(s)</a>, and/or <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-button-area.md\\\">StdDlgButtonArea</a>). The divider line, if shown, uses the <strong>DialogSecondaryItemColor</strong> field from the current <a href=\\\"/docs/references/scenegraph/scene.md#fields\\\">RSG palette</a>.</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>0.0f</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width of the <strong>StdDlgSideCardArea</strong> node.<br /><br />If this field is set to its default value (0.0), the width is set to the width of the <a href=\\\"(/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-content-area.md)\\\"><strong>StdDlgContentArea</strong></a> node's bounding rectangle (the union of the width of all of its child nodes).<br /><br />If set to a value greater than 0.0, the width of the <strong>StdDlgSideCardArea</strong> node is fixed to that explicit value.<br /><br />The height of <strong>StdDlgSideCardArea</strong> node is based on the StandardDialog layout logic. This sets the height to a maximum of the height of the <strong>StdDlgSideCardArea</strong> bounding rectangle and the height of the vertical column containing the dialog's child <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-area-base.md\\\"><strong>StdDlgAreaBase</strong></a> nodes. This is constrained by the maximum permissible height of the dialog such that it is fully visible onscreen.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"examples\\\">Examples</h3>\\n<p>The following examples demonstrate how to use the <strong>StdDlgSideCardArea</strong> node to display decorative images or annotative text.</p>\\n<h4 id=\\\"decorative\\\">Decorative</h4>\\n<p>In this example, the <strong>StdDlgSideCardArea</strong> has a child <strong>Poster</strong> node with its <strong>uri</strong> field set to the URI of a mountain lake image. The height of the dialog is computed to equal the height of the mountain lake image [800 (FHD), 300 (HD)]. The mountain lake <strong>Poster</strong> node has a child <strong>SimpleLabel</strong> node positioned at 575, 775 to show the \\\"PhotoCredit:Jeff Anderson\\\" text on top of the Poster.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/SideCardGlamourShot.jpg\\\" alt=\\\"roku815px - SideCardGlamourShot\\\"></p>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;component name=\\\"SideCardGlamourShotDialog\\\" extends=\\\"StandardDialog\\\" initialFocus=\\\"buttonArea\\\" >\\n\\n&#x3C;script type=\\\"text/brightscript\\\" >\\n&#x3C;![CDATA[\\nfunction init()\\n    m.top.width  = \\\"1380\\\"\\n\\n    m.buttonArea = m.top.findNode(\\\"buttonArea\\\")\\n    m.top.observeFieldScoped(\\\"buttonFocused\\\", \\\"printFocusButton\\\")\\n    m.top.observeFieldScoped(\\\"buttonSelected\\\", \\\"printSelectedButtonAndClose\\\")\\n    m.top.observeFieldScoped(\\\"wasClosed\\\", \\\"wasClosedChanged\\\")\\nend function\\n\\nsub printFocusButton()\\n    print \\\"m.buttonArea button \\\";m.buttonArea.getChild(m.top.buttonFocused).text;\\\" focused\\\"\\nend sub\\n\\nsub printSelectedButtonAndClose()\\n    print \\\"m.buttonArea button \\\";m.buttonArea.getChild(m.top.buttonSelected).text;\\\" selected\\\"\\n    m.top.close = true\\nend sub\\n\\nsub wasClosedChanged()\\n    print \\\"SideCardRightDialog Closed\\\"\\nend sub\\n\\n]]>\\n&#x3C;/script>\\n\\n&#x3C;children>\\n  &#x3C;StdDlgTitleArea primaryTitle=\\\"Glamour Shot Side Card\\\" />\\n  &#x3C;StdDlgContentArea>\\n     &#x3C;StdDlgTextItem text=\\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse sapien massa, efficitur a accumsan a, commodo eget justo. In id ante elementum, posuere diam quis, lobortis magna.\\\" />\\n  &#x3C;/StdDlgContentArea>\\n  &#x3C;StdDlgButtonArea id=\\\"buttonArea\\\" >\\n    &#x3C;StdDlgButton text=\\\"OK\\\" />\\n    &#x3C;StdDlgButton text=\\\"Cancel\\\" />\\n  &#x3C;/StdDlgButtonArea>\\n  &#x3C;StdDlgSideCardArea id=\\\"buttonArea\\\" horizAlign=\\\"left\\\" extendToDialogEdge=\\\"true\\\" showDivider=\\\"false\\\"  >\\n      &#x3C;Poster id=\\\"sideCardPoster\\\" loadSync=\\\"true\\\" loadDisplayMode=\\\"limitSize\\\" uri=\\\"pkg:/images/MountainLakeSideCard.jpg\\\" translation=\\\"[0.0f, 0.0f]\\\" />\\n      &#x3C;SimpleLabel text=\\\"Photo Credit: Jeff Anderson\\\" vertOrigin=\\\"bottom\\\" horizOrigin=\\\"right\\\" translation=\\\"[575, 775]\\\" color=\\\"0xFFFFFFFF\\\" fontUri=\\\"font:SystemFontFile\\\" fontSize=\\\"24\\\"/>        \\n  &#x3C;/StdDlgSideCardArea>\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h4 id=\\\"annotative\\\">Annotative</h4>\\n<p>In this example, the <strong>StdDlgSideCardArea</strong> has a child <strong>Label</strong> node (\\\"Show the QR Code...\\\") and a child <strong>Poster</strong> node to show the QR code below the Label. The height of the dialog is set to the maximum height of the bounding rectangle of the <strong>StdDlgSideCardArea</strong> and the vertical column that contains the dialog's child <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-area-base.md\\\">StdDlgAreaBase</a> nodes (<a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-title-area.md\\\">TitleArea</a>, <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-content-area.md\\\">StdDlgContentArea(s)</a>, and/or <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-button-area.md\\\">StdDlgButtonArea</a>). In this case, the StdDlgSideCardArea is slightly taller; therefore, it's height is used.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/SideCardAnnotation.jpg\\\" alt=\\\"roku815px - SideCardAnnotation\\\"></p>\\n<pre><code>&#x3C;component name=\\\"SideCardAnnotationDialog\\\" extends=\\\"StandardDialog\\\" initialFocus=\\\"buttonArea\\\" >\\n\\n&#x3C;script type=\\\"text/brightscript\\\" >\\n&#x3C;![CDATA[\\nfunction init()\\n    m.top.width  = \\\"1380\\\"\\n\\n    m.buttonArea = m.top.findNode(\\\"buttonArea\\\")\\n    m.top.observeFieldScoped(\\\"buttonFocused\\\", \\\"printFocusButton\\\")\\n    m.top.observeFieldScoped(\\\"buttonSelected\\\", \\\"printSelectedButtonAndClose\\\")\\n    m.top.observeFieldScoped(\\\"wasClosed\\\", \\\"wasClosedChanged\\\")\\nend function\\n\\nsub printFocusButton()\\n    print \\\"m.buttonArea button \\\";m.buttonArea.getChild(m.top.buttonFocused).text;\\\" focused\\\"\\nend sub\\n\\nsub printSelectedButtonAndClose()\\n    print \\\"m.buttonArea button \\\";m.buttonArea.getChild(m.top.buttonSelected).text;\\\" selected\\\"\\n    m.top.close = true\\nend sub\\n\\nsub wasClosedChanged()\\n    print \\\"SideCardRightDialog Closed\\\"\\nend sub\\n\\n]]>\\n&#x3C;/script>\\n\\n&#x3C;children>\\n  &#x3C;StdDlgTitleArea primaryTitle=\\\"Annotation Side Card\\\" />\\n  &#x3C;StdDlgContentArea>\\n     &#x3C;StdDlgTextItem text=\\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse sapien massa, efficitur a accumsan a, commodo eget justo. In id ante elementum, posuere diam quis, lobortis magna.\\\" />   \\n  &#x3C;/StdDlgContentArea>\\n  &#x3C;StdDlgButtonArea id=\\\"buttonArea\\\" >\\n    &#x3C;StdDlgButton text=\\\"OK\\\" />\\n    &#x3C;StdDlgButton text=\\\"Cancel\\\" />\\n  &#x3C;/StdDlgButtonArea>\\n  &#x3C;StdDlgSideCardArea id=\\\"buttonArea\\\" horizAlign=\\\"right\\\" width=\\\"500\\\" extendToDialogEdge=\\\"false\\\" showDivider=\\\"true\\\"  >\\n      &#x3C;Label text=\\\"Scan the QR Code to get a bunch of free stuff\\\" horizAlign=\\\"center\\\" wrap=\\\"true\\\" width=\\\"500\\\" translation=\\\"[0, 0]\\\" fontUri=\\\"font:SystemFontFile\\\" fontSize=\\\"36\\\"/>\\n      &#x3C;Poster translation=\\\"[30, 120]\\\" uri=\\\"pkg:/images/RokuQRCode441x441.png\\\" />\\n  &#x3C;/StdDlgSideCardArea>\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/standard-dialog-framework\\\">sample channel</a> that demonstrates how to create a custom dialog that includes a sidecard area.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-button.md":"{\n  \"content\": \"<h1 id=\\\"stddlgbutton\\\">StdDlgButton</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\">Group</a></p>\\n<p><strong>StdDlgButton</strong> is the class used for each button in the <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-dialog-framework-overview.md#structure\\\">button area</a>. The buttons are displayed in the order in which they are listed as children of the <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-button-area.md\\\"><strong>StdDlgButtonArea</strong> node</a>. The size and layout of each button are controlled by the StandardDialog layout algorithm. <strong>StdDlgButton</strong> nodes should only be used as children of a <strong>StdDlgButtonArea</strong> node. </p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/std-dlg-button-3.jpg\\\" alt=\\\"roku815px - std-dlg-button\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>The text to be displayed on the button</td>\\n</tr>\\n<tr>\\n<td>disabled</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the button can receive focus. If this field is set to true, the button has an inactive appearance and is unable to receive focus.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md":"{\n  \"content\": \"<h1 id=\\\"stddlgitembase\\\">StdDlgItemBase</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\">Group</a></p>\\n<p><strong>StdDlgItemBase</strong> is the base class for all the content area items. It provides the common functionality for all StdDlg[<em>x</em>]Item nodes (for example, <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-bullet-text-item.md\\\"><strong>StdDlgBulletTextItem</strong></a>, <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-text-item.md\\\"><strong>StdDlgTextItem</strong></a>, <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-keyboard-item.md\\\"><strong>StdDlgKeyboardItem</strong></a>, <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-progress-item.md\\\"><strong>StdDlgProgressItem</strong></a>, <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-graphic-item.md\\\"><strong>StdDlgGraphicItem</strong></a>, and the other dialog building block nodes).</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>scrollable</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Indicates whether the item can be scrolled vertically by the user. The StandardDialog layout algorithm reduces the height of a scrollable item as needed if the overall height of the dialog is too large to fit on the display.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-group.md":"{\n  \"content\": \"<h1 id=\\\"stddlgitemgroup\\\">StdDlgItemGroup</h1>\\n<p><em>Available since Roku OS 11.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\">StdDlgItemBase</a></p>\\n<p>The <strong>StdDlgItemGroup</strong> node is used to visually group a set of StdDlgAreaBase child nodes in a custom dialog. Developers can use this node to reduce the vertical spacing between the StdDlgItemBase child nodes. For <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-action-card-item.md\\\"><strong>StdDlgActionCardItem</strong></a> nodes, the <strong>StdDlgItemGroup</strong> node enforces the rule that when multiple items <strong>StdDlgActionCardItem</strong> nodes have their <strong>iconType</strong> field set to \\\"radiobutton\\\", only one may have its <strong>selected</strong> status be set to \\\"true\\\".</p>\\n<p>The <strong>StdDlgItemGroup</strong> node may contain one or more <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\"><strong>StdDlgItemBase</strong></a> child nodes (for example, StdDlgTextItem, StdDlgGraphicItem, and so on) as its children. It will visually group those child <strong>StdDlgItemBase</strong> nodes by reducing the amount of vertical space between them. However, the primary benefit of the StdDlgItemGroup node is managing <strong>StdDlgActionCardItem</strong> child nodes that have their <strong>iconType</strong> field set to \\\"radiobutton\\\".</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/actionCards-radio-checkbox-items.jpg\\\" alt=\\\"roku815px - actionCards-radio-checkbox-items\\\"></p>\\n<blockquote>\\n<p>See the <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-action-card-item.md#radiobutton-icontype\\\"><strong>stdDlgActionCardItem</strong> documentation</a> for code demonstarting how to use the <strong>StdDlgItemGroup</strong> node in a custom dialog.</p>\\n</blockquote>\\n<h4 id=\\\"fields\\\">Fields</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>selectedIndex</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>The index of the currently selected <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-area-base.md\\\">StdDlgAreaBase</a> child node. This field is updated when the user selects any of the <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-action-card-item.md\\\">StdDlgActionCardItem</a> child nodes.<br /><br />This field can also be updated via BrightScript to change which child node in the StdDlgItemGroup is selected.<br /><br />When this field is updated and it corresponds to a <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-action-card-item.md\\\">StdDlgActionCardItem</a> node that has its <strong>iconType</strong> field set to \\\"radiobutton\\\", the <strong>StdDlgItemGroup</strong> node enforces the \\\"only 1 of <em>n</em>\\\" rule for radio buttons by setting the <strong>iconStatus</strong> field of the other radio button action card items to \\\"false\\\".</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/standard-dialog-framework\\\">sample channel</a> that demonstrates how to create a custom dialog that includes action card items in an item group.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-action-card-item.md":"{\n  \"content\": \"<h1 id=\\\"stddlgactioncarditem\\\">StdDlgActionCardItem</h1>\\n<p><em>Available since Roku OS 11.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\">StdDlgItemBase</a></p>\\n<h2 id=\\\"description\\\">Description</h2>\\n<p>The <strong>StdDlgActionCardItem</strong> is used to highlight the <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\">StdDlgItemBase</a> child nodes in the content area of a custom dialog. This node enables developers to add a \\\"more info\\\" arrow icon, radio button icon, or check box icon to the items in the content area. Developers can leverage these icons to enhance the check box and radio button functionality in their custom dialogs.</p>\\n<p>The icons and the StdDlgItemBase child nodes are drawn on top of a rectangular background that is tinted using the RSGPalette's <strong>DialogFootprintColor</strong> field.</p>\\n<p>When the StdDlgActionCardItem node has focus, the icons themselves are tinted using the <a href=\\\"/docs/references/scenegraph/scene.md#fields\\\">RSGPalette's</a> <strong>DialogFocusItemColor</strong> field. When the node does not have focus, the icons are tinted using the <strong>DialogTextColor</strong> field.</p>\\n<p>The <strong>StdDlgActionCardItem</strong> node is designed to be focusable; therefore, it may receive key events.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>iconStatus</td>\\n<td>bool</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Indicates whether the <strong>StdDlgActionCardItem</strong> node is in the checked or unchecked state when the <strong>iconType</strong> field is set to \\\"checkbox\\\" or \\\"radiobutton\\\". <br /><br />The icon shown for an action card is based on the value of this field.</td>\\n</tr>\\n<tr>\\n<td>iconType</td>\\n<td>string</td>\\n<td>\\\"none\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the icon used for a <strong>StdDlgActionCardItem</strong> node. This may be one of the following values: <table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>none</td>\\n<td>string</td>\\n<td>No icon is shown.</td>\\n</tr>\\n<tr>\\n<td>more_info</td>\\n<td>string</td>\\n<td>A right arrow icon is displayed to the right of the <strong>StdDlgActionCardItem</strong> child nodes. This icon is typically used to indicate that more information will be shown when the action card is selected. Typically, this additional content is displayed in another dialog.</td>\\n</tr>\\n<tr>\\n<td>checkbox</td>\\n<td>string</td>\\n<td>A checkbox icon is shown to the left of the StdDlgActionCardItem child nodes.When the <strong>iconStatus</strong> field is set to \\\"true\\\", this adds a checkmark inside the box.When the <strong>iconStatus</strong> field is set to \\\"false\\\", an empty box icon is displayed.</td>\\n</tr>\\n<tr>\\n<td>radiobutton</td>\\n<td>string</td>\\n<td>A radio button icon is shown to the left of the StdDlgActionCardItem child nodes.When the <strong>iconStatus</strong> field is set to \\\"true\\\", this adds a filled circle inside the box.When the <strong>iconStatus</strong> field is set to \\\"false\\\", an empty circle icon is displayed.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"examples\\\">Examples</h2>\\n<h3 id=\\\"mixed-icontypes\\\">Mixed iconTypes</h3>\\n<p>In this example, the dialog has a <strong>StdDlgContentArea</strong> node with a StdDlgTextItem node (\\\"Here are some nice action cards\\\"), and it has the following three <strong>StdDlgActionCardItem</strong> nodes (listed in order):</p>\\n<ul>\\n<li>A <strong>SimpleLabel</strong> child node that displays the text \\\"Normal Action Card\\\". The <strong>iconType</strong> field is set to \\\"none\\\".</li>\\n</ul>\\n<ul>\\n<li>A <strong>LayoutGroup</strong> child node that has its <strong>layoutDirection</strong> field set to \\\"vert\\\" and contains four <strong>SimpleLabel</strong> nodes for displaying an address. The <strong>iconType</strong> field is set to \\\"more_info, resulting in the display of a right arrow.</li>\\n</ul>\\n<ul>\\n<li>A <strong>SimpleLabel</strong> child node that displays the text \\\"Check Box Action Card\\\". The <strong>iconType</strong> field is set to \\\"checkbox\\\", resulting in the display of a check box.</li>\\n</ul>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/actionCards-normal.jpg\\\" alt=\\\"roku815px - actionCards-normal\\\"></p>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;component name=\\\"ActionCardsDialog\\\" extends=\\\"StandardDialog\\\" initialFocus=\\\"buttonArea\\\" >\\n\\n&#x3C;script type=\\\"text/brightscript\\\" >\\n&#x3C;![CDATA[\\nfunction init()\\n    print \\\"Creating ActionCards\\\"\\n\\n    setUpPalette()\\n\\n    m.buttonArea = m.top.findNode(\\\"buttonArea\\\")\\n    m.top.observeFieldScoped(\\\"buttonFocused\\\", \\\"printFocusButton\\\")\\n    m.top.observeFieldScoped(\\\"buttonSelected\\\", \\\"printSelectedButtonAndClose\\\")\\n    m.top.observeFieldScoped(\\\"wasClosed\\\", \\\"wasClosedChanged\\\")\\n\\n    m.top.findNode(\\\"actionCardNormal\\\").observeField(\\\"selected\\\", \\\"handleActionCardNormal\\\")\\n    m.top.findNode(\\\"actionCardMoreInfo\\\").observeField(\\\"selected\\\", \\\"handleActionCardMoreInfo\\\")\\n    m.top.findNode(\\\"actionCardCheckBox\\\").observeField(\\\"selected\\\", \\\"handleActionCardCheckBox\\\")\\nend function\\n\\nsub setUpPalette()\\n    ' set a default palette to access the DialogTextColor to use\\n    ' for the color of text of the SimpleLabel node's that are\\n    ' children of the StdDlgActionItem's\\n\\n    m.top.palette = createObject(\\\"roSGNode\\\", \\\"RSGPalette\\\")\\n\\n    m.top.palette.colors = {    DialogBackgroundColor: \\\"0x002040FF\\\",\\n                                DialogItemColor: \\\"0x007FEFFF\\\",\\n'                                DialogTextColor: \\\"0x007FEFFF\\\",\\n                                DialogTextColor: \\\"0xC0C0C0FF\\\",\\n'                                DialogFocusColor: \\\"0x007FEFFF\\\",\\n                                DialogFocusColor: \\\"0xC0C0C0FF\\\",\\n                                DialogFocusItemColor: \\\"0x003E7EFF\\\",\\n                                DialogSecondaryTextColor: \\\"0x007FEF66\\\",\\n                                DialogSecondaryItemColor: \\\"0x807FFF4D\\\",\\n                                DialogInputFieldColor: \\\"0x807FFF80\\\",\\n                                DialogKeyboardColor: \\\"0x807FFF4D\\\",\\n                                DialogFootprintColor: \\\"0x807FFF4D\\\" }\\n\\n    dialogTextColor = m.top.palette.colors[\\\"DialogTextColor\\\"]\\n\\n    ' set all SimpleLabel colors to use the palette's dialogTextColor\\n    m.top.findNode(\\\"noneLabel\\\").color = dialogTextColor\\n    m.top.findNode(\\\"moreInfoLabel1\\\").color = dialogTextColor\\n    m.top.findNode(\\\"moreInfoLabel2\\\").color = dialogTextColor\\n    m.top.findNode(\\\"moreInfoLabel3\\\").color = dialogTextColor\\n    m.top.findNode(\\\"moreInfoLabel4\\\").color = dialogTextColor\\n    m.top.findNode(\\\"checkboxLabel\\\").color = dialogTextColor\\nend sub\\n\\nsub printFocusButton()\\n    print \\\"m.buttonArea button \\\";m.buttonArea.getChild(m.top.buttonFocused).text;\\\" focused\\\"\\nend sub\\n\\nsub printSelectedButtonAndClose()\\n    print \\\"m.buttonArea button \\\";m.buttonArea.getChild(m.top.buttonSelected).text;\\\" selected\\\"\\n    m.top.close = true\\nend sub\\n\\nsub wasClosedChanged()\\n    print \\\"ActionCards Closed\\\"\\nend sub\\n\\nsub handleActionCardNormal()\\n    print \\\"Normal Action Card Selected\\\"\\n    m.top.close = true\\nend sub\\n\\nsub handleActionCardMoreInfo()\\n    print \\\"More Info Action Card Selected\\\"\\nend sub\\n\\nsub handleActionCardCheckBox()\\n    print \\\"Check Box Action Card Selected\\\"\\n    actionCard = m.top.findNode(\\\"actionCardCheckBox\\\")\\n    actionCard.iconStatus = not actionCard.iconStatus\\nend sub\\n\\n]]>\\n&#x3C;/script>\\n\\n&#x3C;children>\\n    &#x3C;StdDlgTitleArea primaryTitle=\\\"Action Cards\\\" />\\n    &#x3C;StdDlgContentArea>\\n        &#x3C;StdDlgTextItem text=\\\"Here are some nice action cards.\\\" />\\n        &#x3C;StdDlgActionCardItem id=\\\"actionCardNormal\\\" iconType = \\\"none\\\">\\n            &#x3C;SimpleLabel id=\\\"noneLabel\\\" text=\\\"Normal Action Card\\\" />\\n        &#x3C;/StdDlgActionCardItem>\\n        &#x3C;StdDlgActionCardItem id=\\\"actionCardMoreInfo\\\" iconType = \\\"more_info\\\">\\n            &#x3C;LayoutGroup itemSpacings=\\\"[20,10]\\\" layoutDirection=\\\"vert\\\">\\n                &#x3C;SimpleLabel id=\\\"moreInfoLabel1\\\" text=\\\"Address\\\" />\\n                &#x3C;SimpleLabel id=\\\"moreInfoLabel2\\\" text=\\\"Darth Vader\\\" />\\n                &#x3C;SimpleLabel id=\\\"moreInfoLabel3\\\" text=\\\"42 Deeth Drive\\\" />\\n                &#x3C;SimpleLabel id=\\\"moreInfoLabel4\\\" text=\\\"Starr Valley AZ 85541\\\" />\\n            &#x3C;/LayoutGroup>\\n        &#x3C;/StdDlgActionCardItem>\\n        &#x3C;StdDlgActionCardItem id=\\\"actionCardCheckBox\\\" iconType = \\\"checkbox\\\">\\n            &#x3C;SimpleLabel id=\\\"checkboxLabel\\\" text=\\\"Check Box Action Card\\\" />\\n        &#x3C;/StdDlgActionCardItem>\\n    &#x3C;/StdDlgContentArea>\\n    &#x3C;StdDlgButtonArea id=\\\"buttonArea\\\">\\n        &#x3C;StdDlgButton text=\\\"OK\\\" />\\n    &#x3C;/StdDlgButtonArea>\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h3 id=\\\"radiobutton-icontype\\\">radiobutton iconType</h3>\\n<p>In this example, the dialog has a <strong>StdDlgContentArea</strong> node a <strong>StdDlgItemGroup</strong> node. The <strong>StdDlgItemGroup</strong> node contains three <strong>StdDlgActionCardItem</strong> nodes with their <strong>iconType</strong> field set to \\\"radiobutton\\\". Observe that the vertical spacing between the three <strong>StdDlgActionCardItem</strong> nodes is smaller to visually enforce that they are part of a group. Below the <strong>StdDlgItemGroup</strong> is another <strong>StdDlgActionCardItem</strong> with its <strong>iconType</strong> field set to \\\"checkbox\\\".</p>\\n<p>The <strong>StdDlgItemGroup</strong> node enforces the rule that when multiple items <strong>StdDlgActionCardItem</strong> nodes have their <strong>iconType</strong> field set to \\\"radiobutton\\\", only one may have its <strong>selected</strong> status be set to \\\"true\\\".</p>\\n<p>This example configures an <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-dialog.md\\\"><strong>RSGPalette</strong> node</a> for the dialog, and then it uses the \\\"DialogTextColor\\\" from that palette as the colors for the <strong>SimpleLabel</strong> children of the <strong>StdDlgActionCardItem</strong> node.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/actionCards-radio-checkbox-items.jpg\\\" alt=\\\"roku815px - actionCards-radio-checkbox-items\\\"></p>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;component name=\\\"RadioButtonActionCardsDialog\\\" extends=\\\"StandardDialog\\\" initialFocus=\\\"buttonArea\\\" >\\n\\n&#x3C;script type=\\\"text/brightscript\\\" >\\n&#x3C;![CDATA[\\nfunction init()\\n    print \\\"Creating RadioButtonActionCards\\\"\\n\\n    setUpPalette()\\n\\n    m.buttonArea = m.top.findNode(\\\"buttonArea\\\")\\n    m.top.observeFieldScoped(\\\"buttonFocused\\\", \\\"printFocusButton\\\")\\n    m.top.observeFieldScoped(\\\"buttonSelected\\\", \\\"printSelectedButtonAndClose\\\")\\n    m.top.observeFieldScoped(\\\"wasClosed\\\", \\\"wasClosedChanged\\\")\\n\\n    m.top.findNode(\\\"actionCardRadioButtons\\\").observeField(\\\"itemSelected\\\", \\\"handleActionCardRadioButtons\\\")\\n    m.top.findNode(\\\"actionCardCheckBox\\\").observeField(\\\"selected\\\", \\\"handleActionCardCheckBox\\\")\\nend function\\n\\nsub setUpPalette()\\n    ' set a default palette to access the DialogTextColor to use\\n    ' for the color of text of the SimpleLabel node's that are\\n    ' children of the StdDlgActionItem's\\n\\n    m.top.palette = createObject(\\\"roSGNode\\\", \\\"RSGPalette\\\")\\n\\n    m.top.palette.colors = {    DialogBackgroundColor: \\\"0x002040FF\\\",\\n                                DialogItemColor: \\\"0x007FEFFF\\\",\\n'                                DialogTextColor: \\\"0x007FEFFF\\\",\\n                                DialogTextColor: \\\"0xC0C0C0FF\\\",\\n'                                DialogFocusColor: \\\"0x007FEFFF\\\",\\n                                DialogFocusColor: \\\"0xC0C0C0FF\\\",\\n                                DialogFocusItemColor: \\\"0x003E7EFF\\\",\\n                                DialogSecondaryTextColor: \\\"0x007FEF66\\\",\\n                                DialogSecondaryItemColor: \\\"0x807FFF4D\\\",\\n                                DialogInputFieldColor: \\\"0x807FFF80\\\",\\n                                DialogKeyboardColor: \\\"0x807FFF4D\\\",\\n                                DialogFootprintColor: \\\"0x807FFF4D\\\" }\\n\\n    dialogTextColor = m.top.palette.colors[\\\"DialogTextColor\\\"]\\n\\n    ' set all SimpleLabel colors to use the palette's dialogTextColor\\n    m.top.findNode(\\\"radioLabel1\\\").color = dialogTextColor\\n    m.top.findNode(\\\"radioLabel2\\\").color = dialogTextColor\\n    m.top.findNode(\\\"radioLabel3\\\").color = dialogTextColor\\n    m.top.findNode(\\\"checkboxLabel\\\").color = dialogTextColor\\nend sub\\n\\nsub printFocusButton()\\n    print \\\"m.buttonArea button \\\";m.buttonArea.getChild(m.top.buttonFocused).text;\\\" focused\\\"\\nend sub\\n\\nsub printSelectedButtonAndClose()\\n    print \\\"m.buttonArea button \\\";m.buttonArea.getChild(m.top.buttonSelected).text;\\\" selected\\\"\\n    m.top.close = true\\nend sub\\n\\nsub wasClosedChanged()\\n    print \\\"ActionCards Closed\\\"ac\\nend sub\\n\\nsub handleActionCardRadioButtons()\\n    actionCard = m.top.findNode(\\\"actionCardRadioButtons\\\")\\n    print \\\"Radio Button Group Action Card \\\"; actionCard.itemSelected; \\\" selected\\\"\\nend sub\\n\\nsub handleActionCardCheckBox()\\n    print \\\"Check Box Action Card Selected\\\"\\n    actionCard = m.top.findNode(\\\"actionCardCheckBox\\\")\\n    actionCard.iconStatus = not actionCard.iconStatus\\nend sub\\n\\n]]>\\n&#x3C;/script>\\n\\n&#x3C;children>\\n    &#x3C;StdDlgTitleArea primaryTitle=\\\"RadioButton and Checkbox Items\\\" />\\n    &#x3C;StdDlgContentArea>\\n        &#x3C;StdDlgItemGroup id=\\\"actionCardRadioButtons\\\">\\n            &#x3C;StdDlgActionCardItem iconType = \\\"radiobutton\\\">\\n                &#x3C;SimpleLabel id=\\\"radioLabel1\\\" text=\\\"First Choice\\\" />\\n            &#x3C;/StdDlgActionCardItem>\\n            &#x3C;StdDlgActionCardItem iconType = \\\"radiobutton\\\">\\n                &#x3C;SimpleLabel id=\\\"radioLabel2\\\" text=\\\"Second Choice\\\" />\\n            &#x3C;/StdDlgActionCardItem>\\n            &#x3C;StdDlgActionCardItem iconType = \\\"radiobutton\\\">\\n                &#x3C;SimpleLabel id=\\\"radioLabel3\\\" text=\\\"Third Choice\\\" />\\n            &#x3C;/StdDlgActionCardItem>\\n        &#x3C;/StdDlgItemGroup>\\n        &#x3C;StdDlgActionCardItem id=\\\"actionCardCheckBox\\\" iconType = \\\"checkbox\\\">\\n            &#x3C;SimpleLabel id=\\\"checkboxLabel\\\" text=\\\"Check Box Action Card\\\" />\\n        &#x3C;/StdDlgActionCardItem>\\n    &#x3C;/StdDlgContentArea>\\n    &#x3C;StdDlgButtonArea id=\\\"buttonArea\\\">\\n        &#x3C;StdDlgButton text=\\\"OK\\\" />\\n        &#x3C;StdDlgButton text=\\\"Cancel\\\" />\\n    &#x3C;/StdDlgButtonArea>\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/standard-dialog-framework\\\">sample channel</a> that demonstrates how to create a custom dialog that includes action card items.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-bullet-text-item.md":"{\n  \"content\": \"<h1 id=\\\"stddlgbullettextitem\\\">StdDlgBulletTextItem</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\" title=\\\"**StdDlgItemBase**\\\">StdDlgItemBase</a></p>\\n<p>The <strong>StdDlgBulletTextItem</strong> node is used to display a bulleted list of text in the dialog's content area. It should only be used as a child of a <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-content-area.md\\\"><strong>StdDlgContentArea</strong></a> node. </p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/StdDlgBulletTextItem-v2.jpg\\\" alt=\\\"roku815px - StdDlgBulletTextItem\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>bulletText</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>An array of strings displayed as a bulleted or numbered list. The list is displayed in the content area below the message and above the bottom message.</td>\\n</tr>\\n<tr>\\n<td>bulletType</td>\\n<td>string</td>\\n<td>\\\"bullet\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the type of list item delimiter, which may be one of the following:<br /><ul>\\n<li>\\\"bullet\\\"</li>\\n<li>\\\"numbered\\\"</li>\\n<li>\\\"lettered\\\"</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/standard-dialog-framework\\\">sample channel</a> that demonstrates how to create a custom dialog that uses the bullet text item.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-determinate-progress-item.md":"{\n  \"content\": \"<h1 id=\\\"stddlgdeterminateprogressitem\\\">StdDlgDeterminateProgressItem</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\" title=\\\"**StdDlgItemBase**\\\">StdDlgItemBase</a></p>\\n<p>The <strong>StdDlgDeterminateProgressItem</strong> node is used to display a progress indicator in the dialog's content area. It provides the percentage of progress that has been completed for a task that takes a limited amount of time. It should only be used as a child of a <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-content-area.md\\\"><strong>StdDlgContentArea</strong></a> node.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/std-dlg-determinate-progress-item-2.jpg\\\" alt=\\\"roku815px - std-dlg-determinate-progress-item\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>percent</td>\\n<td>string</td>\\n<td>\\\"0\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the current completion percentage text and graphic to be displayed (for example \\\"35%\\\" with more than a third of the indicator filled). <br /><br />If this is set to a number less than 0 or greater than 100, the progress indicator will display \\\"0%\\\" or \\\"100%\\\" completion, respectively.</td>\\n</tr>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text to be displayed next to the progress graphic. If the text width does not fit within the width of the content area, the text will wrap onto multiple lines.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/standard-dialog-framework\\\">sample channel</a> that demonstrates how to create a custom dialog that uses the determinate progress item.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-graphic-item.md":"{\n  \"content\": \"<h1 id=\\\"stddlggraphicitem\\\">StdDlgGraphicItem</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\" title=\\\"**StdDlgItemBase**\\\">StdDlgItemBase</a></p>\\n<p>The <strong>StdDlgGraphicItem</strong> node is used to display an image in the dialog's content area with an optional text label displayed to the left, right, above, or below the image. It should only be used as a child of a <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-content-area.md\\\"><strong>StdDlgContentArea</strong></a> node.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/std-dlg-graphic-item.jpg\\\" alt=\\\"roku815px - std-dlg-graphic-item\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text to be displayed next to the graphic. If the text width does not fit within the width of the content area, the text will wrap onto multiple lines.</td>\\n</tr>\\n<tr>\\n<td>graphicUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>The URI of the image to be displayed.</td>\\n</tr>\\n<tr>\\n<td>graphicWidth</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>The image width to be used instead of the image's actual width.</td>\\n</tr>\\n<tr>\\n<td>graphicHeight</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>The image height to be used instead of the image's actual height.</td>\\n</tr>\\n<tr>\\n<td>graphicAlign</td>\\n<td>string</td>\\n<td>\\\"left\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies where to position and align the graphic and its text label, relative to the content area. This may be one of the following values:<br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Text Position</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>left</td>\\n<td>The graphic is left-aligned in the content area.<br />The text label is positioned horizontally to the right of the graphic, and centered vertically.</td>\\n</tr>\\n<tr>\\n<td>right</td>\\n<td>The graphic is right-aligned in the content area.<br />The text label is positioned horizontally to the left of the graphic, and centered vertically.</td>\\n</tr>\\n<tr>\\n<td>center_below</td>\\n<td>The graphic and text label are centered horizontally in the content area.<br />The graphic is positioned below the text label.</td>\\n</tr>\\n<tr>\\n<td>center_above</td>\\n<td>The graphic and text label are centered horizontally in the content area.<br />The graphic is positioned above the text label.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-keyboard-item.md":"{\n  \"content\": \"<h1 id=\\\"stddlgkeyboarditem\\\">StdDlgKeyboardItem</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\" title=\\\"**StdDlgItemBase**\\\">StdDlgItemBase</a></p>\\n<p>The <strong>StdDlgKeyboardItem</strong> node is used to display a keyboard or PINpad in the dialog's content area. It provides text and voice entry of strings containing alphanumeric characters and symbols or numeric digits. It should only be used as a child of a <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-content-area.md\\\"><strong>StdDlgContentArea</strong></a> node.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/std-dlg-keyboard-item.jpg\\\" alt=\\\"roku815px - std-dlg-keyboard-item\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>keyLayout</td>\\n<td>string</td>\\n<td>\\\"unspecified\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the type of keyboard to be displayed:<br /><ul>\\n<li>\\\"unspecified\\\": no keyboard is displayed.</li>\\n<li>\\\"keyboard\\\": A <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard.md\\\"><strong>DynamicKeyboard</strong></a> node is displayed.</li>\\n<li>\\\"pinpad\\\": A <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-pinpad.md\\\"><strong>DynamicPinPad</strong></a> node is displayed.</li>\\n</ul></td>\\n</tr>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>The default string to be displayed in the keyboard's text edit box. When the user enters the text, this field is updated with the currently entered string.</td>\\n</tr>\\n<tr>\\n<td>textEditBox</td>\\n<td>VoiceTextEditBox node</td>\\n<td>The <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/voice-text-edit-box.md\\\"><strong>VoiceTextEditBox</strong></a> associated with the keyboard</td>\\n<td>READ</td>\\n<td>The internal <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/voice-text-edit-box.md\\\"><strong>VoiceTextEditBox</strong> node</a> used by this dialog's internal keyboard. This field should be used only to access the fields of this internal node.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/standard-dialog-framework\\\">sample channel</a> that demonstrates how to create a custom keyboard dialog that uses the keyboard item.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-multi-style-text-item.md":"{\n  \"content\": \"<h1 id=\\\"stddlgmultistyletextitem\\\">StdDlgMultiStyleTextItem</h1>\\n<p><em>Available since Roku OS 11.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\">StdDlgItemBase</a></p>\\n<h2 id=\\\"description\\\">Description</h2>\\n<p>The <strong>StdDlgMultiStyleTextItem</strong> node enables developers to add a line of text with multiple styles to the content area of a custom dialog. A multi-style text item may include, for example, plain and bold characters, different fonts, multiple colors, and/or emojis.</p>\\n<ul>\\n<li>\\n<p>The <strong>drawingStyles</strong> field contains one or more associative arrays that represent font styles. Each font style contains <strong>fontSize</strong>, <strong>fontUri</strong>, and <strong>color</strong> properties.</p>\\n</li>\\n<li>\\n<p>The <strong>text</strong> field uses a simple markup style. Markup tags with the names of the styles defined in the <strong>drawingStyles</strong> field are used to delineate the boundaries of the label text to be rendered in that specific style.</p>\\n</li>\\n</ul>\\n<pre><code>msTextItem.drawingStyles = {\\n      \\\"default\\\": {\\n        \\\"fontSize\\\": {fhd:33,hd:22}\\n        \\\"fontUri\\\": \\\"font:SystemFontFile\\\"\\n        \\\"color\\\": \\\"#EFEFEFFF\\\"\\n      }\\n      \\\"url\\\": {\\n        \\\"fontSize\\\": {fhd:33,hd:22}\\n        \\\"fontUri\\\": \\\"font:SystemFontFile\\\"\\n        \\\"color\\\": \\\"#00FF00FF\\\"\\n      }\\n}\\nmsTextItem.text = \\\"This StdDlgMultiStyleTextItem renders the URL &#x3C;url>http://www.roku.com&#x3C;/url> in bright green.\\\"\\n</code></pre>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text to be displayed</td>\\n</tr>\\n<tr>\\n<td>drawingStyles</td>\\n<td>associative array of associative arrays</td>\\n<td>{}</td>\\n<td>READ_WRITE</td>\\n<td>Defines the size, URI, and color of a font style. This field may contain one or more font styles.</td>\\n</tr>\\n<tr>\\n<td>audioGuideText</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the string to be spoken when the screen reader reads the text item. By default, the screen reader reads the string specified in the <strong>text</strong> field.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"example\\\">Example</h2>\\n<p>In this example, two drawing styles named \\\"default\\\" and \\\"url\\\" have been defined and assigned to the <strong>drawingStyles</strong> field of the <strong>StdDlgMultiStyleTextItem</strong> node. The roku.com URL is enclosed in  tags, which renders the text with the \\\"url\\\" style defined in the <strong>drawingStyles</strong> field. The parts of the string that are not enclosed in the  tags use the \\\"default\\\" drawing style. If no \\\"default\\\" <strong>drawingStyle</strong> had been defined, the system default drawing style would have been used.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/StdDlgMultiStyleTextItemFHD.jpg\\\" alt=\\\"roku815px - StdDlgMultiStyleTextItemFHD\\\"></p>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;component name=\\\"MultiStyleTextItemDialog\\\" extends=\\\"StandardDialog\\\" initialFocus=\\\"buttonArea\\\" >\\n\\n&#x3C;script type=\\\"text/brightscript\\\" >\\n&#x3C;![CDATA[\\nfunction init()\\n    m.top.width = {fhd:1380,hd:920}\\n\\n    msTextItem = m.top.findNode(\\\"msTextItem\\\")\\n\\n    msTextItem.drawingStyles = {\\n      \\\"default\\\": {\\n        \\\"fontSize\\\": {fhd:33,hd:22}\\n        \\\"fontUri\\\": \\\"font:SystemFontFile\\\"\\n        \\\"color\\\": \\\"#EFEFEFFF\\\"\\n      }\\n      \\\"url\\\": {\\n        \\\"fontSize\\\": {fhd:33,hd:22}\\n        \\\"fontUri\\\": \\\"font:SystemFontFile\\\"\\n        \\\"color\\\": \\\"#00FF00FF\\\"\\n      }\\n    }\\n\\n    msTextItem.text=\\\"This StdDlgMultiStyleTextItem renders the URL &#x3C;url>http://www.roku.com&#x3C;/url> in bright green.\\\"\\n\\nend function\\n\\nsub printSelectedButtonAndClose()\\n    print \\\"m.buttonArea button \\\";m.buttonArea.getChild(m.top.buttonSelected).text;\\\" selected\\\"\\n    m.top.close = true\\nend sub\\n\\n]]>\\n&#x3C;/script>\\n\\n&#x3C;children>\\n    &#x3C;StdDlgTitleArea primaryTitle=\\\"StdDlgMultiStyleTextItem Example\\\" />\\n    &#x3C;StdDlgContentArea>\\n        &#x3C;StdDlgMultiStyleTextItem id=\\\"msTextItem\\\" />\\n    &#x3C;/StdDlgContentArea>\\n    &#x3C;StdDlgButtonArea id=\\\"buttonArea\\\">\\n        &#x3C;StdDlgButton text=\\\"OK\\\" />\\n    &#x3C;/StdDlgButtonArea>\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/standard-dialog-framework\\\">sample channel</a> that demonstrates how to create a custom dialog that includes a <strong>StdDlgMultiStyleTextItem</strong> node.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-progress-item.md":"{\n  \"content\": \"<h1 id=\\\"stddlgprogressitem\\\">StdDlgProgressItem</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\" title=\\\"**StdDlgItemBase**\\\">StdDlgItemBase</a></p>\\n<p>The <strong>StdDlgProgressItem</strong> node is used to display a spinning progress indicator in the dialog's content area. It provides the status of a task that takes an indeterminate amount of time. It should only be used as a child of a <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-content-area.md\\\"><strong>StdDlgContentArea</strong></a> node.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/std-dlg-progress-item.jpg\\\" alt=\\\"roku815px - std-dlg-progress-item\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text to be displayed next to the progress graphic. If the text width does not fit within the width of the content area, the text will wrap onto multiple lines.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/standard-dialog-framework\\\">sample channel</a> that demonstrates how to create a custom dialog that uses the progress item.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-text-item.md":"{\n  \"content\": \"<h1 id=\\\"stddlgtextitem\\\">StdDlgTextItem</h1>\\n<p><em>Available since Roku OS 10.0</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\" title=\\\"**StdDlgItemBase**\\\">StdDlgItemBase</a></p>\\n<p>The <strong>StdDlgTextItem</strong> node is used to display a block of text. It should only be used as a child of a <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-content-area.md\\\"><strong>StdDlgContentArea</strong></a> node.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/std-dlg-text-item.jpg\\\" alt=\\\"roku815px - StdDlgTextItem\\\"></p>\\n<blockquote>\\n<p>To separate lines of text, use multiple <strong>StdDlgTextItem</strong> nodes. Do not use newline characters.</p>\\n</blockquote>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text to be displayed. If the text width does not fit within the width of the content area, the text will wrap onto multiple lines.</td>\\n</tr>\\n<tr>\\n<td>namedTextStyle</td>\\n<td>string</td>\\n<td>\\\"normal\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a named style to be used for the displayed text's color and font. The supported styles include:<br /><table>\\n<thead>\\n<tr>\\n<th>Style Name</th>\\n<th>Palette Color</th>\\n<th>Font</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>\\\"normal\\\"</td>\\n<td>DialogTextColor</td>\\n<td>SmallSystemFont</td>\\n</tr>\\n<tr>\\n<td>\\\"secondary\\\"</td>\\n<td>DialogSecondaryTextColor</td>\\n<td>SmallestSystemFont</td>\\n</tr>\\n<tr>\\n<td>\\\"bold\\\"</td>\\n<td>DialogTextColor</td>\\n<td>SmallBoldSystemFont</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>audioGuideText</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the string to be spoken when the screen reader reads the text item. By default, the screen reader reads the string specified in the <strong>text</strong> field.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/standard-dialog-framework\\\">sample channel</a> that demonstrates how to create a custom dialog that uses the text item.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/standard-dialog-framework-nodes/std-dlg-custom-item.md":"{\n  \"content\": \"<h1 id=\\\"stddlgcustomitem\\\">StdDlgCustomItem</h1>\\n<p><em>Available since Roku OS 10.5</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/std-dlg-item-base.md\\\" title=\\\"**StdDlgItemBase**\\\">StdDlgItemBase</a></p>\\n<p>The <strong>StdDlgCustomItem</strong> node is used to display free-form dialog items in the content area that require a custom layout.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/std-dlg-custom-item-multi-column.jpeg\\\" alt=\\\"roku400px -  - custom-item\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>widthField</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>The width of the custom item, which is enforced by the content area's layout algorithm.</td>\\n</tr>\\n<tr>\\n<td>fixedWidthField</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the desired width of the custom item, which is passed to the content area's layout algorithm. This field is typically specified when the custom item includes a <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-custom-keyboard.md\\\">DynamicCustomKeyboard node</a>, which has a width that is determined by the KDF file of the custom keyboard.</td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>To enable a <strong>StdDlgCustomItem</strong> node to gain focus (for example, if it includes a custom keyboard node), set its <strong>focusable</strong> field to true (this field is inherited from the base <a href=\\\"/docs/references/scenegraph/node.md\\\">Node class</a>).</p>\\n</blockquote>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/standard-dialog-framework\\\">sample channel</a> that demonstrates how to create a custom dialog that uses a custom item.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/dialog-nodes/dialog.md":"{\n  \"content\": \"<h1 id=\\\"dialog\\\">Dialog</h1>\\n<blockquote>\\n<p>Roku OS 10.0 introduced a new <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-dialog.md\\\" title=\\\"**Standard Dialog**\\\">StandardDialog node</a>, which features updated graphics and color palette support. This enables developers to provide a consistent user experience across the dialogs in their channel. Developers should replace the legacy Dialog nodes in their channel with the new <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-dialog.md\\\" title=\\\"**Standard Dialog**\\\">StandardDialog nodes</a>.</p>\\n</blockquote>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a> </p>\\n<p>The Dialog node class defines a modal pop-up dialog used to present the user with information requiring their immediate attention.</p>\\n<p>Setting the dialog field of the current Scene node to a Dialog node causes the dialog to be displayed.</p>\\n<p>The Dialog node is configured to have up to five regions: the title, message, bullet text, graphic, and button regions. All of these are optional except for the title.</p>\\n<ul>\\n<li>\\n<p>The title region consists of a an icon and a title label, along with a horizontal divider that visually separates the title from the rest of the dialog.</p>\\n</li>\\n<li>\\n<p>The message region consist of a string that is displayed below the title divider.</p>\\n</li>\\n<li>\\n<p>The bullet  text region contains a set of zero or more bullet points. It is displayed below the message.</p>\\n</li>\\n<li>\\n<p>The graphic region consists of a single bitmap displayed center-aligned below the message and bullet text and above the button region.</p>\\n</li>\\n<li>\\n<p>The button region contains a ButtonGroup node that contains zero or more Button nodes, arranged vertically.</p>\\n</li>\\n</ul>\\n<p>Dialogs are modal and intercept all key events except pressing the Home key. Dialogs are closed automatically when the user presses the Home key or the Back key. If the optionsDialog field is set to true, pressing the Options key also closes the dialog.</p>\\n<p>Only a single dialog may appear at any time. If a second dialog is shown, the previous dialog is closed automatically.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>title</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Title of the dialog box</td>\\n</tr>\\n<tr>\\n<td>titleColor</td>\\n<td>color</td>\\n<td>N/A</td>\\n<td>READ_WRITE</td>\\n<td>When set, the color of the title</td>\\n</tr>\\n<tr>\\n<td>titleFont</td>\\n<td>Font</td>\\n<td>N/A</td>\\n<td>READ_WRITE</td>\\n<td>When set, the font of the title</td>\\n</tr>\\n<tr>\\n<td>message</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>The string to be displayed in the message region of the dialog. Newline and carriage return characters in the string result in the message being displayed as several lines of text. In BrightScript, to include a newline in a string, use chr(10). For example: <code>message = \\\"First line\\\" + chr(10) + \\\"Second line\\\"</code></td>\\n</tr>\\n<tr>\\n<td>messageColor</td>\\n<td>color</td>\\n<td>N/A</td>\\n<td>READ_WRITE</td>\\n<td>When set, the color of the message text</td>\\n</tr>\\n<tr>\\n<td>messageFont</td>\\n<td>Font</td>\\n<td>N/A</td>\\n<td>READ_WRITE</td>\\n<td>When set, the font of the message text</td>\\n</tr>\\n<tr>\\n<td>numberedBullets</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>If set to true, the bulletText will be displayed with numbers rather than bullets</td>\\n</tr>\\n<tr>\\n<td>bulletText</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>An array of strings to be displayed as a list of bullet points</td>\\n</tr>\\n<tr>\\n<td>bulletTextColor</td>\\n<td>color</td>\\n<td>N/A</td>\\n<td>READ_WRITE</td>\\n<td>When set, the color of the bullet point text</td>\\n</tr>\\n<tr>\\n<td>bulletTextFont</td>\\n<td>Font</td>\\n<td>N/A</td>\\n<td>READ_WRITE</td>\\n<td>When set, the font of the bullet point text</td>\\n</tr>\\n<tr>\\n<td>buttons</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>WRITE_ONLY</td>\\n<td>Allows a set of Button nodes to be easily created by providing an array of Button labels. Each string in the array will result in a Button node to be added to the ButtonGroup, using the string as the Button label</td>\\n</tr>\\n<tr>\\n<td>buttonGroup</td>\\n<td>ButtonGroup</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>The dialog internal ButtonGroup node. This allows the appearance attributes of all the Button nodes in the dialog to be easily modified. Since the ButtonGroup node class is derived from the LayoutGroup node class, additional non-Button node children can also be added</td>\\n</tr>\\n<tr>\\n<td>graphicUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a bitmap to be displayed in the dialog. The bitmap is displayed below the bullet text region and above the buttons. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap</td>\\n</tr>\\n<tr>\\n<td>graphicWidth</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width of the bitmap graphic in local coordinates. If set to 0.0, the width of the bitmap from the image file is used. If set to a value greater than 0.0, the bitmap is scaled to that width</td>\\n</tr>\\n<tr>\\n<td>graphicHeight</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the bitmap graphic in local coordinates. If set to 0.0, the height of the bitmap from the image file is used. If set to a value greater than 0.0, the bitmap is scaled to that height</td>\\n</tr>\\n<tr>\\n<td>buttonSelected</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>Set to the index of the selected button whenever the user selects a button in the group</td>\\n</tr>\\n<tr>\\n<td>buttonFocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>Set to the index of the focused button whenever a button in the group receives the key focus</td>\\n</tr>\\n<tr>\\n<td>focusButton</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td>Causes the button with the specified index to receive the focus when the ButtonGroup node has the key focus. Note that if the ButtonGroup node does not have the key focus when the focusButton field is set, the specified button will display the focus footprint as its background</td>\\n</tr>\\n<tr>\\n<td>optionsDialog</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>If set to true, the dialog is automatically dismissed when the Options key is pressed</td>\\n</tr>\\n<tr>\\n<td>backgroundUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap to be displayed as the dialog background. Usually this is a 9-patch image to support dynamic resizing. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap</td>\\n</tr>\\n<tr>\\n<td>iconUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a bitmap to be displayed as a small icon next to the dialog title. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap</td>\\n</tr>\\n<tr>\\n<td>dividerUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a bitmap to be displayed as the divider between the title region and the remainder of the dialog. Usually this is a 9-patch image to support dynamic resizing. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap</td>\\n</tr>\\n<tr>\\n<td>close</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>WRITE_ONLY</td>\\n<td>Causes the dialog to be dismissed. The dialog is dismissed whenever the close field is set, regardless of whether the field is set to true or false</td>\\n</tr>\\n<tr>\\n<td>wasClosed</td>\\n<td>Event</td>\\n<td>N/A</td>\\n<td>READ_WRITE</td>\\n<td>Set when the dialog has been closed. The field is set when the dialog close field is set, when the Back or Home key has been pressed, when the Options key has been pressed if the optionsDialog field is set to true, and when the dialog is dismissed because another dialog was displayed</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>-1.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width of the dialog. By default, this value is pulled from the system theme</td>\\n</tr>\\n<tr>\\n<td>maxHeight</td>\\n<td>float</td>\\n<td>-1.0</td>\\n<td>READ_WRITE</td>\\n<td>Sets the maximum height of the dialog. By default, the Dialog will scale the height based on the contents but never larger than the height of the display resolution. Setting maxHeight smaller than the contents will switch to a scrollable text region</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/dialogs/DialogExample\\\">DialogExample</a> is a sample channel demonstrating Dialog in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/dialog-nodes/keyboarddialog.md":"{\n  \"content\": \"<h1 id=\\\"keyboarddialog\\\">KeyboardDialog</h1>\\n<blockquote>\\n<p>Roku OS 10.0 introduced a new <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-keyboard-dialog.md\\\" title=\\\"**Standard Keyboard Dialog**\\\">StandardKeyboardDialog node</a>, which features updated graphics, color palette support, and voice entry support. This enables developers to provide a consistent user experience across the keyboard dialogs in their channel, and help speed up customer sign-ups and sign-ins. Developers must replace the legacy KeyboardDialog nodes in their channel with the new <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-keyboard-dialog.md\\\" title=\\\"**Standard Keyboard Dialog**\\\">StandardKeyboardDialog node</a>.</p>\\n<p>To upgrade a legacy keyboard dialog to the standard version, prepend \\\"Standard\\\" to the node type. For example, change <code>keyboarddialog = createObject(\\\"roSGNode\\\", \\\"KeyboardDialog\\\")</code> to <code>keyboarddialog = createObject(\\\"roSGNode\\\", \\\"StandardKeyboardDialog\\\")</code>.</p>\\n</blockquote>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/dialog-nodes/dialog.md\\\" title=\\\"**Dialog**\\\"><strong>Dialog</strong></a></p>\\n<p>The KeyboardDialog node class is a special type of Dialog node that prompts the user to enter an alphanumeric text string. The KeyboardDialog node class includes an interrnal Keyboard node to allow the user to enter the string.</p>\\n<p>The KeyboardDialog allows you to add a title (by setting the Dialog title field), a help message (by setting the Dialog message field), and a set of action buttons (by setting the Dialog node buttons field). The bulletText and graphicUrl fields of the Dialog node should not be set. If those Dialog node fields are set, the layout of the dialog will likely not look correct.</p>\\n<p>Also, the KeyboardDialog node class inherits the behavior of the interrnal <a href=\\\"/docs/references/scenegraph/widget-nodes/keyboard.md\\\" title=\\\"Keyboard\\\">Keyboard</a> node when the Options remote key is pressed. The Keyboard node class toggles between uppercase and lowercase letters when the Options remote key is pressed, to speed the entry of mixed-case strings by the user. Therefore, the optionsDialog field of the Dialog node class should not be set to true.</p>\\n<p>Typically, you will want to set the KeyboardDialog node title field to prompt the user to enter the string, and add \\\"OK\\\" and \\\"Cancel\\\" buttons by setting the Dialog node buttons field to [ \\\"OK\\\", \\\"Cancel\\\" ], then observe the Dialog node class buttonSelected field to react when the user presses one of those buttons. At any time, the text field can be accessed to obtain the string entered by the user.</p>\\n<p>Another typical usage of the KeyboardDialog node class adds a \\\"Hide Text\\\" button, with an observer function set up to toggle the secureMode field of the Keyboard node internal TextEditBox node (that is, by toggling the value of the keyboard.textEditBox.secureMode field).</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Can be used to explicitly set the internal Keyboard node text string, as well as to access the string entered by the user</td>\\n</tr>\\n<tr>\\n<td>keyboard</td>\\n<td>Keyboard node</td>\\n<td>system default</td>\\n<td>READ_ONLY</td>\\n<td>Provides access to the internal Keyboard node. The field is read-only, but the fields of the Keyboard node it refers to can be read and written, allowing you to fully customize the Keyboard node appearance and behavior</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/dialogs/KeyboardDialogExample\\\">KeyboardDialogExample</a> is a sample channel demonstrating KeyboardDialog in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/dialog-nodes/pindialog.md":"{\n  \"content\": \"<h1 id=\\\"pindialog\\\">PinDialog</h1>\\n<blockquote>\\n<p>Roku OS 10.0 introduced a new <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-pinpad-dialog.md\\\" title=\\\"**Standard PinPad Dialog**\\\">StandardPinPadDialog node</a>, which features updated graphics, color palette support, and voice entry support. This enables developers to provide a consistent user experience across the PIN pad dialogs in their channel, and help speed up customer sign-ups and sign-ins. Developers must replace the legacy PinDialog nodes in their channel with the new <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-pinpad-dialog.md\\\" title=\\\"**Standard PinPad Dialog**\\\">StandardPinPadDialog node</a>.</p>\\n<p>To upgrade a legacy pinpad dialog to the standard version, prepend \\\"Standard\\\" to the node type. For example, change <code>pindialog = createObject(\\\"roSGNode\\\", \\\"PinDialog\\\")</code> to <code>pindialog = createObject(\\\"roSGNode\\\", \\\"StandardPinDialog\\\")</code>.</p>\\n</blockquote>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/dialog-nodes/dialog.md\\\" title=\\\"**Dialog**\\\"><strong>Dialog</strong></a></p>\\n<p>The PinDialog node class is a special type of Dialog node that prompts the user to enter a numeric string. The PinDialog node class includes an internal <a href=\\\"/docs/references/scenegraph/widget-nodes/pinpad.md\\\" title=\\\"PinPad\\\">PinPad</a> node to allow the user to input a numeric value, such as a PIN.</p>\\n<p>The PinDialog node class allows you to add a title (by setting the Dialog node title field), a message (by setting the Dialog node message field), and a set of action buttons (by setting the Dialog node buttons field). The bulletText and graphicUrl fields of the Dialog node should not be set. If those fields are set, the layout of the PinDialog node will likely not look correct.</p>\\n<p>Typically, you will want to set the Dialog node title field to prompt the user to enter a PIN, and add \\\"OK\\\" and \\\"Cancel\\\" buttons by setting the Dialog node buttons field to [ \\\"OK\\\", \\\"Cancel\\\" ], then observe the Dialog node buttonSelected field to react when the user presses one of those buttons. At any time, the PinDialog node pin field can be accessed to obtain the PIN value entered by the user.</p>\\n<p>The PinDialog node displays a privacy hint at the bottom of the dialog instructing the user how to show/hide the PinPad node focus indicator with the Options remote key. This provides more privacy for the user when entering a PIN. You should not override this default behavior of the Options remote key in the PinDialog node.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>pin</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Can be used to explicitly set the internal PinPad node PIN value, as well as to access the PIN value entered by the user</td>\\n</tr>\\n<tr>\\n<td>pinPad</td>\\n<td>PinPad node</td>\\n<td>system default</td>\\n<td>READ_ONLY</td>\\n<td>Provides access to the PinDialog node internal PinPad node. The field is read-only, but the fields of the PinPad node it refers to can be read and written, allowing you to fully customize the PinPad node appearance and behavior</td>\\n</tr>\\n<tr>\\n<td>privacyHintColor</td>\\n<td>color</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>When set, the color of the privacy hint shown at the bottom of the dialog</td>\\n</tr>\\n<tr>\\n<td>pinPadFocused</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether or not PinPad will be focused when PinDialog is created</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/dialogs/PinDialogExample\\\">PinDialogExample</a> is a sample channel demonstrating PinDialog in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/dialog-nodes/progressdialog.md":"{\n  \"content\": \"<h1 id=\\\"progressdialog\\\">ProgressDialog</h1>\\n<blockquote>\\n<p>Roku OS 10.0 introduced a new <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-progress-dialog.md\\\" title=\\\"**Standard Progress Dialog**\\\">StandardProgressDialog node</a>, which features updated graphics and color palette support. This enables developers to provide a consistent user experience across the progress dialogs in their channel. Developers should replace the legacy ProgressDialog nodes in their channel with the new <a href=\\\"/docs/references/scenegraph/standard-dialog-framework-nodes/standard-progress-dialog.md%22\\\" title=\\\"**Standard Progress Dialog**\\\">StandardProgressDialog nodes</a>.</p>\\n<p>To upgrade a legacy progress dialog to the standard version, prepend \\\"Standard\\\" to the node type. For example, change <code>progressdialog = createObject(\\\"roSGNode\\\", \\\"ProgressDialog\\\")</code> to <code>progressdialog = createObject(\\\"roSGNode\\\", \\\"StandardProgressDialog\\\")</code>.</p>\\n</blockquote>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/dialog-nodes/dialog.md\\\" title=\\\"**Dialog**\\\"><strong>Dialog</strong></a></p>\\n<p>The ProgressDialog node class is a special type of Dialog node that includes the dialog title region and a spinning icon as the body of the dialog. The ProgressDialog node class uses a BusySpinner node to display the spinning icon.</p>\\n<p>The message, bulleted text, graphic, and button regions of the dialog should all be empty. If those dialog regions are not empty, the layout of the dialog will likely not look correct.</p>\\n<blockquote>\\n<p>Not all Roku Player hardware supports arbitrary rotations. In particular, some hardware only supports 90 degree rotation increments. In those cases, the icon will step through 90 degree, 180 degree, 270 degree and back to 0 degree rotations, rather than spin smoothly.</p>\\n</blockquote>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>busySpinner</td>\\n<td>BusySpinner</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>Provides access to the BusySpinner node used by the ProgressDialog node so that the spinner icon and rotation direction can be customized</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/dialogs/ProgressDialogExample\\\">ProgressDialogExample</a> is a sample channel demonstrating ProgressDialog in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/widget-nodes/button.md":"{\n  \"content\": \"<h1 id=\\\"button\\\">Button</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a></p>\\n<p>The Button node is a simple widget that generates a buttonSelected event when the user selects it. The button can display a label and/or an icon, as well as a background image. Fields are provided to customize the label text and color depending on whether or not the button has the key focus. Similarly, the bitmaps used for the icon and background can be specified for both focused and unfocused button states.</p>\\n<p>By default, the background of the button is only shown when the button has the key focus. Buttons are typically used in a ButtonGroup node that manages which button in the group will have the key focus when the ButtonGroup node receives the focus. When the ButtonGroup node has the focus, the button in the group that has the focus will display the focusBitmapUri bitmap as its background. When the ButtonGroup node does not have the focus, it remembers which button in the group had the focus and sets that button showFocusFootprint field to true, causing it to a render a \\\"footprint\\\" bitmap as a visual indicator that it will be the focused button when the ButtonGroup node receives the focus again. All other buttons in the ButtonGroup node do not display a background image.</p>\\n<p>When a Button node is created that is not a child of a ButtonGroup node, typically the showFootprintfield field should be set to true, so that the button always displays a background image.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text to be displayed as the button label</td>\\n</tr>\\n<tr>\\n<td>textColor</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the button label when the button does not have the key focus</td>\\n</tr>\\n<tr>\\n<td>focusedTextColor</td>\\n<td>color</td>\\n<td>0x262626ff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the button label when the button has the key focus</td>\\n</tr>\\n<tr>\\n<td>textFont</td>\\n<td>Font</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the font of the button label when the button does not have the key focus</td>\\n</tr>\\n<tr>\\n<td>focusedTextFont</td>\\n<td>Font</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the font of the button label when the button has the key focus</td>\\n</tr>\\n<tr>\\n<td>focusFootprintBitmapUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the button focus \\\"footprint\\\" bitmap file to display when the button does not have key focus. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap. By default the \\\"footprint\\\" bitmap is not displayed when the button does not have the key focus. To display the background when the button is unfocused, the showFocusFootprint field must be set to true</td>\\n</tr>\\n<tr>\\n<td>focusBitmapUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the button background bitmap file to display when the button has the key focus. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap</td>\\n</tr>\\n<tr>\\n<td>iconUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a bitmap file for the button icon when the button does not have the key focus. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap. For a button with no icon, set this field to an empty string (iconUri=\\\"\\\")</td>\\n</tr>\\n<tr>\\n<td>focusedIconUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a bitmap file for the button icon when the button has the key focus. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap. For a button with no icon, set this field to an empty string (iconUri=\\\"\\\")</td>\\n</tr>\\n<tr>\\n<td>minWidth</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the minimum width of the button. The minWidth field must be less than or equal to the maxWidth field</td>\\n</tr>\\n<tr>\\n<td>maxWidth</td>\\n<td>float</td>\\n<td>32767</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the maximum width of the button. The maxWidth field must be greater than or equal to the minWidth field</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>64</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the button</td>\\n</tr>\\n<tr>\\n<td>showFocusFootprint</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Controls whether the focus \\\"footprint\\\" bitmap is displayed when the button does not have the key focus. Since the default value of the showFocusFootprint field is false, the \\\"footprint\\\" bitmap is not displayed by default</td>\\n</tr>\\n<tr>\\n<td>buttonSelected</td>\\n<td>Event</td>\\n<td>N/A</td>\\n<td>READ_ONLY</td>\\n<td>The buttonSelected field is set whenever the button is selected. The field should be used to call observer callback functions when the button is selected</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/widgets/ButtonExample\\\">ButtonExample</a> is a sample channel demonstrating Button in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/widget-nodes/texteditbox.md":"{\n  \"content\": \"<h1 id=\\\"texteditbox\\\">TextEditBox</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a> </p>\\n<p>The <strong>TextEditBox</strong> node class is intended to display a string of characters as they are typed. When focused, it displays a flashing cursor to indicate the text insertion position.</p>\\n<p><strong>TextEditBox</strong> nodes are automatically included in the <a href=\\\"/docs/references/scenegraph/widget-nodes/keyboard.md\\\" title=\\\"**Keyboard**\\\"><strong>Keyboard</strong></a> and <a href=\\\"/docs/references/scenegraph/widget-nodes/minikeyboard.md\\\" title=\\\"**MiniKeyboard**\\\"><strong>MiniKeyboard</strong></a> node classes.</p>\\n<p>The default appearance of the <strong>TextEditBox</strong> is very transparent, allowing it to pick up most of its color from what is rendered underneath it. The appearance can be customized by changing the backgroundUri and other fields.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>Read-Write</td>\\n<td>Contains the string of characters being displayed.</td>\\n</tr>\\n<tr>\\n<td>hintText</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>Read-Write</td>\\n<td>Specifies a string to be displayed if the length of the text field string is zero. The typical usage of this field is to prompt the user about what to enter (such as, \\\"Enter your WiFi password\\\").</td>\\n</tr>\\n<tr>\\n<td>maxTextLength</td>\\n<td>integer</td>\\n<td>15</td>\\n<td>Read-Write</td>\\n<td>Specifies the maximum length of the string that can be displayed. When used internal to the <strong>Keyboard</strong> node, maxTextLength is initialized to 75. When used in the <strong>MiniKeyboard</strong> node, maxTextLength is initialized to 25.</td>\\n</tr>\\n<tr>\\n<td>cursorPosition</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>Read-Write</td>\\n<td>By default, this is set to the length of the text field, indicating that the next character to be entered should be appended at the end of the string. When used internal to the <strong>Keyboard</strong> and <strong>MiniKeyboard</strong> nodes, those nodes use this field to move the text insertion point.</td>\\n</tr>\\n<tr>\\n<td>clearOnDownKey</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>Read-Write</td>\\n<td>When clearOnDownKey is set to true, the textEditBox erases all the characters when down key is pressed (focus does not move down). When set to false, the characters are not erased and focus moves down.</td>\\n</tr>\\n<tr>\\n<td>active</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>Read-Write</td>\\n<td>When active is set to true, the cursor is displayed. When set to false, the cursor is hidden. When used internal to the <strong>Keyboard</strong> and <strong>MiniKeyboard</strong> nodes, those nodes set this field to true when the keyboard has focus, and false when it does not.</td>\\n</tr>\\n<tr>\\n<td>secureMode</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>Read-Write</td>\\n<td>When set to true, the characters entered are briefly displayed, then replaced with an asterisk. When set to false, the characters entered are always displayed. When used internal to the <strong>Keyboard</strong> and <strong>MiniKeyboard</strong> nodes, you can access the keyboard <strong>textEditBox</strong> field to set its secureMode field. For example: <code>myKeyboard.textEditBox.secureMode = true</code></td>\\n</tr>\\n<tr>\\n<td>textColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>Read-Write</td>\\n<td>Specifies the color of the text string displayed.</td>\\n</tr>\\n<tr>\\n<td>hintTextColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>Read-Write</td>\\n<td>Specifies the color of the hint text string.</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>-1.0</td>\\n<td>Read-Write</td>\\n<td>Specifies the width of the <strong>TextEditBox</strong> node. When used internal to the <strong>Keyboard</strong> and <strong>MiniKeyboard</strong> nodes, those nodes set this field to match the width of the keyboard.</td>\\n</tr>\\n<tr>\\n<td>backgroundUri</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>Read-Write</td>\\n<td>Specifies the URI of the image rendered as the background of the <strong>TextEditBox</strong> node.</td>\\n</tr>\\n<tr>\\n<td>leadingEllipsis<br /><br /><em>Available since Roku OS 11.0</em></td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether to display the end or beginning of text that overflows its available width:<br /><ul>\\n<li><strong>true</strong>. The end of the text is shown. For example, \\\"the quick brown fox jumps over the lazy dog\\\" would be truncated to \\\"...jumps over the lazy dog\\\". </li>\\n<li><strong>false</strong>. The start of the text is shown (for example, \\\"the quick brown fox jumps...\\\").</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/widgets/TextEditBoxExample\\\">TextEditBoxExample</a> is a sample channel demonstrating TextEditBox in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/widget-nodes/pinpad.md":"{\n  \"content\": \"<h1 id=\\\"pinpad\\\">PinPad</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a> </p>\\n<p>The PinPad node is a simple widget that allows you to enter a fixed length numeric string. The string that is entered is displayed in a set of boxes above the PinPad node keyboard, with each box displaying a single numeral of the entered string.</p>\\n<p>The PinPad node must have the key focus in order to work properly.</p>\\n<p>The default appearance of the PinPad node is very transparent, allowing the node to pick up most of its color from what is rendered underneath it. The appearance can be customized by changing the keyboardBitmapUri and other fields.</p>\\n<h3 id=\\\"pinpad-bitmap-templates\\\">PinPad Bitmap Templates</h3>\\n<p>Use the links below to download the template files.</p>\\n<p>The files have opaque white lines that show the key outlines with the rest of the images fully transparent. Looking at the files in some image viewers that do not support transparency will result in the images looking all white.</p>\\n<p>When creating your own keyboard background artwork, you must maintain the size of the image and the position of the keys in order for it to align properly with the rendered key labels and icons.</p>\\n<h4 id=\\\"templates\\\">Templates:</h4>\\n<ul>\\n<li><a href=\\\"https://image.roku.com/ZHZscHItMTc2/pinpad---SD.png\\\">SD PinPad Template</a></li>\\n<li><a href=\\\"https://image.roku.com/ZHZscHItMTc2/pinpad---HD.png\\\">HD PinPad Template</a></li>\\n<li><a href=\\\"https://image.roku.com/ZHZscHItMTc2/pinpad---FHD.png\\\">FHD PinPad Template</a></li>\\n</ul>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>pin</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Contains the string of numbers that have been entered</td>\\n</tr>\\n<tr>\\n<td>pinLength</td>\\n<td>integer</td>\\n<td>4</td>\\n<td>READ_WRITE</td>\\n<td>Contains the maximum number of digits that can be entered</td>\\n</tr>\\n<tr>\\n<td>secureMode</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>When set to true, each digit entered is displayed briefly, then replaced with an asterisk. When false, the entered digits always remain visible</td>\\n</tr>\\n<tr>\\n<td>keyColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the key labels and icons when the keyboard does not have the focus</td>\\n</tr>\\n<tr>\\n<td>focusedKeyColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the key labels and icons when the keyboard has the focus</td>\\n</tr>\\n<tr>\\n<td>pinDisplayTextColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the numbers displayed in the pin display boxes</td>\\n</tr>\\n<tr>\\n<td>keyboardBitmapUri</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the URI of an image file to be loaded to replace the default keyboard image drawn underneath the numeric keys and icons<br />This image must be carefully designed so that the key positions match the default image. Template images for SD, HD and FHD resolutions are provided below.</td>\\n</tr>\\n<tr>\\n<td>pinDisplayBitmapUri</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifed the URI of an image file to be loaded to replace the default box drawn underneath each entered digit in the pin display. This should be a 9-patch image so that it can be stretched to appropriate size depending on the pinLength field</td>\\n</tr>\\n<tr>\\n<td>focusBitmapUri</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the URI of an image file to be loaded to replace the keyboard focus indicator. This should be a 9-patch image so that it can be stretched to the appropriate size for the double width keys</td>\\n</tr>\\n<tr>\\n<td>showPinDisplay</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether or not the pin display that shows the entered digits is visible. In most cases, it is desirable to display the entered digits so that the user can see the string as it is entered.<br />You may want to only show the keyboard part of the PinPad node. In those cases, the pin field of the node will still contain the string entered by the user, so that it can displayed in some different manner.</td>\\n</tr>\\n<tr>\\n<td>itemFocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies index of the key label that will be in focus when PinPad is created</td>\\n</tr>\\n<tr>\\n<td>focusVisible</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether or not focused key is visible when PinPad is created</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/widgets/PinPadExample\\\">PinpadExample</a> is a sample channel demonstrating Pinpad in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/widget-nodes/keyboard.md":"{\n  \"content\": \"<h1 id=\\\"keyboard\\\">Keyboard</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a></p>\\n<p>The Keyboard node class allows a user to enter a string of alphanumeric characters. The string entered is displayed in a <a href=\\\"/docs/references/scenegraph/widget-nodes/texteditbox.md\\\" title=\\\"TextEditBox\\\">TextEditBox</a> node that is part of the Keyboard node.</p>\\n<p>The Keyboard node must have the key focus in order to work properly. By default, a Keyboard node toggles between uppercase and lowercase letters when the Options remote key is pressed, to speed the entry of mixed-case strings by the user. It is important not to override this behavior, particularly if a Keyboard node is used as an internal node for a <a href=\\\"/docs/references/scenegraph/dialog-nodes/keyboarddialog.md\\\" title=\\\"KeyboardDialog\\\">KeyboardDialog</a> node.</p>\\n<p>The default appearance of a Keyboard node is very transparent, allowing the keyboard to pick up most of its color from what is rendered underneath it. The appearance can be customized by changing the keyboardBitmapUri and other fields.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Contains the string of characters that has been entered</td>\\n</tr>\\n<tr>\\n<td>keyColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the key labels and icons when the Keyboard node does not have the focus</td>\\n</tr>\\n<tr>\\n<td>focusedKeyColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the key labels and icons when the Keyboard node has the focus</td>\\n</tr>\\n<tr>\\n<td>keyboardBitmapUri</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the URI of an image file to be loaded to replace the default keyboard image drawn underneath the key label and icons.<br />This image must be carefully designed so that the key positions match the default image. Template images for SD, HD and FHD resolutions are provided below.</td>\\n</tr>\\n<tr>\\n<td>focusBitmapUri</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the URI of an image file to be loaded to replace the keyboard focus indicator. This should be a 9-patch image so that it can be stretched to the appropriate size for the double width keys</td>\\n</tr>\\n<tr>\\n<td>textEditBox</td>\\n<td>TextEditBox node</td>\\n<td>system default</td>\\n<td>READ_ONLY</td>\\n<td>This provides access to the Keyboard node internal TextEditBox node so that its appearance can be modified. You should not set this field, but you can set the fields of the TextEditBox node (such as, myKeyboard.textEditBox.textColor = \\\"0xFF0000FF\\\")</td>\\n</tr>\\n<tr>\\n<td>showTextEditBox</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether or not the Keyboard node internal TextEditBox node is displayed. In most cases, it is desirable to display the TextEditBox node so that the user can see the string as it is entered. In some cases though, you might want to show only the keyboard part of the Keyboard node. In those cases, the text field of the node will still contain the string entered by the user, so it can displayed in some different manner</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"keyboard-bitmap-templates\\\">Keyboard Bitmap Templates</h4>\\n<p>You can use the following bitmap templates to design your own keyboard background artwork.  These templates have opaque white lines that show the key outlines with the rest of the images fully transparent. Looking at the files in some image viewers that do not support transparency will result in the images looking all white.</p>\\n<p>When creating your own keyboard background artwork, you must maintain the size of the image and the position of the keys in order for it to align properly with the rendered key labels and icons.</p>\\n<ul>\\n<li><a href=\\\"https://image.roku.com/ZHZscHItMTc2/SDKeyboardTemplate.png\\\" title=\\\"SD Keyboard Template\\\">SD Keyboard Template</a></li>\\n<li><a href=\\\"https://image.roku.com/ZHZscHItMTc2/HDKeyboardTemplate.png\\\" title=\\\"HD Keyboard Template\\\">HD Keyboard Template</a></li>\\n<li><a href=\\\"https://image.roku.com/ZHZscHItMTc2/FHDKeyboardTemplate.png\\\" title=\\\"FHD Keyboard Template\\\">FHD Keyboard Template</a></li>\\n</ul>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/widgets/KeyboardExample\\\">KeyboardExample</a> is a sample channel demonstrating Keyboard in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/widget-nodes/minikeyboard.md":"{\n  \"content\": \"<h1 id=\\\"minikeyboard\\\">MiniKeyboard</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\" title=\\\"**Group**\\\"><strong>Group</strong></a> </p>\\n<p>The MiniKeyboard node class allows a user to enter a string of letters and numerals. The string entered is displayed in a <a href=\\\"/docs/references/scenegraph/widget-nodes/texteditbox.md\\\" title=\\\"TextEditBox\\\">TextEditBox</a> node that is part of the MiniKeyboard node.</p>\\n<p>The MiniKeyboard node is intended for users to enter a simple case-insensitive string consisting of the letters A-Z and the numerals 0-9. It is intended for use in functions such as \\\"Search\\\", where the entered string need not support general case-sensitive text entry. For general text entry, use a <a href=\\\"/docs/references/scenegraph/widget-nodes/keyboard.md\\\" title=\\\"Keyboard\\\">Keyboard</a> node instead.</p>\\n<p>The MiniKeyboard node must have the key focus in order to work properly.</p>\\n<p>The default appearance of the MiniKeyboard node is very transparent, allowing the keyboard to pick up most of its color from what is rendered underneath it. The appearance can be customized by changing the keyboardBitmapUri and other fields.</p>\\n<h3 id=\\\"keyboard-bitmap-templates\\\">Keyboard Bitmap Templates</h3>\\n<ul>\\n<li>Use the links below to download the template files.</li>\\n<li>The files have opaque white lines that show the key outlines with the rest of the images fully transparent. Looking at the files in some image viewers that do not support transparency will result in the images looking all white.</li>\\n<li>When creating your own keyboard background artwork, you must maintain the size of the image and the position of the keys in order for it to align properly with the rendered key labels and icons.</li>\\n</ul>\\n<h4 id=\\\"templates\\\">Templates</h4>\\n<ul>\\n<li><a href=\\\"https://image.roku.com/ZHZscHItMTc2/SDMiniKeyboardTemplate.png\\\" title=\\\"SD MiniKeyboard Template\\\">SD MiniKeyboard Template</a></li>\\n<li><a href=\\\"https://image.roku.com/ZHZscHItMTc2/HDMiniKeyboardTemplate.png\\\" title=\\\"HD MiniKeyboard Template\\\">HD MiniKeyboard Template</a></li>\\n<li><a href=\\\"https://image.roku.com/ZHZscHItMTc2/FHDMiniKeyboardTemplate.png\\\" title=\\\"FHD MiniKeyboard Template\\\">FHD MiniKeyboard Template</a></li>\\n</ul>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Contains the string of characters that has been entered</td>\\n</tr>\\n<tr>\\n<td>keyColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the key labels and icons when the Keyboard node does not have the focus</td>\\n</tr>\\n<tr>\\n<td>focusedKeyColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the key labels and icons when the Keyboard node has the focus</td>\\n</tr>\\n<tr>\\n<td>keyboardBitmapUri</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the URI of an image file to be loaded to replace the default keyboard image drawn underneath the key label and icons.<br />This image must be carefully designed so that the key positions match the default image. Template images for SD, HD and FHD resolutions are provided below.</td>\\n</tr>\\n<tr>\\n<td>focusBitmapUri</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the URI of an image file to be loaded to replace the keyboard focus indicator. This should be a 9-patch image so that it can be stretched to the appropriate size for the double width keys</td>\\n</tr>\\n<tr>\\n<td>textEditBox</td>\\n<td>TextEditBox node</td>\\n<td>system default</td>\\n<td>READ_ONLY</td>\\n<td>This provides access to the Keyboard node internal TextEditBox node so that its appearance can be modified. You should not set this field, but you can set the fields of the TextEditBox node (such as, myKeyboard.textEditBox.textColor = \\\"0xFF0000FF\\\")</td>\\n</tr>\\n<tr>\\n<td>showTextEditBox</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether or not the Keyboard node internal TextEditBox node is displayed. In most cases, it is desirable to display the TextEditBox node so that the user can see the string as it is entered. In some cases though, you might want to show only the keyboard part of the Keyboard node. In those cases, the text field of the node will still contain the string entered by the user, so it can displayed in some different manner</td>\\n</tr>\\n<tr>\\n<td>lowerCase</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the 26 letter keys are displayed as lowercase or uppercase</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/widgets/MiniKeyboardExample\\\">MiniKeyboardExample</a> is a sample channel demonstrating MiniKeyboard in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/widget-nodes/busyspinner.md":"{\n  \"content\": \"<h1 id=\\\"busyspinner\\\">BusySpinner</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\"><strong>Group</strong></a></p>\\n<p>The BusySpinner node class is a simple widget that displays a continuously rotating bitmap. Since the BusySpinner node class uses an internal Poster node instance, the busy spinner bitmap can be specified by setting the internal Poster node uri field.</p>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/widgets\\\">SimpleBusySpinner.zip</a> is a sample channel that demonstrates usage of the BusySpinner.</p>\\n<blockquote>\\n<p>Not all Roku Player hardware versions support arbitrary rotations. In particular, some hardware versions only support 90 degree rotation increments. In those cases, the icon will step through 90 degree, 180 degree, 270 degree and back to 0 degree rotations, rather than spin smoothly.</p>\\n</blockquote>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>poster</td>\\n<td>Poster node</td>\\n<td>internal instance default</td>\\n<td>READ_WRITE</td>\\n<td>Set the uri field of the Poster node to select the bitmap for the busy spinner</td>\\n</tr>\\n<tr>\\n<td>control</td>\\n<td>option string</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>Sets the operational state of the busy spinner <table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>none</td>\\n<td>No operational state set. The busy spinner will run if not set to <code>\\\"stop\\\"</code>.</td>\\n</tr>\\n<tr>\\n<td>start</td>\\n<td>Starts the busy spinner if not running</td>\\n</tr>\\n<tr>\\n<td>stop</td>\\n<td>Stops the busy spinner if running</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>clockwise</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the bitmap rotates in a clockwise or counterclockwise direction</td>\\n</tr>\\n<tr>\\n<td>spinInterval</td>\\n<td>time</td>\\n<td>1</td>\\n<td>READ_WRITE</td>\\n<td>The number of seconds to complete a 360-degree rotation of the spinner image. A value of 0 will cause the spinner to remain stationary and not spin</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/widgets/BusySpinnerExample\\\">BusySpinnerExample</a> is a sample channel demonstrating BusySpinner in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/widget-nodes/parentalcontrolpinpad.md":"{\n  \"content\": \"<h1 id=\\\"parentalcontrolpinpad\\\">ParentalControlPinPad</h1>\\n<p>ParentalControlPinPad is a variant of the <a href=\\\"/docs/references/scenegraph/widget-nodes/pinpad.md\\\" title=\\\"PinPad component\\\">PinPad component</a>, although it does have a few key differences: The pin, pinLength, and secureMode fields are made private (i.e., not accessible to BrightScript, and secureMode set to true).</p>\\n<p>There are two use cases for the ParentalControlPinPad node:</p>\\n<ul>\\n<li>If the user enters the correct pin, a 2-hour override of content blocking starts, similar to the system behavior on RokuTV</li>\\n<li>If the user enters an incorrect PIN, the text fields are cleared automatically</li>\\n</ul>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<p>ParentalControlPinPad includes a new field, pinSuccess for blocking content:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>pin</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>Contains the string of numbers that have been entered.</td>\\n</tr>\\n<tr>\\n<td>pinLength</td>\\n<td>integer</td>\\n<td>4</td>\\n<td>Contains the maximum number of digits that can be entered</td>\\n</tr>\\n<tr>\\n<td>pinSuccess</td>\\n<td>string</td>\\n<td>incomplete</td>\\n<td><strong>Read-only</strong><br />\\\"true\\\": Content is now unblocked<br />\\\"false\\\": Pin incorrect, \\\"incomplete\\\": a full pin is not entered</td>\\n</tr>\\n<tr>\\n<td>secureMode</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>When set to true, each digit entered is displayed briefly, then replaced with an asterisk. When false, the entered digits always remain visible.</td>\\n</tr>\\n<tr>\\n<td>keyColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>Specifies the color of the key labels and icons when the keyboard does not have the focus</td>\\n</tr>\\n<tr>\\n<td>focusedKeyColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>Specifies the color of the key labels and icons when the keyboard has the focus</td>\\n</tr>\\n<tr>\\n<td>pinDisplayTextColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>Specifies the color of the numbers displayed in the pin display boxes</td>\\n</tr>\\n<tr>\\n<td>keyboardBitmapUri</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>Specifies the URI of an image file to be loaded to replace the default keyboard image drawn underneath the numeric keys and icons. Note that this image must be carefully designed so that the key positions match the default image. Template images for SD, HD and FHD resolutions are provided below.</td>\\n</tr>\\n<tr>\\n<td>pinDisplayBitmapUri</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>Specifed the URI of an image file to be loaded to replace the default box drawn underneath each entered digit in the pin display. This should be a 9-patch image so that it can be stretched to appropriate size depending on the pinLength field.</td>\\n</tr>\\n<tr>\\n<td>focusBitmapUri</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>Specifies the URI of an image file to be loaded to replace the keyboard focus indicator. This should be a 9-patch image so that it can be stretched to the appropriate size for the double width keys.</td>\\n</tr>\\n<tr>\\n<td>showPinDisplay</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>Specifies whether or not the pin display that shows the entered digits is visible. In most cases, it is desirable to display the entered digits so that the user can see the string as it is entered. In some cases though, you might want to only show the keyboard part of the PinPad node.<br /><br />In those cases, the pinfield of the node will still contain the string entered by the user, so that it can displayed in some different manner.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/list-and-grid-nodes/labellist.md":"{\n  \"content\": \"<h1 id=\\\"labellist\\\">LabelList</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/abstract-nodes/arraygrid.md\\\"><strong>ArrayGrid</strong></a></p>\\n<p>The LabelList node class is a simple list class that can be used to display a list of items. Each item can include a text string and an optional icon positioned to the left of the text string.</p>\\n<p>The list items can be organized into sections that are demarcated by labelled horizontal divider lines between the sections.</p>\\n<p>In most cases, you will want to populate the content of a LabelList (or other similar components like PosterGrids, etc.) from a content feed, web service API, or some other dynamic data source.  However, to illustrate the basics of how a LabelList is constructed and used, here is a simple example of creating a LabelList and populating it with static data.  Static data in a LabelList may be useful for channel screens such as settings or menus with fixed items.</p>\\n<p><strong>Static LabelList configuration</strong></p>\\n<pre><code>&#x3C;LabelList\\n  id = \\\"moviemenu\\\"\\n  translation = \\\"[160,92]\\\"\\n  itemSize = \\\"[440,48]\\\" >\\n\\n  &#x3C;ContentNode id = \\\"moviemenucontent\\\" role = \\\"content\\\" >\\n\\n    &#x3C;ContentNode title = \\\"Drama\\\" />\\n    &#x3C;ContentNode title = \\\"Action\\\" />\\n    &#x3C;ContentNode title = \\\"Horror\\\" />\\n    &#x3C;ContentNode title = \\\"Comedy\\\" />\\n\\n  &#x3C;/ContentNode>\\n\\n&#x3C;/LabelList>\\n</code></pre>\\n<p><strong>Example</strong></p>\\n<p>This code renders the LabelList shown below.  </p>\\n<p>In this screen shot, the user has scrolled down one item to highlight \\\"Drama\\\" showing the separator after the last list item.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/LabelList-example1.jpg\\\" alt=\\\"roku815px - LabelList-example1\\\" title=\\\"LabelList-example1\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>content</td>\\n<td>ContentNode</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the content for the list. See <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/labellist.md#data-bindings\\\">Data bindings</a> below for more details.<br />If the data contains section markers, section dividers will be drawn between each section. These section dividers may contain an icon and/or a string.</td>\\n</tr>\\n<tr>\\n<td>itemSize</td>\\n<td>vector2d</td>\\n<td>[0,0]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width and height of each item in the list</td>\\n</tr>\\n<tr>\\n<td>itemSpacing</td>\\n<td>vector2d</td>\\n<td>[0,0]</td>\\n<td>READ_WRITE</td>\\n<td>The second value of the vector specifies the vertical spacing between items in the list. The first value of the vector is ignored.</td>\\n</tr>\\n<tr>\\n<td>numRows</td>\\n<td>integer</td>\\n<td>12</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the number of visible rows displayed. The actual number of rows may be more or less than the number of visible rows specified depending on the number of items in the list content.</td>\\n</tr>\\n<tr>\\n<td>textHorizAlign</td>\\n<td>option string</td>\\n<td>left</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the horizontal alignment of the text in the list item area specified by the <code>itemSize</code> field value (the text is always centered vertically in the list item area). The possible options are:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>left</td>\\n<td>Text is left-aligned</td>\\n</tr>\\n<tr>\\n<td>right</td>\\n<td>Text is right-aligned</td>\\n</tr>\\n<tr>\\n<td>center</td>\\n<td>Text is center-aligned</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>color</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text color for unfocused list items</td>\\n</tr>\\n<tr>\\n<td>focusedColor</td>\\n<td>color</td>\\n<td>0x262626ff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text color for focused list items</td>\\n</tr>\\n<tr>\\n<td>font</td>\\n<td>font</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the font for unfocused list items</td>\\n</tr>\\n<tr>\\n<td>focusedFont</td>\\n<td>font</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the font for focused list items</td>\\n</tr>\\n<tr>\\n<td>drawFocusFeedback</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether or not the focus indicator bitmap is displayed</td>\\n</tr>\\n<tr>\\n<td>drawFocusFeedbackOnTop</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the focus indicator bitmap is drawn below or on top of the list items</td>\\n</tr>\\n<tr>\\n<td>vertFocusAnimationStyle</td>\\n<td>string</td>\\n<td>fixedFocusWrap</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the how the focus indicator moves in a list of items in response to the remote direction pad Up and Down key presses. The possible values are:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>fixedFocusWrap</td>\\n<td>Causes the focus indicator to float up or down until it reaches the end of the list, at which point the focus indicator will stay fixed on the first or last item in the list, and the items will scroll up or down if there are items that were not visible.</td>\\n</tr>\\n<tr>\\n<td>floatingFocus</td>\\n<td>Causes the list to wrap around when the focus indicator reaches the first or last item in the list, as long as the list contains enough items to fill the list. If the list does not contain enough items to fill the list, the focus indicator will float up and down.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>focusRow</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the row that will have fixed focus if the <code>vertFocusAnimationStyle</code> field value is set to <code>fixedFocusWrap</code>.</td>\\n</tr>\\n<tr>\\n<td>focusBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file used for the focus indicator when the list has focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>focusFootprintBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file used for the focus indicator when the list does not have focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>focusBitmapBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Blend the graphic image specified by <code>focusBitmapUri</code> with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by <code>focusBitmapUri.</code></td>\\n</tr>\\n<tr>\\n<td>focusFootprintBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Blend the graphic image specified by <code>focusFootprintBitmapUri</code> with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus footprint indicator graphic image with a different color than the image specified by <code>focusFootprintBitmapUri</code>.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file to use as a wrap divider, the visual separator between the last and first list items when the list wraps. In most cases, this should be a 9-patch image that specifies both expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerHeight</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the wrap divider, the visual separator between the last and first list items when the list wraps. The bitmap for the wrap divider is scaled to this height. The width of the wrap divider is set to the width of the list items as specified by the <code>itemSize</code> field width value.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>If the ContentNode specifies sections for a list or grid, specifies a custom bitmap to use as a visual divider between the sections of the list or grid. Only set this field to use a bitmap with a different appearance than the system default. For sections that do not include an icon or a title, the system default or custom bitmap specified as the <code>wrapDividerBitmapUri</code> field value is used for the section dividers. In most cases, you will want to use a 9-patch PNG bitmap with both expandable regions, which is the type of bitmap used as the system default.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerFont</td>\\n<td>font</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the font for section divider labels</td>\\n</tr>\\n<tr>\\n<td>sectionDividerTextColor</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text color for section divider labels</td>\\n</tr>\\n<tr>\\n<td>sectionDividerSpacing</td>\\n<td>float</td>\\n<td>10</td>\\n<td>READ_WRITE</td>\\n<td>If the ContentNode specifies sections for a list or grid, and the section dividers are specified to include an icon and/or a label, specifies the spacing between the icon, label, and section divider bitmap.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerHeight</td>\\n<td>float</td>\\n<td>40</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the section dividers. The width of the section dividers is determined by the width of the list items as specified by the itemSize field width value.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerMinWidth</td>\\n<td>float</td>\\n<td>117</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the minimum width of the section divider bitmap. The section divider label will be ellipsized if necessary in order to ensure that the section divider bitmap meets the minimum width.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerLeftOffset</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Number of pixels to offset the left edge of the section divider relative to the left edge of the list items.</td>\\n</tr>\\n<tr>\\n<td>itemSelected</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td><strong>Read-Only</strong><br />When a list item is selected, itemSelected is set to the index of the selected item.</td>\\n</tr>\\n<tr>\\n<td>itemFocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td><strong>Read-Only</strong><br />When a list item gains the key focus, set to the index of the focused item.</td>\\n</tr>\\n<tr>\\n<td>itemUnfocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td><strong>Read-Only</strong><br />When a list item loses the key focus, set to the index of the unfocused item.</td>\\n</tr>\\n<tr>\\n<td>jumpToItem</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td><strong>Write-Only</strong><br />When set to a valid item index, this causes the list to immediately update so that the specified index moves into the focus position.</td>\\n</tr>\\n<tr>\\n<td>animateToItem</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td><strong>Write-Only</strong><br />When set to a valid item index, this causes the list to quickly scroll so that the specified index moves into the focus position.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"data-bindings\\\">Data bindings</h2>\\n<p>The data model for the LabelList node should have a single ContentNode as the root node in its content field. The structure of the rest of the data model depends on whether or not the list items are to be grouped into sections.</p>\\n<p><strong>List Items Not Being Grouped Into Sections</strong></p>\\n<p>If the list items are not to be grouped into sections, one child ContentNode should be added to the root node for each item in the list (these child nodes can be thought of as <em>item nodes</em>). Item nodes should have their ContentNode attributes set as shown in the table below.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>TITLE</code></td>\\n<td>string</td>\\n<td>The label for the list item</td>\\n</tr>\\n<tr>\\n<td><code>HDLISTITEMICONURL</code></td>\\n<td>uri</td>\\n<td>The image file for the icon to be displayed to the left of the list item label when the list item is not focused</td>\\n</tr>\\n<tr>\\n<td><code>HDLISTITEMICONSELECTEDURL</code></td>\\n<td>uri</td>\\n<td>The image file for the icon to be displayed to the left of the list item label when the list item is focused</td>\\n</tr>\\n</tbody>\\n</table>\\n<p><strong>List Items Grouped into Sections</strong></p>\\n<p>If the list items are to be grouped into sections, one child ContentNode should be added to the root node for each section in the list (these child nodes can be thought of as <em>section roots</em>). Each section root should contain one child ContentNode for each item in the section (that is, item nodes). Each item ContentNode uses the same attributes as the item nodes when there are no sections, as shown in the table above.</p>\\n<p>The section root ContentNodes use the following attributes:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>CONTENTTYPE</code></td>\\n<td>string</td>\\n<td>Must be set to <code>SECTION</code></td>\\n</tr>\\n<tr>\\n<td><code>TITLE</code></td>\\n<td>string</td>\\n<td>Label for the section divider</td>\\n</tr>\\n<tr>\\n<td><code>HDGRIDPOSTERURL</code></td>\\n<td>uri</td>\\n<td>The image file for the icon to be displayed to the left of the section label when the screen resolution is set to HD.</td>\\n</tr>\\n<tr>\\n<td><code>SDGRIDPOSTERURL</code></td>\\n<td>uri</td>\\n<td>The image file for the icon to be displayed to the left of the section label when the screen resolution is set to SD.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids/LabelListExample\\\">LabelListExample</a> is a sample channel demonstrating LabelList in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/list-and-grid-nodes/markuplist.md":"{\n  \"content\": \"<h1 id=\\\"markuplist\\\">MarkupList</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/abstract-nodes/arraygrid.md\\\"><strong>ArrayGrid</strong></a></p>\\n<p>The MarkupList node class is a generic list class that can be used to display a list of items.</p>\\n<p>The contents of each list item is an instance of an XML component specified by the <code>itemComponentName</code> field value. An instance of the XML component is used to display the data for each item in the list data model. The appearance of the list item as it enters/exits the list focus position can be customized using BrightScript.  </p>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids\\\">SimpleMarkupList.zip</a> is a sample channel containing a MarkupList where each item is an instance of an XML component. See the <a href=\\\"#markuplist-xml-component\\\">MarkupList XML component</a> section for details.</p>\\n<p><strong>Example</strong></p>\\n<p>The following example displays the use of the MarkupList node.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/markuplist-node.png\\\" alt=\\\"roku815px - markuplist-node\\\" title=\\\"markuplist-node\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>itemComponentName</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the name of a XML component for the list items. An instance of this component is created on demand for each visible item of the list. The XML component must define a specific interface as detailed in <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/markuplist.md#MarkupList-XML-Component\\\">MarkupList XML component</a> below.</td>\\n</tr>\\n<tr>\\n<td>content</td>\\n<td>ContentNode</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the content for the list. See <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/markuplist.md#Data-Bindings\\\">Data bindings</a> below for more details.<br />If the data contains section markers, section dividers will be drawn between each section. These section dividers may contain an icon and/or a string.</td>\\n</tr>\\n<tr>\\n<td>itemSize</td>\\n<td>vector2d</td>\\n<td>[0,0]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width and height of each item in the list</td>\\n</tr>\\n<tr>\\n<td>itemSpacing</td>\\n<td>vector2d</td>\\n<td>[0,0]</td>\\n<td>READ_WRITE</td>\\n<td>The second value of the vector specifies the vertical spacing between items in the list. The first value of the vector is ignored.</td>\\n</tr>\\n<tr>\\n<td>numRows</td>\\n<td>integer</td>\\n<td>12</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the number of visible rows displayed. The actual number of rows may be more or less than the number of visible rows specified depending on the number of items in the list content.</td>\\n</tr>\\n<tr>\\n<td>drawFocusFeedback</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether or not the focus indicator bitmap is displayed</td>\\n</tr>\\n<tr>\\n<td>drawFocusFeedbackOnTop</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the focus indicator bitmap is drawn below or on top of the list items</td>\\n</tr>\\n<tr>\\n<td>focusBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file used for the focus indicator when the list has focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>focusFootprintBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file used for the focus indicator when the list does not have focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>focusBitmapBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Blend the graphic image specified by <code>focusBitmapUri</code> with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by <code>focusBitmapUri.</code></td>\\n</tr>\\n<tr>\\n<td>focusFootprintBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Blend the graphic image specified by <code>focusFootprintBitmapUri</code> with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus footprint indicator graphic image with a different color than the image specified by <code>focusFootprintBitmapUri</code>.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file to use as a wrap divider, the visual separator between the last and first list items when the list wraps. In most cases, this should be a 9-patch image that specifies both expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerHeight</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the wrap divider, the visual separator between the last and first list items when the list wraps. The bitmap for the wrap divider is scaled to this height. The width of the wrap divider is set to the width of the list items as specified by the <code>itemSize</code> field width value.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>If the ContentNode specifies sections for a list or grid, specifies a custom bitmap to use as a visual divider between the sections of the list or grid. Only set this field to use a bitmap with a different appearance than the system default. For sections that do not include an icon or a title, the system default or custom bitmap specified as the <code>wrapDividerBitmapUri</code> field value is used for the section dividers. In most cases, you will want to use a 9-patch PNG bitmap with both expandable regions, which is the type of bitmap used as the system default.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerFont</td>\\n<td>font</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the font for section divider labels</td>\\n</tr>\\n<tr>\\n<td>sectionDividerTextColor</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text color for section divider labels</td>\\n</tr>\\n<tr>\\n<td>sectionDividerSpacing</td>\\n<td>float</td>\\n<td>10</td>\\n<td>READ_WRITE</td>\\n<td>If the ContentNode specifies sections for a list or grid, and the section dividers are specified to include an icon and/or a label, specifies the spacing between the icon, label, and section divider bitmap.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerHeight</td>\\n<td>float</td>\\n<td>40</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the section dividers. The width of the section dividers is determined by the width of the list items as specified by the itemSize field width value.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerMinWidth</td>\\n<td>float</td>\\n<td>117</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the minimum width of the section divider bitmap. The section divider label will be ellipsized if necessary in order to ensure that the section divider bitmap meets the minimum width.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerLeftOffset</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Number of pixels to offset the left edge of the section divider relative to the left edge of the list items.</td>\\n</tr>\\n<tr>\\n<td>itemSelected</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a list item is selected, itemSelected is set to the index of the selected item.</td>\\n</tr>\\n<tr>\\n<td>itemFocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a list item gains the key focus, set to the index of the focused item.</td>\\n</tr>\\n<tr>\\n<td>itemUnfocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a list item loses the key focus, set to the index of the unfocused item.</td>\\n</tr>\\n<tr>\\n<td>jumpToItem</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid item index, this causes the list to immediately update so that the specified index moves into the focus position.</td>\\n</tr>\\n<tr>\\n<td>animateToItem</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid item index, this causes the list to quickly scroll so that the specified index moves into the focus position.</td>\\n</tr>\\n<tr>\\n<td>itemClippingRect</td>\\n<td>rect2d</td>\\n<td>[ 0.0, 0.0, 0.0, 0.0 ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a clipping region for the list or grid items</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"markuplist-xml-component\\\">MarkupList XML Component</h3>\\n<p>The <strong>MarkupList</strong> node <code>itemComponentName</code> field value should be set to the name of an XML component used to display each item in the list. An instance of this component is created for each visible item in the list.</p>\\n<p>If the XML component contains interface fields that match the names shown in the table below, those fields will be updated by the <strong>MarkupList</strong> node. This allows the XML component to alter the item appearance based on changes to these interface fields.</p>\\n<p>Note that the fields are updated in the order presented in the table below. Any layout scripting you write based on these fields should be done in that order to avoid updating your layout based on a field that has not been updated yet.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field Name</th>\\n<th>Field Type</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>Set to the width of the list item.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>Set to the height of the list item</td>\\n</tr>\\n<tr>\\n<td>index</td>\\n<td>integer</td>\\n<td>READ_ONLY</td>\\n<td>Set to the index of this item in the data model.</td>\\n</tr>\\n<tr>\\n<td>listHasFocus</td>\\n<td>Boolean</td>\\n<td>READ_ONLY</td>\\n<td>Set to true if the <strong>MarkupList</strong> node has focus, false otherwise.</td>\\n</tr>\\n<tr>\\n<td>itemContent</td>\\n<td><strong>ContentNode</strong></td>\\n<td>READ_WRITE</td>\\n<td>Contains the data to be displayed by the list item. The relationship between data in the <strong>ContentNode</strong> node and the visual elements of the list item is determined by the scripts in the item XML component. Typically, an observer of the <code>itemContent</code> field is used to update the list item when the content changes.</td>\\n</tr>\\n<tr>\\n<td>focusPercent</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>The fractional value, from 0.0 to 1.0, of a time delay after focus has moved from one item to the next. The fractional value increases incrementally from 0.0 to 1.0 for the newly-focused item, while simultaneously decreasing from 1.0 to 0.0 for the previously-focused item. This value can be used as a timing key to smoothly animate the appearance of the focused item as well as the previously-focused item, to indicate the movement of focus to the user.</td>\\n</tr>\\n<tr>\\n<td>itemHasFocus</td>\\n<td>Boolean</td>\\n<td>READ_ONLY</td>\\n<td>Indicates whether the item component currently is the MarkupList's focused item. When scrolling starts, the itemHasFocus field for the currently focused item is set to false. When scrolling ends, the itemHasFocus field for the newly focused item is set to true. During the scrolling animation, all itemHasFocus fields are set to false.Only one item component of any MarkupList should have itemHasFocus set to true. If the MarkupList does not focus, all itemHasFocus fields of their item components should be set to false.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"example-markuplist-xml-component\\\">Example MarkupList XML Component</h3>\\n<p>The following shows an example <strong>MarkupList</strong> node XML component. The XML markup defines a component named <code>SimpleListItem</code> that displays a poster as an icon, and two labels on the right for each list item. The labels are arranged vertically, with the top label having a larger font than the bottom one.</p>\\n<p>To use this component, set the value of the <code>itemComponentName</code> field of a <strong>MarkupList</strong> node to <code>SimpleListItem</code>.</p>\\n<p>Note that the <code>index</code> interface field is not used by the component, so it is not included in the component interface.</p>\\n<p>Also note how the <code>focusPercent</code> interface field has an <code>onChange</code> function defined that changes the color of the label text as the item enters/leaves the focus region of the list.</p>\\n<p><strong>Markup List XML Component Example</strong></p>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;component name=\\\"SimpleListItem\\\" extends=\\\"Group\\\">\\n\\n&#x3C;interface> \\n  &#x3C;field id=\\\"width\\\" type=\\\"float\\\" onChange=\\\"widthChanged\\\"/> \\n  &#x3C;field id=\\\"height\\\" type=\\\"float\\\" onChange=\\\"heightChanged\\\"/> \\n  &#x3C;field id=\\\"itemContent\\\" type=\\\"node\\\" onChange=\\\"itemContentChanged\\\"/> \\n  &#x3C;field id=\\\"focusPercent\\\" type=\\\"float\\\" onChange=\\\"focusPercentChanged\\\"/> \\n  &#x3C;field id=\\\"listHasFocus\\\" type=\\\"bool\\\" onChange=\\\"focusPercentChanged\\\"/> \\n&#x3C;/interface>\\n\\n&#x3C;script type=\\\"text/brightscript\\\" >\\n&#x3C;![CDATA[ \\n  function itemContentChanged() \\n    m.itemImage.uri = m.top.itemContent.HDPOSTERURL\\n    m.itemText.text = m.top.itemContent.TITLE\\n    m.itemArtist.text = m.top.itemContent.ARTISTS[0] \\n    updateLayout()\\n  end function\\n\\n  function widthChanged() \\n    updateLayout()\\n  end function\\n\\n  function heightChanged() \\n    updateLayout()\\n  end function\\n\\n  function focusPercentChanged() \\n    if m.top.listHasFocus and m.top.focusPercent > 0.5 \\n      m.itemText.color = \\\"0x000000FF\\\" \\n    else \\n      m.itemText.color = \\\"0xFFFFFFFF\\\" \\n    end if \\n    m.itemArtist.color = m.itemText.color\\n  end function\\n\\n  function updateLayout() \\n    if m.top.height > 0 and m.top.width > 0 \\n      posterSize = m.top.height\\n      m.itemImage.width = m.top.height - 20 ' make the posters square \\n      m.itemImage.height = m.top.height - 20\\n      m.itemText.width = m.top.width - m.itemImage.width - 20 \\n      m.itemArtist.width = m.top.width - m.itemImage.width - 20 \\n    end if\\n  end function\\n\\n  function init() \\n    m.itemText = m.top.findNode(\\\"itemText\\\") \\n    m.itemArtist = m.top.findNode(\\\"itemArtist\\\") \\n    m.itemImage = m.top.findNode(\\\"itemImage\\\")\\n    m.playIcon = m.top.findNode(\\\"playIcon\\\")\\n  end function\\n]]>\\n&#x3C;/script>\\n\\n&#x3C;children>\\n\\n&#x3C;LayoutGroup layoutDirection=\\\"horizontal\\\" vertAlignment=\\\"center\\\" itemSpacings=\\\"20\\\" translation=\\\"[0,34]\\\" > \\n  &#x3C;Poster id=\\\"itemImage\\\" /> \\n  &#x3C;LayoutGroup layoutDirection=\\\"vertical\\\" horizAlignment=\\\"left\\\" itemSpacings=\\\"0\\\" > \\n     &#x3C;Label id=\\\"itemText\\\" font=\\\"theme:MediumSystemFont\\\" /> \\n     &#x3C;Label id=\\\"itemArtist\\\" font=\\\"theme:SmallestSystemFont\\\" /> \\n   &#x3C;/LayoutGroup>\\n&#x3C;/LayoutGroup>\\n\\n&#x3C;/children>\\n&#x3C;/component>\\n</code></pre>\\n<h3 id=\\\"data-bindings\\\">Data Bindings</h3>\\n<p>A <strong>MarkupList</strong> node should have a single <strong>ContentNode</strong> node as the root node in its content field. The structure of the rest of the data model depends on whether or not the list items are to be grouped into sections.</p>\\n<h4 id=\\\"list-items-not-grouped-into-sections\\\">List Items Not Grouped Into Sections</h4>\\n<p>If the list items are not to be grouped into sections, one child <strong>ContentNode</strong> node should be added to the root node for each item in the list (these child nodes can be thought of as <em>item nodes</em>). Item nodes should contain the data required by the <strong>MarkupList</strong> node XML component.</p>\\n<h4 id=\\\"list-items-grouped-into-sections\\\">List Items Grouped Into Sections</h4>\\n<p>If the list items are to be grouped into sections, one child <strong>ContentNode</strong> node should be added to the root node for each section in the list (these child nodes can be thought of as <em>section roots</em>). Each section root should contain one child <strong>ContentNode</strong> node for each item in the section (that is, item nodes). The item nodes should contain the data required by the <strong>MarkupList</strong> node XML component.</p>\\n<p>The section root <strong>ContentNode</strong> nodes use the following attributes:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>CONTENTTYPE</td>\\n<td>string</td>\\n<td>Must be set to <code>SECTION</code></td>\\n</tr>\\n<tr>\\n<td>TITLE</td>\\n<td>string</td>\\n<td>Label for the section divider</td>\\n</tr>\\n<tr>\\n<td>HDGRIDPOSTERURL</td>\\n<td>uri</td>\\n<td>The image file for the icon to be displayed to the left of the section label when the screen resolution is set to HD.</td>\\n</tr>\\n<tr>\\n<td>SDGRIDPOSTERURL</td>\\n<td>uri</td>\\n<td>The image file for the icon to be displayed to the left of the section label when the screen resolution is set to SD.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids/MarkupListExample\\\">MarkupListExample</a> is a sample channel demonstrating MarkupList in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/list-and-grid-nodes/postergrid.md":"{\n  \"content\": \"<h1 id=\\\"postergrid\\\">PosterGrid</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/abstract-nodes/arraygrid.md\\\"><strong>ArrayGrid</strong></a></p>\\n<p>The PosterGrid node is a simple grid class that can be used to display two-dimensional grids of posters. In addition to the poster, each item in the grid can include up to two lines of captions.</p>\\n<p>The number of columns in the PosterGrid is fixed and the number of rows varies. The items in the grid fill each row from left to right, then top to bottom in the following order:</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/Presentation1.png\\\" alt=\\\"roku815px - Presentation1\\\" title=\\\"Presentation1\\\"></p>\\n<p>The layout of rows and columns in the grid is very flexible. Possible layouts include:</p>\\n<ul>\\n<li>a simple layout with all posters in the grid having the same size</li>\\n<li>a layout with the posters in some rows having varying heights and/or the posters in some columns having varying widths</li>\\n<li>a layout with varying width rows and columns and items that occupy one or more rows and columns</li>\\n</ul>\\n<p>The grid items can be organized into sections that are demarcated by labelled horizontal divider lines between the sections.</p>\\n<p>The PosterGrid node class includes the capability to automatically scale the loaded graphical images to fit within the target screen element area specified by the <code>basePosterSize</code> field value. To use this capability, select the scaling option you want as the value of the <code>posterDisplayMode</code> field.</p>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p>The following screenshot is an example of the PosterGrid layout.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/PosterGrid.png\\\" alt=\\\"roku815px - PosterGrid\\\" title=\\\"PosterGrid\\\"></p>\\n<h2 id=\\\"grid-layouts\\\">Grid Layouts</h2>\\n<p>The PosterGrid class supports very flexible layouts. The philosophy is that simple layouts are easy to produce and complicated layouts are possible.</p>\\n<p>There are three general categories of layouts.</p>\\n<ol>\\n<li>\\n<p>Simple layouts with all grid items and spacings between items equal.To specify a simple layout:Set the <code>basePosterSize</code> field to the width and height of each of the images in the grid and set the <code>itemSpacing</code> field to spacing between posters. For example, if basePosterSize is [300,100] and itemSpacing is [4, 8], then the posters will be 300 pixels wide and 100 pixels tall. There will be 4 pixels between the columns of the grid and 8 pixels between rows of the grid.</p>\\n</li>\\n<li>\\n<p>All the items are aligned in rows and columns, but the rows and columns (or the spacing between them) varies. To specify this type of layout, use the columnWidths, columnSpacings, rowHeights, and rowSpacings fields. Each of these fields takes an array of values, specifying the values for each row width, column height or spacing between rows and columns. If there are more rows or columns in the grid than specified in the arrays for these fields., the corresponding simple layout field values are used for the missing values (e.g. basePosterSize[0] for missing columnWidth, etc.)For example, suppose a grid is designed with 4 columns where each item was 80 pixels wide and had 4 pixels space between them. The grid data includes 10 rows, where the first 4 rows have items that are 120 pixel tall and the remaining 6 rows have items are 80 pixels tall. All the rows should have 6 pixels of space between them. To specify this layout, you'd set up the fields like this:</p>\\n</li>\\n</ol>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Example</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>basePosterSize</td>\\n<td>[ 80, 80 ]</td>\\n</tr>\\n<tr>\\n<td>itemSpacings</td>\\n<td>[ 4, 6 ]</td>\\n</tr>\\n<tr>\\n<td>rowHeights</td>\\n<td>[ 120, 120, 120, 120, 80, 80, 80, 80, 80, 80 ]</td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>Since the final 6 values in the rowHeights array equal basePosterSize[1], you can omit them, so in this case setting the rowHeights field to [ 120, 120, 120, 120 ]  would have the same result.</p>\\n</blockquote>\\n<ol start=\\\"3\\\">\\n<li>There are clear alignments in the row/column layout, but some items can span more than one one row or column (plus the space in between).To specify this type of layout, set up the fields as in case 1 or 2 to define the sizes of the rows/columns. If any of the grid items will occupy more than one row or column, then the metadata for each grid item must contain extra metadata specifying the starting row, starting column, numbers of rows and number of columns that the item occupies. In addition, the fixedLayout field must be set to true. For example, if a grid item is supposed to span columns 2 and 3 and rows 3 through 6, then in addition to the URL for the poster, the metadata for that item would include (X = 2, Y = 3, W = 2, H = 4). W is set to 2 because the item is 2 columns wide. Similarly H is set to 4 because the item is 4 columns tall.The total pixel width of the item would be the (width of column 2) + (spacing between columns 2 &#x26; 3) + (width of column 3). Similarly, the height of the item would be the sum of the heights of columns 3, 4, 5 and 6, plus the spacings between columns 3 &#x26; 4, 4 &#x26; 5 and 5 &#x26; 6.The X and Y indices start from 0 (i.e. the first columns is X = 0).</li>\\n</ol>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>content</td>\\n<td>ContentNode</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the content for the list. See <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/markuplist.md#data-bindings\\\">Data bindings</a> below for more details.<br />If the data contains section markers, section dividers will be drawn between each section. These section dividers may contain an icon and/or a string.</td>\\n</tr>\\n<tr>\\n<td>basePosterSize</td>\\n<td>vector2d</td>\\n<td>[0,0]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width and height of the posters in the grid.</td>\\n</tr>\\n<tr>\\n<td>useAtlas</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Enables a performance optimization when most of the poster items displayed in the grid have the same size. The field value toggles the use of a texture atlas that stores the posters in the grid. The default is true, since in many cases, most of the posters in the grid have the same size as determined by the <code>basePosterSize</code> field value. In this case, using the texture atlas can provide a rendering performance benefit. For grids that have more complicated layouts, that include several posters that have sizes that differ from the value of <code>basePosterSize</code>, or for grids where there are only a few large posters (about five to eight, or posters that are about a quarter of the screen height or width) displayed at the same time, it is best for this field to be set to <code>false</code>.</td>\\n</tr>\\n<tr>\\n<td>posterDisplayMode</td>\\n<td>option string</td>\\n<td>noScale</td>\\n<td>READ_WRITE</td>\\n<td>Provides automatic scaling of posters, if <code>useAtlas</code> is set to false. If you intend to load very large graphical images, such as larger than the user interface resolution, you must set one of the scaling options other than <code>noScale</code>, otherwise the image may fail to load. The following are the possible field values:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>noScale</td>\\n<td>No scaling</td>\\n</tr>\\n<tr>\\n<td>scaleToFit</td>\\n<td>Scale the image to fit into the target screen element area, preserving the aspect ratio but \\\"letterboxing\\\" or \\\"pillarboxing\\\" the image (background-color bars at the top/bottom or left/right of the image)</td>\\n</tr>\\n<tr>\\n<td>scaleToFill</td>\\n<td>Stretch the image width and height dimensions to fill the target screen element area, distorting the image if the target screen element area has a different aspect ratio than the image</td>\\n</tr>\\n<tr>\\n<td>scaleToZoom</td>\\n<td>Scale the image to fill the target screen element area, preserving the aspect ratio but not \\\"letterboxing\\\" or \\\"pillarboxing\\\" the image, with some of the image cropped out</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>itemSpacing</td>\\n<td>vector2d</td>\\n<td>[0,0]</td>\\n<td>READ_WRITE</td>\\n<td>The second value of the vector specifies the vertical spacing between items in the list. The first value of the vector is ignored.</td>\\n</tr>\\n<tr>\\n<td>numColumns</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the number of columns in the grid</td>\\n</tr>\\n<tr>\\n<td>numRows</td>\\n<td>integer</td>\\n<td>12</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the number of visible rows displayed. The actual number of rows may be more or less than the number of visible rows specified depending on the number of items in the list content.</td>\\n</tr>\\n<tr>\\n<td>rowHeights</td>\\n<td>array of floats</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>When specified, the rowHeights field specifies the heights of the poster for each row of the grid. This allows the height of each row of the grid to vary from row to row.<br /><br />The rowHeights values override the height specified in element 1 of the basePosterSize field. If the rowHeights array contains fewer elements than the number of rows needed to display all the items in the grid, element 1 of the basePosterSize field is used as the height of the excess rows.</td>\\n</tr>\\n<tr>\\n<td>columnWidths</td>\\n<td>array of floats</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>When specified, the columnWidths field specifies the widths of the poster for each column of the grid. This allows the width of each column of the grid to vary from column to column.<br /><br />The columnWidths values override the width specified in element 0 of the basePosterSize field. If the columnWidths array contains fewer elements than the number of columns specified by the numColumns field, element 0 of the basePosterSize field is used as the width of the excess columns.</td>\\n</tr>\\n<tr>\\n<td>rowSpacings</td>\\n<td>array of floats</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>When specified, the rowSpacings field specifies the spacing after each row of the grid. This allows the spacing between rows to vary from row to row.<br /><br />The rowSpacings values override the vertical spacing specified in element 1 of the itemSpacing field. If the rowSpacings array contains fewer elements than the number of rows needed to display all the items in the grid, element 1 of the itemSpacing field is used as the spacing after the excess rows.</td>\\n</tr>\\n<tr>\\n<td>columnSpacings</td>\\n<td>array of floats</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>When specified, the columnSpacings field specifies the spacing after each column of the grid. This allows the spacing between columns to vary from column to column.<br /><br />The columnSpacings values override the horizontal spacing specified in element 0 of the itemSpacing field. If the columnSpacings array contains fewer elements than the number of columns specified by the numColumns field, element 0 of the itemSpacing field is used as the spacing after the excess columns.</td>\\n</tr>\\n<tr>\\n<td>fixedLayout</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>When fixedLayout is false, the PosterGrid assigns each item in the data model to sequential cells in the grid (or the section if the data model includes section information). When fixedLayout is false, the data models using the X, Y, W and H attributes to specify which cells of the grid each item should occupy, where X is the column number, Y is the row number, W is the number of columns the item occupies and H is the number of rows the item occupies.<br /><br />Fixed layout should only be set to true for cases where one or more items in the grid should span multiple rows or columns.</td>\\n</tr>\\n<tr>\\n<td>imageWellBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file to use to suggest where images would appear for empty grids and empty sections of grids. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>loadingBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies a bitmap file to display while a grid item's poster is loading.<br /><br />To execute a seamless cross-fade transition between posters, set the <strong>loadingBitmapUri</strong> of the next poster to be shown to the uri of the currently displayed poster.</td>\\n</tr>\\n<tr>\\n<td>loadingBitmapOpacity</td>\\n<td>float</td>\\n<td>1.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies an opacity value used to render the loading bitmap</td>\\n</tr>\\n<tr>\\n<td>failedBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies a bitmap file to display when a grid item poster fails to load</td>\\n</tr>\\n<tr>\\n<td>failedBitmapOpacity</td>\\n<td>float</td>\\n<td>1.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies an opacity value used to render the failed bitmap</td>\\n</tr>\\n<tr>\\n<td>caption1Font</td>\\n<td>font</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the font for the grid item first caption</td>\\n</tr>\\n<tr>\\n<td>caption1Color</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color for the grid item first caption</td>\\n</tr>\\n<tr>\\n<td>caption1NumLines</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the number of lines to render for the grid item first caption</td>\\n</tr>\\n<tr>\\n<td>caption2Font</td>\\n<td>font</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the font for the grid item second caption</td>\\n</tr>\\n<tr>\\n<td>caption2Color</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color for the grid item second caption</td>\\n</tr>\\n<tr>\\n<td>caption2NumLines</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the number of lines to render for the grid item second caption</td>\\n</tr>\\n<tr>\\n<td>captionBackgroundBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies a bitmap file to render as a background for the grid item captions</td>\\n</tr>\\n<tr>\\n<td>captionHorizAlignment</td>\\n<td>string</td>\\n<td>center</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the horizontal positioning of the grid item captions. Possible values are:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>left</td>\\n<td>Left-justify the caption relative to the grid item poster</td>\\n</tr>\\n<tr>\\n<td>center</td>\\n<td>Center-justify the caption relative to the grid item poster</td>\\n</tr>\\n<tr>\\n<td>right</td>\\n<td>Right-justify the caption relative to the grid item poster</td>\\n</tr>\\n</tbody>\\n</table><br /><br />Set enableCaptionScrolling to false to use captionHorizAlignment</td>\\n</tr>\\n<tr>\\n<td>captionVertAlignment</td>\\n<td>string</td>\\n<td>below</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the vertical positioning of the grid item captions. Possible values are:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>above</td>\\n<td>Position the caption so the bottom of the caption lies just above the grid item poster</td>\\n</tr>\\n<tr>\\n<td>top</td>\\n<td>Align the top of the caption with the top edge of the grid item poster</td>\\n</tr>\\n<tr>\\n<td>center</td>\\n<td>Align the vertical center of the caption with the vertical center of the of the grid item poster</td>\\n</tr>\\n<tr>\\n<td>bottom</td>\\n<td>Align the bottom of the caption with the bottom edge of the grid item poster</td>\\n</tr>\\n<tr>\\n<td>below</td>\\n<td>Position the caption so the top of the caption lies just below the grid item poster</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>captionLineSpacing</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the spacing in pixels between lines of the caption</td>\\n</tr>\\n<tr>\\n<td>showBackgroundForEmptyCaptions</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>If a caption background is specified, this field specifies whether or not to display the caption background when the caption text is empty</td>\\n</tr>\\n<tr>\\n<td>enableCaptionScrolling</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether or not to scroll single line captions when it is necessary to ellipsize the caption because it is wider the column containing the grid item</td>\\n</tr>\\n<tr>\\n<td>drawFocusFeedback</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether or not the focus indicator bitmap is displayed</td>\\n</tr>\\n<tr>\\n<td>drawFocusFeedbackOnTop</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the focus indicator bitmap is drawn below or on top of the list items</td>\\n</tr>\\n<tr>\\n<td>focusBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file used for the focus indicator when the list has focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>focusFootprintBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file used for the focus indicator when the list does not have focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>focusBitmapBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Blend the graphic image specified by <code>focusBitmapUri</code> with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by <code>focusBitmapUri.</code></td>\\n</tr>\\n<tr>\\n<td>focusFootprintBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Blend the graphic image specified by <code>focusFootprintBitmapUri</code> with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus footprint indicator graphic image with a different color than the image specified by <code>focusFootprintBitmapUri</code>.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerBitmapUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file to use as a visual separator between the last and first list items when the list wraps. In most case, this should be a 9-patch image that specifies both expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerHeight</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the wrap divider, the visual separator between the last and first list items when the list wraps. The bitmap for the wrap divider is scaled to this height. The width of the wrap divider is set to the width of the list items as specified by the <code>itemSize</code> field width value.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>If the ContentNode specifies sections for a list or grid, specifies a custom bitmap to use as a visual divider between the sections of the list or grid. Only set this field to use a bitmap with a different appearance than the system default. For sections that do not include an icon or a title, the system default or custom bitmap specified as the <code>wrapDividerBitmapUri</code> field value is used for the section dividers. In most cases, you will want to use a 9-patch PNG bitmap with both expandable regions, which is the type of bitmap used as the system default.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerFont</td>\\n<td>font</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the font for section divider labels</td>\\n</tr>\\n<tr>\\n<td>sectionDividerTextColor</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text color for section divider labels</td>\\n</tr>\\n<tr>\\n<td>sectionDividerSpacing</td>\\n<td>float</td>\\n<td>10</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the spacing between the items appearing in the section divider (e.g. the spacing between the section divider icon, the section divider label, and the section divider bitmap). Note the section divider does not always include an icon and/or a title.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerHeight</td>\\n<td>float</td>\\n<td>40</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the section dividers. The width of the section dividers is determined by the width of the list items as specified by the itemSize field width value.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerMinWidth</td>\\n<td>float</td>\\n<td>117</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the minimum width of the section divider bitmap. The section divider label will be ellipsized if necessary in order to ensure that the section divider bitmap meets the minimum width.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerLeftOffset</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Number of pixels to offset the left edge of the section divider relative to the left edge of the list items.</td>\\n</tr>\\n<tr>\\n<td>itemSelected</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a list item is selected, itemSelected is set to the index of the selected item.</td>\\n</tr>\\n<tr>\\n<td>itemFocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a list item gains the key focus, set to the index of the focused item.</td>\\n</tr>\\n<tr>\\n<td>itemUnfocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a list item loses the key focus, set to the index of the unfocused item.</td>\\n</tr>\\n<tr>\\n<td>jumpToItem</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid item index, this causes the list to immediately update so that the specified index moves into the focus position.</td>\\n</tr>\\n<tr>\\n<td>animateToItem</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid item index, this causes the list to quickly scroll so that the specified index moves into the focus position.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"data-bindings\\\">Data bindings</h2>\\n<p>A PosterGrid node should have a single ContentNode as the root node in its content field to supply the required data. The structure of the rest of the data model depends on whether or not the grid items are to be grouped into sections.</p>\\n<p><strong>List items not grouped into sections</strong></p>\\n<p>If the grid items are not to be grouped into sections, one child ContentNode should be added to the root node for each item in the grid (these child nodes can be thought of as <em>item nodes</em>). Item nodes should have their ContentNode attributes set as shown in the table below.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>HDGRIDPOSTERURL / HDPOSTERURL</td>\\n<td>uri</td>\\n<td>The image file for the item poster when the screen resolution is set to HD. HDGRIDPOSTERURL is used if non-empty. HDPOSTERURL is used otherwise.</td>\\n</tr>\\n<tr>\\n<td>SDGRIDPOSTERURL / SDPOSTERURL</td>\\n<td>uri</td>\\n<td>The image file for the item poster when the screen resolution is set to SD. SDGRIDPOSTERURL is used if non-empty. SDPOSTERURL is used otherwise.</td>\\n</tr>\\n<tr>\\n<td>SHORTDESCRIPTIONLINE1</td>\\n<td>string</td>\\n<td>The text for the first grid item caption.</td>\\n</tr>\\n<tr>\\n<td>SHORTDESCRIPTIONLINE2</td>\\n<td>string</td>\\n<td>The text for the second grid item caption.</td>\\n</tr>\\n<tr>\\n<td>X</td>\\n<td>integer</td>\\n<td>When the fixedLayout field is set to true, this specifies the first row of the grid occupied by this item, where 0 refers to the first row. Note that there can be more rows in the data than visible rows, where the number of visible rows is specified by the numRows field.<br /><br />For example, if the data model contains enough data to fill 12 rows, X would be set to a value from 0 to 11.</td>\\n</tr>\\n<tr>\\n<td>Y</td>\\n<td>integer</td>\\n<td>When the fixedLayout field is set to true, this specifies the first column of the grid occupied by this item, where 0 refers to the first column. Note that the number of columns is always specified by the numColumns field, regardless of how many items are in the data model.<br /><br />For example, if the numColumns field is set to 3, Y would be set to 0, 1 or 2.</td>\\n</tr>\\n<tr>\\n<td>W</td>\\n<td>integer</td>\\n<td>When the fixedLayout field is set to true, this specifies how many columns the grid item occupies. If not specified, the default value of 1 is used.<br /><br />For example, if the numColumns field were set to 3 and a grid item is to occupy the rightmost two columns, X would be set to 1 and W would be set to 2.</td>\\n</tr>\\n<tr>\\n<td>H</td>\\n<td>integer</td>\\n<td>When the fixedLayout field is set to true, this specifies how many rows the grid item occupies. If not specified, the default value of 1 is used.<br /><br />For example, if a grid item is to occupy the the third, fourth and fifth rows, Y would be set to 2 and W would be set to 3.</td>\\n</tr>\\n</tbody>\\n</table>\\n<p><strong>List items grouped into sections</strong></p>\\n<p>If the grid items are to be grouped into sections, one child ContentNode should be added to the root node for each section in the grid (these child nodes can be thought of as <em>section roots</em>). Each section root should contain one child ContentNode for each item in the section (that is, <em>item nodes</em>). Each item ContentNode uses the same attributes as the item nodes when there are no sections, as shown in the table above.</p>\\n<p>The section root ContentNodes use the following attributes:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>CONTENTTYPE</td>\\n<td>string</td>\\n<td>Must be set to <code>SECTION</code></td>\\n</tr>\\n<tr>\\n<td>TITLE</td>\\n<td>string</td>\\n<td>Label for the section divider</td>\\n</tr>\\n<tr>\\n<td>HDGRIDPOSTERURL</td>\\n<td>uri</td>\\n<td>The image file for the icon to be displayed to the left of the section label when the screen resolution is set to HD.</td>\\n</tr>\\n<tr>\\n<td>SDGRIDPOSTERURL</td>\\n<td>uri</td>\\n<td>The image file for the icon to be displayed to the left of the section label when the screen resolution is set to SD.</td>\\n</tr>\\n<tr>\\n<td>GRIDCAPTION1NUMLINES</td>\\n<td>integer</td>\\n<td>Overrides the <code>caption1NumLines</code> field for this section of the grid, allowing different sections to display different caption layouts. If not specified, the value of the <code>caption1NumLines</code> field is used.</td>\\n</tr>\\n<tr>\\n<td>GRIDCAPTION2NUMLINES</td>\\n<td>integer</td>\\n<td>Overrides the <code>caption2NumLines</code> field for this section of the grid, allowing different sections to display different caption layouts. If not specified, the value of the <code>caption2NumLines</code> field is used.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"example-1\\\">Example</h2>\\n<p>The following creates a grid of posters with two captions below each poster graphical image.</p>\\n<p><strong>PosterGrid Node class example</strong></p>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;!--********** Copyright 2015 Roku Corp.  All Rights Reserved. **********-->\\n\\n&#x3C;component   name=\\\"postergridtest\\\"   extends=\\\"Group\\\"   initialFocus=\\\"testPosterGrid\\\" >\\n\\n&#x3C;script type=\\\"text/brightscript\\\" >\\n&#x3C;![CDATA[\\nsub init()\\n  m.testlabel = m.top.FindNode(\\\"testLabel\\\")\\n  m.testpostergrid = m.top.FindNode(\\\"testPosterGrid\\\")\\n  m.testpostergridcontent = createObject(\\\"roSGNode\\\",\\\"ContentNode\\\")\\n  m.readPosterGridTask = createObject(\\\"roSGNode\\\",\\\"postergridCR\\\")\\n  m.readPosterGridTask.setField(\\\"postergriduri\\\",\\\"pkg:/server/postergrid.xml\\\")\\n  m.readPosterGridTask.observeField(\\\"gotitem\\\",\\\"buildpostergrid\\\")\\n  m.readPosterGridTask.observeField(\\\"gotcontent\\\",\\\"showpostergrid\\\")\\n  m.readPosterGridTask.control = \\\"RUN\\\"\\n  m.top.setFocus(true)\\nend sub\\n\\nsub buildpostergrid()\\n  gridposter = createObject(\\\"roSGNode\\\",\\\"ContentNode\\\")\\n  gridposter.hdgridposterurl = m.readPosterGridTask.hdgridposterurl\\n  gridposter.hdposterurl = m.readPosterGridTask.hdposterurl\\n  gridposter.sdgridposterurl = m.readPosterGridTask.sdgridposterurl\\n  gridposter.sdposterurl = m.readPosterGridTask.sdposterurl\\n  gridposter.shortdescriptionline1 = m.readPosterGridTask.shortdescriptionline1\\n  gridposter.shortdescriptionline2 = m.readPosterGridTask.shortdescriptionline2\\n  gridposter.x = m.readPosterGridTask.xposterpos\\n  gridposter.y = m.readPosterGridTask.yposterpos\\n  gridposter.w = m.readPosterGridTask.wnumcols\\n  gridposter.h = m.readPosterGridTask.hnumrows\\n  m.testpostergridcontent.appendChild(gridposter)\\nend sub\\n\\nsub showpostergrid()\\n  m.testlabel.text = \\\"Here's the PosterGrid: \\\"\\n  m.testpostergrid.content=m.testpostergridcontent\\n  m.testpostergrid.visible=true\\n  m.testpostergrid.setFocus(true)\\nend sub\\n]]>\\n&#x3C;/script>\\n\\n&#x3C;children>\\n\\n&#x3C;Label\\n  id=\\\"testLabel\\\"\\n  translation=\\\"[100,32]\\\"\\n  text=\\\"Building PosterGrid... \\\"\\n  />\\n\\n&#x3C;PosterGrid\\n  id=\\\"testPosterGrid\\\"\\n  translation=\\\"[100,100]\\\"\\n  basePosterSize=\\\"[240,240]\\\"\\n  itemSpacing=\\\"[32,32]\\\"\\n  caption1NumLines=\\\"1\\\"\\n  caption2NumLines=\\\"1\\\"\\n  numColumns=\\\"4\\\"\\n  numRows=\\\"3\\\"\\n  />\\n\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids/PosterGridExample\\\">PosterGridExample</a> is a sample channel demonstrating PosterGrid in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/list-and-grid-nodes/markupgrid.md":"{\n  \"content\": \"<h1 id=\\\"markupgrid\\\">MarkupGrid</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/abstract-nodes/arraygrid.md\\\"><strong>ArrayGrid</strong></a></p>\\n<p>The MarkupGrid node class is a  is a generic grid class that can be used to display a set of items arranged into a 2D grid. The contents of each grid item is an instance of an XML component specified by the <code>itemComponentName</code> field. An instance of the XML component is used to display the data for each item in the grid data model. The appearance of the grid item as it enters/exits the grid focus position can be customized using scripting. <a href=\\\"https://github.com/rokudev/samples/blob/master/ux%20components/lists%20and%20grids/SimpleMarkupList.zip\\\">SimpleMarkupList.zip</a> is a sample channel containing a MarkupGrid where each item is an instance of an XML component. See the section <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/markupgrid.md#markupgrid-xml-component\\\">MarkupGrid XML component</a> for details.</p>\\n<p>The number of columns in the MarkupGrid node is fixed and the number of rows varies as needed to display all of the items in the grid data model. The items in the grid fill each row from left to right, then top to bottom. For example, if the grid data contains 8 items and the number of columns is set to 3, then items 1, 2 and 3 will be in the first row. Items 4, 5 and 6 will be in the second row. The third row will contain items 7 and 8 in the leftmost two columns and blank space in the right column.</p>\\n<p>The layout of rows and columns in the grid is very flexible. Possible layouts include:</p>\\n<ul>\\n<li>a simple layout with all items in the grid having the same size</li>\\n<li>a layout with the items in some rows having varying heights and/or the items in some columns having varying widths</li>\\n<li>a layout with varying width rows and columns and items that occupy one or more rows and columns</li>\\n</ul>\\n<p>The grid items can be organized into sections that are demarcated by labelled horizontal divider lines between the sections.</p>\\n<h3 id=\\\"example\\\">Example</h3>\\n<p>The following is an example using MarkupGrid.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/MarkupGrid-example1.jpg\\\" alt=\\\"roku815px - MarkupGrid-example1\\\" title=\\\"MarkupGrid-example1\\\"></p>\\n<h2 id=\\\"grid-layouts\\\">Grid Layouts</h2>\\n<p>The MarkupGrid class supports very flexible layouts. The philosophy is that simple layouts are easy to produce and complicated layouts are possible.</p>\\n<p>There are three general categories of layouts:</p>\\n<ol>\\n<li>\\n<p>Simple layouts with all grid items and spacings between items equal.To specify a simple layout, set the <code>itemSize</code> field value to the width and height of each of the items in the grid, and set the <code>itemSpacing</code> field value to the desired spacing between items. For example, if the <code>itemSize</code> field value is [300,100],and <code>itemSpacing</code> field value is [4,8], then the grid items will be 300 pixels wide and 100 pixels high. There will be four pixels between the columns of the grid, and eight pixels between rows of the grid.</p>\\n</li>\\n<li>\\n<p>All the items are aligned in rows and columns, but the rows and columns (or the spacing between them) varies.To specify this type of layout, set the <code>columnWidths</code>, <code>columnSpacings</code>, <code>rowHeights</code> and <code>rowSpacings</code> field values. Each of these fields takes an array of values, specifying the values for each row width, column height or spacing between rows and columns. If there are more rows or columns in the grid than specified in the arrays for these fields, the corresponding simple layout field values are used for the missing values (such as the x-dimension value of the <code>itemSize</code> field for a missing <code>columnWidth</code> field value).For example, suppose a grid is designed with four columns, where each item was 80 pixels wide, and had four pixels of space between them. The grid data includes ten rows, where the first four rows have items that are 120 pixels tall, and the remaining six rows have items that are 80 pixels high. All the rows should have six pixels of space between them. To specify this layout, you would set the field values like this:</p>\\n</li>\\n</ol>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>itemSize</td>\\n<td>[ 80, 80 ]</td>\\n</tr>\\n<tr>\\n<td>itemSpacings</td>\\n<td>[ 4, 6 ]</td>\\n</tr>\\n<tr>\\n<td>rowHeights</td>\\n<td>[ 120, 120, 120, 120, 80, 80, 80, 80, 80, 80 ]</td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>Since the final six values in the rowHeights field value array equal the y-dimension itemSize field value, you could omit them, so in this case setting the rowHeights field value to [120,120,120,120] would have the same result.</p>\\n</blockquote>\\n<ol start=\\\"3\\\">\\n<li>There are clear alignments in the row/column layout, but some items can span more than one row or column (plus the space in between).To specify this type of layout, set the field values as in the first two types of grid layouts to define the sizes of the rows/columns. If any of the grid items occupy more than one row or column, then the metadata for each grid item must contain extra metadata specifying the starting row, starting column, numbers of rows and number of columns that the item occupies. In addition, the <code>fixedLayout</code> field value must be set to <code>true</code>.For example, if a grid item is supposed to span columns 2 and 3, and rows 3 through 6, then in addition to the metadata for the item contents, the metadata for that item would include (X = 2, Y = 3, W = 2, H = 4). W is set to 2 because the item is 2 columns wide. Similarly H is set to 4 because the item is 4 rows tall.The total pixel width of the item would be the (width of column 2) + (spacing between columns 2 and 3) + (width of column 3). Similarly, the height of the item would be the sum of the heights of columns 3, 4, 5 and 6, plus the spacings between columns 3 and 4, 4 and 5, and 5 and 6.The X and Y indices start from 0 (that is, the first column is X = 0).</li>\\n</ol>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>itemComponentName</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the name of a XML component for the grid items. An instance of this component is created on demand for each visible item of the grid. The XML component must define a specific interface as detailed in <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/markupgrid.md#markupgrid-xml-component\\\">MarkupGrid XML component</a> below.</td>\\n</tr>\\n<tr>\\n<td>content</td>\\n<td>ContentNode</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the content for the list. See <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/markupgrid.md#data-bindings\\\">Data bindings</a> below for more details.<br />If the data contains section markers, section dividers will be drawn between each section. These section dividers may contain an icon and/or a string.</td>\\n</tr>\\n<tr>\\n<td>itemSize</td>\\n<td>vector2d</td>\\n<td>[0,0]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width and height of the default size for the grid items.</td>\\n</tr>\\n<tr>\\n<td>numColumns</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the number of columns in the grid</td>\\n</tr>\\n<tr>\\n<td>numRows</td>\\n<td>integer</td>\\n<td>12</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the number of visible rows displayed. The actual number of rows may be more or less than the number of visible rows specified depending on the number of items in the list content.</td>\\n</tr>\\n<tr>\\n<td>rowHeights</td>\\n<td>array of floats</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>When specified, the rowHeights field specifies the heights of the poster for each row of the grid. This allows the height of each row of the grid to vary from row to row.<br /><br />The rowHeights values override the height specified in element 1 of the basePosterSize field. If the rowHeights array contains fewer elements than the number of rows needed to display all the items in the grid, element 1 of the basePosterSize field is used as the height of the excess rows.</td>\\n</tr>\\n<tr>\\n<td>columnWidths</td>\\n<td>array of floats</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>When specified, the columnWidths field specifies the widths of the poster for each column of the grid. This allows the width of each column of the grid to vary from column to column.<br /><br />The columnWidths values override the width specified in element 0 of the basePosterSize field. If the columnWidths array contains fewer elements than the number of columns specified by the numColumns field, element 0 of the basePosterSize field is used as the width of the excess columns.</td>\\n</tr>\\n<tr>\\n<td>rowSpacings</td>\\n<td>array of floats</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>When specified, the rowSpacings field specifies the spacing after each row of the grid. This allows the spacing between rows to vary from row to row.<br /><br />The rowSpacings values override the vertical spacing specified in element 1 of the itemSpacing field. If the rowSpacings array contains fewer elements than the number of rows needed to display all the items in the grid, element 1 of the itemSpacing field is used as the spacing after the excess rows.</td>\\n</tr>\\n<tr>\\n<td>columnSpacings</td>\\n<td>array of floats</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>When specified, the columnSpacings field specifies the spacing after each column of the grid. This allows the spacing between columns to vary from column to column.<br /><br />The columnSpacings values override the horizontal spacing specified in element 0 of the itemSpacing field. If the columnSpacings array contains fewer elements than the number of columns specified by the numColumns field, element 0 of the itemSpacing field is used as the spacing after the excess columns.</td>\\n</tr>\\n<tr>\\n<td>fixedLayout</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>When fixedLayout is false, the PosterGrid assigns each item in the data model to sequential cells in the grid (or the section if the data model includes section information). When fixedLayout is false, the data models using the X, Y, W and H attributes to specify which cells of the grid each item should occupy, where X is the column number, Y is the row number, W is the number of columns the item occupies and H is the number of rows the item occupies.<br /><br />Fixed layout should only be set to true for cases where one or more items in the grid should span multiple rows or columns.</td>\\n</tr>\\n<tr>\\n<td>imageWellBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file to use to suggest where images would appear for empty grids and empty sections of grids. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>drawFocusFeedback</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether or not the focus indicator bitmap is displayed</td>\\n</tr>\\n<tr>\\n<td>drawFocusFeedbackOnTop</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the focus indicator bitmap is drawn below or on top of the list items</td>\\n</tr>\\n<tr>\\n<td>focusBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file used for the focus indicator when the list has focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>focusFootprintBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file used for the focus indicator when the list does not have focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>focusBitmapBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Blend the graphic image specified by <code>focusBitmapUri</code> with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by <code>focusBitmapUri.</code></td>\\n</tr>\\n<tr>\\n<td>focusFootprintBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Blend the graphic image specified by <code>focusFootprintBitmapUri</code> with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus footprint indicator graphic image with a different color than the image specified by <code>focusFootprintBitmapUri</code>.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file to use as a wrap divider, the visual separator between the last and first list items when the list wraps. In most cases, this should be a 9-patch image that specifies both expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerHeight</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the wrap divider, the visual separator between the last and first list items when the list wraps. The bitmap for the wrap divider is scaled to this height. The width of the wrap divider is set to the width of the list items as specified by the <code>itemSize</code> field width value.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>If the ContentNode specifies sections for a list or grid, specifies a custom bitmap to use as a visual divider between the sections of the list or grid. Only set this field to use a bitmap with a different appearance than the system default. For sections that do not include an icon or a title, the system default or custom bitmap specified as the <code>wrapDividerBitmapUri</code> field value is used for the section dividers. In most cases, you will want to use a 9-patch PNG bitmap with both expandable regions, which is the type of bitmap used as the system default.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerFont</td>\\n<td>font</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the font for section divider labels</td>\\n</tr>\\n<tr>\\n<td>sectionDividerTextColor</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the text color for section divider labels</td>\\n</tr>\\n<tr>\\n<td>sectionDividerSpacing</td>\\n<td>float</td>\\n<td>10</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the spacing between the items appearing in the section divider (e.g. the spacing between the section divider icon, the section divider label, and the section divider bitmap). Note the section divider does not always include an icon and/or a title.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerHeight</td>\\n<td>float</td>\\n<td>40</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the section dividers. The width of the section dividers is determined by the width of the list items as specified by the itemSize field width value.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerMinWidth</td>\\n<td>float</td>\\n<td>117</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the minimum width of the section divider bitmap. The section divider label will be ellipsized if necessary in order to ensure that the section divider bitmap meets the minimum width.</td>\\n</tr>\\n<tr>\\n<td>sectionDividerLeftOffset</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Number of pixels to offset the left edge of the section divider relative to the left edge of the list items.</td>\\n</tr>\\n<tr>\\n<td>itemSelected</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a list item is selected, itemSelected is set to the index of the selected item.</td>\\n</tr>\\n<tr>\\n<td>itemFocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a list item gains the key focus, set to the index of the focused item.</td>\\n</tr>\\n<tr>\\n<td>itemUnfocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a list item loses the key focus, set to the index of the unfocused item.</td>\\n</tr>\\n<tr>\\n<td>jumpToItem</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid item index, this causes the list to immediately update so that the specified index moves into the focus position.</td>\\n</tr>\\n<tr>\\n<td>animateToItem</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid item index, this causes the list to quickly scroll so that the specified index moves into the focus position.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"markupgrid-xml-component\\\">MarkupGrid XML component</h2>\\n<p>The MarkupGrid node <code>itemComponentName</code> field value should be set to the name of an XML component used to display each item in the grid. An instance of this component is created for each visible item in the grid.</p>\\n<p>If the XML component contains interface fields that match the names shown in the table below, those fields will be updated by the MarkupGrid node. This allows the XML component to alter the item appearance based on changes to these interface fields.</p>\\n<p>Note that the fields are updated in the order presented in the table below. Any layout scripting you write based on these fields should be done in that order to avoid updating your layout based on a field that has not been updated yet.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field Name</th>\\n<th>Field Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td><strong>Read-Only</strong><br />Set to the width of the grid item.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td><strong>Read-Only</strong><br />Set to the height of the grid item</td>\\n</tr>\\n<tr>\\n<td>index</td>\\n<td>integer</td>\\n<td><strong>Read-Only</strong><br />Set to the index of this item in the data model.</td>\\n</tr>\\n<tr>\\n<td>gridHasFocus</td>\\n<td>Boolean</td>\\n<td><strong>Read-Only</strong><br />Set to true if the MarkupGrid node has focus, false otherwise.</td>\\n</tr>\\n<tr>\\n<td>itemContent</td>\\n<td>ContentNode</td>\\n<td>Contains the data to be displayed by the grid item. The relationship between data in the ContentNode and the visual elements of the grid item is determined by the scripts in the item XML component. Typically, an observer callback function of the <code>itemContent</code> field is used to update the grid item when the content changes.</td>\\n</tr>\\n<tr>\\n<td>focusPercent</td>\\n<td>float</td>\\n<td><strong>Read-Only</strong><br />The fractional value, from 0.0 to 1.0, of a time delay after focus has moved from one item to the next. The fractional value increases incrementally from 0.0 to 1.0 for the newly-focused item, while simultaneously decreasing from 1.0 to 0.0 for the previously-focused item. This value can be used as a timing key to smoothly animate the appearance of the focused item as well as the previously-focused item, to indicate the movement of focus to the user.</td>\\n</tr>\\n<tr>\\n<td>itemHasFocus</td>\\n<td>Boolean</td>\\n<td><strong>Read-Only</strong><br />Indicates whether the item component currently is the MarkupGrid's focused item. When scrolling starts, the itemHasFocus field for the currently focused item is set to false. When scrolling ends, the itemHasFocus field for the newly focused item is set to true. During the scrolling animation, all itemHasFocus fields are set to false.<br />Only one item component of any MarkupGrid should have itemHasFocus set to true. If the MarkupGrid does not focus, all itemHasFocus fields of their item components should be set to false.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"example-markupgrid-xml-component\\\">Example MarkupGrid XML component</h2>\\n<p>The following shows an example MarkupGrid node XML component. The XML markup defines a component named <code>SimpleGridItem</code> that creates a poster for each grid item. The poster has either a price or an icon overlaid on top of it, depending on the value of the <code>GOTITEMCONTENT</code> attribute of the item ContentNode. If <code>GOTITEMCONTENT</code> is true, that indicates that the item has already been purchased, and an icon is drawn on top of the lower/right corner of the poster. If <code>GOTITEMCONTENT</code> is false, that indicates that the item has not already been purchased. In that case, a semitransparent rectangle is drawn over the bottom part of the poster, and inside that rectangle, a label is drawn containing the price of the item.</p>\\n<p>To use this component, set the value of the <code>itemComponentName</code> field of a MarkupGrid node to <code>SimpleGridItem</code>.</p>\\n<p>Note that the <code>index</code> and <code>focusPercent</code> interface fields are not used by the component, so they are not included in the component interface.</p>\\n<p><strong>MarkupGrid XML component example</strong></p>\\n<pre><code>&#x3C;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\\n&#x3C;component name=\\\"SimpleGridItem\\\" extends=\\\"Group\\\">\\n\\n&#x3C;interface>\\n  &#x3C;field id=\\\"width\\\" type=\\\"float\\\" onChange=\\\"widthChanged\\\"/>\\n  &#x3C;field id=\\\"height\\\" type=\\\"float\\\" onChange=\\\"heightChanged\\\"/>\\n  &#x3C;field id=\\\"itemContent\\\" type=\\\"node\\\" onChange=\\\"itemContentChanged\\\"/>\\n&#x3C;/interface>\\n\\n&#x3C;script type=\\\"text/brightscript\\\" >\\n&#x3C;![CDATA[\\n  function itemContentChanged()\\n    m.gridPoster.uri = m.top.itemContent.HDPOSTERURL\\n    if m.top.itemContent.GOTITEMCONTENT\\n      m.priceBox.visible = false\\n      m.priceLabel.visible = false\\n      m.ownedIcon.visible = true\\n    else\\n      m.priceLabel.text = m.top.itemContent.PRICE\\n      m.priceBox.visible = true\\n      m.priceLabel.visible = true\\n      m.ownedIcon.visible = false\\n    end if\\n    updateLayout()\\n  end function\\n\\n  function widthChanged()\\n    updateLayout()\\n  end function\\n\\n  function heightChanged()\\n    updateLayout()\\n  end function\\n\\n  function updateLayout()\\n    if m.top.height > 0 and m.top.width > 0\\n      posterSize = m.top.height\\n      m.gridPoster.width = m.top.width\\n      m.gridPoster.height = m.top.height\\n      ' position the ownedIcon in the bottom/right corner\\n      m.ownedIcon.translation = [ m.top.width - m.ownedIcon.bitmapWidth, m.top.height - m.ownedIcon.bitmapHeight ]\\n      m.priceBox.width = m.top.width\\n      m.priceBox.height = m.ownedIcon.bitmapHeight\\n      m.priceBox.translation = [ 0, m.top.height - m.priceBox.height ]\\n      m.priceLabel.width = m.top.width\\n      m.priceLabel.height = m.priceBox.height\\n      m.priceLabel.vertAlign = \\\"center\\\"\\n      m.priceLabel.horizAlign = \\\"center\\\"\\n      m.priceLabel.translation = m.priceBox.translation\\n    end if\\n  end function\\n\\n  function init()\\n    m.gridPoster = m.top.findNode(\\\"gridPoster\\\")\\n    m.priceBox = m.top.findNode(\\\"priceBox\\\")\\n    m.priceLabel = m.top.findNode(\\\"priceLabel\\\")\\n    m.ownedIcon = m.top.findNode(\\\"ownedIcon\\\")\\n    m.ownedIcon.loadSync = true\\n    m.ownedIcon.uri = \\\"pkg:/images/greenCheck.png\\\"\\n  end function\\n]]>\\n&#x3C;/script>\\n\\n&#x3C;children>\\n\\n&#x3C;Poster id=\\\"gridPoster\\\" renderPass=\\\"1\\\" />\\n&#x3C;Rectangle id=\\\"priceBox\\\" color=\\\"0x00000080\\\" renderPass=\\\"2\\\" />\\n&#x3C;Label id=\\\"priceLabel\\\" renderPass=\\\"3\\\" />\\n&#x3C;Poster id=\\\"ownedIcon\\\" renderPass=\\\"4\\\" />\\n\\n&#x3C;/children>\\n\\n&#x3C;/component>\\n</code></pre>\\n<h2 id=\\\"data-bindings\\\">Data bindings</h2>\\n<p>A MarkupGrid node should have a single ContentNode as the root node in its content field. The structure of the rest of the data model depends on whether or not the grid items are to be grouped into sections.</p>\\n<p><strong>List items not grouped into sections</strong></p>\\n<p>If the grid items are not to be grouped into sections, one child ContentNode should be added to the root node for each item in the grid (these child nodes can be thought of as <em>item nodes</em>). Item nodes should contain the data required by the MarkupGrid node XML component.</p>\\n<p><strong>List items grouped into sections</strong></p>\\n<p>If the grid items are to be grouped into sections, one child ContentNode should be added to the root node for each section in the grid (these child nodes can be thought of as <em>section roots</em>). Each section root should contain one child ContentNode for each item in the section (that is, item nodes). The item nodes should contain the data required by the MarkupGrid node XML component.</p>\\n<p>The section root ContentNodes use the following attributes:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>CONTENTTYPE</code></td>\\n<td>string</td>\\n<td>Must be set to <code>SECTION</code></td>\\n</tr>\\n<tr>\\n<td><code>TITLE</code></td>\\n<td>string</td>\\n<td>Label for the section divider</td>\\n</tr>\\n<tr>\\n<td><code>HDGRIDPOSTERURL</code></td>\\n<td>uri</td>\\n<td>The image file for the icon to be displayed to the left of the section label when the screen resolution is set to HD.</td>\\n</tr>\\n<tr>\\n<td><code>SDGRIDPOSTERURL</code></td>\\n<td>uri</td>\\n<td>The image file for the icon to be displayed to the left of the section label when the screen resolution is set to SD.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids/MarkupGridExample\\\">MarkupGridExample</a> is a sample channel demonstrating MarkupGrid in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/list-and-grid-nodes/rowlist.md":"{\n  \"content\": \"<h1 id=\\\"rowlist\\\">RowList</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/abstract-nodes/arraygrid.md\\\"><strong>ArrayGrid</strong></a></p>\\n<p>The RowList node class provides a vertically-scrollable list, containing rows of independent horizontally-scrollable individual items. Each item in a row can include a poster, but can also include much more complex sub-elements defined in an item component file, in the same way that items are defined in the <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/markuplist.md\\\">MarkupList</a> and <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/markupgrid.md\\\">MarkupGrid</a> node classes. The RowList node class includes interface fields for customizing the appearance as the user scrolls up and down through the rows.</p>\\n<p>Like those node classes, the RowList node class provides special interface fields to the item components to allow custom appearance and animations as the user scrolls left and right through the items in a row. </p>\\n<blockquote>\\n<p>You can use the <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/zoomrowlist.md\\\">ZoomRowList</a> node class to enlarge the row in the RowList that currently has focus. In addition to providing a zoomed focus row, the ZoomRowList features custom row item and row decoration components, unique zooming amounts for individual rows, and separate heights for zoomed/unzoomed row items.</p>\\n</blockquote>\\n<h2 id=\\\"guidelines\\\">Guidelines</h2>\\n<p>The following are guidelines for use of rows and images.</p>\\n<ul>\\n<li>The items in any single row must be the same size, however different rows in the list can have different item sizes (see sample image below).</li>\\n<li>Each row may include a left-justified title label at the top of the row, and a right-justified label at the top that displays a message of the format \\\"<em>item_number</em> of <em>total_number_of_items</em>\\\", indicating which item in the row currently has focus.</li>\\n</ul>\\n<h4 id=\\\"horizontal-row-scrolling\\\">Horizontal Row Scrolling</h4>\\n<p>There are three horizontal item scrolling options for the RowList node class controlled by the <code>rowFocusAnimationStyle</code> field.</p>\\n<ul>\\n<li>Setting the <code>rowFocusAnimationStyle</code> field to <code>floatingFocus</code> causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus will stay fixed on the first or last item in the row, and the items will scroll left or right.</li>\\n<li>Setting the <code>rowFocusAnimationStyle</code> field to <code>fixedFocusWrap</code> causes each row to wrap around when navigation reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus will float left and right.</li>\\n<li>Setting the <code>rowFocusAnimationStyle</code> field to <code>fixedFocus</code> causes the focus to stay fixed on the first item in each row. As the user scrolls, the previous selected item goes off the screen. Scrolling continues until the last item is reached with no wrapping.</li>\\n</ul>\\n<h4 id=\\\"vertical-row-scrolling\\\">Vertical Row Scrolling</h4>\\n<p>The vertical row scrolling options are controlled by the <code>vertFocusAnimationStyle</code> field, and behave in the same way for rows as they do for list items as described in <a href=\\\"/docs/references/scenegraph/abstract-nodes/arraygrid.md\\\"><strong>ArrayGrid</strong></a>.</p>\\n<p>The RowList node class supports two types of item definitions.</p>\\n<ul>\\n<li>The first type provides a simple option for the common case where each item in each row is displayed as a single poster.</li>\\n<li>The second variation allows the contents of each item in each row to be an instance of a SceneGraph component that defines a set of interface fields that provide for communication between the RowList node and the items it displays (similar to that used by the MarkupList and MarkupGrid node classes).</li>\\n</ul>\\n<h2 id=\\\"example\\\">Example</h2>\\n<p>The following is a sample screenshot of RowList based on SimpleRowlist sample code:</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/rowlist1.png\\\" alt=\\\"roku815px - rowlist1\\\" title=\\\"rowlist1\\\"></p>\\n<p>In the field descriptions below, the first type is referred to as <em>simple</em>, and the second type is referred to as <em>component</em>. Most of the field descriptions below apply to both simple and component types.</p>\\n<h2 id=\\\"behavior\\\">Behavior</h2>\\n<p>Whenever all the items in a RowList row are visible, the focus will step one-by-one across the items, rather than step once, then smooth scroll.</p>\\n<p>Each time the RowList focus animation completes a step, the RowList's rowItemFocused field will be set. This allows the Bob to be immediately updated. This will happen when long press scrolling after the initial step ends prior to the smooth scrolling. It will also happen when long press scrolling across a short RowList row as the focus now steps one-by-one across the items in a short row. Previously, the rowItemFocused field was only set once after a long press scrolling key release event.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>itemComponentName</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the name of an XML component for the items in each row. An instance of this component is created on demand for each visible item of each row. The XML component must define a specific interface as detailed in <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/rowlist.md#rowlist-xml-component\\\">RowList XML Component</a> below.</td>\\n</tr>\\n<tr>\\n<td>rowTitleComponentName</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the name of an XML component to render titles in place of the row label. This component must extend from <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\">Group</a>. If this component defines a \\\"content\\\" field, it will be set to the row's content. If this component defines a \\\"rowCounterVertAlign\\\" field (possible values are \\\"top\\\", \\\"center\\\", and \\\"bottom\\\"), the row counter's vertical alignment is respective of the row title component.</td>\\n</tr>\\n<tr>\\n<td>content</td>\\n<td>ContentNode</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the content for the list. The content should be a single ContentNode that has one child ContentNode for each row. These child ContentNodes for each row should themselves contains child ContentNodes for each item in the row. See <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/rowlist.md#data-bindings\\\">Data Bindings</a> below for more details.</td>\\n</tr>\\n<tr>\\n<td>itemSize</td>\\n<td>vector2d</td>\\n<td>[0,0]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width and height of rows in the list. Note that this the width of the entire row, not the width of the posters in the row.</td>\\n</tr>\\n<tr>\\n<td>itemSpacing</td>\\n<td>vector2d</td>\\n<td>[0,0]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the spacing between rows in the list. The y-dimension of the vector specifies the vertical spacing between rows, and the x-dimension is ignored.</td>\\n</tr>\\n<tr>\\n<td>numRows</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the number of visible rows in the list. Note that the actual number of rows may be more or less than the number of visible rows depending on the number of items in the list content.</td>\\n</tr>\\n<tr>\\n<td>rowHeights</td>\\n<td>array of floats</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the heights of each row of the list. This allows the height of each row of the list to vary from row to row. The values override the height specified in the y-dimension value of the <code>itemSize</code> field. If the array contains fewer elements than the number of rows in the data model, the y-dimension value of the <code>itemSize</code> field is used as the height of the extra rows.</td>\\n</tr>\\n<tr>\\n<td>rowSpacings</td>\\n<td>array of floats</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the spacing after each row of the list. This allows the spacing between rows to vary from row to row. The values override the vertical spacing specified in y-dimension value of the <code>itemSpacing</code> field. If the array contains fewer elements than the number of rows in the data model, the y-dimension value of the <code>itemSpacing</code> field is used as the spacing after the extra rows.</td>\\n</tr>\\n<tr>\\n<td>rowItemSize</td>\\n<td>array of vector2d</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width and height of the items in each row. The array of values must include at least one element. If the array contains fewer elements than the number of rows in the data model, the last value in the array is used as the size for the extra rows.</td>\\n</tr>\\n<tr>\\n<td>rowItemSpacing</td>\\n<td>array of vector2d</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the spacing between items in each row. The x-dimension of each array value specifies the horizontal spacing between list items in the corresponding row. If the array contains fewer elements than the number of rows in the data model, the last value in the array is used as the spacing for the extra rows. If the array contains no values, no space will be included between list items in all rows.</td>\\n</tr>\\n<tr>\\n<td>focusXOffset</td>\\n<td>array of floats</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the x-dimension offset of the first fully visible item in each row relative to the left edge of the list. In most cases, the first fully visible item in each row will be positioned at the left edge of the list, so this field does not need to be specified. If the array contains fewer elements than the number of rows in the data model, the last value in the array is used as the x-dimension offset for the extra rows. If the array contains no values, the default x-dimension offset of 0.0 is used.</td>\\n</tr>\\n<tr>\\n<td>rowLabelOffset</td>\\n<td>array of vector2d</td>\\n<td>[0,0]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the offset of the row label for each row. The x-dimension specifies the horizontal offset of the label from the left edge of the row. The y-dimension component specifies the vertical spacing between the label and the list items in the row. If the array contains fewer elements than the number of rows in the data model, the last value in the array is used as the offset for the labels of the extra rows. If the array specified contains no values, a default offset value of [0,0] is used.</td>\\n</tr>\\n<tr>\\n<td>showRowLabel</td>\\n<td>array of Boolean</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the row label on the left edge of each row is displayed. If the array contains fewer elements than the number of rows in the data model, the last value in array is used to control the display of the row label for the extra rows. If the array contains no values, no row labels are displayed.</td>\\n</tr>\\n<tr>\\n<td>showRowCounter</td>\\n<td>array of Boolean</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the \\\"item_number of total_number_of_items\\\" label on the right edge of each row is displayed. Note that the \\\"item_number of total_number_of_items\\\" label is only displayed for the focused row even if the <code>showRowCounter</code> field value for that row is set to true. If the array contains fewer elements than the number of rows in the data model, the last value in array is used to control the display of the \\\"item_number of total_number_of_items\\\" label for the extra rows. If the array contains no values, no \\\"item_number of total_number_of_items\\\" labels are displayed.</td>\\n</tr>\\n<tr>\\n<td>indefiniteRowItemCount</td>\\n<td>array of Boolean</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>For each row, a value of true indicates that  a \\\"+\\\" character should be appended to the \\\"total_number_of_items\\\" label in the UI (which should be the case when there are unfetched pages beyond what is currently accessible/visible, e.g., \\\"Item 4 of 30+\\\").</td>\\n</tr>\\n<tr>\\n<td>variableWidthItems</td>\\n<td>array of Boolean</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>This field is only supported when <code>rowFocusAnimationStyle = \\\"fixedFocusWrap\\\"</code><br /><br />By default, all items in a row of the RowList node have the same width and height. By setting <code>variableWidthItems</code> to true for a row, the items in the row will continue to have the same height, but the width will be taken from the <code>[SD/HD/FHD]ItemWidth</code> field of the ContentNode associated with each item. See <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/rowlist.md#data-bindings\\\">Data Bindings</a> below for more details. <br /><br /><code>variableWidthItems</code> is an array with one element per row in the RowList. If there are fewer elements than rows in the RowList, the last value in the array is repeated. If all rows of the RowList have variable widths, you can set <code>variableWidthItems=\\\"[true]\\\"</code> or <code>variableWidthItems=\\\"true\\\"</code>.<br /><br />The <code>[SD/HD/FHD]ItemWidth</code> values specified should match the <code>ui_resolutions</code> attribute in the manifest.<br /><br />Example: If you only specify <code>ui_resolutions=fhd</code>, you should only set <code>FHDItemWidth</code> and allow the device to autoscale when rendering for HD and SD display modes. If you specify <code>ui_resolutions=hd</code>,fhd, you can set <code>HDItemWidth</code> and <code>FHDItemWidth</code>.<br /><br />If any item does not specify the <code>[SD/HD/FHD]ItemWidth</code> in its ContentNode for a variable width row, the <code>x</code> value of the RowList's <code>rowItemSize</code> field for that row is used as the <code>width</code> for that item.</td>\\n</tr>\\n<tr>\\n<td>rowFocusAnimationStyle</td>\\n<td>option string</td>\\n<td>floatingFocus</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the how the focus indicator moves in a row of items in response to the remote direction pad Left and Right key presses. The possible values are:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>floatingFocus</td>\\n<td>Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible.</td>\\n</tr>\\n<tr>\\n<td>fixedFocusWrap</td>\\n<td>Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</td>\\n</tr>\\n<tr>\\n<td>fixedFocus</td>\\n<td>Causes the focus to stay fixed on the first item in each row. As the user scrolls, the previous selected item goes off the screen. Scrolling continues until the last item is reached with no wrapping.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>vertFocusAnimationStyle</td>\\n<td>option string</td>\\n<td>fixedFocus</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the how the focus indicator moves in a list or a column of grid items in response to the remote direction pad Up and Down key presses. The possible values are:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>floatingFocus</td>\\n<td>Causes the focus indicator to float up or down until it reaches the end of the list, at which point the focus indicator will stay fixed on the first or last row in the list, and the rows will scroll up or down if there are rows that were not visible.</td>\\n</tr>\\n<tr>\\n<td>fixedFocusWrap</td>\\n<td>Causes the column to wrap around when the focus indicator reaches the first or last row in the list, as long as the list contains enough rows to fill the list. If the list does not contain enough rows to fill the list, the focus indicator will float up and down.</td>\\n</tr>\\n<tr>\\n<td>fixedFocus</td>\\n<td>Causes the focus to stay fixed on the upper row. As the user scrolls down, the row containing the previously selected item scrolls up off screen. Scrolling continues until the last row is reached.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>rowLabelColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the row and \\\"<code>item_number of total_number_of_items</code>\\\" labels.</td>\\n</tr>\\n<tr>\\n<td>rowLabelFont</td>\\n<td>font</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the font for the row and \\\"<code>item_number of total_number_of_items</code>\\\" labels.</td>\\n</tr>\\n<tr>\\n<td>rowCounterRightOffset</td>\\n<td>float</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Field provides greater control over the UX.<br /><br />When set, this value specifies the location of the right edge of the row counter relative to right edge of the RowList's clipping rectangle. If not set, the right edge of the row counter is positioned to equal the left offset of the row title.</td>\\n</tr>\\n<tr>\\n<td>showRowCounterForShortRows</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Field provides greater control over the UX.<br /><br />When set to true, the row counter is shown for all rows. When set to false, the row counter is not shown for rows where all items fit onscreen.</td>\\n</tr>\\n<tr>\\n<td>fadeFocusFeedbackWhenAutoScrolling</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>When set to true, the focus feedback indicator will quickly fade out when scrolling multiple items and fade back in when the scrolling ends. The focus feedback indicator will also after in and out when using the FFW/Rewind keys to scroll a page at a time.<br /><br />Note: This field is defined on <a href=\\\"/docs/references/scenegraph/abstract-nodes/arraygrid.md\\\">ArrayGrid</a> and thus is inherited by all of the following components: LabelList, MarkupList, PosterGrid, MarkupGrid, RowList, CheckList, and RadioButtonList.</td>\\n</tr>\\n<tr>\\n<td>currFocusFeedbackOpacity</td>\\n<td>float</td>\\n<td></td>\\n<td>READ_ONLY</td>\\n<td>This field provides access to the current opacity of the focus feedback indicator. It can be used to have other items on the screen fade in/out when the focus feedback indicator fades in/out.<br /><br />Note: This field is defined on <a href=\\\"/docs/references/scenegraph/abstract-nodes/arraygrid.md\\\">ArrayGrid</a> and thus is inherited by all of the following components: LabelList, MarkupList, PosterGrid, MarkupGrid, RowList, CheckList, and RadioButtonList.</td>\\n</tr>\\n<tr>\\n<td>drawFocusFeedbackOnTop</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the focus indicator bitmap is drawn below or on top of the list items.</td>\\n</tr>\\n<tr>\\n<td>drawFocusFeedback</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether or not the focus indicator bitmap is displayed.</td>\\n</tr>\\n<tr>\\n<td>imageWellBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file to use to suggest where images would appear for empty lists.</td>\\n</tr>\\n<tr>\\n<td>focusBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file used for the focus indicator when the list has focus. In most cases, this should be a <a href=\\\"https://go.roku.com/rowlist-9-patch-image\\\">9-patch image</a> that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>focusFootprintBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>CopyEditSpecifies the bitmap file used for the focus indicator when the list does not have focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>focusBitmapBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Blend the graphic image specified by <code>focusBitmapUri</code> with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by <code>focusBitmapUri</code>.</td>\\n</tr>\\n<tr>\\n<td>focusFootprintBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Blend the graphic image specified by <code>focusFootprintBitmapUri</code> with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus footprint indicator graphic image with a different color than the image specified by <code>focusFootprintBitmapUri</code>.</td>\\n</tr>\\n<tr>\\n<td>loadingBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies a bitmap file to display while a list item poster is loading.<br /><br />To execute a seamless cross-fade transition between posters, set the <strong>loadingBitmapUri</strong> of the next poster to be shown to the uri of the currently displayed poster.</td>\\n</tr>\\n<tr>\\n<td>loadingBitmapOpacity</td>\\n<td>float</td>\\n<td>1.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies an opacity value used to render the loading bitmap.</td>\\n</tr>\\n<tr>\\n<td>failedBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies a bitmap file to display when a list item poster fails to load.</td>\\n</tr>\\n<tr>\\n<td>failedBitmapOpacity</td>\\n<td>float</td>\\n<td>1.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies an opacity value used to render the failed bitmap.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerBitmapUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file to use as a visual separator between the last and first list items when the list wraps. In most case, this should be a 9-patch image that specifies both expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerHeight</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the divider. The wrap divider bitmap will be scaled to this height. The width of the wrap divider is set to the width of the list items (that is, the x-dimension value of the <code>itemSize</code> field).</td>\\n</tr>\\n<tr>\\n<td>rowItemSelected</td>\\n<td>array of integer</td>\\n<td>[ ]</td>\\n<td>READ_ONLY</td>\\n<td>When an item is selected, set to a 2-element array, where element 0 contains the index of the row containing the selected item, and element 1 contains the index of the selected item in that row.</td>\\n</tr>\\n<tr>\\n<td>rowItemFocused</td>\\n<td>array of integer</td>\\n<td>[ ]</td>\\n<td>READ_ONLY</td>\\n<td>When an item gains the key focus, set to a 2-element array, where element 0 contains the index of the focused row, and element 1 contains the index of the focused item in that row.</td>\\n</tr>\\n<tr>\\n<td>currFocusColumn<br /><br /><em>Available since Roku OS 10.5</em></td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Indicates which column of the currently focused row in a RowList component currently has focus. This field is typically used to implement a horizontal pagination mechanism for the currently focused row.<br /><br />If this value is set to 3.7, it means that item 3 occupies 30% of the currently focused row while item 4 occupies 70% of it.<br /><br />To maximize performance, the field should be kept to a minimum, as these scripts will run once during each render.</td>\\n</tr>\\n<tr>\\n<td>itemSelected</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When an item is selected, set to the index of the selected row.</td>\\n</tr>\\n<tr>\\n<td>itemFocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a row gains the key focus, set to the index of the focused row.</td>\\n</tr>\\n<tr>\\n<td>itemUnfocused</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>When a row loses the key focus, set to the index of the unfocused row.</td>\\n</tr>\\n<tr>\\n<td>jumpToItem</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid item index, causes the list to immediately update so that the specified row moves into the focus position.</td>\\n</tr>\\n<tr>\\n<td>jumpToRowItem</td>\\n<td>array of integer</td>\\n<td>[ ]</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid [ row, col ] index pair, causes the list to immediately update so that the specified row, col item moves into the focus position.</td>\\n</tr>\\n<tr>\\n<td>animateToItem</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid item index, causes the list to quickly scroll so that the specified row moves into the focus position.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"rowlist-xml-component\\\">RowList XML component</h2>\\n<p>If the RowList node is to use an XML component, the <code>itemComponentName</code> field value should be set to the name of an XML component used to display each item in the row list. An instance of this component is created for each visible item in each row of the list.</p>\\n<p>If the XML component contains interface fields that match the names shown in the table below, those fields will be updated by the RowList node. This allows the XML component to alter the item appearance based on changes to these interface fields.</p>\\n<p>Note that the fields are updated in the order presented in the table below. Any layout scripting you write based on these fields should be done in that order to avoid updating your layout based on a field that has not been updated yet.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field Name</th>\\n<th>Field Type</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>Set to the width of the item.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>Set to the height of the item</td>\\n</tr>\\n<tr>\\n<td>index</td>\\n<td>integer</td>\\n<td>READ_ONLY</td>\\n<td>Set to the data model index within the data for the row that contains this item. For example, if this appeared in row 2, then the field is set to 0 for the first item in row 2, 1 for the second item in row 2, and so on.</td>\\n</tr>\\n<tr>\\n<td>rowIndex</td>\\n<td>integer</td>\\n<td>READ_ONLY</td>\\n<td>Set to the data model index of the row that contains this item</td>\\n</tr>\\n<tr>\\n<td>rowHasFocus</td>\\n<td>Boolean</td>\\n<td>READ_ONLY</td>\\n<td>Set to true if the row that contains this item has focus, false otherwise.</td>\\n</tr>\\n<tr>\\n<td>rowListHasFocus</td>\\n<td>Boolean</td>\\n<td>READ_ONLY</td>\\n<td>Set to true if the row list that contains this item has focus, false otherwise.</td>\\n</tr>\\n<tr>\\n<td>itemContent</td>\\n<td>ContentNode</td>\\n<td>READ_WRITE</td>\\n<td>Contains the data to be displayed by the row list item. The relationship between data in the ContentNode and the visual elements of the row list item is determined by the scripts in the item XML component. Typically, an observer callback function of the <code>itemContent</code> field is used to update the row list item when the content changes.</td>\\n</tr>\\n<tr>\\n<td>focusPercent</td>\\n<td>Float</td>\\n<td>READ_ONLY</td>\\n<td>The fractional value, from 0.0 to 1.0, of a time delay after focus has moved from one item in a row to the next. The fractional value increases incrementally from 0.0 to 1.0 for the newly-focused item, while simultaneously decreasing from 1.0 to 0.0 for the previously-focused item. This value can be used as a timing key to smoothly animate the appearance of the focused item as well as the previously-focused item, to indicate the movement of focus to the user.</td>\\n</tr>\\n<tr>\\n<td>rowFocusPercent</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>The fractional value, from 0.0 to 1.0, of a time delay after focus has moved from an item in one row to an item in an adjacent row, either above or below the previously-focused row. The fractional value increases incrementally from 0.0 to 1.0 for the newly-focused row, while simultaneously decreasing from 1.0 to 0.0 for the previously-focused row. This value can be used as a timing key to smoothly animate the appearance of the focused row as well as the previously-focused row, to indicate the movement of focus to the user.</td>\\n</tr>\\n<tr>\\n<td>itemHasFocus</td>\\n<td>Boolean</td>\\n<td>READ_ONLY</td>\\n<td>Indicates whether the item component currently is the RowList's focused item. When scrolling starts, the itemHasFocus field for the currently focused item is set to false. When scrolling ends, the itemHasFocus field for the newly focused item is set to true. During the scrolling animation, all itemHasFocus fields are set to false.<br /><br />Only one item component of any RowList should have itemHasFocus set to true. If the RowList does not focus, all itemHasFocus fields of their item components should be set to false.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"data-bindings\\\">Data bindings</h2>\\n<p>A RowList node should have a single ContentNode as the root node in its content field. One child ContentNode should be added to the root node for each row in the list (these nodes can be thought of as row nodes). Each row node should contain one child ContentNode for each item in the row (these nodes can be thought of as item nodes).</p>\\n<h3 id=\\\"row-node-data-bindings\\\">Row node data bindings</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>TITLE</td>\\n<td>string</td>\\n<td>The label for the row</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"item-node-data-bindings\\\">Item node data bindings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>FHDGRIDPOSTERURL / FHDPOSTERURL</td>\\n<td>uri</td>\\n<td>The image file for the item poster when the screen resolution is set to FHD. FHDGRIDPOSTERURL is used if non-empty. FHDPOSTERURL is used otherwise.</td>\\n</tr>\\n<tr>\\n<td>HDGRIDPOSTERURL / HDPOSTERURL</td>\\n<td>uri</td>\\n<td>The image file for the item poster when the screen resolution is set to HD. HDGRIDPOSTERURL is used if non-empty. HDPOSTERURL is used otherwise.</td>\\n</tr>\\n<tr>\\n<td>SDGRIDPOSTERURL / SDPOSTERURL</td>\\n<td>uri</td>\\n<td>The image file for the item poster when the screen resolution is set to SD. SDGRIDPOSTERURL is used if non-empty. SDPOSTERURL is used otherwise.</td>\\n</tr>\\n<tr>\\n<td>FHDItemWidth</td>\\n<td>float</td>\\n<td>The width for the FHD item. This value is used in conjunction with <code>variableWidthItems</code> and should only be set if the associated <code>ui_resolutions</code> attribute is also specified.<br /><br />This field must be added to the ContentNode via <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefield.md#addfieldfieldname-as-string-type-as-string-alwaynotify-as-boolean-as-boolean\\\">addField()</a> prior to setting a value. Ex. <code>ContentNode.addField(\\\"FHDItemWidth\\\", \\\"float\\\", false)</code></td>\\n</tr>\\n<tr>\\n<td>HDItemWidth</td>\\n<td>float</td>\\n<td>The width for the HD item. This value is used in conjunction with <code>variableWidthItems</code> and should only be set if the associated <code>ui_resolutions</code> attribute is also specified.<br /><br />This field must be added to the ContentNode via <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefield.md#addfieldfieldname-as-string-type-as-string-alwaynotify-as-boolean-as-boolean\\\">addField()</a>  prior to setting a value. Ex. <code>ContentNode.addField(\\\"HDItemWidth\\\", \\\"float\\\", false)</code></td>\\n</tr>\\n<tr>\\n<td>SDItemWidth</td>\\n<td>float</td>\\n<td>The width for the SD item. This value is used in conjunction with <code>variableWidthItems</code> and should only be set if the associated <code>ui_resolutions</code> attribute is also specified.<br /><br />This field must be added to the ContentNode via <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefield.md#addfieldfieldname-as-string-type-as-string-alwaynotify-as-boolean-as-boolean\\\">addField()</a>  prior to setting a value. Ex. <code>ContentNode.addField(\\\"SDItemWidth\\\", \\\"float\\\", false)</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"rowlist-sample-channels\\\">RowList sample channels</h2>\\n<p>The follow sample channels can be installed on your local device for testing and reviewing the code.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Sample download</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids\\\">SimpleRowList</a></td>\\n<td>Simple example channel using the RowList node class. This sample creates a two row RowList node using an item component definition, that is, it specifies custom markup for the individual items in the row.</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids\\\">RowListFocusStyleTest</a></td>\\n<td>A more complex example channel that demonstrates a number of different focus styles, as well as ways to mix different sized images in different RowList rows.</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids\\\">AdvancedRowList</a></td>\\n<td>Example demonstrating use of RowList in a PanelSet. This example includes RowList loading real data from a JSON file, mixed aspect ratio posters, and the use of focusPercent to overlay annotations.</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids\\\">variableWidthRowList</a></td>\\n<td>A simple example demonstrating variable width items. The first row in the RowList contains large hero artwork and each subsequent row contains a mix of different aspect ratio posters for TV and Movie artwork.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids/RowListExample\\\">RowListExample</a> is a sample channel demonstrating RowList in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/list-and-grid-nodes/checklist.md":"{\n  \"content\": \"<h1 id=\\\"checklist\\\">CheckList</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/labellist.md\\\"><strong>LabelList</strong></a></p>\\n<p>The CheckList node class is a simple list class that displays a list of items, some of which include checkboxes that allow the user to select or unselect that item. Each item in the list displays a text string and an optional checkbox icon positioned to the left of the text string.</p>\\n<p>If the checkbox is displayed, it is shown as either:</p>\\n<ul>\\n<li>an empty box,</li>\\n<li>or a box with a checkmark indicator inside indicating whether the item is in the checked or unchecked state.</li>\\n</ul>\\n<h2 id=\\\"example\\\">Example</h2>\\n<p>The following is a sample screenshot showing the use of CheckList:</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/CheckList.png\\\" alt=\\\"roku815px - CheckList\\\" title=\\\"CheckList\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>checkedState</td>\\n<td>array of Boolean</td>\\n<td>all false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the checked state of each item in the list. A value of true indicates the item is in the checked state. A value of false indicates that the item is in the unchecked state. When reading the value of the field, note that the field array will always include one value for each item in the list.<br /><br />When writing the value of the field, if the specified array includes fewer values than items in the list, the list items that are unspecified will remain in their current state. For example, if there are 10 items in the list and the field value is set to [ <code>true</code>, <code>true</code> ], items 0 and 1 will have their checked state set to true, and the checked state of the remaining items (items 3 to 9) will be unchanged.</td>\\n</tr>\\n<tr>\\n<td>checkOnSelect</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Controls whether or not pressing the remote control OK key causes the checkedState field to automatically toggle the checked state of the currently focused list item. By default, field value is set to true, but there are use cases where other behavior may be desired. In those cases, it is up to the developer to manage the checked state of the list items by setting the <code>checkedState</code> field to the desired index.</td>\\n</tr>\\n<tr>\\n<td>checkedIconUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the checkbox icon to use for list items that are in the checked state when that list item does not the key focus. Typically, the icon will include the outline of a box with a checkmark indicator inside. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>uncheckedIconUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the checkbox icon to use for list items that are in the unchecked state when that list item does not have the key focus. Typically, the icon will include the outline of an empty box. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>focusedCheckedIconUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the checkbox icon to use for list items that are in the checked state when that list item has the key focus. Typically, the icon will include the outline of a box with a checkmark indicator inside. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>focusedUncheckedIconUri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the checkbox icon to use for list items that are in the unchecked state when that list item has the key focus. Typically, the icon will include the outline of an empty box. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"data-bindings\\\">Data bindings</h2>\\n<p>The data model for the CheckList node should have a single ContentNode as the root node in its <code>content</code> field. The structure of the rest of the data model depends on whether or not the list items are to be grouped into sections.</p>\\n<h4 id=\\\"list-items-not-grouped-into-sections\\\">List items not grouped into sections</h4>\\n<p>If the list items are not to be grouped into sections, one child ContentNode should be added to the root node for each item in the list (these child nodes can be thought of as <code>item nodes</code>). Item nodes should have their ContentNode attributes set as shown in the table below.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>TITLE</td>\\n<td>string</td>\\n<td>The label for the list item</td>\\n</tr>\\n<tr>\\n<td>HIDEICON</td>\\n<td>Boolean</td>\\n<td>When set to true, the default, the list item displays the checkbox icon, reflecting the item's current selection state. When set to false, no checkbox icon is displayed, allowing the list to contain a mix of checkbox and regular list items.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"list-items-grouped-into-sections\\\">List items grouped into sections</h4>\\n<p>If the list items are to be grouped into sections, one child ContentNode should be added to the root node for each section in the list (these child nodes can be thought of as <code>section roots</code>). Each section root should contain one child ContentNode for each item in the section (that is, item nodes). Each item ContentNode uses the same attributes as the item nodes when there are no sections, as shown in the table above.</p>\\n<p>The section root ContentNodes use the following attributes:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>CONTENTTYPE</td>\\n<td>string</td>\\n<td>Must be set to <code>SECTION</code></td>\\n</tr>\\n<tr>\\n<td>TITLE</td>\\n<td>string</td>\\n<td>Label for the section divider</td>\\n</tr>\\n<tr>\\n<td>HDGRIDPOSTERURL</td>\\n<td>uri</td>\\n<td>The image file for the icon to be displayed to the left of the section label when the screen resolution is set to HD.</td>\\n</tr>\\n<tr>\\n<td>SDGRIDPOSTERURL</td>\\n<td>uri</td>\\n<td>The image file for the icon to be displayed to the left of the section label when the screen resolution is set to SD.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids/CheckListExample\\\">CheckListExample</a> is a sample channel demonstrating CheckList in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/list-and-grid-nodes/radiobuttonlist.md":"{\n  \"content\": \"<h1 id=\\\"radiobuttonlist\\\">RadioButtonList</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/labellist.md\\\"><strong>LabelList</strong></a></p>\\n<p>The RadioButtonList node class is a simple list class that can be used to display a list of mutually exclusive radio buttons. Each item in the list displays a text string and an optional check mark icon positioned to the left of the text string that indicates which of the radio buttons is currently selected.</p>\\n<h2 id=\\\"example\\\">Example</h2>\\n<p>The following is an example screenshot showing the use of RadioButtonList:</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/radiobutton-screen.png\\\" alt=\\\"roku815px - radiobutton-screen\\\" title=\\\"radiobutton-screen\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>checkedItem</td>\\n<td>integer</td>\\n<td>-1</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the index of the currently selected item in the list. The initial default value of -1 indicates that no radio button is currently selected. Setting the field changes the currently selected radio button list item to match the specified index.</td>\\n</tr>\\n<tr>\\n<td>checkOnSelect</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Controls whether or not pressing the remote control OK key causes the <code>checkedItem</code> field value to be automatically updated to the index of the currently focused list item. By default, the field value is set to true, but there are use cases where other behavior may be desired. In those cases, it is up to the developer to manage the currently selected radio button by setting the checkedItem field value to the desired index.</td>\\n</tr>\\n<tr>\\n<td>checkedIconUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the check mark icon to use for the currently selected radio button list item when that list item does not have the key focus. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>focusedCheckedIconUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the check mark icon to use for the currently selected radio button list item when that list item has the key focus. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"data-bindings\\\">Data bindings</h2>\\n<p>The data model for the RadioButtonList node should have a single ContentNode as the root node, with one child ContentNode added to the root node for each item in the list (these child nodes can be thought of as <code>item nodes</code>). Item nodes should have their ContentNode attributes set as shown in the table below.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>TITLE</td>\\n<td>string</td>\\n<td>The label for the list item</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids/RadioButtonListExample\\\">RadioButtonListExample</a> is a sample channel demonstrating RadioButtonList in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/list-and-grid-nodes/targetlist.md":"{\n  \"content\": \"<h1 id=\\\"targetlist\\\">TargetList</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/targetgroup.md\\\"><strong>TargetGroup</strong></a></p>\\n<p>The TargetList node class adds useful functionality to the TargetGroup node by making is easy to set up lists and rows of items with limited amounts of scripting required. In particular, TargetList provides a built-in focused/unfocused transition, as well as a simple way to implement various focus management policies (i.e. fixed focus, floating focus, etc.). It also provides default key handling for navigating the list or row.</p>\\n<h3 id=\\\"fixed-focus-set-up\\\">Fixed Focus Set-up</h3>\\n<p>To set up a fixed focus list or grid, set the focusedTargetSet field to a TargetSet that describes a set of rectangular target regions where each item will be rendered. If you want to have a transition between the layouts for when the TargetList is focused and when it is unfocused, set the unfocusedTargetSet field to a TargetSet that describes a set of rectangular target regions for the unfocused case. Make sure to specify which of the target regions should contain the focused item either by setting the targetIndex field of the focusedTargetSet or by setting the TargetGroup's defaultTargetSetFocusIndex field.</p>\\n<p><strong>focusedTargetSet1</strong></p>\\n<pre><code>focusedTargetSet1 = createObject(\\\"roSGNode\\\", \\\"TargetSet\\\")\\nm.tList1.focusedTargetSet = [ focusedTargetSet1 ]\\n\\nfocusedTargetSet1.targetRects = [\\n    { x:-178, y:-64, height:134, width:240 },\\n    { x:72, y:-96, height:202, width:360 }, ' rectangle in focus (Item 1)\\n    { x:442, y:-64, height:134, width:240 },\\n    { x:692, y:-64, height:134, width:240 },\\n    { x:942, y:-64, height:134, width:240 },\\n    { x:1192, y:-64, height:134, width:240 }\\n]\\nfocusedTargetSet1.color = \\\"0x00202020AA\\\"\\nfocusedTargetSet1.focusIndex = 1\\n</code></pre>\\n<p><strong>unfocusedTargetSet</strong></p>\\n<pre><code>unfocusedTargetSet.targetRects = [\\n    { x:-100, y:-64, height:134, width:240 },\\n    { x:150, y:-64, height:134, width:240 },\\n    { x:400, y:-64, height:134, width:240 },\\n    { x:650, y:-64, height:134, width:240 },\\n    { x:900, y:-64, height:134, width:240 },\\n    { x:1150, y:-64, height:134, width:240 }\\n]\\nunfocusedTargetSet.color = \\\"0x00202020AA\\\"\\n</code></pre>\\n<h3 id=\\\"floating-focus-set-up\\\">Floating Focus Set-up</h3>\\n<p>To set up a floating focus list or grid, set the focusedTargetSet field to a TargetSet that describes a set of rectangular target regions where each item will be rendered. For each possible layout of focused items, specify a TargetSet node that shows the layout of all the target regions, then set the focusedTargetSet field to an array containing those TargetSet nodes.</p>\\n<p>In the graphic below, the first row contains 4 fully visible rectangles (excluding the two partially visible items on each end). In order to create a floating focus effect, each fully visible rectangle is defined by its own TargetSet that describes a set of rectangles, their sizes, their positioning, and which rectangle is in focus within the TargetSet. In the first TargetSet (when Item 1 is in focus), we define the size and positioning of all the rectangles within the first row. The focusIndex (\\\"1\\\") is also set to the index within the array of targetRects we want to be in focus.</p>\\n<p>When the focus moves to Item 2, the layout of the first row is defined by another TargetSet defining the size and positioning of Item 2 and the positioning and sizes of the adjacent rectangles. The same is also true when Item 3 is in focus and when Item 4 is in focus. An unfocusedTargetSet can also be defined for unfocused rows like the 2 rows below the row in focus seen below.</p>\\n<p><strong>focusedTargetSet array</strong></p>\\n<pre><code>focusedTargetSet1 = createObject(\\\"roSGNode\\\", \\\"TargetSet\\\")\\nfocusedTargetSet2 = createObject(\\\"roSGNode\\\", \\\"TargetSet\\\")\\nfocusedTargetSet3 = createObject(\\\"roSGNode\\\", \\\"TargetSet\\\")\\nfocusedTargetSet4 = createObject(\\\"roSGNode\\\", \\\"TargetSet\\\")\\nm.tList1.focusedTargetSet = [ focusedTargetSet1, focusedTargetSet2, focusedTargetSet3, focusedTargetSet4 ]\\n</code></pre>\\n<p><strong>Additional TargetSets for floating focus</strong></p>\\n<pre><code>focusedTargetSet2.targetRects = [\\n    { x:-178, y:-64, height:134, width:240 },\\n    { x:72, y:-64, height:134, width:240 },\\n    { x:322, y:-96, height:202, width:360 }, ' rectangle in focus (Item 2)\\n    { x:692, y:-64, height:134, width:240 },\\n    { x:942, y:-64, height:134, width:240 },\\n    { x:1192, y:-64, height:134, width:240 }\\n]\\nfocusedTargetSet2.color = \\\"0x00202020AA\\\"\\nfocusedTargetSet2.focusIndex = 2\\n\\nfocusedTargetSet3.targetRects = [\\n    { x:-178, y:-64, height:134, width:240 },\\n    { x:72, y:-64, height:134, width:240 },\\n    { x:322, y:-64, height:134, width:240 },\\n    { x:572, y:-96, height:202, width:360 }, ' rectangle in focus (Item 3)\\n    { x:942, y:-64, height:134, width:240 },\\n    { x:1192, y:-64, height:134, width:240 }\\n]\\nfocusedTargetSet3.color = \\\"0x00202020AA\\\"\\nfocusedTargetSet3.focusIndex = 3\\n\\nfocusedTargetSet4.targetRects = [\\n    { x:-178, y:-64, height:134, width:240 },\\n    { x:72, y:-64, height:134, width:240 },\\n    { x:322, y:-64, height:134, width:240 },\\n    { x:572, y:-64, height:134, width:240 },\\n    { x:822, y:-96, height:202, width:360 }, ' rectangle in focus (Item 4)\\n    { x:1192, y:-64, height:134, width:240 }\\n]\\nfocusedTargetSet4.color = \\\"0x00202020AA\\\"\\nfocusedTargetSet4.focusIndex = 4\\n</code></pre>\\n<h4 id=\\\"notes\\\">Notes</h4>\\n<ul>\\n<li>To set up floating focus, it is important that all of the TargetSet's specify the same number of target rectangles and for the TargetSet's focusIndex fields to increase by 1 for each TargetSet in the focusedTargetSet field. In the example below, each TargetSet contains an array of 6 rectangles with the focus set to index 1 in focusedTargetSet1, index 2 in focusedTargetSet2, index 3 in focusedTargetSet3, and index 4 in focusedTargetSet4.</li>\\n<li>Setting up an unfocused layout works the same as in the fixed focus case above. Make sure that you do not specify a focusIndex for the unfocusedTargetSet (or set it equal to the default value of -1). Doing this keeps the focus index unchanged when the list loses, then regains focus.</li>\\n</ul>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/floatingFocus.gif\\\" alt=\\\"roku815px - floatingFocus\\\" title=\\\"floatingFocus\\\"></p>\\n<blockquote>\\n<p>Each unfocused TargetList is referencing the same unfocusedTargetSet</p>\\n</blockquote>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>focusedTargetSet</td>\\n<td>array of TargetSet nodes</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies one or more TargetSet's to be used when the TargetList has the focus. If a single TargetSet is specified, focus will stay fixed on the targetRect of that TargetSet that corresponds to the TargetGroup's focus index. The focus index will come from the TargetSet if explicitly specified or from the TargetGroup's defaultTargetSetFocusIndex field if not.<br /><br />If focusedTargetSet includes more than one TargetSet node, that defines a sequence of TargetSet's that will be advanced through as the user presses the advance or reverse key. When advancing, the focus floats from one TargetSet's to the next TargetSet in the array until the last element of the focusedTargetSet is reached, at which point the focus is fixed to the last element and the items begin to scroll.<br /><br />When reversing, the focus floats from one TargetSet to the previous TargetSet in the array until the first element of the focusedTargetSet is reached, at which point the focus is fixed to the first element and the items begin to scroll.<br /><br />See above for more discussion of setting up fixed and floating focus use cases.</td>\\n</tr>\\n<tr>\\n<td>unfocusedTargetSet</td>\\n<td>TargetSet</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the TargetSet to be used when the TargetList does not have the focus.</td>\\n</tr>\\n<tr>\\n<td>advanceKey</td>\\n<td>string</td>\\n<td>\\\"down\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies which remote button will move the focus forward. For vertical lists, this will typically be set to \\\"down\\\". For horizontal rows, this will typically be set to \\\"right\\\".</td>\\n</tr>\\n<tr>\\n<td>reverseKey</td>\\n<td>string</td>\\n<td>\\\"up\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies which remote button will move the focus backward. For vertical lists, this will typically be set to \\\"up\\\". For horizontal rows, this will typically be set to \\\"left\\\".</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/screen%20elements/target_group/TwoRowFixedFocus.zip\\\">TwoRowFixedFocus</a> is a sample channel demonstrating TargetList in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/list-and-grid-nodes/targetset.md":"{\n  \"content\": \"<h1 id=\\\"targetset\\\">TargetSet</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\"><strong>Node</strong></a></p>\\n<p>The TargetSet node class is used to specify a set of target regions where items in a <a href=\\\"/docs/references/scenegraph/layout-group-nodes/targetgroup.md\\\">TargetGroup</a> node are rendered. This information includes an array of rectangles that is used to define the location and size of a region that will be occupied by an item in the TargetGroup as well as an optional index that identifies one rectangle in the array to be treated as the region where the item with focus is located.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>targetRects</td>\\n<td>array of rectangles</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies an array of rectangles that define the target regions used by a TargetGroup node. To specify a rectangle, you can either specify a associative array with x, y, width and height elements or an array of 4 numeric values. For example, you could specify an array of two rectangles like this:<br /><br />[ [ x:10, y:5, width: 200, height:150 ], [ x:10, y:160, width: 200, height:150 ] ]<br /><br />Alternately, you could specify the same array like this:<br /><br />[ [ 10, 5, 200, 150 ], [ 10, 160, 200, 150 ] ]</td>\\n</tr>\\n<tr>\\n<td>focusIndex</td>\\n<td>integer</td>\\n<td>-1</td>\\n<td>READ_WRITE</td>\\n<td>Identifies the index of an element of the targetRects array that will be treated as the region occupied by the focus item. The default of of -1 indicates that the TargetGroup's current focus index will not be changed when the TargetGroup is set to use the TargetSet to define its target regions.</td>\\n</tr>\\n<tr>\\n<td>color</td>\\n<td>Color</td>\\n<td>0xFFFFFF80</td>\\n<td>READ_WRITE</td>\\n<td>If the TargetGroup using this TargetSet has its showTargetRects field set to true, the target rectangles of the current TargetSet will be drawn using the specified color. Drawing the TargetSet's target rectangles is generally only done when debugging an application.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/screen%20elements/target_group/TwoRowFixedFocus.zip\\\">TwoRowFixedFocus</a> is a sample channel demonstrating TargetSet in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/list-and-grid-nodes/zoomrowlist.md":"{\n  \"content\": \"<h1 id=\\\"zoomrowlist\\\">ZoomRowList</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/abstract-nodes/arraygrid.md\\\"><strong>ArrayGrid</strong></a></p>\\n<p>The ZoomRowList node allows a row of the Row-Row Grid to smoothly zoom up to a larger size when that row has focus. Rows in this node are capable of gaining the focus while scrolling, and smoothly zooming up by the specified amount. The amount to zoom can be specified on a per row basis so that some rows can zoom up by a larger amount than others.</p>\\n<h2 id=\\\"anatomy-of-a-zoomrowlist-node\\\">Anatomy of a ZoomRowList node</h2>\\n<p>ZoomRowList is a vertically scrolling list of ZoomRowItem's. ZoomRowItem refers to a horizontally scrolling row or items plus any annotations such as title or counter. In the diagram below, the light blue rectangle identifies what's included in a ZoomRowItem.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/partsLabelled.jpg\\\" alt=\\\"roku815px - partsLabelled\\\" title=\\\"partsLabelled\\\"></p>\\n<h4 id=\\\"zoomrowitems-consist-of-four-parts\\\">ZoomRowItem's consist of four parts:</h4>\\n<ul>\\n<li><strong>Row Title</strong> - This is a built-in Label used to display a title for the row. The string that is displayed comes from the _title _field of the Row's ContentNode. The Row Title supports turning its display on or off, changing its position relative to the ZoomRowItem's coordinate system and modifying its color and font. This is identified by the <strong>green</strong> box in the diagram above.</li>\\n<li><strong>Row Counter</strong> - This is a built-in Label used to display a counter for the row (i.e. 3 of 14). The string that is displayed is automatically generating by the ZoomRowList. In addition to supporting the display attributes listed above for the Row Title, the Row Counter also supports the option of only displaying it when there are enough items in the row to fill up the entire width of the ZoomRowList. By default, the Row Counter is only displayed for the focused row. This is identified by the <strong>orange</strong> box in the diagram above.</li>\\n<li>\\n<p><strong>Row Decoration</strong> - Row Decoration refers to an optional custom RSG component that is used to supplement or replace the Row Title and Row Counter displayed by each ZoomRowItem. The Row Decoration supports several fields that can be used to control its appearances, such as the current height of the ZoomRowItem and the current focus percentage of the row. Some examples where this could be useful include:</p>\\n<ul>\\n<li>Replacing the built-in Row Title with a more complex title that includes both text and icons</li>\\n<li>Adding a Bob to the ZoomRowItem that becomes visible as the row enters the focus position and displays details about the currently focused item in the row.In the picture above, the ZoomRowItem does not include a custom Row Decoration.</li>\\n</ul>\\n</li>\\n<li><strong>Row</strong> - Row refers to the part of the ZoomRowItem that displays the horizontally scrolling set of Item nodes. Each Item uses a custom RSG component to render the associated data. The Row is identified by the <strong>yellow</strong> box in the diagram above. An Item is identified by the <strong>magenta</strong> box in the diagram above.</li>\\n</ul>\\n<p>In some cases, Decoration is used to refer to all the parts of the ZoomRowItem other than the Row (i.e. the Row Title, Row Counter and Row Decoration).</p>\\n<p>ZoomRowList uses the same data model as RowList nodes. There is a single ContentNode, the root ContentNode, that is assigned to be the content of the entire ZoomRowList. The root ContentNode contains zero or more child ContentNode's that contain the data for each row of the ZoomRowList. These are referred to as row ContentNodes. Each of the row ContentNode's contain zero or more child ContentNode's that contain the data for each item in the row. These are referred to as item ContentNodes.</p>\\n<h2 id=\\\"layout-and-coordinate-systems\\\">Layout and coordinate systems</h2>\\n<h3 id=\\\"overall-coordinate-system-and-layout-parameters\\\">Overall coordinate system and layout parameters</h3>\\n<p>The illustration below shows the overall coordinate system used by the ZoomRowList (the green X-Y axis). The origin of the coordinate system defines the top/left point of the fixed focus location.</p>\\n<p>The heights of each ZoomRowItem is defined by the <code>rowZoomHeight</code> field if the row is focused and the <code>rowHeight</code> field if the row is not focused. As the row enters or leaves the focus position, the ZoomRowItem's height is smoothly interpolated between the two values. Each ZoomRowItem is separated from the next by the value specified in the <code>spacingAfterRow</code> field, shown in bright blue in the diagram.</p>\\n<p>The ZoomRowList's <code>itemClippingRect</code> field is used to specify the region where the items in each Row can appear. In this case, the itemClippingRect, shown in yellow in the diagram, is set so that no partial items to the left of ZoomRowList's origin are visible. Generally, setting the itemClippingRect to the smallest value that contains the item's that should be displayed provides optimal performance, so in this case, the width/height of the itemClippingRect is set to the distance between the origin of the ZoomRowList's coordinate system and the right/bottom edge of the screen. Note that the itemClippingRect does not clip the focus feedback indicator.</p>\\n<p>The <code>rowWidth</code> field specifies the maximum width of items in each Row before the item's wrap. If the total width of the items in the row is less than rowWidth, the focus will float left and right as the user navigates the row. If the total width of the items in the row exceeds rowWidth, the focus will stay fixed on the left and the items will animate left and right as the use navigates the row. In this case, the value of the rowWidth field has also been used to specify the position of the Row Counter.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/overallCoordinateSystem.jpg\\\" alt=\\\"roku815px - overallCoordinateSystem\\\" title=\\\"overallCoordinateSystem\\\"></p>\\n<h3 id=\\\"zoomed-and-unzoomed-row-layout-parameters\\\">Zoomed and unzoomed row layout parameters</h3>\\n<p>The diagram below shows how the various <code>rowItem</code> fields are used to layout zoomed and not zoomed ZoomRowItem's. Each ZoomRowItem has its own coordinate system. The X coordinate of the origin the coordinate system is equal to the X coordinate of the overall ZoomRowList's coordinate system. The Y coordinate of the origin of the each ZoomRowItem's coordinate system is position at the top of each ZoomRowItem. The ZoomRowItem coordinate system is shown as green axes in the diagram.</p>\\n<p>The focused ZoomRowItem at the top uses the <code>rowItemZoomOffset</code> field to position its Row relative to the top of the ZoomRowItem's coordinate system. Similarly, the <code>rowItemZoomHeight</code> field is used to specify the height of the items in the Row. The width of the items in the Row is computed using the item's height and aspect ratio, which either comes from the <code>rowItemAspectRatio</code> field (if the <code>useDefaultAspectRatio</code> field is true) or from the <code>aspectRatio</code> field of each item's ContentNode if useDefaultAspectRatio is false.</p>\\n<p>Similarly, the unfocused ZoomRowItem occupying the second row uses the <code>rowItemOffset</code> field to position its Row relative to the top of the ZoomRowItem's coordinate system. Similarly, the <code>rowItemHeight</code> field is used to specify the height of the items in the Row. The aspect ratio is used to compute the width of each item the height as above. The <code>spacingAfterRowItem</code> field is used to specify the horizontal distance between items in the Row. This spacing is zoomed up by the same percentage as the rowHeight as the row gains focus.</p>\\n<p>In this illustration, there is no custom Row Decoration. The positions of Row Title and the Row Counter are specified relative to the origin of each ZoomRowItem by the <code>rowTitleOffset</code> and the <code>rowCounterOffset</code> fields, respectively. The Row Counter is right-aligned, so its right edge is located at the X coordinate of the rowCounterOffset.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/rowLayout.jpg\\\" alt=\\\"roku815px - rowLayout\\\" title=\\\"rowLayout\\\"></p>\\n<h3 id=\\\"custom-row-decoration\\\">Custom row decoration</h3>\\n<p>The illustration below is similar to the one above, but in this case, a custom Row Decoration component is used to display album details for the ZoomRowItem in the focused position. Observe in this case that the rowItemZoomYOffset for the zoomed row is much larger than the rowItemYOffset for the un-zoomed row. This causes the space between the top of the ZoomRowItem and it's horizontally scrolling Row of items to increase as the ZoomRowItem gains focus, allowing room for the album details to smoothly transition onscreen to fill that extra space.</p>\\n<p>Also, notice that the ratio of the focused/unfocused ZoomRowItem's overall height (rowZoom Height/row Height) is significantly larger than the ratio of the focus/unfocused heights of the ZoomRowItem's Row's (rowItemZoomHeight / rowItemHeight). To allow for the extra space occupied by the album details, the Row of items zooms up less than the overall ZoomRowItem does.</p>\\n<p>Also note that in this case, the itemClippingRect is set to reveal partial items to the left of the origin of the ZoomRowList. Since the first row contains enough items to wrap, the partial items are shown. In the second row, there are not enough items to wrap, so all the items are fully visible and no duplicate partial items are shown.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/rowDecorationLayout.jpg\\\" alt=\\\"roku815px - rowDecorationLayout\\\" title=\\\"rowDecorationLayout\\\"></p>\\n<h2 id=\\\"zoomrowlist-fields\\\">ZoomRowList fields</h2>\\n<p>ZoomRowList extends Group so has all the fields of Group as well its parent class Node.</p>\\n<p>Many ZoomRowList fields have an array of values as their type. Unless otherwise noted, the values in these arrays specify a value for each row in the ZoomRowList's data model. If no values are specified, a default value is used. If there are fewer items in the array than rows in the ZoomRowList's data model, the last value in the array is repeated as needed for the unspecified rows. If there are more items in the array than rows in the ZoomRowList's data model, the extra values are ignored.</p>\\n<p>One common use case for these array fields is to specify a special value for the first row in the array (a Hero row) and a second value for all other rows. In that case, the field would be set to <code>[ &#x3C;Hero Row Value>, &#x3C;Regular Row Value> ]</code> so that the Hero Row Value is used for the first row and the Regular Row Value is used for the remaining rows.</p>\\n<p>This table documents all the fields in ZoomRowList:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Use</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>content</td>\\n<td>ContentNode</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the content for the list. The content should be a single ContentNode that has one child ContentNode for each row. These child ContentNodes for each row should themselves contains child ContentNodes for each item in the row. See <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/zoomrowlist.md#zoomrowlist-data-model\\\">ZoomRowList data model</a> below for more details.</td>\\n</tr>\\n<tr>\\n<td>itemComponentName</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the name of an XML component for the items in each row. An instance of this component is created on demand for each visible item of each row. The XML component must define a specific interface as detailed <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/zoomrowlist.md#item-component-fields\\\">Item component fields</a> below.</td>\\n</tr>\\n<tr>\\n<td>rowWidth</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>This specifies a \\\"safe\\\" width for the row. Currently, it's only used if the displayed width of the zoomed Item's exceeds this width. If that occurs, the items in the row will wrap horizontally.  <br /><br />Once full floating focus functionality is added in a subsequent release, this will be used to specify the rightmost limit that the focus can reach as focus floats from left to right.</td>\\n</tr>\\n<tr>\\n<td>rowHeight</td>\\n<td>array of float</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the ZoomRowItem when the row is not zoomed. Note that this includes the height of the Row and its Decorations. At least one value must be specified.</td>\\n</tr>\\n<tr>\\n<td>rowZoomHeight</td>\\n<td>array of float</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the ZoomRowItem when the row is zoomed. As the row gains focus, the height of its ZoomRowItem will smoothly change from the row's itemHeight to the row's rowZoomHeight.  <br /><br />If no values are specified, none of the rows zoom.</td>\\n</tr>\\n<tr>\\n<td>spacingAfterRow</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the spacing between rows of the ZoomRowList. Note that this spacing value is not scaled by the zoomPercent.</td>\\n</tr>\\n<tr>\\n<td>itemClippingRect</td>\\n<td>Rect2D</td>\\n<td>AA with x, y, width, height set to zero</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a clipping region for the ZoomRowItem's rendered. This provides control over which items are visible. For example, if the left value is set to a negative number, items to the left of the grid's item origin will be visible.  <br /><br />For best performance, this should be set so that the itemClippingRect exactly matches what's visible onscreen.  <br /><br />If this field is not set, heuristics are used to determine an acceptable clipping rectangle for the items in the ZoomRowList.This field will have the same value as rowFocusPercent unless the remainZoomedAboveFocus field is set to \\\"never\\\" or if the zoomed and un-zoomed height of a row are equal.</td>\\n</tr>\\n<tr>\\n<td>rowItemYOffset</td>\\n<td>array of float</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>This specifies the vertical position of the Row relative to the top of its ZoomRowItem when the row is unfocused.  <br /><br />Combined with rowZoomYOffset, this allows the vertical position of the ZoomRowItem's Row to smoothly change relative to the top of the ZoomRowItem as the ZoomRowItem gains or loses focus.</td>\\n</tr>\\n<tr>\\n<td>rowItemZoomYOffset</td>\\n<td>array of float</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>This specifies the vertical position of the Row relative to the top of its ZoomRowItem when the row is focused (i.e. zoomed).  <br /><br />Combined with rowYOffset, this allows the vertical position of the ZoomRowItem's Row to smoothly change relative to the top of the ZoomRowItem as the ZoomRowItem gains or loses focus.</td>\\n</tr>\\n<tr>\\n<td>rowItemHeight</td>\\n<td>array of float</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>This specifies the height of each Item in a Row when the row is unfocused.  <br /><br />Combined with rowZoomItemHeight, this allows the height of each Item in a Row to be scaled differently than the height of the Row's ZoomRowItem. As the ZoomRowItem gains or loses focus, the height of each Item in the Row smoothly interpolated between the rowItemHeight and rowZoomItemHeight for that row.</td>\\n</tr>\\n<tr>\\n<td>rowItemZoomHeight</td>\\n<td>array of float</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>This specifies the height of each Item in a Row when the row is focused (i.e. zoomed).  <br /><br />Combined with rowZoomItemHeight, this allows the height of each Item in a Row to be scaled differently than the height of the Row's ZoomRowItem. As the ZoomRowItem gains or loses focus, the height of each Item in the Row smoothly interpolated between the rowItemHeight and rowZoomItemHeight for that row.</td>\\n</tr>\\n<tr>\\n<td>rowItemAspectRatio</td>\\n<td>array of float</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>This specifies the aspect ratio of the Items in a Row. This is used to compute the width of the Item's based on the interpolated row item height (see the rowItemHeight and rowZoomItemHeight fields above).  <br /><br />If useDefaultAspectRatio is true for that row, then the rowItemAspectRatio value is used to compute the width of each Item in the Row. If false, then if the ContentNode for the Item includes an aspectRatio field, that value is used. This allows different items in a Row to have different aspect ratios.  <br /><br />The rowItemAspectRatio values should be a floating point values that represent the ratio of the Item's width to height. For example, if the Item should have a 16 x 9 aspect ratio, this value specified would by 1.7777778 ( = 16 / 9).</td>\\n</tr>\\n<tr>\\n<td>spacingAfterRowItem</td>\\n<td>array of float</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>This specifies the horizontal spacing between Items in a Row. When the row is unfocused, this spacing is set to this value. As the row gains focus, this value scales by the same percentage as the row item height increases as it's interpolated between the rowItemHeight and the rowItemZoomHeight for the row.</td>\\n</tr>\\n<tr>\\n<td>useDefaultAspectRatio</td>\\n<td>array of Boolean</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>If set to false, rowItemAspectRatio is used to specify the aspect ratio for items in a Row. If set to true and if the ContentNode for an Item in the row includes an aspectRatio field, that value is used instead of the rowItemAspectRatio value. This allows different items in a Row to have different aspect ratios.</td>\\n</tr>\\n<tr>\\n<td>wrap</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>If true, the items wrap from bottom to top. If false, the items do not wrap.</td>\\n</tr>\\n<tr>\\n<td>drawFocusFeedbackOnTop</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>If true, the focus feedback indicator is drawn on top of (after) the items. If false, it is drawn below (before) the items.</td>\\n</tr>\\n<tr>\\n<td>drawFocusFeedback</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>If true, the focus feedback indicator is drawn. If false, it is not drawn.</td>\\n</tr>\\n<tr>\\n<td>fadeFocusFeedbackWhenLongPressScrolling</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>If true, when long press scrolling begins, the focus indicator will fade out and reappear when long press scrolling ends. If false, the focus indicator remains visible during long press scrolling.</td>\\n</tr>\\n<tr>\\n<td>focusBitmapUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file used for the focus feedback indicator when the ZoomRowList has focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>focusBitmapBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Blend the graphic image specified by <code>focusBitmapUri</code> with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by <code>focusBitmapUri</code>.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerBitmapUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the bitmap file to use as a visual separator between the last and first list items when the list wraps. In most case, this should be a 9-patch image that specifies both expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerBitmapBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>READ_WRITE</td>\\n<td>Blend the graphic image specified by wrapDivider <code>BitmapUri</code> with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by wrapDivider<code>BitmapUri</code>.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerHeight</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the divider. The wrap divider bitmap will be scaled to this height. This height is also added to the row spacing after the last row to allow more space between the first and last rows when the divider is drawn.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerWidth</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width of the divider. The wrap divider bitmap will be scaled to this width. If not specified, the width is set to the value of the <code>rowWidth</code> field.</td>\\n</tr>\\n<tr>\\n<td>wrapDividerOffset</td>\\n<td>Vector2D</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>By default, the wrap divider is drawn with its X-position set to 0 in the ZoomRowList's coordinate system and vertically centered in the space between the first and last rows (This space equals the spacing after the last row plus the row divider height). This field allows the position of the wrap divider to be adjusted relative to its default position.</td>\\n</tr>\\n<tr>\\n<td>showRowTitle</td>\\n<td>array of Boolean</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the row title displayed.  <br /><br /><strong>NOTE:</strong> RowList has an identical field named \\\"showRowLabel\\\". The name was changed to \\\"showRowTitle\\\" for the ZoomRowList to indicate that the text for the label comes from the Row ContentNode's title field.</td>\\n</tr>\\n<tr>\\n<td>rowTitleOffset</td>\\n<td>array of Vector2D</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the offset of the Row Title for each row. The x-coordinate specifies the horizontal offset of the label from the left edge of the row. The y-coordinate specifies the vertical spacing of the top of the Row Title from the top of the row's coordinate system. If the array specified contains no values, a default offset value of <code>[0,0]</code> is used.</td>\\n</tr>\\n<tr>\\n<td>rowTitleFont</td>\\n<td>Font</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the font for the Row Title's text.  <br /><br /><strong>NOTE:</strong> RowList has an identical field named \\\"rowLabelFont\\\" (see showRowTitle's description above for more details).</td>\\n</tr>\\n<tr>\\n<td>rowTitleColor</td>\\n<td>array of color</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the Row Title's text.  <br /><br /><strong>NOTE:</strong> RowList has an identical field named \\\"rowLabelColor\\\" (see showRowTitle's description above for more details).</td>\\n</tr>\\n<tr>\\n<td>showRowCounter</td>\\n<td>array of Boolean</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether each row's Row Counter is displayed. Note that the Row Counter is displayed for the focused row even if the <code>showRowTitle</code> field value for that row is set to true.</td>\\n</tr>\\n<tr>\\n<td>rowCounterOffset</td>\\n<td>array of Vector2D</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the offset of the Row Counter for each row. The x-coordinate specifies the horizontal offset of the label from the left edge of the row. The y-coordinate specifies the vertical spacing of the top of the Row Counter from the top of the row's coordinate system. If the array contains fewer elements than the number of rows in the data model, the last value in the array is used as the offset for the labels of the extra rows. If the array specified contains no values, a default offset value of <code>[0,0]</code> is used.  <br /><br />Note that the Row Counter is right-aligned, so the x-coordinate of its rowCounterOffset is used to position the right edge of the Row Counter's Label node.</td>\\n</tr>\\n<tr>\\n<td>rowCounterFont</td>\\n<td>Font</td>\\n<td>invalid</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the font for the Row Counter's text.  <br /><br /><strong>NOTE:</strong> RowList did not allow a different font for the Row Counter to be used. It always used the same font as the Row Title.</td>\\n</tr>\\n<tr>\\n<td>rowCounterColor</td>\\n<td>array of color</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the font for the Row Counter's text.  <br /><br /><strong>NOTE:</strong> RowList did not allow a different color for the Row Counter to be used. It always used the same color as the Row Title.</td>\\n</tr>\\n<tr>\\n<td>showRowCounterForShortRows</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>When set to true, the Row Counter is shown for all rows. When set to false, the Row Counter is not shown if the total zoomed width of the items in the room is less than the value of the <code>rowWidth</code> field.</td>\\n</tr>\\n<tr>\\n<td>rowDecorationComponentName</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the name of an XML component to decorate each row. An instance of this component is created on demand for each visible item of each row. The XML component must define a specific interface as detailed in the <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/zoomrowlist.md#row-decoration-component-fields\\\">Row decoration component fields</a> section below.</td>\\n</tr>\\n<tr>\\n<td>rowSelected</td>\\n<td>integer</td>\\n<td>-1</td>\\n<td>READ_ONLY</td>\\n<td>When an item is selected, set to the index of the selected row.  <br /><br /><strong>NOTE:</strong> RowList has an identical field named \\\"itemSelected\\\". This new name better reflects the field's purpose.</td>\\n</tr>\\n<tr>\\n<td>rowFocused</td>\\n<td>integer</td>\\n<td>-1</td>\\n<td>READ_ONLY</td>\\n<td>When a row gains the key focus, set to the index of the focused row.  <br /><br /><strong>NOTE:</strong> RowList has an identical field named \\\"itemFocused\\\". This new name better reflects the field's purpose.</td>\\n</tr>\\n<tr>\\n<td>rowUnfocused</td>\\n<td>integer</td>\\n<td>-1</td>\\n<td>READ_ONLY</td>\\n<td>When a row loses the key focus, set to the index of the unfocused row.  <br /><br /><strong>NOTE:</strong> RowList has an identical field named \\\"itemUnfocused\\\". This new name better reflects the field's purpose.</td>\\n</tr>\\n<tr>\\n<td>rowItemSelected</td>\\n<td>array of integer</td>\\n<td>[ ]</td>\\n<td>READ_ONLY</td>\\n<td>When an item is selected, set to a 2-element array, where element 0 contains the index of the row containing the selected item, and element 1 contains the index of the selected item in that row.</td>\\n</tr>\\n<tr>\\n<td>rowItemFocused</td>\\n<td>array of integer</td>\\n<td>[ ]</td>\\n<td>READ_ONLY</td>\\n<td>When an item gains the key focus, set to a 2-element array, where element 0 contains the index of the focused row, and element 1 contains the index of the focused item in that row.</td>\\n</tr>\\n<tr>\\n<td>scrollingStatus</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_ONLY</td>\\n<td>Set to true whenever the ZoomRowList is scrolling the focus horizontally or vertically.</td>\\n</tr>\\n<tr>\\n<td>rowsRendered</td>\\n<td>array of integer</td>\\n<td>[ ]</td>\\n<td>READ_ONLY</td>\\n<td>Contains a pair of indices that indicate the first and last Row ContentNode's that were rendered during the previous render. It is set at the end of each render.  <br /><br />For example, if rows 2, 3 and 4 were rendered, the field is set to <code>[2, 4]</code>  <br /><br />Note if the rows have wrapped vertically, the first value will be less than the second. So if there are 7 Row ContentNode's and itemsRendered is set to [ 6, 1] that indicates that Row ContentNode's 6, 0 and 1 were rendered.</td>\\n</tr>\\n<tr>\\n<td>rowItemsRendered</td>\\n<td>array of integer</td>\\n<td>[ ]</td>\\n<td>READ_ONLY</td>\\n<td>Contains an array of values that indicate what Row ContentNode's and what Item ContentNode's were rendered during the previous render. It is set at the end of each render.  <br /><br />The values in the arrays are triples of integers with each triple containing the index of the Row ContentNode, followed by the first and last index of the Item ContentNode's in that row that was rendered.  <br /><br />For example if rowItemsRender is set to [ 0, 4, 7, 1, 0, 2, 2, 0, 3 ] that indicates that Item ContentNode children 4 to 7 of Row ContentNode 0 were rendered, Item ContentNode children 0 to 2 of Row ContentNode 1 were rendered and Item ContentNode children 0 to 3 of Row ContentNode 2 were rendered.  <br /><br />The triples will appear in the order in which the rows were rendered and will contain one triple of values for each rendered row.  <br /><br />If the Item's in a row have wrapped horizontally, the first item index for that row will be greater than the second. For example, if row 3 has 8 Item ContentNode's and rowItemsRendered is set to [ 3, 6, 2], that indicates that Item ContentNode's 6, 7, 0, 1 and 2 of row 3 were rendered.</td>\\n</tr>\\n<tr>\\n<td>currFocusRow</td>\\n<td>float</td>\\n<td>-1.0</td>\\n<td>READ_ONLY</td>\\n<td>Set to the index of the row that currently overlaps the ZoomRowList's fixed focus position (i.e. y=0 in the ZoomRowList's coordinate system). Let's refer to that position as yFocusTop. The value is a floating point value where the integer part represents the row that overlaps yFocusTOp and the fractional part represents the percentage of the item that overlaps the fixed focus position. For example, a value of 2.3 indicates that the focus is 30% of the way between row's 2 and 3.  <br /><br />If currFocusRow is greater than the number of rows' in the content minus 1, that indicates that the focus is between the last row and the first row. For example, if the ZoomRowList's content has 8 rows, currFocusRow = 7.65 would indicate that the focus is 65% of the way between row 7 and row 0.</td>\\n</tr>\\n<tr>\\n<td>jumpToRow</td>\\n<td>integer</td>\\n<td>-1</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid item index, causes the list to immediately update so that the specified row moves into the focus position.  <br /><br /><strong>NOTE:</strong> RowList has an identical field named \\\"jumpToItem\\\". This new name better reflects the field's purpose.</td>\\n</tr>\\n<tr>\\n<td>jumpToRowItem</td>\\n<td>array of integer</td>\\n<td>[ ]</td>\\n<td>WRITE_ONLY</td>\\n<td>When set to a valid [ row, col ] index pair, causes the list to immediately update so that the specified row, col item moves into the focus position.</td>\\n</tr>\\n<tr>\\n<td>animateToRow</td>\\n<td>integer</td>\\n<td>-1</td>\\n<td>WRITE_ONLY</td>\\n<td><strong>Write-Only</strong>   <br />When set to a valid item index, causes the list to quickly scroll so that the specified row moves into the focus position.  <br /><br /><strong>NOTE:</strong> RowList has an identical field named \\\"animateToItem\\\". This new name better reflects the field's purpose.</td>\\n</tr>\\n<tr>\\n<td>remainZoomedAboveFocus</td>\\n<td>string</td>\\n<td>focusIsAtTop</td>\\n<td>READ_WRITE</td>\\n<td>This field controls whether the rows that appear above the focus row are shown in their zoomed size or un-zoomed size as they move in/out of the focus position.  <br /><br />If set to \\\"focusIsAtTop\\\" and the ZoomRowList's itemClippingRect's top is set 0.0, then rows will remain at their zoomed size as they enter/exit the focus region from above. The UX team has decided that this looks better as it minimizes the number of items simultaneously changing sizes as the user scrolls vertically.  <br /><br />If set to \\\"never\\\", then rows will zoom up/down as they enter/exit the focus region from above.  <br /><br />If set to \\\"always\\\", then rows will always remain at their zoomed size as they enter/exit the focus region from above regardless of the itemClippingRect's top value.</td>\\n</tr>\\n<tr>\\n<td>fadeOutAboveFocus</td>\\n<td>string</td>\\n<td>focusIsAtTop</td>\\n<td>READ_WRITE</td>\\n<td>This field controls whether the rows that appear above the focus row fade in/out as they move in/out of the focus position.  <br /><br />If set to \\\"focusIsAtTop\\\" and the ZoomRowList's itemClippingRect's top is set 0.0, then rows will fade in/out as they enter/exit the focus region from above.  <br /><br />If set to \\\"never\\\", then rows will not fade in/out as they enter/exit the focus region from above.  <br /><br />If set to \\\"always\\\", then rows will always fade in/out as they enter/exit the focus region from above regardless of the itemClippingRect's top value.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"zoomrowlist-data-model\\\">ZoomRowList data model</h2>\\n<p>A ZoomRowList node should have a single ContentNode as the root node stored in its content field. One child ContentNode should be added to the root node for each row in the list (these nodes can be thought of as <code>row nodes</code>). Each row node should contain one child ContentNode for each item in the row (these nodes can be thought of as <code>item nodes</code>).</p>\\n<h4 id=\\\"row-contentnode-data-bindings\\\">Row ContentNode data bindings</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>title</td>\\n<td>string</td>\\n<td>This is used as the string display in the Row Title</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"item-contentnode-data-bindings\\\">Item ContentNode data bindings</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>aspectRatio</td>\\n<td>float</td>\\n<td>This specifies the aspectRatio for the item. It is used to compute the width from the interpolated row item height for row's where the useDefaultAspectRatio is set to false.<br /><br />The value should be a floating point value representing the ratio of the Item's width to height. For example, if the Item should have a 16 x 9 aspect ratio, this value specified would by 1.7777778 ( = 16/9).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"item-component-fields\\\">Item component fields</h2>\\n<p>Each Item in the ZoomRowList is rendered using a custom XML component specified by the <code>itemComponentName</code> field value. An instance of this component is created for each visible Item in each Row of the ZoomRowList.</p>\\n<p>If the XML component contains interface fields that match the names shown in the table below, those fields will be updated by the ZoomRoowList node. This allows the XML component to dynamically alter the item's appearance by observing changes to these interface fields.</p>\\n<p>Note that the fields are updated in the order presented in the table below. Most notably, when the itemContent field is set initially, the other fields will have valid values. This allows the script to be made more efficient by delaying computations until the itemContent field is set in some cases.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field Name</th>\\n<th>Field Type</th>\\n<th>Access  Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>Set to the width of the Item.<br /><br />Note this is computed from the interpolated row item height scaled by the item's aspect ratio. The aspect ratio comes from either the rowItemAspectRatio field (if useDefaultAspectRatio for the row if true) or from the Item's ContentNode (if useDefaultAspectRatio for the row is false).</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>Set to the height of the Item.<br /><br />Note this is computed by interpolating the rowItemHeight and rowZoomItemHeight field values for the row.</td>\\n</tr>\\n<tr>\\n<td>index</td>\\n<td>integer</td>\\n<td>READ_ONLY</td>\\n<td>Set to the index of the Item ContentNode in the row's Row ContentNode associated with this item. For example, if the index is set to 2, that indicates that this item is associated with child 2 of the Row's ContentNode. Note that the index of the RowContent node is available via the rowIndex field.</td>\\n</tr>\\n<tr>\\n<td>rowIndex</td>\\n<td>integer</td>\\n<td>READ_ONLY</td>\\n<td>Set to the index of the Row ContentNode associated with this item. For example, if the index is set to 2, that indicates that this Item is part of row 2.</td>\\n</tr>\\n<tr>\\n<td>itemHasFocus</td>\\n<td>Boolean</td>\\n<td>READ_ONLY</td>\\n<td>Indicates whether the Item is currently the RowList's focused item. When scrolling starts, the itemHasFocus field for the currently focused Item is set to false. When scrolling ends, the itemHasFocus field for the newly focused Item is set to true. During the scrolling animation, all itemHasFocus fields are set to false.<br /><br />Only one Item's of the ZoomRowList will ever have itemHasFocus set to true. If the ZoomRowList does not have focus, all itemHasFocus fields of all Item's will be set to false.</td>\\n</tr>\\n<tr>\\n<td>rowHasFocus</td>\\n<td>Boolean</td>\\n<td>READ_ONLY</td>\\n<td>Set to true if the Row that contains this Item has focus, false otherwise. When scrolling starts, the rowHasFocus field for all Item's in the Row in the currently focused Row is set to false. When scrolling ends, the rowHasFocus field for all Item's the newly focused Row are set to true. During the scrolling animation, all rowHasFocus fields are set to false.<br /><br />Only the Item's in one Row of the ZoomRowList will ever have rowHasFocus set to true. If the ZoomRowList does not have focus, all rowHasFocus fields of all Item's will be set to false.</td>\\n</tr>\\n<tr>\\n<td>rowListHasFocus</td>\\n<td>Boolean</td>\\n<td>READ_ONLY</td>\\n<td>Set to true if the ZoomRowList that contains this Item has focus, false otherwise. The rowListHasFocus field of all Item's of the ZoomRowList will always have the same value.</td>\\n</tr>\\n<tr>\\n<td>itemContent</td>\\n<td>ContentNode</td>\\n<td>READ_ONLY</td>\\n<td>Contains the data to be displayed by the row list item. The relationship between data in the ContentNode node and the visual elements of the row list item is determined by the markup and scripts' of the item's XML component. Typically, an observer callback function of the itemContent field is used to update the row list item when the content changes.</td>\\n</tr>\\n<tr>\\n<td>focusPercent</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>A fractional value that smoothly changes from 0.0 to 1.0 as the Item gains focus and from 1.0 to 0.0 as the item loses focus. This value is typically used in the item's XML component to smoothly change some aspect of the Item's appearance as it moves horizontally in and out of the focus position.</td>\\n</tr>\\n<tr>\\n<td>rowFocusPercent</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>A fractional value that smoothly changes from 0.0 to 1.0 as the Item's Row gains focus and from 1.0 to 0.0 as the Item's Row loses focus. This value is typically used in the item's XML component to smoothly change some aspect of the Item's appearance as it's Row moves vertically in and out of the focus position.</td>\\n</tr>\\n<tr>\\n<td>rowHeightPercent</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>A fractional value that smoothly changes from 0.0 to 1.0 as the height of item's in the row animate between their unfocused height (rowHeightPercent=0.0) and focused height (rowHeightPercent=1.0) while gaining/losing focus. This value is typically used in the item's XML component to smoothly change some aspect of the Item's appearance as it's Row moves vertically in and out of the focus position.<br /><br />This field will have the same value as rowFocusPercent unless the remainZoomedAboveFocus field is set to \\\"never\\\" or if the zoomed and un-zoomed height of a row are equal.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"row-decoration-component-fields\\\">Row decoration component fields</h2>\\n<p>If a <code>RowDecorationComponentName</code> is specified, an instance of this component is created as a child of each visible row's ZoomRowItem.</p>\\n<p>If the XML component contains interface fields that match the names shown in the table below, those fields will be updated by the ZoomRoowList node. This allows the XML component to dynamically alter the row decoration's appearance by observing changes to these interface fields.</p>\\n<p>Note that the fields are updated in the order presented in the table below. Most notably, when the itemContent field is set initially, the other fields will have valid values. This allows the script to be made more efficient by delaying computations until the itemContent field is set in some cases.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field Name</th>\\n<th>Field Type</th>\\n<th>Access Permisson</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>Set to the width of the row as specified in the ZoomRowList's rowWidth field.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>Set to the height of the ZoomRowItem.</td>\\n</tr>\\n<tr>\\n<td>rowFocused</td>\\n<td>integer</td>\\n<td>READ_ONLY</td>\\n<td>Set to the index of the currently focused Item when the ZoomRowList's rowFocused field is set.</td>\\n</tr>\\n<tr>\\n<td>rowCounterText</td>\\n<td>string</td>\\n<td>READ_ONLY</td>\\n<td>Set to the text that is displayed by the Row Counter. This would typically be used if the default Row Counter is not shown and the row decoration component displays that information in another way.</td>\\n</tr>\\n<tr>\\n<td>rowContent</td>\\n<td>ContentNode</td>\\n<td>READ_ONLY</td>\\n<td>Contains the ContentNode associated with the Row.</td>\\n</tr>\\n<tr>\\n<td>rowFocusPercent</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>A fractional value that smoothly changes from 0.0 to 1.0 as the Item's Row gains focus and from 1.0 to 0.0 as the Item's Row loses focus. This value is typically used in the item's XML component to smoothly change some aspect of the Item's appearance as it's Row moves vertically in and out of the focus position.</td>\\n</tr>\\n<tr>\\n<td>rowHeightPercent</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>A fractional value that smoothly changes from 0.0 to 1.0 as the height of item's in the row animate between their unfocused height (rowHeightPercent=0.0) and focused height (rowHeightPercent=1.0) while gaining/losing focus. This value is typically used in the item's XML component to smoothly change some aspect of the Item's appearance as it's Row moves vertically in and out of the focus position.<br /><br />This field will have the same value as rowFocusPercent unless the remainZoomedAboveFocus field is set to \\\"never\\\" or if the zoomed and unzoomed height of a row are equal.</td>\\n</tr>\\n<tr>\\n<td>drawBeforeItems</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td><em>Available since Roku OS 9.2</em><br /><br /><strong>Write-only</strong>. Controls whether the row decoration component is drawn before (true) or after the items (false) in a row. This allows a background image to be drawn behind the tiles in a row.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids/zoomRowListDefaultLayoutTest\\\">zoomRowListDefaultLayoutTest</a> is a sample channel demonstrating the ZoomRowList in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/list-and-grid-nodes/timegrid.md":"{\n  \"content\": \"<h1 id=\\\"timegrid\\\">TimeGrid</h1>\\n<p>OTT providers can use the TimeGrid node to implement an Electronic Program Guide (EPG) in their channels. In an EPG, channels are represented as horizontal rows, one for each channel. Each row has a channel name on the left, and a set of programs airing on that channel to the right. The size of each program depends on its duration. One of these programs has a remote control focus highlight indicator on it, and this highlight can be moved around using the remote control (as long as the TimeGrid node has remote control focus).</p>\\n<p>The TimeGrid node also features an alternative Now/Next view that lists only the programs currently airing and airing next, with their respective start times. See <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/timegrid.md#nownext-mode\\\">Now/Next mode</a> for more information.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/epg-standard.jpg\\\" alt=\\\"roku815px - time grid\\\" title=\\\"time grid\\\"></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<h3 id=\\\"content\\\">Content</h3>\\n<p>The TimeGrid node has a <strong>content </strong>field that can be used to store the information for the channels and programs displayed in the grid. This <strong>content</strong> field should have a single ContentNode that has one child ContentNode per channel, and each channel ContentNode should have one child ContentNode for each program, sorted by start time in ascending order (earliest programs first). </p>\\n<blockquote>\\n<p>For any program in any channel, the start time plus the duration of any program must be less than or equal to the start time of the next program.</p>\\n</blockquote>\\n<h4 id=\\\"channel-attributes\\\">Channel attributes</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>TITLE</td>\\n<td>string</td>\\n<td>The name of this channel, to be visible only if HDSMALLICONURL is not set or if the icon failed to load.</td>\\n</tr>\\n<tr>\\n<td>HDSMALLICONURL</td>\\n<td>uri</td>\\n<td>The image file for the channel logo.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"program-attributes\\\">Program attributes</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>TITLE</td>\\n<td>string</td>\\n<td>Program title.</td>\\n</tr>\\n<tr>\\n<td>PLAYSTART</td>\\n<td>time</td>\\n<td>Start time for this program.</td>\\n</tr>\\n<tr>\\n<td>PLAYDURATION</td>\\n<td>time</td>\\n<td>Duration of this program.</td>\\n</tr>\\n<tr>\\n<td>HDSMALLICONURL</td>\\n<td>uri</td>\\n<td>The image file for an icon that appears beside the program title (optional).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"general-timegrid-settings\\\">General TimeGrid settings</h3>\\n<p>The following fields are used to configure general time grid settings.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>maxDays</td>\\n<td>int</td>\\n<td>7</td>\\n<td>Specifies the total width of the time grid in days.</td>\\n</tr>\\n<tr>\\n<td>contentStartTime</td>\\n<td>time</td>\\n<td>0</td>\\n<td>The earliest time to which the time grid can be scrolled. The scrollable range of times is defined by the sum of the <strong>contentStartTime</strong> and <strong>maxDays</strong> fields.</td>\\n</tr>\\n<tr>\\n<td>duration</td>\\n<td>double</td>\\n<td>9000</td>\\n<td>Width (in seconds) of the visible section of the time grid.<br /><br />For example, setting this to 10800 will cause the time grid to display 3 hours of programs horizontally (10,800 = 3 hours * 3,600 seconds per hour).</td>\\n</tr>\\n<tr>\\n<td>autoDismissTime</td>\\n<td>Time</td>\\n<td>0</td>\\n<td>Specifies the time (in seconds) that the time grid will be displayed before automatically being hidden. <br /><br />Setting this field to 0 will cause the time grid to never be hidden.</td>\\n</tr>\\n<tr>\\n<td>ignoreTrickPlayKeys</td>\\n<td>boolean</td>\\n<td>FALSE</td>\\n<td>If set to true, ignores fast forward, rewind, and instant replay key events.<br /><br />Fast forward and rewind key presses normally page the time grid up and down. Instant replay key presses jump the grid to the current time.</td>\\n</tr>\\n<tr>\\n<td>overlayBitmapUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>Specifies an overlay that is drawn on top of the entire time grid. This is used by default to make the bottom visible rows of the time grid appear to fade out, but could be used to add any overlay be drawn on top of the time grid. In most cases, this should be a 9-patch image that specifies expandable regions.<br /><br />Only set this field to specify a custom bitmap that differs in appearance from the default bitmap. The overlay bitmap is drawn over the full width of the time grid with its bottom aligned to the bottom of the time grid.<br /><br />If the <strong>overlayHeight</strong> field value is greater than 0 the image will be stretched to the specified height (that is from the bottom of the time grid to the specified height).<br /><br />If <strong>overlayHeight</strong> field value is set to 0 the bitmap will be drawn at its default height.</td>\\n</tr>\\n<tr>\\n<td>overlayHeight</td>\\n<td>float</td>\\n<td>0</td>\\n<td>Specifies the height of the overlay image (see the <strong>overlayBitmapUri</strong> field). If set to 0 the overlay image is drawn at its default height.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"channel-settings\\\">Channel settings</h3>\\n<p>The following fields are used to configure and control channel selection and focus.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>focusBitmapUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>Specifies the bitmap file used for the focus indicator when the list has focus. <br /><br />In most cases, this should be a 9-patch image that specifies expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>animateToChannel</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Write-only. Scrolls the grid so the row corresponding to the specified channel index is on screen. When the scrolling ends, the program in that row at the current focus time will have focus.</td>\\n</tr>\\n<tr>\\n<td>jumpToChannel</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Write-only. Jumps the grid so the row corresponding to the specified channel index is on screen. After the jump, the program in that row at the current focus time will have focus.</td>\\n</tr>\\n<tr>\\n<td>jumpToTime</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>Write-only. Jumps the grid to the program at the specified time (in UTC format). After the jump, the time will be visible, and the program on the currently focused channel will have focus.</td>\\n</tr>\\n<tr>\\n<td>leftEdgeTargetTime</td>\\n<td>time</td>\\n<td>none</td>\\n<td>When explicitly set, this triggers a horizontally scrolling animation so that the specified time is displayed at the left edge of the program grid.<br /><br />This field is also set by the firmware in response to remote control key presses that cause horizontal scrolling to provide feedback on the currently visible time range.</td>\\n</tr>\\n<tr>\\n<td>channelSelected</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Read-only. Indicates the index of the selected channel when the user makes a selection.</td>\\n</tr>\\n<tr>\\n<td>channelFocused</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Read-only. Indicates the index of the focused channel when a program in the channel's row gains focus.</td>\\n</tr>\\n<tr>\\n<td>channelUnfocused</td>\\n<td>int</td>\\n<td>FALSE</td>\\n<td>Read-only. Indicates the index of the focused channel when a program in the channel's row loses focus.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"channel-information-column\\\">Channel information column</h3>\\n<p>The following fields are used to configure and control the channel information column on the left side of the EPG that lists the channel names:</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/epg-channel-info.jpg\\\" alt=\\\"roku815px - channel info column\\\" title=\\\"channel info column\\\"></p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>channelInfoComponentName</td>\\n<td>roSGNode</td>\\n<td>Object</td>\\n<td>Uses the specified RSG component to display the data for each channel in the Channel Information column.<br /><br />An instance of this component is created on demand for each channel. The component must define a specific interface. <br /><br />Specifically, the <strong>content</strong> field of this component can be used to configure the data for the channel information column (see <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/overview.md#specifying-list-and-grid-content\\\">Specifying list and grid content</a> for more information).<br /><br />Additionally, observer functions of the optional <strong>width</strong>, <strong>height</strong>, and <strong>hasFocus</strong> fields of the custom component can be used to customize the appearance (see <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/overview.md#custom-item-definitions-and-focus-indicators\\\">Custom item definitions and focus indicators</a> for more information). <br /><br />If this field is not specified, the default channel info will be displayed, which is an optional channel icon followed by a label containing the name of the channel. The icon and label come from the channel ContentNodes as described in the <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/timegrid.md#fields\\\">Channel Attributes</a> section.</td>\\n</tr>\\n<tr>\\n<td>channelInfoSelected</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Read-only. Indicates the index of the selected channel when the user selects an item in the Channel Information column.</td>\\n</tr>\\n<tr>\\n<td>channelInfoFocused</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Read-only. Indicates the index of the channel when a channel in the Channel Information column gains focus.</td>\\n</tr>\\n<tr>\\n<td>channelInfoUnfocused</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Read-only. Indicates the index of the channel when a channel in the Channel Information column loses focus.</td>\\n</tr>\\n<tr>\\n<td>channelInfoFocusable</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>Indicates whether the user can move focus into the Channel Information column. If this field is false, the Channel Info column in non-interactive.</td>\\n</tr>\\n<tr>\\n<td>jumpToChannelInfo</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Write-only. Jumps the grid immediately to the channel info column box of the specified channel index. The channel row will be visible, and the channel info box for the specified channel will have focus. If the <strong>channelInfoFocusable</strong> field is false, this field is ignored.</td>\\n</tr>\\n<tr>\\n<td>channelInfoWidth</td>\\n<td>float</td>\\n<td>system default</td>\\n<td>Width of the column showing the channel names.</td>\\n</tr>\\n<tr>\\n<td>infoGridGap</td>\\n<td>float</td>\\n<td>0</td>\\n<td>Spacing between the Channel Information column and the main grid.</td>\\n</tr>\\n<tr>\\n<td>channelInfoColumnLabel</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>Specifies text used as a label for the header of the Channel Information column (the text displayed above the Channel Information column).<br /><br />If this is not specified, the label will show the day of the week that the left-hand edge of the time grid represents.</td>\\n</tr>\\n<tr>\\n<td>channelInfoTextColor</td>\\n<td>color</td>\\n<td>system default</td>\\n<td>Specifies the text color for the channel names in the Channel Information column if the <strong>channelInfoComponentName</strong> field is not specified.</td>\\n</tr>\\n<tr>\\n<td>channelInfoFont</td>\\n<td>font</td>\\n<td>system default</td>\\n<td>Specifies the font for the channel names if the <strong>channelInfoComponentName</strong> field is not specified.</td>\\n</tr>\\n<tr>\\n<td>channelInfoBackgroundBitmapUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>Specifies the bitmap file to use as the background for the channel names in the grid if the <strong>channelInfoComponentName</strong> field is not specified. <br /><br />In most cases, this should be a 9-patch image that specifies expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>channelInfoAlignment</td>\\n<td></td>\\n<td></td>\\n<td>\\\"left\\\" the channelInfo column is displayed on the left (default)<br />\\\"right\\\" the channelInfo column on displayed on the right</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"program-grid\\\">Program grid</h3>\\n<p>The following fields are used to configure and control the program titles and cells in the EPG:</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/epg-program-grid.jpg\\\" alt=\\\"roku815px - program grid\\\" title=\\\"program grid\\\"></p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>programTitleFocusedColor</td>\\n<td>color</td>\\n<td>system default</td>\\n<td>Specifies the text color for the program title that is focused.</td>\\n</tr>\\n<tr>\\n<td>programTitleColor</td>\\n<td>color</td>\\n<td>system default</td>\\n<td>Specifies the text color for program titles that are unfocused.</td>\\n</tr>\\n<tr>\\n<td>programTitleFont</td>\\n<td>font</td>\\n<td>system default</td>\\n<td>Specifies the font for the program titles</td>\\n</tr>\\n<tr>\\n<td>programSelected</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Read-only. Indicates the index of the program in the currently focused channel row when the user selects a program.</td>\\n</tr>\\n<tr>\\n<td>programFocused</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Read-only. Indicates the index of the program in the currently focused channel row when the program gains focus.</td>\\n</tr>\\n<tr>\\n<td>programUnfocused</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Read-only. Indicates the index of the program in the currently focused channel row when the program loses focus.</td>\\n</tr>\\n<tr>\\n<td>programFocusedDetails</td>\\n<td>AssociativeArray</td>\\n<td></td>\\n<td>Read-only. Includes <strong>focusChannelIndex</strong> and <strong>focusIndex</strong> elements that indicate the channel index and program index, respectively, when a program gains focus. This provides a single object that combines the values of the <strong>channelFocused</strong> and <strong>programFocused</strong> fields.</td>\\n</tr>\\n<tr>\\n<td>jumpToProgram</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Write-only. Jumps the grid immediately to the program corresponding to the specified program index for the currently focused row. After jumping, the program will be visible and have focus.</td>\\n</tr>\\n<tr>\\n<td>programHorizMargin</td>\\n<td>float</td>\\n<td>14</td>\\n<td>Specifies the width of the left and right margins of program cell text.</td>\\n</tr>\\n<tr>\\n<td>programBackgroundBitmapUri</td>\\n<td>Uri</td>\\n<td>\\\"\\\"</td>\\n<td>Specifies the bitmap file to use as the background for the program names in the grid. <br /><br />In most cases, this should be a 9-patch image that specifies expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>fillProgramGaps</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>Inserts a program with the \\\"No Data Available\\\" label if there is a gap between the program's start time and the previous program's end time</td>\\n</tr>\\n<tr>\\n<td>automaticLoadingDataFeedback</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>Enables the program data region of the grid to be automatically replaced with the loading message specified in the <strong>loadingDataText</strong> field whenever the content field has not been set or the user scrolls to a time where the content has not yet been loaded.</td>\\n</tr>\\n<tr>\\n<td>showLoadingDataFeedback</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>Replaces the program data region of the grid with the loading message specified in the <strong>loadingDataText</strong> field. <br /><br />This field enables you to explicitly control when the loading message is displayed instead of it being automatically shown when <strong>automaticLoadingDataFeedback</strong>is enabled.<br /><br />This field is ignored if <strong>automaticLoadingDataFeedback</strong>is true.</td>\\n</tr>\\n<tr>\\n<td>loadingDataText</td>\\n<td>string</td>\\n<td>\\\" Loading Data…\\\" \\\"</td>\\n<td>The text to be displayed over the program grid whenever the loading message is to be shown.</td>\\n</tr>\\n<tr>\\n<td>channelNoDataText</td>\\n<td>string</td>\\n<td>\\\"No Data Available\\\"</td>\\n<td>Displays the specified text on each channel row if no data exists for a specific time (or if there is a gap in the program data).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"past-time-screen\\\">Past Time Screen</h3>\\n<p>The following fields are used to configure the appearance of the rectangle that is displayed as part of the background of all programs prior to the current time.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/epg-past-time.jpg\\\" alt=\\\"roku815px - past time screen\\\" title=\\\"past time screen\\\"></p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>showPastTimeScreen</td>\\n<td>boolean</td>\\n<td>True</td>\\n<td>If true, enables drawing a solid color background behind all the programs in the grid airing before the current time.</td>\\n</tr>\\n<tr>\\n<td>pastTimeScreenBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>Tints the past time screen by multiplying the color of each pixel by the specified value. If this value is not set to a value other than the default value, no color blending will be performed</td>\\n</tr>\\n<tr>\\n<td>pastTimeScreenBitmapUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>Displays the specified bitmap file in the background of the past time screen.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"time-bar\\\">Time Bar</h3>\\n<p>The following fields are used to control and configure the time bar that is displayed horizontally above the program cells:</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/epg-time-bar.jpg\\\" alt=\\\"roku815px - time bar\\\" title=\\\"time bar\\\"></p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>timeBarHeight</td>\\n<td>float</td>\\n<td>50</td>\\n<td>Specifies the height of the region above the channel grid where the time labels are displayed.</td>\\n</tr>\\n<tr>\\n<td>timeBarBitmapUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>Specifies the bitmap file to use as the background of the time bar that appears above the time grid channel grid. <br /><br />In most cases, this should be a 9-patch image that specifies expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>timeLabelColor</td>\\n<td>color</td>\\n<td>0xffffff99</td>\\n<td>Specifies the text color for the time labels that are displayed in the time bar at the top of the TimeGrid.</td>\\n</tr>\\n<tr>\\n<td>timeLabelFont</td>\\n<td>font</td>\\n<td>system default</td>\\n<td>Specifies the font for the time labels that are displayed in the time bar at the top of the TimeGrid.</td>\\n</tr>\\n<tr>\\n<td>timeLabelOffset</td>\\n<td>float</td>\\n<td>14</td>\\n<td>Specifies the offset from the edge of the grid of the leftmost time label.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"now-bar\\\">Now Bar</h3>\\n<p>The following fields are used to enable the Now Bar, which is the thin vertical bar displayed at the current time.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/epg-now-bar.jpg\\\" alt=\\\"roku815px - Now Bar\\\" title=\\\"Now Bar\\\"></p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>nowBarWidth</td>\\n<td>float</td>\\n<td>system default</td>\\n<td>Specifies the width of the Now Bar</td>\\n</tr>\\n<tr>\\n<td>nowBarHeight</td>\\n<td>float</td>\\n<td>system default</td>\\n<td>Specifies the height of the Now Bar</td>\\n</tr>\\n<tr>\\n<td>nowBarBitmapUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>Specifies the bitmap file used for the Now Bar. <br /><br />In most cases, this should be a 9-patch image that specifies expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</td>\\n</tr>\\n<tr>\\n<td>nowBarBlendColor</td>\\n<td>color</td>\\n<td>system default</td>\\n<td>Tints the Now Bar by multiplying the color of each pixel by the specified value. If this value is not set to a value other than the default value, no color blending will be performed.</td>\\n</tr>\\n<tr>\\n<td>nowBarOffset</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Specifies the number of pixels the left edge of the Now Bar is offset from the current time.</td>\\n</tr>\\n<tr>\\n<td>minimumNowBarOffset</td>\\n<td>time</td>\\n<td>300</td>\\n<td>Specifies (in seconds) the nearest that the Now Bar can be to the left-hand edge of the time grid. If the Now Bar advances to the <strong>minimumNowBarOffset</strong> field value plus 30 minutes the time grid will automatically scroll right 30 minutes.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"nownext-mode\\\">Now/Next mode</h3>\\n<p>When the TimeGrid is in Now/Next mode, the program grid only contains <strong>Now</strong> and <strong>Next</strong> columns listing the programs currently and subsequently airing on each channel, with their respective start times.\\nThe following fields are used to enable Now/Next mode, configure the Now and Next labels displayed above the program cells, and configure the program labels and cells while in this mode.</p>\\n<p><img src=\\\"https://image.roku.com/ZHZscHItMTc2/epg-now-next.jpg\\\" alt=\\\"roku815px - now-next-mode\\\" title=\\\"now-next-mode\\\"></p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>nowNextMode</td>\\n<td>boolean</td>\\n<td>False</td>\\n<td>When set to true, the time grid displays two vertical columns of programs showing Now and Next for each channel</td>\\n</tr>\\n<tr>\\n<td>nowBackgroundBitmapUri</td>\\n<td>Poster.uri</td>\\n<td>\\\"\\\"</td>\\n<td>Displays the specified bitmap file in the background of the Now grid within the Now Bar</td>\\n</tr>\\n<tr>\\n<td>nextBackgroundBitmapUri</td>\\n<td>Poster.url</td>\\n<td>\\\"\\\"</td>\\n<td>Displays the specified bitmap file in the background of the Next grid within the Now Bar</td>\\n</tr>\\n<tr>\\n<td>nowNextHideAmPm</td>\\n<td>boolean</td>\\n<td>False</td>\\n<td>Hides the AM/PM abbreviation next to the times in the Now Bar.</td>\\n</tr>\\n<tr>\\n<td>programNowNextTimeColor</td>\\n<td>color</td>\\n<td>0xffffff99</td>\\n<td>If Now/Next mode is true, specifies the text color for the time that appears in the now/next program cells when the program is unfocused</td>\\n</tr>\\n<tr>\\n<td>programNowNextTimeFocusedColor</td>\\n<td>color</td>\\n<td>0x99</td>\\n<td>If Now/Next mode is true, specifies the text color for the time that appears in the Now/Next program cells when the program is focused</td>\\n</tr>\\n<tr>\\n<td>programNowNextHorizMargin</td>\\n<td>float</td>\\n<td>14</td>\\n<td>Specifies the width of the left and right margins of program cell text in Now/Next mode.</td>\\n</tr>\\n<tr>\\n<td>programNowNextTimeTitleGap</td>\\n<td>float</td>\\n<td>15</td>\\n<td>Specifies the gap between the <strong>Now</strong> and <strong>Next</strong> entries</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"measuring-epg-launch-times\\\">Measuring EPG launch times</h2>\\n<p>Channels with an EPG must fire signal beacons to measure the EPG launch time. Beacons must be fired when the user initiates a keypress to display the EPG (<strong>EPGLaunchInitiate</strong>) and when the EPG is fully rendered and navigable (<strong>EPGLaunchComplete</strong>). See <a href=\\\"/docs/developer-program/performance-guide/measuring-channel-performance.md\\\">Measuring Channel Performance</a> for more information.</p>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p>You can download and install a <a href=\\\"https://github.com/rokudev/SceneGraphDeveloperExtensions/tree/master/samples/TimeGridView\\\">sample channel</a> that demonstrates how to use the TimeGridView in the SceneGraph Developer Extensions (SGDEX) to create an EPG. This sample channel uses a row-by-row loading model. In this model, a handler config running on the root node of a content tree creates a child node for each row in the EPG. Each of the row child nodes has a handler that creates a child node for each program that should be displayed on that row.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/sliding-panels-nodes/overhangpanelsetscene.md":"{\n  \"content\": \"<h1 id=\\\"overhangpanelsetscene\\\">OverhangPanelSetScene</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/scene.md\\\"><strong>Scene</strong></a></p>\\n<p>The OverhangPanelSetScene node class provides a convenient way to create a Scene node that has set with default Overhang and PanelSet nodes. The layout of the Overhang and PanelSet use the default sizes for SDK2 channels. The node provides access to the PanelSet and Overhang via fields that contain the node objects.</p>\\n<pre><code>scene = screen.CreateScene(\\\"OverhangPanelSetScene\\\")\\n</code></pre>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Use</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>overhang</td>\\n<td>Overhang</td>\\n<td>An Overhang node</td>\\n<td>READ_ONLY</td>\\n<td>Provides access to the Overhang node created for this scene. Fields of the Overhang node can be set to custom the overhang.</td>\\n</tr>\\n<tr>\\n<td>panelSet</td>\\n<td>PanelSet</td>\\n<td>A PanelSet node</td>\\n<td>READ_ONLY</td>\\n<td>Provides access to the PanelSet node created for this scene. The RoSGNode child APIs can be used to add panels to the panel set. Be careful to follow the restrictions on using the child APIs that are described in the PanelSet documentation.<br /><br />Fields of the PanelSet node can also be set to custom the panel set.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/sliding%20panels/OverhangPanelSetSceneExample\\\">OverhangPanelSetSceneExample</a> is a sample channel demonstrating OverhangPanelSetScene in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/sliding-panels-nodes/overhang.md":"{\n  \"content\": \"<h1 id=\\\"overhang\\\">Overhang</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\"><strong>Group</strong></a></p>\\n<p>The Overhang node provides a information bar that is displayed at the top of a screen in many Roku channels. The regions occupied by the overhang can be filled with either a solid color or a bitmap.</p>\\n<p>On the left side, a logo bitmap and/or a string can be displayed. If both are displayed, a vertical divider is drawn to separate them. The string is typically set to display a reminder to the user of their current location in the interface. For example, in the Roku homescreen, the string is set to \\\"Search\\\" while the user in the search entry portion of the user interface. Then when the user explores a search result, the string is changed to reflect the name of the content being explored.</p>\\n<p>On the right side, a clock and/or an indicator that the options key (*) is available can be displayed. If both are displayed, a vertical divider is drawn to separate them.</p>\\n<p>The appearance and contents of the Overhang can be customized by setting its fields to the desired values. </p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Use</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>color</td>\\n<td>color</td>\\n<td>0x232323ff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies that the area occupied by the Overhang should be filled with the specified color.<br /><br />The color field and the backgroundUri field are \\\"last one wins\\\" fields. Whichever of these fields is set later overrides the other one.</td>\\n</tr>\\n<tr>\\n<td>backgroundUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the URI of a bitmap that is used to fill the area occupied by the overhang.<br /><br />The color field and the backgroundUri field are \\\"last one wins\\\" fields. Whichever of these fields is set later overrides the other one.</td>\\n</tr>\\n<tr>\\n<td>logoUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the URI of a bitmap to be drawn on the left side of the overhang.<br /><br />If both a logo and a title are specified, the logo will be displayed to the left of the title, separated by a vertical divider.</td>\\n</tr>\\n<tr>\\n<td>logoBaselineOffset</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a vertical adjustment to be applied to the logo to adjust its alignment relative to the overall overhang. The logo is positioned so that its baseline (as specified by this field) aligns with the baseline of the options prompt on the right side of the overhang</td>\\n</tr>\\n<tr>\\n<td>title</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a string to be displayed on the left side of the overhang. It will be drawn to the right of the logo, if a logo is specified. <br /><br />If both a logo and a title are specified, the logo will be displayed to the left of the title, separated by a vertical divider.</td>\\n</tr>\\n<tr>\\n<td>titleColor</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the title text</td>\\n</tr>\\n<tr>\\n<td>showClock</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether or not the Clock is displayed as part of the annotations that appear on the right side of the Overhang.If both the clock and the options prompt are shown, the clock will be displayed to the left of the options prompt, separated by a vertical divider</td>\\n</tr>\\n<tr>\\n<td>clockColor</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the clock text</td>\\n</tr>\\n<tr>\\n<td>clockText</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies an alternate string to display in the clock location on the right side of the overhang. If the clockText field is set to a non-empty string, that string will replace the clock display. Setting the clockText field back to an empty string will restore the display of the clock.</td>\\n</tr>\\n<tr>\\n<td>showOptions</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether or not the Options prompt is displayed in as part of the annotations that appear on the right side of the Overhang.<br /><br />If both the clock and the options prompt are shown, the clock will be displayed to the left of the options prompt, separated by a vertical divider.</td>\\n</tr>\\n<tr>\\n<td>optionsColor</td>\\n<td>color</td>\\n<td>0xddddddff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the options indicator when the options key is available (i.e. the showOptions field is set to true)</td>\\n</tr>\\n<tr>\\n<td>optionsDimColor</td>\\n<td>color</td>\\n<td>0xdddddd44</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the color of the options indicator when the options key is not available (i.e. the showOptions field is set to false)</td>\\n</tr>\\n<tr>\\n<td>optionsIconColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a color to tint the neutral colored options icon displayed in the overhang when the options key is available (i.e. the showOptions field is set to true). If no color is specified, the options icon will be white.</td>\\n</tr>\\n<tr>\\n<td>optionsIconDimColor</td>\\n<td>color</td>\\n<td>0xffffffff</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a color to tint the neutral colored options icon displayed in the overhang when the options key is not available (i.e. the showOptions field is set to false). If no color is specified, the options icon will be pale gray.</td>\\n</tr>\\n<tr>\\n<td>optionsAvailable</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Specifies whether the Options key is currently available. If optionsAvailable is set to true, the options prompt will have an brighter appearance. If false, the options prompt will be dimmed.</td>\\n</tr>\\n<tr>\\n<td>optionsText</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Sets the text next to the Options (*) symbol in the overhang.</td>\\n</tr>\\n<tr>\\n<td>optionsMaxWidth</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Set the max width (in pixels) to ellipsize optionsText. It has a default value of 0.0 meaning there is no max width restriction. This field does nothing if optionsText is not set.</td>\\n</tr>\\n<tr>\\n<td>leftDividerUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the URI of the bitmap to be used as the divider between the logo and the title on the left side of the overhang</td>\\n</tr>\\n<tr>\\n<td>leftDividerVertOffset</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a vertical offset to add to the position of the divider between the logo and the title on the left side of the overhang. By default, the bottom of the divider bitmap is drawn at baseline offset of the logo bitmap, as specified by the logoBaselineOffset field.</td>\\n</tr>\\n<tr>\\n<td>rightDividerUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the URI of the bitmap to be used as the divider between the clock and the options prompt on the right side of the overhang</td>\\n</tr>\\n<tr>\\n<td>rightDividerVertOffset</td>\\n<td>float</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Specifies a vertical offset to add to the position of the divider between the clock and the options prompt on the left side of the overhang. By default, the vertical center of the divider bitmap is aligned to the vertical center of the options prompt.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>115</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the Overhang region. Typically this value is not overridden.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/sliding%20panels/OverhangExample\\\">OverhangExample</a> is a sample channel demonstrating Overhang in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/sliding-panels-nodes/panelset.md":"{\n  \"content\": \"<h1 id=\\\"panelset\\\">PanelSet</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\"><strong>Group</strong></a></p>\\n<p>The PanelSet node provides the panel sliding behavior seen in the Roku home screen. The PanelSet node manages the position of a set of child Panel nodes, and implements the left and right panel sliding behavior. Once a Panel node has been added to a PanelSet node, it remains a child of the PanelSet node unless it is replaced by another Panel node, or slides completely off the right side of the screen.</p>\\n<p>The PanelSet node is designed to display two Panel nodes in most cases, one Panel node on the left and one on the right. When the PanelSet node has focus, and the user presses the <strong>Left</strong> (or <strong>Back</strong>) or <strong>Right</strong> remote control key, the panels slide to the left or right one position.</p>\\n<p>For example, suppose the PanelSet node has two Panel nodes as children, panel A and panel B. When the user presses the <strong>Right</strong> key, a new panel, panel C, should be created and added as a child of the PanelSet node. Adding a panel as a child of the PanelSet node causes all the panels to slide left one position, so that panel A is now offscreen to the left, panel B is in the left position, and panel C is in the right position. If the user presses the <strong>Right</strong> key again, a new panel, panel D, should be created and added as a child node of the PanelSet node. Adding panel D causes the panels to slide left again so that panels A and B are offscreen to the left, panel C is in the left position, and panel D is in the right position.</p>\\n<p>At this point, if the user presses the <strong>Left</strong> key (or <strong>Back</strong> key), the panels will slide one position to the <em>right</em>, <em>back</em> towards the original home position, so panel D will slide offscreen to the right, panel C will slide to the right position, and panel B will slide to the left position (panel A is still offscreen to the left). When the sliding animation ends, since panel D is offscreen to the right, it is automatically removed as a child node of the PanelSet node.</p>\\n<h4 id=\\\"panel-layout\\\">Panel Layout</h4>\\n<p>For consistency, it is recommended that panels be set to the default height. Similarly, panels should be set to one of four default width sizes. For each panel width, the default defines a corresponding left position for the panel. This is summarized in the table below, along with the default values for each of these fields:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Panel Field</th>\\n<th>Panel Size</th>\\n<th>SD Value</th>\\n<th>HD Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>height</td>\\n<td>all</td>\\n<td>403</td>\\n<td>605</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>narrow</td>\\n<td>218</td>\\n<td>388</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>medium</td>\\n<td>292</td>\\n<td>520</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>wide</td>\\n<td>363</td>\\n<td>645</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>full</td>\\n<td>520</td>\\n<td>940</td>\\n</tr>\\n<tr>\\n<td>leftPosition</td>\\n<td>narrow</td>\\n<td>60</td>\\n<td>105</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>medium</td>\\n<td>60</td>\\n<td>105</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>wide</td>\\n<td>63</td>\\n<td>112</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>full</td>\\n<td>100</td>\\n<td>170</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Narrow panels should be paired with wide panels, so that both panels fit in the alloted region without overlapping the PanelSet node previous and next arrow indicators. Similarly, medium panels should be paired with medium panels. Only one full-screen width panel can be displayed at a time, so full-screen  cause both left and right panels to slide on/offscreen when they are added to the PanelSet node.</p>\\n<p>When two panels are onscreen, a default gap is added between the left and right panels. For SD, the spacing is set to 20 pixels. For HD, the spacing is 30 pixels. The PanelSet node positions the left panel so that the panel origin is at (<code>leftPosition, 0</code>) in the PanelSet node coordinate system, where <code>leftPosition</code> is the value of the left Panel node <code>leftPosition</code> field. The PanelSet node positions the right panel so that the panel origin is at (<code>leftPosition leftWidth + spacing</code>), where <code>leftPosition</code> and <code>leftWidth</code> are the left panel <code>leftPosition</code> and <code>width</code> fields, and spacing is the default horizontal spacing attribute.</p>\\n<p>Note that the PanelSet node positions the origin of each Panel node coordinate system by setting the Panel node <code>translation</code> field, but it does not clip the panel to the rectangle defined by the Panel node <code>width</code> and <code>height</code> fields, so if the Panel node contains a child node with translation set to (<code>-10, -5</code>), that child will be rendered 10 pixels to the right and 5 pixels above the panel origin.</p>\\n<h4 id=\\\"child-management\\\">Child Management</h4>\\n<p>The regular roSGNode child management interface, ifSGNodeChildren, is used for adding panels to the PanelSet node. Since adding children to the PanelSet node can trigger the panels to slide left, care must be taken to use those functions in the expected manner.</p>\\n<p>Typically, the first panel is created, the panel <code>focusedChild</code> field has an observer added, then the panel is added to the PanelSet node with <code>appendChild()</code>. Then focus is set on that panel, causing the <code>focusedChild</code> observer function to be called. The <code>focusedChild</code> observer function typically will create the second panel, add a <code>focusedChild</code> observer on that panel, then add the second panel to the PanelSet node with <code>appendChild()</code>, and so forth.</p>\\n<p>If any panel contains a list or grid, the typical usage is that when the list or grid panel is on the left, each list/grid item creates a different panel on the right. Typically, the list or grid <code>itemUnfocused</code> and <code>itemFocused</code> fields are observed. When the <code>itemUnfocused</code> field changes, the list or grid panel will hide the panel on the right, then when the <code>itemFocused</code> field changes, it will create a new panel for the newly focused list or grid item, and call <code>replaceChild()</code> to cause the old panel to be replaced by the new one.</p>\\n<p>The PanelSet node assumes that:</p>\\n<ul>\\n<li>Only Panel nodes are added as PanelSet node children</li>\\n<li>Panels are added only using the <code>appendChild()</code> or <code>createChild()</code> roSGNode functions. The Panel node <code>leftPosition</code> field must be set prior to calling <code>appendChild()</code> or <code>createChild()</code>. Appending a child will trigger a PanelSet node slide action in most cases.</li>\\n<li>Panels can be replaced using the <code>replaceChild()</code> roSGNode function.</li>\\n<li>Panel children should never be removed from the PanelSet node using the <code>removeChild()</code> roSGNode function. The PanelSet node automatically removes Panel node children when they slide offscreen to the right.</li>\\n<li>The <code>insertChild()</code> and <code>removeChild()</code> roSGNode functions are never used.</li>\\n</ul>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>1280</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width of the PanelSet node. In most cases, this is set to the display width (such as 1280 for HD).</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>605</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the PanelSet node. In most cases, this is set to the the display height minus the overhang height.</td>\\n</tr>\\n<tr>\\n<td>slideDuration</td>\\n<td>integer</td>\\n<td>500</td>\\n<td>READ_WRITE</td>\\n<td>Milliseconds of the slide transition. The default is 1/2 second.</td>\\n</tr>\\n<tr>\\n<td>numPanels</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>Contains the current number of Panel nodes that are children of the PanelSet node.</td>\\n</tr>\\n<tr>\\n<td>isGoingBack</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_ONLY</td>\\n<td>Set to true when the PanelSet node panels are sliding right, <em>back</em> towards the original home position, as a result of a <strong>Left</strong> or <strong>Back</strong> key press.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/sliding%20panels/PanelSetExample\\\">PanelSetExample</a> is a sample channel demonstrating PanelSet in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/sliding-panels-nodes/panel.md":"{\n  \"content\": \"<h1 id=\\\"panel\\\">Panel</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\"><strong>Group</strong></a></p>\\n<p>The Panel node is used to create sliding panels for channel UI, similar to those in the Roku OS home screen.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Use</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>panelSize</td>\\n<td>string</td>\\n<td>narrow</td>\\n<td>WRITE_ONLY</td>\\n<td><strong>Write-Only</strong><br />Specifies one of the default panel sizes. Setting the field causes the width and leftPosition fields to be set to values that match the RSG preferred layout for a panel of the specified size.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>narrow</td>\\n<td>Set the width and leftPosition fields to the values for a narrow Panel</td>\\n</tr>\\n<tr>\\n<td>medium</td>\\n<td>Set the width and leftPosition fields to the values for a medium width Panel</td>\\n</tr>\\n<tr>\\n<td>wide</td>\\n<td>Set the width and leftPosition fields to the values for a wide Panel</td>\\n</tr>\\n<tr>\\n<td>full</td>\\n<td>Set the width and leftPosition fields to the values for a full width Panel</td>\\n</tr>\\n</tbody>\\n</table><br /><br />Note that PanelSet usage mandates that whenever two Panels are visible, they should include either one narrow and one wide panel or two medium width panels. If one Panel is visible, it's panelSize should be set to \\\"full\\\".</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>388</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the width of the panel in pixels. In most cases, this should be set by setting the panelSize field to one of the pre-configured settings.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>-1</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the height of the panel. In most cases, this will be set by the PanelSet and should treated as a read-only value.</td>\\n</tr>\\n<tr>\\n<td>leftPosition</td>\\n<td>float</td>\\n<td>105</td>\\n<td>READ_WRITE</td>\\n<td>Specifies the horizontal position of the panel relative to the left edge of the PanelSet (which is a the left edge of the display by default). In most cases, this should be set by setting the panelSize field to one of the pre-configure settings.</td>\\n</tr>\\n<tr>\\n<td>overhangTitle</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>When the panel is used as part of the OverhangPanelSetScene, setting the overhangTitle field will cause that text to be displayed as the title in the overhang when the panel slides into the left position of the PanelSet.</td>\\n</tr>\\n<tr>\\n<td>clockText</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td>READ_WRITE</td>\\n<td>When the panel is used as part of the OverhangPanelSetScene, setting the clockText field will cause that text to be displayed instead of the clock in the overhang when the panel slides into the left position of the PanelSet.</td>\\n</tr>\\n<tr>\\n<td>optionsAvailable</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>When the panel is used as part of the OverhangPanelSetScene, setting optionsAvailable will enable/disable the options button handling when the panel slides into the left position of the PanelSet. The overhang's options prompt will change appearance to provide feedback to the user that the options button is enabled/disabled.</td>\\n</tr>\\n<tr>\\n<td>leftOrientation</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>When the panel is used as part of the OverhangPanelSetScene, leftOrientation will be set to true when the panel moves into the left position of the PanelSet and set to false when the panel moves into the right position of the PanelSet.</td>\\n</tr>\\n<tr>\\n<td>leftOnly</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>The leftOnly field provides information to the PanelSet that this Panel should never appear in the right position of the PanelSet. When the panels are sliding back towards the home position (as a result of a <strong>Left</strong> or <strong>Back</strong> key press), and the panel slides into the right position, the PanelSet initiates another slide in the same <em>back</em> direction so that the panel does not end up on the right.</td>\\n</tr>\\n<tr>\\n<td>hasNextPanel</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>The hasNextPanel field provides information to the PanelSet as to whether or not this panel has another panel to its right. If set to true, the PanelSet's right arrow indicator is displayed and pressing the right arrow button on the remote triggers the PanelSet to move the focus one panel to the right, sliding the Panels as needed to make sure the panel that has the focus ends up onscreen. If set to false, the PanelSet's right arrow indicator is not displayed and the right arrow button does not trigger any change to the focused panel.</td>\\n</tr>\\n<tr>\\n<td>isFullScreen</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>The isFullScreen field indicates that this panel should be the only panel displayed (i.e. it will take up both the left and right positions in the PanelSet.</td>\\n</tr>\\n<tr>\\n<td>goBackCount</td>\\n<td>integer</td>\\n<td>1</td>\\n<td>READ_WRITE</td>\\n<td>Setting goBackCount field to a value greater than 1 causes the PanelSet to move the focus back that many panels when the user presses the left arrow button, sliding the Panels as needed to make sure the panel that has the focus ends up onscreen.</td>\\n</tr>\\n<tr>\\n<td>selectButtonMovesPanelForward</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>When set to true, pressing the OK/Select button on the remote control causes the PanelSet focus to move to the next panel.</td>\\n</tr>\\n<tr>\\n<td>isOffscreenLeft</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>This field is set by the PanelSet to indicate that the panel is positioned offscreen of the left edge of the PanelSet. This field is often observed to cancel outstanding load requests for images that are displayed on the panel.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/sliding%20panels/PanelExample\\\">PanelExample</a> is a sample channel demonstrating Panel in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/sliding-panels-nodes/listpanel.md":"{\n  \"content\": \"<h1 id=\\\"listpanel\\\">ListPanel</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/sliding-panels-nodes/panel.md\\\"><strong>Panel</strong></a></p>\\n<p>The ListPanel node class allows you to easily create a Panel that adheres to the Roku layout and behavior for panels that contain a LabelList or MarkupList node. The ListPanel provides the following functionality:</p>\\n<ul>\\n<li>Resolution appropriate positioning and sizing of the list node</li>\\n<li>Automatic key focus handling (i.e. the list node is set to receive key events when the ListPanel is given the key focus by the PanelSet)</li>\\n<li>Left-justified and right-justified labels that can be used to provide descriptive information about the list (e.g. \\\"1 of N\\\", etc.). These labels are automatically positioned and sized appropriately.</li>\\n<li>Simple mechanism for setting up the case where focusing any item in the grid triggers the creation of a new panel to add to the PanelSet</li>\\n<li>Default fade in/out animation of the next panel when the simple mechanism is used</li>\\n<li>Default fade out mask effect applied to the list items at the bottom of the panel</li>\\n</ul>\\n<h4 id=\\\"automatic-create-next-panel-functionality\\\">Automatic Create Next Panel Functionality</h4>\\n<p>One key feature of the ListPanel node is providing a simple mechanism for setting up the common use case where each time a new item in the grid receives the focus, a new \\\"next\\\" panel is added to the PanelSet. This mechanism is enabled or disabled by setting the createNextPanelOnItemFocus field to true or false.</p>\\n<p>createNextPanelOnItemFocus should be set to true when a new right panel should be displayed each time the list's focused item changes. For example, in the Roku Homescreen, when you navigate up/down the Settings list, a new right panel is displayed that contains information about the currently focused list item. createNextPanelOnItemFocus should be set to false when the right panel should not change in response to the list's focus changes. </p>\\n<p>When the create next panel mechanism is enabled and the user presses the up or down arrow key, the panel to the right of the ListPanel smoothly fades out, then when the user releases the arrow key, a new right panel is created, added to the PanelSet and smoothly faded in. To implement this, the ListPanel automatically triggers the fade out of the right panel when the up or down arrow key is pressed. When the arrow key is released, the ListPanel will set the createNextPanelIndex field to the index into the list's content that corresponds to the newly focused list item. In response to the createNextPanelIndex field being set, the ListPanel's control logic must be written to mmediately create the Panel node for the new right panel and set the nextPanel field to that Panel. The Panel creation must occur in the main SceneGraph render thread.</p>\\n<p>The createNextPanelIndex field is guaranteed to be set exactly once whenever a new right panel needs to be created and populated with the data that corresponds to the specified index. This may happen when the ListPanel's data is changed, in response to up or down arrow key releases, or when the PanelSet's moves the focus onto the ListPanel from the left.</p>\\n<p>For efficiency, sometimes the control logic for the ListPanel may create and hold onto Panel pointers internally so that the next Panel does not have to be newly created each the createNextPanelIndex field is set. If this is done, it is important to never reuse the current Panel node, as that Panel may still be fading out when the new next Panel needs to be created. A typical use case, where all the right Panels are identical other than the data they display, is to create a single pair of Panel nodes and alternate between them each time the createNextPanelIndex field is set, updating the panel data based on the specified list index.</p>\\n<h4 id=\\\"labellist-specific-usagenotes\\\">LabelList Specific UsageNotes</h4>\\n<p>If you set the list field to a LabelList node, the default values for the itemSize, itemSpacing, numRows and translation fields for the LabelList will be automatically set to the recommended default values for Roku channels. By default, the panel will use the \\\"narrow\\\" panelSize. It is possible to override these default values, but in most cases, that will not be necessary.</p>\\n<h4 id=\\\"markuplist-specific-usage-notes\\\">MarkupList Specific Usage Notes</h4>\\n<p>If you set the list field to a MarkupList node, because the MarkupList is by nature custom, you will generally need to set the MarkupList's itemSize, itemSpacing and numRows fields. The ListPanel will position the list appropriately.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>list</td>\\n<td>Node</td>\\n<td>NULL</td>\\n<td>READ_WRITE</td>\\n<td>The list field should be set to either a LabelList or MarkupList node to be displayed in the Panel. See the LabelList and MarkupList notes above about setting up the list's layout.</td>\\n</tr>\\n<tr>\\n<td>leftLabel</td>\\n<td>Node</td>\\n<td>Label node</td>\\n<td>READ_WRITE</td>\\n<td>The leftLabel field is set to a Label node that is positioned just above the left/top corner of the list. Setting the Label node's text field will cause that text string to be displayed. Setting other fields of the Label node can be used to adjust the Label's text color and other visual attributes.</td>\\n</tr>\\n<tr>\\n<td>rightLabel</td>\\n<td>Node</td>\\n<td>Label node</td>\\n<td>READ_WRITE</td>\\n<td>The rightLabel field is set to a Label node that is positioned just above the right/top corner of the list. Setting the Label node's text field will cause that text string to be displayed. Setting other fields of the Label node can be used to adjust the Label's text color and other visual attributes.<br /><br />The rightLabel is often used to display a \\\"1 of N\\\" message that reflects the index of the list's focused item.</td>\\n</tr>\\n<tr>\\n<td>showSectionLabels</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>If showSectionLabels is set to true and the data for the list node is divided into sections, the Title attribute of the current section will be displayed as the leftLabel of the list. As the list items scroll, the leftLabel will smoothly transition as each section of the list reaches the focus position.</td>\\n</tr>\\n<tr>\\n<td>createNextPanelIndex</td>\\n<td>integer</td>\\n<td>N/A</td>\\n<td>READ_ONLY</td>\\n<td>When the createNextPanelOnItemFocus field is true, createNextPanel is set when a new panel needs to be created and added to the PanelSet. The value of the field is the index of the list's content that should be used to create and populate the new panel.<br /><br />The createNextPanelIndex field is guaranteed to be set exactly once whenever the next panel for the focused list item needs to be created.</td>\\n</tr>\\n<tr>\\n<td>nextPanel</td>\\n<td>Node</td>\\n<td>false</td>\\n<td>WRITE_ONLY</td>\\n<td>When the createNextPanelOnItemFocus field is true, the nextPanel field should be set to a Panel node to the next panel to add to the PanelSet in response to the createNextPanelIndex field being set. It must be set immediately in repsonse to the createNextPanelIndex field being set.</td>\\n</tr>\\n<tr>\\n<td>createNextPanelOnItemFocus</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>When set to true, the Create Next Panel mechanism is enabled (i.e. the createNextPanelIndex field will be set when a new list item receives the focus). When set to false, the Create Next Panel mechanism is disabled (i.e. the createNextPanelIndex field will not be set when a new list item receives the focus).</td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p>If you are creating the list field(either a LabelList or MarkupList) associated with a ListPanel in script of a component that extends ListPanel, you also need to add the list as a child of the ListPanel. For example, in a component that extends ListPanel, where m.top is that component, you would associate the list field with a LabelList as follows:</p>\\n</blockquote>\\n<pre><code>list = m.top.createChild(\\\"LabelList\\\")\\nm.top.list = list\\n</code></pre>\\n<h2 id=\\\"data-bindings\\\">Data bindings</h2>\\n<p>If the list's data includes sections and the ListPanel's showSectionLabel's field is set to true, the title field of the section's ContentNode will be used as the text for the left label of the ListPanel.</p>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/sliding%20panels/ListPanelExample\\\">ListPanelExample</a> is a sample channel demonstrating ListPanel in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/sliding-panels-nodes/gridpanel.md":"{\n  \"content\": \"<h1 id=\\\"gridpanel\\\">GridPanel</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/sliding-panels-nodes/panel.md\\\"><strong>Panel</strong></a></p>\\n<p>The GridPanel node class allows you to easily create a Panel that adheres to the Roku layout and behavior for panels that contain a PosterGrid or MarkupGrid node. The GridPanel node class provides the following functionality:</p>\\n<ul>\\n<li>Resolution appropriate positioning and sizing of the grid node</li>\\n<li>Automatic key focus handling (i.e. the grid node is set to receive key events when the GridPanel is given the key focus by the PanelSet)</li>\\n<li>Left-justified and right-justified labels that can be used to provide descriptive information about the grid (e.g. \\\"1 of N\\\", etc.). These labels are automatically positioned and sized appropriately.</li>\\n<li>Simple mechanism for setting up the case where focusing any item in the grid triggers the creation of a new panel to add to the PanelSet</li>\\n<li>Default fade in/out animation of the next panel when the simple mechanism is used</li>\\n<li>Default fade out mask effect applied to the grid items at the bottom of the panel</li>\\n</ul>\\n<h4 id=\\\"automatic-create-next-panel-functionality\\\">Automatic Create Next Panel Functionality</h4>\\n<p>One key feature of the GridPanel node is providing a simple mechanism for setting up the common use case where each time a new item in the list receives the focus, a new \\\"next\\\" panel is added to the PanelSet. This mechanism is enabled or disabled by setting the createNextPanelOnItemFocus field to true or false.</p>\\n<p>createNextPanelOnItemFocus should be set to true when a new right panel should be displayed each time the grid's focused item changes. For example, in the Roku Homescreen, when you navigate up/down/left/right in Streaming Channels grid, a new right panel is displayed that contains information about the currently focused grid item. createNextPanelOnItemFocus should be set to false when the right panel should not change in response to the grid's focus changes. For example, when focus is on the installed channels grid in the Roku Homescreen, the right panel always displays an ad panel, regardless of which item is focused in the grid.</p>\\n<p>When the create next panel mechanism is enabled and the user presses a navigation arrow key, the panel to the right of the GridPanel smoothly fades out, then when the user releases the arrow key, a new right panel is created, added to the PanelSet and smoothly faded in. To implement this, the GridPanel automatically triggers the fade out of the right panel when the navigation arrow key is pressed. When the arrow key is released, the GridPanel will set the createNextPanelIndex field to the index into the grid's content that corresponds to the newly focused grid item. In response to the createNextPanelIndex field being set, the GridPanel's control logic must be written to immediately create the Panel node for the new right panel and set the nextPanel field to that Panel. The Panel creation must occur in the main SceneGraph render thread.</p>\\n<p>The createNextPanelIndex field is guaranteed to be set exactly once whenever a new right panel needs to be created and populated with the data that corresponds to the specified index. This may happen when the GridPanel's data is changed, in response to up or down arrow key releases, or when the PanelSet's moves the focus onto the GridPanel from the left.</p>\\n<p>For efficiency, sometimes the control logic for the GridPanel may create and hold onto Panel pointers internally so that the next Panel does not have to be newly created each the createNextPanelIndex field is set. If this is done, it is important to never reuse the current Panel node, as that Panel may still be fading out when the new next Panel needs to be created. A typical use case, where all the right Panels are identical other than the data they display, is to create a single pair of Panel nodes and alternate between them each time the createNextPanelIndex field is set, updating the panel data based on the specified list index.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>grid</td>\\n<td>Node</td>\\n<td>NULL</td>\\n<td>READ_WRITE</td>\\n<td>The grid field should be set to either a PosterGrid or MarkupGrid node to be displayed in the Panel. In general, because the layout of any grid is usually custom, you will generally need to set the grid's itemSize, itemSpacing, numRows and numColumns fields. The GridPanel will position the grid appropriately.</td>\\n</tr>\\n<tr>\\n<td>leftLabel</td>\\n<td>Node</td>\\n<td>Label node</td>\\n<td>READ_WRITE</td>\\n<td>The leftLabel field is set to a Label node that is positioned just above the left/top corner of the grid. Setting the Label node's text field will cause that text string to be displayed. Setting other fields of the Label node can be used to adjust the Label's text color and other visual attributes.</td>\\n</tr>\\n<tr>\\n<td>rightLabel</td>\\n<td>Node</td>\\n<td>Label node</td>\\n<td>READ_WRITE</td>\\n<td>The rightLabel field is set to a Label node that is positioned just above the right/top corner of the grid. Setting the Label node's text field will cause that text string to be displayed. Setting other fields of the Label node can be used to adjust the Label's text color and other visual attributes.<br /><br />The rightLabel is often used to display a \\\"1 of N\\\" message that reflects the index of the grid's focused item.</td>\\n</tr>\\n<tr>\\n<td>showSectionLabels</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>If showSectionLabels is set to true and the data for the grid node is divided into sections, the Title attribute of the current section will be displayed as the leftLabel of the grid. As the grid items scroll, the leftLabel will smoothly transition as each section of the grid reaches the focus position.</td>\\n</tr>\\n<tr>\\n<td>createNextPanelIndex</td>\\n<td>integer</td>\\n<td>N/A</td>\\n<td>READ_ONLY</td>\\n<td>When the createNextPanelOnItemFocus field is true, createNextPanel is set when a new panel needs to be created and added to the PanelSet. The value of the field is the index of the grid's content that should be used to create and populate the new panel.<br /><br />The createNextPanelIndex field is guaranteed to be set exactly once whenever the next panel for the focused grid item needs to be created.</td>\\n</tr>\\n<tr>\\n<td>nextPanel</td>\\n<td>Node</td>\\n<td>false</td>\\n<td>WRITE_ONLY</td>\\n<td>When the createNextPanelOnItemFocus field is true, the nextPanel field should be set to a Panel node to the next panel to add to the PanelSet in response to the createNextPanelIndex field being set. It must be set immediately in repsonse to the createNextPanelIndex field being set.</td>\\n</tr>\\n<tr>\\n<td>createNextPanelOnItemFocus</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>When set to true, the Create Next Panel mechanism is enabled (i.e. the createNextPanelIndex field will be set when a new grid item receives the focus). When set to false, the Create Next Panel mechanism is disabled (i.e. the createNextPanelIndex field will not be set when a new grid item receives the focus).</td>\\n</tr>\\n</tbody>\\n</table>\\n<blockquote>\\n<p> If you are creating the grid field (either a PosterGrid or MarkupGrid) associated with a GridPanel in script of a component that extends GridPanel, you also need to add the grid as a child of the GridPanel. For example, in a component that extends GridPanel, where m.top is that component, you would associate the grid field with a PosterGrid as follows:</p>\\n</blockquote>\\n<pre><code>grid = m.top.createChild(\\\"PosterGrid\\\")\\nm.top.grid = grid\\n</code></pre>\\n<h2 id=\\\"data-bindings\\\">Data bindings</h2>\\n<p>If the grid's data includes sections and the GridPanel's showSectionLabel's field is set to true, the title field of the section's ContentNode will be used as the text for the left label of the GridPanel.</p>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/ux%20components/sliding%20panels/GridPanelExample\\\">GridPanelExample</a> is a sample channel demonstrating GridPanel in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/media-playback-nodes/audio.md":"{\n  \"content\": \"<h1 id=\\\"audio\\\">Audio</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\"><strong>Node</strong></a></p>\\n<p>The Audio node class plays streaming audio.</p>\\n<p>The Audio node class has no built-in visual UI, but you can build your own UI for the node, including trick play, or showing an album cover or similar graphical image for each song selected by a user.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>content</td>\\n<td>ContentNode</td>\\n<td>NULL</td>\\n<td>READ_WRITE</td>\\n<td>The ContentNode with the <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\">Content Meta-Data</a> for the audio or audio playlist (a sequence of audios) to be played. If a audio playlist is to be played, the ContentNode must include complete child ContentNodes for each audio in the playlist, with all attributes required to play that audio.</td>\\n</tr>\\n<tr>\\n<td>contentIsPlaylist</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>If set to true, enables audio playlists (a sequence of audios to be played). To enable audio playlists, the ContentNode set in the <code>content</code> field must have children ContentNodes for each audio in the playlist. When audio playback is started, all of the audios in the playlist will be played in sequence.</td>\\n</tr>\\n<tr>\\n<td>nextContentIndex</td>\\n<td>integer</td>\\n<td>-1</td>\\n<td>READ_WRITE</td>\\n<td>If the <code>contentIsPlaylist</code> field is set to true to enable audio playlists, sets the index of the next audio in the playlist to be played. Setting this field does not immediately change the audio being played, but takes effect when the current audio is completed or skipped. By default, this value is -1, which performs the default index increment operation. After the audio specified by the index in this field begins playing, the field is set to the default -1 again, so the next audio played will be set by the default index increment operation, unless the field is set again to a different index.</td>\\n</tr>\\n<tr>\\n<td>loop</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>If set to true, the audio or audio playlist (if the <code>contentIsPlaylist</code> field is set to true to enable audio playlists) will be restarted from the beginning after the end is reached.</td>\\n</tr>\\n<tr>\\n<td>bufferingStatus</td>\\n<td>associative array</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>Contains information about stream buffering progress and status. This field is valid only while buffering is in progress, both at stream startup or when re-buffering is required. Observers will be notified when any element of the array changes, and also when buffering is complete and the field itself becomes invalid. The array contains the following name - value pairs.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>percentage</td>\\n<td>Percent buffering complete as an integer.</td>\\n</tr>\\n<tr>\\n<td>isUnderrun</td>\\n<td>Boolean value indicating if a stream underrun occurred.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>control</td>\\n<td>option string</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>Sets the desired play state for the audio, such as starting or stopping the audio play. Getting the value of this field returns the most recent value set, or <code>none</code> if no value has been set. In order to dynamically monitor the actual state of the audio, see the <code>state</code> field.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>none</td>\\n<td>No play state set</td>\\n</tr>\\n<tr>\\n<td>play</td>\\n<td>Start audio play</td>\\n</tr>\\n<tr>\\n<td>start</td>\\n<td>Start audio play</td>\\n</tr>\\n<tr>\\n<td>stop</td>\\n<td>Stop audio play</td>\\n</tr>\\n<tr>\\n<td>pause</td>\\n<td>Pause audio play</td>\\n</tr>\\n<tr>\\n<td>resume</td>\\n<td>Resume audio play after a pause</td>\\n</tr>\\n<tr>\\n<td>replay</td>\\n<td>Replay audio</td>\\n</tr>\\n<tr>\\n<td>prebuffer</td>\\n<td>Starts buffering the audio stream before the Audio node actually begins playback. Only one audio stream can be buffering in the application at any time. Setting the <code>control</code> field to <code>prebuffer</code> for another audio stream after setting <code>prebuffer</code> for a previous audio stream stops the buffering of the previous audio stream.</td>\\n</tr>\\n<tr>\\n<td>skipcontent</td>\\n<td>Skip the currently-playing content, and begin playing the next content in the playlist. If the content is not a playlist, or if the current content is the end of the playlist, this will end playback.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>notificationInterval</td>\\n<td>time</td>\\n<td>0.5</td>\\n<td>READ_WRITE</td>\\n<td>The interval between notifications to observers of the position field, specified as the number of seconds. If the value is 0, no notifications are delivered. This value may be read or modified at any time.</td>\\n</tr>\\n<tr>\\n<td>timedMetaDataSelectionKeys</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>If the audio stream contains timed meta data such as ID3 tags, any meta data with a key matching an entry in this array will be set into the timedMetaData field. If any entry in this array is \\\"*\\\", then all timed meta data will be selected.</td>\\n</tr>\\n<tr>\\n<td>seek</td>\\n<td>time</td>\\n<td>invalid</td>\\n<td>WRITE_ONLY</td>\\n<td>Sets the current position in the audio. The value is the number seconds from the beginning of the stream, specified as a double.</td>\\n</tr>\\n<tr>\\n<td>contentIndex</td>\\n<td>integer</td>\\n<td>-1</td>\\n<td>READ_ONLY</td>\\n<td>The index of the audio in the audio playlist that is currently playing. Generally, you would only want to check this field if audio playlists are enabled (by setting the <code>contentIsPlaylist</code> field to true), but it is set to 0 when a single audio is playing and audio playlists are not enabled.</td>\\n</tr>\\n<tr>\\n<td>timedMetaData</td>\\n<td>associative array</td>\\n<td>{ }</td>\\n<td>READ_ONLY</td>\\n<td>The most recent timed meta data that has been decoded from the audio stream. Only meta data with a key that matches an entry in timedMetaDataSelectionKeys will be set into this field. The value of this field is an associative array which contains arbitrary keys and values, as found in the audio stream.<br /><br />As of Roku OS 10.5, this field can be used to read ID3 tags embedded in an audio stream.</td>\\n</tr>\\n<tr>\\n<td>state</td>\\n<td>value string</td>\\n<td>none</td>\\n<td>READ_ONLY</td>\\n<td>Describes the current audio play state, such as if the audio play has been paused.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>none</td>\\n<td>No current play state</td>\\n</tr>\\n<tr>\\n<td>buffering</td>\\n<td>Audio stream is currently buffering</td>\\n</tr>\\n<tr>\\n<td>playing</td>\\n<td>Audio is currently playing</td>\\n</tr>\\n<tr>\\n<td>paused</td>\\n<td>Audio is currently paused</td>\\n</tr>\\n<tr>\\n<td>stopped</td>\\n<td>Audio is currently stopped</td>\\n</tr>\\n<tr>\\n<td>finished</td>\\n<td>Audio has completed play</td>\\n</tr>\\n<tr>\\n<td>error</td>\\n<td>An error has occurred in the audio play. The error code and error message can be found in the <code>errorCode</code> and <code>errorMsg</code> fields respectively.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>position</td>\\n<td>time</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>The current position in the audio play, as the number of seconds.</td>\\n</tr>\\n<tr>\\n<td>duration</td>\\n<td>time</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>The duration of the audio being played, specified in seconds. This becomes valid when playback begins and may change if the audio is dynamic content, such as a live event.</td>\\n</tr>\\n<tr>\\n<td>errorCode</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>The error code associated with the audio play error set in the <code>state</code> field</td>\\n</tr>\\n<tr>\\n<td>errorMsg</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_ONLY</td>\\n<td>An error message describing the audio play error set in the <code>state</code> field.</td>\\n</tr>\\n<tr>\\n<td>audioFormat</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_ONLY</td>\\n<td>Contains the format of the currently playing audio.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>\\\"\\\"</td>\\n<td>No stream playing</td>\\n</tr>\\n<tr>\\n<td>aac</td>\\n<td>ISO/IEC 14496-3, Advanced Audio Coding</td>\\n</tr>\\n<tr>\\n<td>aac_adif</td>\\n<td>ISO/IEC 14496-3, Advanced Audio Coding, ADIF container</td>\\n</tr>\\n<tr>\\n<td>aac_adts</td>\\n<td>ISO/IEC 14496-3, Advanced Audio Coding, ADTS container</td>\\n</tr>\\n<tr>\\n<td>aac_latm</td>\\n<td>ISO/IEC 14496-3, Advanced Audio Coding, LATM container</td>\\n</tr>\\n<tr>\\n<td>ac3</td>\\n<td>Dolby Digital</td>\\n</tr>\\n<tr>\\n<td>alac</td>\\n<td>Apple Lossless</td>\\n</tr>\\n<tr>\\n<td>dts</td>\\n<td>DTS Coherent Acoustics</td>\\n</tr>\\n<tr>\\n<td>eac3</td>\\n<td>Dolby Digital Plus</td>\\n</tr>\\n<tr>\\n<td>flac</td>\\n<td>Free Lossless Audio Codec</td>\\n</tr>\\n<tr>\\n<td>mp2</td>\\n<td>ISO/IEC 11172-3, MPEG Audio Layer II</td>\\n</tr>\\n<tr>\\n<td>mp3</td>\\n<td>ISO/IEC 11172-3, MPEG Audio Layer III</td>\\n</tr>\\n<tr>\\n<td>none</td>\\n<td>Stream contains no playable audio</td>\\n</tr>\\n<tr>\\n<td>pcm</td>\\n<td>linear PCM</td>\\n</tr>\\n<tr>\\n<td>unknown</td>\\n<td>Stream contains unknown audio</td>\\n</tr>\\n<tr>\\n<td>vorbis</td>\\n<td>Ogg Vorbis</td>\\n</tr>\\n<tr>\\n<td>wma<br /><em>deprecated</em></td>\\n<td>Microsoft Windows Media Audio.<br /><br />As of Roku OS 10.5, the Roku platform no longer supports this audio format.</td>\\n</tr>\\n<tr>\\n<td>wmapro<br /><em>deprecated</em></td>\\n<td>Microsoft Windows Media Pro Audio.<br /><br />As of Roku OS 10.5, the Roku platform no longer supports this audio format.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>streamingSegment</td>\\n<td>associative array</td>\\n<td>{ }</td>\\n<td>READ_ONLY</td>\\n<td>Information about the audio segment that is currently streaming. This is only meaningful for segmented audio transports, such as DASH and HLS. The associative array has the following entries:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>segBitrateBps</td>\\n<td>integer</td>\\n<td>Bitrate of the segment in bits per second</td>\\n</tr>\\n<tr>\\n<td>segSequence</td>\\n<td>integer</td>\\n<td>The sequence number of the segment in the audio</td>\\n</tr>\\n<tr>\\n<td>segStart</td>\\n<td>time</td>\\n<td>The start time of the segment from the start of the audio, specified in seconds</td>\\n</tr>\\n<tr>\\n<td>segUrl</td>\\n<td>string</td>\\n<td>URL of the segment</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>focusedChild</td>\\n<td>N/A</td>\\n<td>N/A</td>\\n<td>READ_WRITE</td>\\n<td>When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodefocus.md\\\">ifSGNodeFocus</a> functions to query whether this node or some other node has the key focus or is in the key focus chain.<br /><br />Accessing the value of the field will result in script errors.</td>\\n</tr>\\n<tr>\\n<td>autoplayAfterSeek</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Enables audio content to automatically play after rebuffering. Setting this flag to false disables this default behavior.</td>\\n</tr>\\n<tr>\\n<td>mute</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Set to true to mute the audio currently playing in the Audio node. Set to false to restore audio.</td>\\n</tr>\\n<tr>\\n<td>streamInfo</td>\\n<td>associative array</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>Information about the audio stream that is currently playing or buffering.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>isUnderrun</td>\\n<td>Boolean</td>\\n<td>If true, the stream was downloaded due to an underrun</td>\\n</tr>\\n<tr>\\n<td>isResumed</td>\\n<td>Boolean</td>\\n<td>If true, playback was resumed after trickplay</td>\\n</tr>\\n<tr>\\n<td>measuredBItrate</td>\\n<td>Integer</td>\\n<td>The measured bitrate (bps) of the network when the stream was selected</td>\\n</tr>\\n<tr>\\n<td>streamBitrate</td>\\n<td>Integer</td>\\n<td>The bitrate of the stream</td>\\n</tr>\\n<tr>\\n<td>streamUrl</td>\\n<td>URI</td>\\n<td>The URL of the stream</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>timeToStartStreaming</td>\\n<td>time</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>The time in seconds from playback being started until the audio actually began playing. The minimum valid value is 1 millisecond, and this is only valid if the current value of the <code>state</code> field is <code>playing</code>. When the state field value is not <code>playing</code>, the value will be 0. This field is updated prior to the <code>state</code> field changing, so <code>state</code> field observer callback functions can assume this field is valid after the <code>state</code> field value changes to <code>playing</code>.</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td></td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"data-bindings\\\">Data bindings</h2>\\n<p>See <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\">Content Meta-Data</a> for the required and optional play parameters, and descriptive information for audio playback. Set these parameters in a <a href=\\\"/docs/references/scenegraph/control-nodes/contentnode.md\\\">ContentNode</a> node, and assign the ContentNode to the content field of the Audio node to apply the parameters to a particular audio content item.</p>\\n<p>For HTTPS access, note the following Content Meta-Data attributes:</p>\\n<ul>\\n<li><code>HttpCertificatesFile</code></li>\\n<li><code>HttpCookies</code></li>\\n<li><code>HttpHeaders</code></li>\\n<li><code>HttpSendClientCertificates</code></li>\\n</ul>\\n<p>These attributes must be set to handle secure HTTP transfers of audio files. Note that this is a different HTTPS mechanism than used for other SceneGraph nodes as described in <a href=\\\"/docs/references/brightscript/components/rohttpagent.md\\\">roHttpAgent</a>.</p>\\n<blockquote>\\n<p>Prior to Roku OS 7.2, each Audio and Video node created and configured an <code>HttpAgent</code> only when the first content was played in a given Audio or Video node instance. This sometimes meant that additional content would fail to play in the same node because headers, cookies, and certificates were not updated or correctly replaced from the new content record. Channels that are dependent upon this behavior will need to be updated to set the required data into the Content Meta-Data for each piece of content, or to programmatically set those values into the <code>HttpAgent</code> before playing each piece of content.</p>\\n</blockquote>\\n<h2 id=\\\"example\\\">Example</h2>\\n<p><strong>Example application:</strong> <a href=\\\"https://github.com/rokudev/samples/tree/master/media/AudioExample\\\">AudioExample</a></p>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/media/AudioExample\\\">AudioExample</a> uses a <a href=\\\"/docs/references/scenegraph/list-and-grid-nodes/labellist.md\\\">LabelList</a> node to select from several spoken audio examples. The <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\">Content Meta-Data</a> for the example is found in the <code>pkg:/server/audiocontent.xml</code> file, read into a <a href=\\\"/docs/references/scenegraph/control-nodes/contentnode.md\\\">ContentNode</a> node by the <a href=\\\"/docs/references/scenegraph/control-nodes/task.md\\\">Task</a> node <code>audiocontentreader.xml</code> component file.</p>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/media/AudioExample\\\">AudioExample</a> is a sample channel demonstrating Audio in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/media-playback-nodes/soundeffect.md":"{\n  \"content\": \"<h1 id=\\\"soundeffect\\\">SoundEffect</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\"><strong>Node</strong></a></p>\\n<p>The SoundEffect node class is used to play audio sound effects that can be triggered from events that occur in the UI. Typically, these sound effects are short audio clips, but there is no inherent limit on their length. Currently, up to four simultaneous sounds can be playing at any time, in addition to audio from streaming content and TextToSpeech audio.</p>\\n<p>Files can be installed locally as part of the channel package or dynamically downloaded from the network. All files must be WAV (i.e. PCM) format. </p>\\n<p>For local files, the convention is to include the WAV files in a directory named \\\"sounds\\\". </p>\\n<p>For downloaded files, a least-recently-used (LRU) mechanism is used to keep the most recently downloaded/played sounds in temporary storage on the device. If the limits on the maximum number/size of downloaded sounds is exceeded, the least recently used sounds are removed from temporary storage. They will be automatically reloaded the next time the control field is set to \\\"play\\\".</p>\\n<p>A sample demonstrating how to use the SoundEffect node can be found here: <a href=\\\"https://github.com/rokudev/samples/blob/master/media/SimpleSoundEffect.zip\\\">SimpleSoundEffect</a></p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>uri</td>\\n<td>uri</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>Specifies the URI of the WAV file. Sounds included as part of the application package can be referenced using the <code>pkg:/sounds</code> prefix. This may also specify the location of a WAV file on a remote server.</td>\\n</tr>\\n<tr>\\n<td>control</td>\\n<td>option string</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>Set to control the audio playback. Getting the value of this field returns the most recent value set, or none if no value has been set.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>none</td>\\n<td>No effect</td>\\n</tr>\\n<tr>\\n<td>play</td>\\n<td>Start playing the audio. If the audio is already playing, it will be restarted.<br /><br />If the <code>loadStatus</code> field is not \\\"ready\\\", the sound will not be played and the <code>state</code> field will be set to \\\"notready\\\".<br /><br />For networked files with the <code>loadStatus</code> field set to \\\"flushed\\\", setting <code>control</code> to \\\"play\\\" will automatically trigger a reload of the network file, but will not result in the sound being played, due to the time it takes to download the file again. In this case, the sound can be played once the <code>loadStatus</code> field changes from \\\"flushed\\\" to \\\"ready\\\"</td>\\n</tr>\\n<tr>\\n<td>stop</td>\\n<td>If the audio is playing, stop playing the audio. If the audio is not playing, no effect.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>state</td>\\n<td>value string</td>\\n<td>none</td>\\n<td>READ_ONLY</td>\\n<td>Can be used to track the progress of current state of local and networked sound files When the field value changes to ready, the sound is ready to be played. The possible values are:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>none</td>\\n<td>No current playback state</td>\\n</tr>\\n<tr>\\n<td>playing</td>\\n<td>Audio is currently playing.</td>\\n</tr>\\n<tr>\\n<td>stopped</td>\\n<td>The audio playback was stopped by setting control to \\\"stop\\\". The state will also be set to \\\"stopped\\\" if audio was playing and the uri is changed.</td>\\n</tr>\\n<tr>\\n<td>finished</td>\\n<td>The audio playback reached the end of the audio</td>\\n</tr>\\n<tr>\\n<td>toomanysounds</td>\\n<td>Control was to \\\"play\\\" while there were already the maximum number of SoundEffect sounds playing. Currently, this limit is 4.</td>\\n</tr>\\n<tr>\\n<td>notready</td>\\n<td>The sound file is not on the device. This is set in response to the control field being set to \\\"play\\\".<br /><br />For local WAV files included in a channel package, it will be occur if the path to the file is not correct, or if the file is not a valid WAV file.<br /><br />For network-accessed WAV files, this indicates one of these three conditions is true:<br /><br /><ul>\\n<li>The file has been requested, but is not finished downloading. In this case, the <code>loadStatus</code> field will be set to \\\"loading\\\".</li>\\n<li>The file request has completed, but the URL is incorrect or the downloaded file is not a valid WAV filed. In this case, the <code>loadStatus</code> field will be set to \\\"failed\\\"</li>\\n<li>The file has previously been downloaded, but has been flushed from the LRU cache. In this case, the <code>loadStatus</code> field will be set to \\\"flushed\\\".</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>loadStatus</td>\\n<td>value string</td>\\n<td>none</td>\\n<td>READ_ONLY</td>\\n<td>Indicates the status of the sound file.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>none</td>\\n<td>No file has been requested.</td>\\n</tr>\\n<tr>\\n<td>loading</td>\\n<td>(network files only) The file has been requested and is being downloaded.</td>\\n</tr>\\n<tr>\\n<td>ready</td>\\n<td>The file is ready to be played (i.e. it is on the device and is a valid WAV file).</td>\\n</tr>\\n<tr>\\n<td>failed</td>\\n<td>The file path or URI is incorrect or refers to a file that is not a valid WAV file.</td>\\n</tr>\\n<tr>\\n<td>flushed</td>\\n<td>(network files only) The file was ready, but has been deleted from the LRU cache. Setting the <code>control</code> field to play will cause the file to be automatically reloaded, but not be played upon completion.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>volume</td>\\n<td>integer</td>\\n<td>50</td>\\n<td>READ_WRITE</td>\\n<td>The volume is a number between 0 and 100 (percentage of full volume).  50 should be used for normal volume.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/media-playback-nodes/video.md":"{\n  \"content\": \"<h1 id=\\\"video\\\">Video</h1>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/layout-group-nodes/group.md\\\"><strong>Group</strong></a></p>\\n<p>The Video node class provides a controlled play of live or VOD video.</p>\\n<p>The Video node includes a wide variety of internal nodes to support trick play, playback buffering indicators, and so forth. Playback buffering indicators, to indicate buffering before initial playback as well as re-buffering, use an internal instance of a ProgressBar node. For trick play, an internal instance of a TrickPlayBar node is provided. For display of BIF images for DVD-like chapter selection, an internal instance of a BIFDisplay node is provided.</p>\\n<p>Starting from Roku OS 8, the behavior of the Roku system overlay is such that the system overlay now slides in whenever the * button is pressed, the Video node is in focus, and the app does not have its OnKeyEvent() handler fired. When the Video node is not in focus, the system overlay does not slide in and the OnKeyEvent() handler is fired.</p>\\n<h2 id=\\\"fields\\\">Fields</h2>\\n<h3 id=\\\"playback-fields\\\">Playback fields</h3>\\n<p>To set the specific video playback parameters for a particular video, set the <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\">Content Meta-Data</a> attributes for the video in a <a href=\\\"/docs/references/scenegraph/control-nodes/contentnode.md\\\">ContentNode</a> node, and assign the ContentNode to the <code>content</code> field of the Video node.</p>\\n<p>Video playback can then be controlled by setting the value of the <code>control</code> field, such as setting the field value to <code>play</code> to begin playback.</p>\\n<p>The <code>control</code> field includes a <code>prebuffer</code> option, which allows the video to begin buffering without showing the video. You can use this option to begin buffering of a video before a user has actually selected and started the video, such as when the user is looking at information about various video offerings in a list or grid or another type of UI element. This can eliminate much or all of the apparent delay in starting the video due to buffering the video for the user. For example, you could set the <code>control</code> field value to <code>prebuffer</code> in a callback function triggered by the <code>itemFocused</code> events that occur as a user scrolls down a list of video offerings that also display information about each video. When the user makes the selection, you can begin the actual video playback by setting the <code>control</code> field value to <code>play</code> in a callback function triggered by the <code>itemSelected</code> event for the list.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>content</td>\\n<td>ContentNode</td>\\n<td>NULL</td>\\n<td>READ_WRITE</td>\\n<td>The ContentNode with the <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\">Content Meta-Data</a> for the video, or a video playlist (a sequence of videos) to be played.<br /><br />If a video playlist is to be played, the children of this ContentNode comprise the playlist, and each ContentNode child must have all attributes required to play that video. For example, if the videos \\\"A\\\" and \\\"B\\\" are to be played, three ContentNodes must be created: the parent ContentNode (which is largely ignored), one ContentNode child for \\\"A,\\\" and one ContentNode child for \\\"B.\\\" The parent node is set into this content field, and when video playback is started, all of its children will be played in sequence. Any changes made to the playlist after playback has started are ignored. See the <code>contentIsPlaylist</code> and <code>contentIndex</code> fields, for more information on playlists.</td>\\n</tr>\\n<tr>\\n<td>playStartInfo<br /><br /><em>Available since Roku OS 9.3</em></td>\\n<td>roAssociativeArray</td>\\n<td></td>\\n<td>READ_ONLY</td>\\n<td>Provides timing measurements related to the start of video playback. All measurements are in seconds. <br /><br />The roAssociativeArray contains the following fields:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>total_dur</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>Total video start duration.</td>\\n</tr>\\n<tr>\\n<td>manifest_dur</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>Manifest download and parsing.</td>\\n</tr>\\n<tr>\\n<td>drm_load_dur</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>DRM system initialization.</td>\\n</tr>\\n<tr>\\n<td>drm_lic_acq_dur</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>License acquisition. This typically includes interactions with the license server.</td>\\n</tr>\\n<tr>\\n<td>prebuf_dur</td>\\n<td>float</td>\\n<td>READ_ONLY</td>\\n<td>Prebuffer content.</td>\\n</tr>\\n<tr>\\n<td>manifest_start<br /><br />(<em>Available since Roku OS 10.0</em>)</td>\\n<td>Float</td>\\n<td>READ_ONLY</td>\\n<td>Point at which manifest download and parsing begins.</td>\\n</tr>\\n<tr>\\n<td>drm_load_start<br /><br />(<em>Available since Roku OS 10.0</em>)</td>\\n<td>Float</td>\\n<td>READ_ONLY</td>\\n<td>Point at which DRM system initialization begins.</td>\\n</tr>\\n<tr>\\n<td>drm_lic_acq_start<br /><br />(<em>Available since Roku OS 10.0</em>)</td>\\n<td>Float</td>\\n<td>READ_ONLY</td>\\n<td>Point at which license acquisition begins.</td>\\n</tr>\\n<tr>\\n<td>prebuf_start<br /><br />(<em>Available since Roku OS 10.0</em>)</td>\\n<td>Float</td>\\n<td>READ_ONLY</td>\\n<td>Point at which content pre-buffering begins.</td>\\n</tr>\\n</tbody>\\n</table><br /><blockquote>\\n<p>The _start fields correspond to the similarly named _dur (duration) fields in this structure. In each case, the _start point is the number of milliseconds elapsed from the initialization of the media player (t=0.000). If required, ending points for each interval can be derived from its associated starting-point and duration.</p>\\n</blockquote></td>\\n</tr>\\n<tr>\\n<td>licenseStatus</td>\\n<td>roAssociativeArray</td>\\n<td></td>\\n<td>READ_ONL</td>\\n<td>Indicates whether the DRM license was acquired. If a failure occurs, this field provides additional details about the error. The roAssociativeArray contains the following fields:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>response</td>\\n<td>string</td>\\n<td>The server response. If a license is not retrieved, the response is empty and the HTTP response code is returned instead.</td>\\n</tr>\\n<tr>\\n<td>status</td>\\n<td>string</td>\\n<td>The HTTP response code.</td>\\n</tr>\\n<tr>\\n<td>keysystem</td>\\n<td>string</td>\\n<td>The DRM technology used.</td>\\n</tr>\\n<tr>\\n<td>duration</td>\\n<td>string</td>\\n<td>The total time elapsed in sending a request to the license server and receiving a response (in milliseconds).</td>\\n</tr>\\n</tbody>\\n</table><br /></td>\\n</tr>\\n<tr>\\n<td>contentIsPlaylist</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>If set to true, enables video playlists (a sequence of videos to be played). See the <code>content</code> and <code>contentIndex</code> field for more information on playlists.</td>\\n</tr>\\n<tr>\\n<td>contentIndex</td>\\n<td>integer</td>\\n<td>-1</td>\\n<td>READ_ONLY</td>\\n<td>The index of the video in the video playlist that is currently playing. Generally, you would only want to check this field if video playlists are enabled (by setting the <code>contentIsPlaylist</code> field to true), but it is set to 0 when a single video is playing, and video playlists are not enabled.</td>\\n</tr>\\n<tr>\\n<td>nextContentIndex</td>\\n<td>integer</td>\\n<td>-1</td>\\n<td>READ_WRITE</td>\\n<td>If the <code>contentIsPlaylist</code> field is set to true to enable video playlists, sets the index of the next video in the playlist to be played. Setting this field does not immediately change the video being played, but takes effect when the current video is completed or skipped. By default, this value is -1, which performs the default index increment operation. After the video specified by the index in this field begins playing, the field is set to the default -1 again, so the next video played will be set by the default index increment operation unless the field is set again to a different index.</td>\\n</tr>\\n<tr>\\n<td>control</td>\\n<td>option string</td>\\n<td>none</td>\\n<td>READ_WRITE</td>\\n<td>Sets the desired play state for the video, such as starting or stopping the video play. Getting the value of this field returns the most recent value set, or none if no value has been set. To dynamically monitor the actual state of the video, see the <code>state</code> field.<br /><br />The play and stop commands to commence and discontinue playback should not be used to implement trick modes like rewind, or replay. For that use the <code>seek</code> field.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>none</td>\\n<td>No play state set</td>\\n</tr>\\n<tr>\\n<td>play</td>\\n<td>Start video play</td>\\n</tr>\\n<tr>\\n<td>stop</td>\\n<td>Stop video play</td>\\n</tr>\\n<tr>\\n<td>pause</td>\\n<td>Pause video play</td>\\n</tr>\\n<tr>\\n<td>resume</td>\\n<td>Resume video play after a pause</td>\\n</tr>\\n<tr>\\n<td>replay</td>\\n<td>Replay video</td>\\n</tr>\\n<tr>\\n<td>prebuffer</td>\\n<td>Starts buffering the video stream before the Video node actually begins playback. Only one video stream can be buffering in the application at any time. Setting the <code>control</code> field to <code>prebuffer</code> for another video stream after setting <code>prebuffer</code> for a previous video stream stops the buffering of the previous video stream.</td>\\n</tr>\\n<tr>\\n<td>skipcontent</td>\\n<td>Skip the currently-playing content and begin playing the next content in the playlist. If the content is not a playlist, or if the current content is the end of the playlist, this will end playback.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>state</td>\\n<td>value string</td>\\n<td>none</td>\\n<td>READ_ONLY</td>\\n<td>Describes the current video play state, such as if the video play has been paused.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>none</td>\\n<td>No current play state</td>\\n</tr>\\n<tr>\\n<td>buffering</td>\\n<td>Video stream is currently buffering</td>\\n</tr>\\n<tr>\\n<td>playing</td>\\n<td>Video is currently playing</td>\\n</tr>\\n<tr>\\n<td>paused</td>\\n<td>Video is currently paused</td>\\n</tr>\\n<tr>\\n<td>stopped</td>\\n<td>Video is currently stopped</td>\\n</tr>\\n<tr>\\n<td>finished</td>\\n<td>Video has successfully completed playback</td>\\n</tr>\\n<tr>\\n<td>error</td>\\n<td>An error has occurred in the video play. The error code, message, and diagnostics can be found in the <code>errorCode</code>, <code>errorMsg</code>, and <code>errorStr</code> fields respectively.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>errorCode</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>The error code associated with the video play error set in the <code>state</code> field.<br /><br />Use the <strong>errorStr</strong> and and <strong>errorInfo</strong> fields for more descriptive diagnostic information to help identify and resolve the cause of the error.</td>\\n</tr>\\n<tr>\\n<td>errorMsg</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_ONLY</td>\\n<td>An error message describing the video play error set in the <code>state</code> field.<br /><br />Use the <strong>errorStr</strong> and and <strong>errorInfo</strong> fields for more descriptive diagnostic information to help identify and resolve the cause of the error.</td>\\n</tr>\\n<tr>\\n<td>errorStr</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_ONLY</td>\\n<td>A diagnostic message to help resolve the video play error set in the <code>state</code> field.<br /><br />The format of the errorStr is as follows: category:{category_name}:error:{error_code}:ignored:{0|1}:{source}:{source_name}:{additional catcher comment}:{error_string}:extra:{error_attributes} <br /><br /><table>\\n<thead>\\n<tr>\\n<th>errorStr Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>category_name</td>\\n<td>string</td>\\n<td>The type of error, which includes: \\\"http\\\", \\\"drm\\\", \\\"mediaerror\\\", or \\\"mediaplayer\\\".</td>\\n</tr>\\n<tr>\\n<td>error_code</td>\\n<td>integer</td>\\n<td>The unique code associated with the error.</td>\\n</tr>\\n<tr>\\n<td>ignored</td>\\n<td>integer</td>\\n<td>Indicates whether the error generated an exception (0) or was ignored resulting in the next item in the content list being played (1).</td>\\n</tr>\\n<tr>\\n<td>source</td>\\n<td>string</td>\\n<td>The module that generated the error.</td>\\n</tr>\\n<tr>\\n<td>source_name</td>\\n<td>string</td>\\n<td>The module that generated the error.</td>\\n</tr>\\n<tr>\\n<td>additional catcher comment</td>\\n<td>string</td>\\n<td>Typically, the comment added when the exception is caught.</td>\\n</tr>\\n<tr>\\n<td>error_string</td>\\n<td>string</td>\\n<td>A text message describing the video play error.</td>\\n</tr>\\n<tr>\\n<td>error_attributes</td>\\n<td>string</td>\\n<td>The error attribute, which includes the clip_id (the unique ID of the clip that failed to play).</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>errorInfo</td>\\n<td>roAssociativeArray</td>\\n<td></td>\\n<td>READ_ONLY</td>\\n<td>A diagnostic message to help resolve the video play error set in the <code>state</code> field.<br /><br />The roAssociativeArray contains the following fields:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>clip_id</td>\\n<td>integer</td>\\n<td>The unique ID for the clip</td>\\n</tr>\\n<tr>\\n<td>ignored</td>\\n<td>integer</td>\\n<td>Indicates whether the error generated an exception (0) or was ignored resulting in the next item in the content list being played (1).</td>\\n</tr>\\n<tr>\\n<td>source</td>\\n<td>string</td>\\n<td>The module that generated the error.</td>\\n</tr>\\n<tr>\\n<td>category</td>\\n<td>String</td>\\n<td>The type of error, which includes: \\\"http\\\", \\\"drm\\\", \\\"mediaerror\\\", or \\\"mediaplayer\\\".</td>\\n</tr>\\n<tr>\\n<td>error_code</td>\\n<td>integer</td>\\n<td>The internal Roku code associated with the error.  Use the <strong>dbgmsg</strong> field for debugging.</td>\\n</tr>\\n<tr>\\n<td>dbgmsg</td>\\n<td>string</td>\\n<td>A verbose debug message that can help identify the root cause of the error.</td>\\n</tr>\\n<tr>\\n<td>error_attributes</td>\\n<td>string</td>\\n<td>The error attribute, which includes the clip_id (the unique ID of the clip that failed to play).</td>\\n</tr>\\n<tr>\\n<td>drmerrcode<br /><em>Available since Roku OS 10.5</em></td>\\n<td>integer</td>\\n<td>The error code returned by the DRM system, if any, when a video player error occurs</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>decoderStats<br /><br />(<em>Available since Roku OS 11.0</em>)</td>\\n<td>roAssociativeArray</td>\\n<td>{}</td>\\n<td>READ_ONLY</td>\\n<td>Provides the following video decoder statistics related to the start of video playback:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>renderCount</td>\\n<td>integer</td>\\n<td>The number of frames that have been rendered since playback was started. This value is incremented each time a new frame is rendered</td>\\n</tr>\\n<tr>\\n<td>repeatCount</td>\\n<td>integer</td>\\n<td>The number of frames that have been repeated since playback was started.This value is incremented each time a new frame is not available in time and the current frame is rendered an additional frame period.</td>\\n</tr>\\n<tr>\\n<td>frameDropCount</td>\\n<td>integer</td>\\n<td>The number of frames that have been dropped since playback was started.This value is incremented each time the presentation time of a decoded frame is too old to be rendered and the next frame is rendered instead.</td>\\n</tr>\\n<tr>\\n<td>streamErrorCount</td>\\n<td>integer</td>\\n<td>The number of bitstream errors since playback was started.This value is incremented each time the decoder detects a bitstream error.</td>\\n</tr>\\n</tbody>\\n</table><br /><br />Set the <strong>enableDecoderStats</strong> field to true to enable updates to this field.</td>\\n</tr>\\n<tr>\\n<td>enableDecoderStats<br /><br />(<em>Available since Roku OS 11.0</em>)</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Enables updates to the <strong>decoderStats</strong> field.</td>\\n</tr>\\n<tr>\\n<td>playbackActionButtons<br /><br />(<em>Available since Roku OS 11.5</em>)</td>\\n<td>roArray of roAssociativeArrays</td>\\n<td>[]</td>\\n<td>READ_WRITE</td>\\n<td>Component that shows the buttons and other specified UI elements on the pause screen at the start of playback. Each element in the array has following fields:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>text</td>\\n<td>string</td>\\n<td>system default</td>\\n<td>Text for the button label</td>\\n</tr>\\n<tr>\\n<td>icon</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>A 9-patch or PNG of the icon to be displayed when the button does not have.</td>\\n</tr>\\n<tr>\\n<td>focusIcon</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>A 9-patch or PNG of the icon to be displayed when the button has focus.</td>\\n</tr>\\n<tr>\\n<td>buttonIsDisabled</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>Controls whether the button is disabled (true) or enabled (false). A disabled button is skipped and does not have focus while the user navigates the different playback action buttons with the directional pad on the Roku remote control.</td>\\n</tr>\\n<tr>\\n<td>bottomRowButtons</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>List of buttons to be displayed in the the bottom row the pause screen. Each string in the buttons array adds a new button to the bottom row.</td>\\n</tr>\\n<tr>\\n<td>bottomRowButtonFocused</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Indicates the index of the button that gained focus when the user moved the focus onto a button in the bottom row.</td>\\n</tr>\\n<tr>\\n<td>bottomRowButtonSelected</td>\\n<td>int</td>\\n<td>0</td>\\n<td>Indicates the index of the selected button when the user selects one of the buttons in the bottom row.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>playbackActionButtonSelected<br /><br />(<em>Available since Roku OS 11.5</em>)</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>The index of the button that is selected in the <strong>playbackActionButtons</strong> field.</td>\\n</tr>\\n<tr>\\n<td>playbackActionButtonFocused<br /><br />(<em>Available since Roku OS 11.5</em>)</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>The index of the button that has focus in the <strong>playbackActionButtons</strong> field.</td>\\n</tr>\\n<tr>\\n<td>playbackActionButtonFocusedTextFont<br /><br />(<em>Available since Roku OS 11.5</em>)</td>\\n<td>Font</td>\\n<td>SmallBoldSystemFont</td>\\n<td>WRITE</td>\\n<td>Specifies the font of the button label when the button has key focus.</td>\\n</tr>\\n<tr>\\n<td>playbackActionButtonUnfocusedTextFont<br /><br />(<em>Available since Roku OS 11.5</em>)</td>\\n<td>Font</td>\\n<td>SmallSystemFont</td>\\n<td>WRITE</td>\\n<td>Specifies the font of the button label when the button does not have key focus.</td>\\n</tr>\\n<tr>\\n<td>playbackActionButtonFocusedTextColor<br /><br />(<em>Available since Roku OS 11.5</em>)</td>\\n<td>Color</td>\\n<td>OX121212FF</td>\\n<td>WRITE</td>\\n<td>Specifies the color of the button label text when the button has key focus.</td>\\n</tr>\\n<tr>\\n<td>playbackActionButtonUnfocusedTextColor<br /><br />(<em>Available since Roku OS 11.5</em>)</td>\\n<td>Color</td>\\n<td>0xEFEFEFFF</td>\\n<td>WRITE</td>\\n<td>Specifies the color of the button label text when the button does not have key focus.</td>\\n</tr>\\n<tr>\\n<td>playbackActionButtonFocusIndicatorBlendColor<br /><br />(<em>Available since Roku OS 11.5</em>)</td>\\n<td>Color</td>\\n<td>-</td>\\n<td>WRITE</td>\\n<td>Specifies the button background color when the button has key focus.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"trickplay-fields\\\">Trickplay fields</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>duration</td>\\n<td>time</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>The duration of the video being played, specified in seconds. This becomes valid when playback begins and may change if the video is dynamic content, such as a live event.</td>\\n</tr>\\n<tr>\\n<td>loop</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>If set to true, the video or video playlist (if the <code>contentIsPlaylist</code> field is set to true to enable video playlists) will be restarted from the beginning after the end is reached.</td>\\n</tr>\\n<tr>\\n<td>position</td>\\n<td>time</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>Time of the current position in the stream. Either UTC time or elapsed since start of stream depending on content type. <br /><br />As of Roku OS 9.3, when the video is paused, the position is recorded for that pause event. This means that playing, pausing, and resuming a video generates three separate positions.</td>\\n</tr>\\n<tr>\\n<td>positionInfo</td>\\n<td>roAssociativeArray</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>Contains the following fields that provide information about the last rendered video and audio samples.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>audio</td>\\n<td>double</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>Position of the last rendered audio sample, specified in seconds</td>\\n</tr>\\n<tr>\\n<td>clip_id</td>\\n<td>integer</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>The unique ID of the clip</td>\\n</tr>\\n<tr>\\n<td>epoch</td>\\n<td>integer</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>0 means positions are relative to videoStart; 1 means that positions are utc</td>\\n</tr>\\n<tr>\\n<td>video</td>\\n<td>double</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>Position of the last rendered video sample, specified in seconds</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>clipId</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>The clip ID of the currently playing track.</td>\\n</tr>\\n<tr>\\n<td>notificationInterval</td>\\n<td>time</td>\\n<td>0.5</td>\\n<td>READ_WRITE</td>\\n<td>The interval between notifications to observers of the position field, specified as the number of seconds. If the value is 0, no notifications are delivered. This value may be read or modified at any time.</td>\\n</tr>\\n<tr>\\n<td>seek</td>\\n<td>time</td>\\n<td>invalid</td>\\n<td>WRITE_ONLY</td>\\n<td>Sets the current position in the video. The value is the number seconds from the beginning of the stream, specified as a double.</td>\\n</tr>\\n<tr>\\n<td>seekMode<br /><br />(<em>Available since Roku OS 10.0</em>)</td>\\n<td>string</td>\\n<td>\\\"default\\\"</td>\\n<td>READ_WRITE</td>\\n<td>Determines the desired level of accuracy for seek behavior:<br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>default</td>\\n<td>Seek to the closest sync frame (segment, or I-frame of a multi-frame segment) that is earlier than the requested seek time.</td>\\n</tr>\\n<tr>\\n<td>accurate</td>\\n<td>Seek to the exact time requested if platform support (video decoder step function) is available.</td>\\n</tr>\\n</tbody>\\n</table><br /></td>\\n</tr>\\n<tr>\\n<td>autoplayAfterSeek</td>\\n<td>boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>Enables video content to automatically play after rebuffering. Setting this flag to false disables this default behavior.</td>\\n</tr>\\n<tr>\\n<td>timedMetaData</td>\\n<td>associative array</td>\\n<td>{ }</td>\\n<td>READ_ONLY</td>\\n<td>The most recent timed meta data that has been decoded from the video stream. Only meta data with a key that matches an entry in timedMetaDataSelectionKeys will be set into this field. The value of this field is an associative array which contains arbitrary keys and values, as found in the video stream.</td>\\n</tr>\\n<tr>\\n<td>timedMetaData2</td>\\n<td>associative array</td>\\n<td>{ }</td>\\n<td>READ_ONLY</td>\\n<td>This field contains all the same information included in the <strong>timedMetaData</strong> field and the following additional fields:<br /><table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data</td>\\n<td>associative array</td>\\n<td>The values from the stream's metadata tag, as defined by video provider.</td>\\n</tr>\\n<tr>\\n<td>position</td>\\n<td>time</td>\\n<td>The Presentation Time Stamp (PTS) when the tag was seen.</td>\\n</tr>\\n<tr>\\n<td>source</td>\\n<td>enum</td>\\n<td>This may be one of the following string values: ${source-enum-list}</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>timedMetaDataSelectionKeys</td>\\n<td>array of strings</td>\\n<td>[ ]</td>\\n<td>READ_WRITE</td>\\n<td>If the video stream contains timed meta data such as ID3 tags, any meta data with a key matching an entry in this array is set into the timedMetaData field.<br /><br />For EMSG data, if any entry in this array is \\\"*\\\", then all timed meta data is selected.<br /><br />HLS tags must be defined separately.</td>\\n</tr>\\n<tr>\\n<td>streamInfo</td>\\n<td>associative array</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>Information about the video stream that is currently playing or buffering.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>isUnderrun</td>\\n<td>Boolean</td>\\n<td>If true, the stream was downloaded due to an underrun</td>\\n</tr>\\n<tr>\\n<td>isResumed</td>\\n<td>Boolean</td>\\n<td>If true, playback was resumed after trickplay</td>\\n</tr>\\n<tr>\\n<td>measuredBItrate</td>\\n<td>Integer</td>\\n<td>The measured bitrate (bps) of the network when the stream was selected</td>\\n</tr>\\n<tr>\\n<td>streamBitrate</td>\\n<td>Integer</td>\\n<td>The bitrate of the stream</td>\\n</tr>\\n<tr>\\n<td>streamUrl</td>\\n<td>URI</td>\\n<td>The URL of the stream</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>completedStreamInfo</td>\\n<td>associative array</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>Information about the video stream that most recently completed playing, due to an error, user action, or end of the stream. The associative array consists of the same keys as for the <code>streaminfo</code> field, with one additional key, <code>isFullResult</code>, a Boolean type that, if true indicates the <code>stream</code> played to completion, or if false, was interrupted by an error or user action. This field is set prior to the <code>state</code> field being changed, so <code>state</code> field observer callback functions can assume that the associative array values are valid when the state field changes.</td>\\n</tr>\\n<tr>\\n<td>timeToStartStreaming</td>\\n<td>time</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>The time in seconds from playback being started until the video actually began playing. The minimum valid value is 1 millisecond, and this is only valid if the current value of the <code>state</code> field is <code>playing</code>. When the state field value is not <code>playing</code>, the value will be 0. This field is updated prior to the <code>state</code> field changing, so <code>state</code> field observer callback functions can assume this field is valid after the <code>state</code> field value changes to <code>playing</code>.</td>\\n</tr>\\n<tr>\\n<td>bufferingStatus</td>\\n<td>associative array</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>Contains information about stream buffering progress and status. This field is valid only while buffering is in progress, both at stream startup or when re-buffering is required. Observers will be notified when any element of the array changes, and also when buffering is complete and the field itself becomes invalid. The array contains the following name - value pairs.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>percentage</td>\\n<td>Percent buffering complete as an integer.</td>\\n</tr>\\n<tr>\\n<td>isUnderrun</td>\\n<td>Boolean value indicating if a stream underrun occurred.</td>\\n</tr>\\n<tr>\\n<td>prebufferDone<br /><br />(<em>Available since Roku OS 10.0</em>)</td>\\n<td>A boolean value that indicates whether the player has buffered enough data to allow the player to begin playing immediately should \\\"control\\\" be set to \\\"play.\\\"</td>\\n</tr>\\n<tr>\\n<td>actualStart<br /><br />(<em>Available since Roku OS 10.0</em>)</td>\\n<td>A time value that is automatically set when prebufferDone becomes true, specifying the actual time from which playback will resume. This may vary from the time requested in the content node's playStart field, depending on the capabilities of the player and the seekMode setting.</td>\\n</tr>\\n</tbody>\\n</table><br /><blockquote>\\n<p>While it is possible to use the Video node seek field to specify the seek time, it is recommended that channels do the following:</p>\\n<ol>\\n<li>Set the content node field playStart in seek-to-pause scenarios.</li>\\n<li>In the video node, set \\\"control\\\" to \\\"prebuffer\\\".</li>\\n<li>Wait for \\\"prebufferDone\\\" to become \\\"true\\\".</li>\\n<li>Check \\\"actualStart\\\" (if desired).</li>\\n<li>Set \\\"control\\\" to \\\"play\\\".</li>\\n</ol>\\n</blockquote></td>\\n</tr>\\n<tr>\\n<td>videoFormat</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_ONLY</td>\\n<td>Contains the format of the currently playing video stream.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>\\\"\\\"</td>\\n<td>No stream playing</td>\\n</tr>\\n<tr>\\n<td>none</td>\\n<td>Stream contains no playable video</td>\\n</tr>\\n<tr>\\n<td>unknown</td>\\n<td>Stream contains unknown video</td>\\n</tr>\\n<tr>\\n<td>hevc</td>\\n<td>ISO/IEC 23008-2, H.265, HEVC</td>\\n</tr>\\n<tr>\\n<td>hevc_b</td>\\n<td>ISO/IEC 23008-2 Annex-B, H.265, HEVC</td>\\n</tr>\\n<tr>\\n<td>mpeg1</td>\\n<td>ISO/IEC 11172-2, MPEG-1 part 2, H.261</td>\\n</tr>\\n<tr>\\n<td>mpeg2</td>\\n<td>ISO/IEC 13818-2, MPEG-2 part 2, H.262</td>\\n</tr>\\n<tr>\\n<td>mpeg4_2</td>\\n<td>ISO/IEC 14496-2, MPEG-4 part 2, H.263</td>\\n</tr>\\n<tr>\\n<td>mpeg4_10b</td>\\n<td>ISO/IEC 14496-10, MPEG-4 part 10 Annex-B, H.264, vc-1</td>\\n</tr>\\n<tr>\\n<td>mpeg4_15</td>\\n<td>ISO/IEC 14496-15, MPEG-4 part 15, H.264, vc-1</td>\\n</tr>\\n<tr>\\n<td>AVC vc1</td>\\n<td>vc-1</td>\\n</tr>\\n<tr>\\n<td>wmv</td>\\n<td>Microsoft Windows Media Video</td>\\n</tr>\\n<tr>\\n<td>vp8</td>\\n<td>VP8 codec</td>\\n</tr>\\n<tr>\\n<td>vp9</td>\\n<td>VP9 codec</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>pauseBufferStart</td>\\n<td>time</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>The beginning position of the video buffered when paused. This field is only valid for live video.</td>\\n</tr>\\n<tr>\\n<td>pauseBufferEnd</td>\\n<td>time</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>The ending position of the video buffered when paused. This field is only valid for live video.</td>\\n</tr>\\n<tr>\\n<td>pauseBufferPosition</td>\\n<td>time</td>\\n<td>0</td>\\n<td>READ_ONLY</td>\\n<td>The current presentation position of the video buffered when paused. This field is only valid for live video.</td>\\n</tr>\\n<tr>\\n<td>pauseBufferOverflow</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_ONLY</td>\\n<td>Indicates that the video buffer was not able to save all video since being paused. This field is only valid for live video.</td>\\n</tr>\\n<tr>\\n<td>streamingSegment</td>\\n<td>associative array</td>\\n<td>{ }</td>\\n<td>READ_ONLY</td>\\n<td>Information about the video segment that is currently streaming. This is only meaningful for segmented video transports, such as DASH and HLS. The associative array has the following entries:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>segBitrateBps</td>\\n<td>integer</td>\\n<td>Bitrate of the segment in bits per second</td>\\n</tr>\\n<tr>\\n<td>segSequence</td>\\n<td>integer</td>\\n<td>The sequence number of the segment in the video</td>\\n</tr>\\n<tr>\\n<td>segStart</td>\\n<td>time</td>\\n<td>The start time of the segment from the start of the video, specified in seconds</td>\\n</tr>\\n<tr>\\n<td>segUrl</td>\\n<td>string</td>\\n<td>URL of the segment</td>\\n</tr>\\n<tr>\\n<td>Path (Available since Roku OS 9.4)</td>\\n<td>string</td>\\n<td>A path indicating the Period, AdaptationSet and Representation that is played. This is in UNIX directory notation as: ///</td>\\n</tr>\\n<tr>\\n<td>Width (Available since Roku OS 9.4)</td>\\n<td>integer</td>\\n<td>For video segments, the width of the encoded video picture</td>\\n</tr>\\n<tr>\\n<td>Height (Available since Roku OS 9.4)</td>\\n<td>integer</td>\\n<td>For video segments, the height of the encoded video picture</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>downloadedSegment</td>\\n<td>associative array</td>\\n<td>invalid</td>\\n<td>READ_ONLY</td>\\n<td>Information about the video segment that was just downloaded. This is only meaningful for segmented video transports, such as DASH and HLS. The associative array has the following entries:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Status</td>\\n<td>integer</td>\\n<td>Status of the download: 0 = success, nonzero = error</td>\\n</tr>\\n<tr>\\n<td>SegSequence</td>\\n<td>integer</td>\\n<td>Stream segment sequence number</td>\\n</tr>\\n<tr>\\n<td>SegUrl</td>\\n<td>string</td>\\n<td>Stream segment URL (i.e., .ts file for HLS, stream fragment URL for smooth)</td>\\n</tr>\\n<tr>\\n<td>DownloadDuration</td>\\n<td>integer</td>\\n<td>Amount of time spent downloading the segment, in milliseconds</td>\\n</tr>\\n<tr>\\n<td>SegSize</td>\\n<td>integer</td>\\n<td>Segment size, in bytes</td>\\n</tr>\\n<tr>\\n<td>SegType</td>\\n<td>integer</td>\\n<td>Type of data in the segment: 1=audio, 2=video, 3=captions, 0=mux</td>\\n</tr>\\n<tr>\\n<td>BitrateBPS</td>\\n<td>integer</td>\\n<td>Bitrate of the segment, in bits per second</td>\\n</tr>\\n<tr>\\n<td>SegStart</td>\\n<td>time</td>\\n<td>The start time of the segment from the start of the video, specified in seconds</td>\\n</tr>\\n<tr>\\n<td>SegDuration</td>\\n<td>string</td>\\n<td>The duration of the segment in milliseconds.</td>\\n</tr>\\n<tr>\\n<td>Path (Available since Roku OS 9.4)</td>\\n<td>string</td>\\n<td>A path indicating the Period, AdaptationSet and Representation that is played. This is in UNIX directory notation as: ///</td>\\n</tr>\\n<tr>\\n<td>Width (Available since Roku OS 9.4)</td>\\n<td>integer</td>\\n<td>For video segments, the width of the encoded video picture</td>\\n</tr>\\n<tr>\\n<td>Height (Available since Roku OS 9.4)</td>\\n<td>integer</td>\\n<td>For video segments, the height of the encoded video picture</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>enableLiveAvailabilityWindow<br /><br /><em>Available since Roku OS 11.0</em></td>\\n<td>Boolean</td>\\n<td>False</td>\\n<td>READ_WRITE</td>\\n<td>Enables the scrubbing of the trickplay bar during the availability window of live linear streams.</td>\\n</tr>\\n<tr>\\n<td>enableThumbnailTilesDuringLive<br /><br /><em>Available since Roku OS 11.0</em></td>\\n<td>Boolean</td>\\n<td>False</td>\\n<td>READ_WRITE</td>\\n<td>Enables the <strong>thumbnailTiles</strong> field to be set and updated in the case of live HLS and DASH streams, which contain thumbnails as the thumbnails become available.<br /><br />By default and when this is set to false, the <strong>thumbnailTiles</strong> field is not written during live streams to maintain backwards compatibility with older applications and to avoid performance or memory issues. This is becuase they might not be expecting constant updates to the <strong>thumbnailTiles</strong> field if they were written to handle VOD streams, which rarely update the <strong>thumbnailTiles</strong> field.</td>\\n</tr>\\n<tr>\\n<td>thumbnailTiles</td>\\n<td>roAssociativeArray</td>\\n<td>[]</td>\\n<td>READ_WRITE</td>\\n<td>Contains the information about HLS and DASH standard thumbnail tiles as they are discovered within the manifest for streams which contain them.<br /><br />This field was first introduced (for VOD only) starting in Roku OS 9.1. Starting with Roku OS 11.0, the channel can enable this field for HLS and DASH live streams containing standard thumbnails by setting enableThumbnailTilesDuringLive to true.<br /><br /><blockquote>\\n<p>For Roku OS releases before 9.4, the <strong>thumbnailTiles</strong> associative array has the following structure: {tile_id: tile_set}\\n(string to associative array)</p>\\n<p>For Roku OS 9.4 and later,  the <strong>thumbnailTiles</strong> associative array has the following structure: {tile_id: [tile_set, tile_set, tile_set,...]}(string to array of associative arrays). This format allows discontinuous tile_sets of the same resolution to be grouped together as a \\\"choice\\\" for display.</p>\\n</blockquote><br /><br />The <strong>tile_id</strong> field is a unique string identifier for the <strong>tile_set</strong>, which is an associative array containing the attributes of the tile set as well as information about the thumbnails.<br /><br />The <strong>tile_set</strong> field contains the following fields:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>htiles</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>Horizontal number of thumbnails in a tile (columns.)</td>\\n</tr>\\n<tr>\\n<td>vtiles</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>Vertical number of thumbnails in a tile (rows.)</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>Number of horizontal pixels in a thumbnail (this is not the tile as the one in the DASH spec).</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>Number of vertical pixels in a thumbnail (this is not the same tile as the one in the DASH spec).</td>\\n</tr>\\n<tr>\\n<td>bandwidth</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>Max tile size in bits / duration.</td>\\n</tr>\\n<tr>\\n<td>duration</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>Duration of one tile in seconds (assuming a full tile).</td>\\n</tr>\\n<tr>\\n<td>initial_time<br /><em>Available since Roku OS 10.0</em></td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>Presentation start time of current <strong>tile_set</strong> in seconds. Thumbnails in tiles beginning before this time should be skipped, and the first relevant thumbnail duration should be updated accordingly.</td>\\n</tr>\\n<tr>\\n<td>final_time<br /><em>Available since Roku OS 9.4</em></td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>End time of current tile_set in seconds.</td>\\n</tr>\\n<tr>\\n<td>tiles</td>\\n<td>roArray</td>\\n<td>[]</td>\\n<td>Contains information about each tile in the <strong>tile_set</strong>. This contains the following fields: <br /><ul>\\n<li>url (index 0). A string with the URL of the tile.</li>\\n<li>start_time (index 1). A float with the start time of the tile in seconds.&#x3C;br/</li>\\n<li>format (index 2). Typically, an empty string, but it may contain the tile format \\\"jpeg\\\", \\\"png\\\", and so on.</li>\\n</ul></td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>trickPlayBackgroundOverlay<br /><br /><em>Available since Roku OS 11.5</em></td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>WRITE</td>\\n<td>The background overlay to be displayed whenever the playback UI is visible during the video playback experience.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"ui-fields\\\">UI fields</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Sets the width of the video play window in pixels. If set to 0.0 (the default), the video play window is set to the width of the entire display screen.</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>0.0</td>\\n<td>READ_WRITE</td>\\n<td>Sets the height of the video play window in pixels. If set to 0.0 (the default), the video play window is set to the height of the entire display screen.</td>\\n</tr>\\n<tr>\\n<td>enableUI</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td>If set to true (the default), the entire Video node user interface (such as ProgressBar and TrickPlayBar nodes, and BIF navigation) appear in response to stream events and remote control key presses.<br /><br /><strong>If set to false, most of the Video node user interface will not be shown, and the application is expected to implement the UI. The one exception is the closed-caption dialog, which always appears when the video is playing fullscreen and the user presses the Options (*) button</strong><br /><br />When using the <a href=\\\"/docs/developer-program/advertising/roku-advertising-framework.md\\\">Roku Advertising Framework (RAF)</a>, the RAF library may temporarily set this field to false while playing ads.</td>\\n</tr>\\n<tr>\\n<td>enableTrickPlay</td>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>READ_WRITE</td>\\n<td><strong>Controls whether trickplay is allowed during playback. When set to false the user trickplay buttons on the remote will have no effect. This only applies when enableUI is set to true.</strong></td>\\n</tr>\\n<tr>\\n<td>bifDisplay</td>\\n<td>BifDisplay node</td>\\n<td>internal instance default</td>\\n<td>READ_WRITE</td>\\n<td>Component that displays BIFs and allows navigation. The fields of this internal node are as follows:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Use</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>frameBgBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>A color to be blended with the image displayed behind individual BIF images displayed on the screen. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place.</td>\\n</tr>\\n<tr>\\n<td>frameBgImageUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>The URI of an image to be displayed behind individual frames on the screen. The actual frame image is displayed opaquely on top of this background, so only the outer edges of this image are visible. Because of that, this background image typically appears as a border around the video frame. If the frameBgBlendColor field is set to a value other than the default, that color will be blended with the background image.</td>\\n</tr>\\n<tr>\\n<td>getNearestFrame</td>\\n<td>time</td>\\n<td>invalid</td>\\n<td><em>Available since Roku OS 9</em><br /><br /><strong>Write-Only</strong><br />Requests the nearest BIF to the time specified. This would normally be an offset from the current playback position. The getNearestFrame request is passed to the BifCache which uses the getNearestFrame() method implemented on all BIF storage classes. Existing BifCache functionality is then used to retrieve the bitmap data and load it into the texture manager.</td>\\n</tr>\\n<tr>\\n<td>nearestFrame</td>\\n<td>string</td>\\n<td>\\\"\\\"</td>\\n<td><em>Available since Roku OS 9</em><br /><br /><strong>Read-Only</strong><br />Contains the URI of the requested BIF. The returned URIs will be of the form 'memory://BIF<em>%d</em>%d'. These URIs can then be used directly in the 'uri' field of a Poster SGN (or similar).</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>trickPlayBar</td>\\n<td>TrickPlayBar node</td>\\n<td>internal instance default</td>\\n<td>READ_WRITE</td>\\n<td>The visible TrickPlayBar node. The fields of this internal node are as follows:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Use</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>currentTimeMarkerBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>This is blended with the marker for the current playback position. This is typically a small vertical bar displayed in the TrickPlayBar node when the user is fast-forwarding or rewinding through the video.</td>\\n</tr>\\n<tr>\\n<td>textColor</td>\\n<td>color</td>\\n<td>system default</td>\\n<td>Sets the color of the text next to the trickPlayBar node indicating the time elapsed/remaining.</td>\\n</tr>\\n<tr>\\n<td>thumbBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>Sets the blend color of the square image in the trickPlayBar node that shows the current position, with the current direction arrows or pause icon on top. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place.</td>\\n</tr>\\n<tr>\\n<td>filledBarBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>This color will be blended with the graphical image specified in the <code>filledBarImageUri</code> field. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place.</td>\\n</tr>\\n<tr>\\n<td>liveFilledBarBlendColor<br /><br />(<em>Available since Roku OS 11.0</em>)</td>\\n<td>Color</td>\\n<td>0xFFFFFFFF</td>\\n<td>The color of the trickplay progress bar to be blended with the <strong>filledBarImageUri</strong> for live linear streams.</td>\\n</tr>\\n<tr>\\n<td>filledBarImageUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>A 9-patch or ordinary PNG of the bar that represents the completed portion of the work represented by this ProgressBar node. This is typically displayed on the left side of the track. This will be blended with the color specified by the <code>filledBarBlendColor</code> field, if set to a non-default value.</td>\\n</tr>\\n<tr>\\n<td>trackBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>This color is blended with the graphical image specified by <code>trackImageUri</code> field. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place.</td>\\n</tr>\\n<tr>\\n<td>trackImageUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>A 9-patch or ordinary PNG of the track of the progress bar, which surrounds the filled and empty bars. This will be blended with the color specified by the <code>trackBlendColor</code> field, if set to a non-default value.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>bufferingBar</td>\\n<td>ProgressBar node</td>\\n<td>internal instance default</td>\\n<td>READ_WRITE</td>\\n<td>Component that shows the progress of re-buffering, after video playback has started. The fields of this internal node are as follows:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Use</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>width</td>\\n<td>float</td>\\n<td>system default</td>\\n<td>Sets a custom width for an instance of the ProgressBar node</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>float</td>\\n<td>system default</td>\\n<td>Sets a custom height for an instance of the ProgressBar node</td>\\n</tr>\\n<tr>\\n<td>emptyBarBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>A color to be blended with the graphical image specified in the <code>emptyBarImageUri</code> field. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place.</td>\\n</tr>\\n<tr>\\n<td>emptyBarImageUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>A 9-patch or ordinary PNG of the bar presenting the remaining work to be done. This is typically displayed on the right side of the track, and is blended with the color specified in the <code>emptyBarBlendColor</code> field, if set to a non-default value.</td>\\n</tr>\\n<tr>\\n<td>filledBarBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>This color will be blended with the graphical image specified in the <code>filledBarImageUri</code> field. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place.</td>\\n</tr>\\n<tr>\\n<td>filledBarImageUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>A 9-patch or ordinary PNG of the bar that represents the completed portion of the work represented by this ProgressBar node. This is typically displayed on the left side of the track. This will be blended with the color specified by the <code>filledBarBlendColor</code> field, if set to a non-default value.</td>\\n</tr>\\n<tr>\\n<td>trackBlendColor</td>\\n<td>color</td>\\n<td>0xFFFFFFFF</td>\\n<td>This color is blended with the graphical image specified by <code>trackImageUri</code> field. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place.</td>\\n</tr>\\n<tr>\\n<td>trackImageUri</td>\\n<td>uri</td>\\n<td>\\\"\\\"</td>\\n<td>A 9-patch or ordinary PNG of the track of the progress bar, which surrounds the filled and empty bars. This will be blended with the color specified by the <code>trackBlendColor</code> field, if set to a non-default value.</td>\\n</tr>\\n<tr>\\n<td>percentage</td>\\n<td>integer</td>\\n<td>top</td>\\n<td>The percentage of the work that is done. Setting this field controls the visual appearance of the ProgressBar node.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>bufferingTextColor</td>\\n<td>color</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>The color of the text displayed near the buffering bar defined by the <code>bufferingBar</code> field, when the buffering bar is visible. If this is 0, the system default color is used. To set a custom color, set this field to a value other than 0x0.</td>\\n</tr>\\n<tr>\\n<td>retrievingBar</td>\\n<td>ProgressBar node</td>\\n<td>internal instance default</td>\\n<td>READ_WRITE</td>\\n<td>Component that shows the progress of initial retrieving of the video, prior to starting playback. The fields of this internal node are the same as for the <code>bufferingBar</code> field, which are the fields of the internal ProgressBar node.</td>\\n</tr>\\n<tr>\\n<td>retrievingTextColor</td>\\n<td>color</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td>The color of the text displayed near the retrieving bar, when the retrieving bar defined in the <code>retrievingBar</code> field is visible. If this is 0, the system default color is used. To set a custom color, set this field to a value other than 0x0.</td>\\n</tr>\\n<tr>\\n<td>pivotNode<br /><br /><em>Available since Roku OS 11.5</em></td>\\n<td>renderable node</td>\\n<td>-</td>\\n<td>READ_WRITE</td>\\n<td>The visible pivot node. This is a generic renderable node that can be used to display any component.<br /><br />To display the pivot node, you must set the <strong>enablePivotNode</strong> field to true.</td>\\n</tr>\\n<tr>\\n<td>enablePivotNode<br /><br /><em>Available since Roku OS 11.5</em></td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Controls whether the pivot node is shown (true) or hidden (false).</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"closed-caption-fields\\\">Closed caption fields</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>globalCaptionMode</td>\\n<td>option string</td>\\n<td>Off</td>\\n<td>READ_WRITE</td>\\n<td>Sets the value of the global Roku closed-caption mode. This can be used to allow the user or the application to change the closed-caption mode in an application just before or during video playback. The possible options are:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Option</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>\\\"Off\\\"</td>\\n<td>Turns the global Roku closed-caption mode off.</td>\\n</tr>\\n<tr>\\n<td>\\\"On\\\"</td>\\n<td>Turns the global Roku closed-caption mode on.</td>\\n</tr>\\n<tr>\\n<td>\\\"Instant replay\\\"</td>\\n<td>Sets the global Roku closed-caption setting to display captions only during instant replay.</td>\\n</tr>\\n<tr>\\n<td>\\\"When mute\\\"</td>\\n<td>Sets the global Roku closed-caption setting to display captions only when the volume is muted. (This only applies to Roku TVs.)</td>\\n</tr>\\n</tbody>\\n</table><br /><br />The channel should set the <code>subtitleTrack</code> field regardless of the selected Caption Mode.</td>\\n</tr>\\n<tr>\\n<td>suppressCaptions</td>\\n<td>boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Suppresses the closed caption for the purpose of resolving conflicts in cases where UI elements are drawn.<br /><br />Note that most of the disabling/enabling of the captions are done by the Roku OS, including enabling closed caption for Instant Replay.</td>\\n</tr>\\n<tr>\\n<td>subtitleTrack</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>The identifier of the selected subtitle track. Subtitles may or may not be visible on the screen, depending upon the user's caption mode setting. <br /><br />Reading this field will return the identifier of the subtitle track selected by the user. Writing this the field will change the track.<br /><br />See also: <a href=\\\"#closed-caption-fields\\\">globalCaptionMode</a></td>\\n</tr>\\n<tr>\\n<td>currentSubtitleTrack</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_ONLY</td>\\n<td>The identifier of the selected subtitle track. Subtitles may or may not be visible on the screen, depending upon the user's caption mode setting. <br /><br />Reading this field will return the identifier of the subtitle track that is playing. When the user has not selected a track, the Roku media player will select a track based on the preferred caption language system setting.</td>\\n</tr>\\n<tr>\\n<td>availableSubtitleTracks</td>\\n<td>array of associative arrays</td>\\n<td>[ ] empty array</td>\\n<td>READ_ONLY</td>\\n<td>The list of subtitle tracks available in the video stream. The array is initially populated with the tracks specified in the Content Meta-Data, and additional tracks are added if they are detected by the digital video player. Each associative array has the following entries:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Description</td>\\n<td>string</td>\\n<td>Descriptive name of the subtitle track</td>\\n</tr>\\n<tr>\\n<td>Language</td>\\n<td>string</td>\\n<td>ISO 639-2 three-letter language code</td>\\n</tr>\\n<tr>\\n<td>TrackName</td>\\n<td>string</td>\\n<td>The track identifier. The value of this field may be used to select the subtitle track.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>captionStyle</td>\\n<td>associative array</td>\\n<td>system default</td>\\n<td>READ_WRITE</td>\\n<td><em>Available since Roku OS 8.</em><br /><br />Allows channels to style closed captions. For any keys that are absent from the associative array, or for unexpected values, the Default value is assumed for that property. Following are the possible key names and values for this field:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Property</th>\\n<th>Possible Values</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Text/Font<br /></td>\\n<td>Default<br />Serif Fixed Width<br />Serif Proportional<br />Sans Serif Fixed Width<br />Sans Serif Proportional<br />Casual<br />Cursive<br />Small Caps</td>\\n</tr>\\n<tr>\\n<td>Text/Effect</td>\\n<td>Default<br />None<br />Raised<br />Depressed<br />Uniform<br />Drop shadow (left)<br />Drop shadow (right)</td>\\n</tr>\\n<tr>\\n<td>Text/Size</td>\\n<td>Default<br />Large<br />Medium<br />Small</td>\\n</tr>\\n<tr>\\n<td>Text/Color</td>\\n<td>Default<br />White<br />Black<br />Red<br />Green<br />Blue<br />Yellow<br />Magenta<br />Cyan</td>\\n</tr>\\n<tr>\\n<td>Text/Opacity</td>\\n<td>Default<br />25%<br />50%<br />75%<br />100%</td>\\n</tr>\\n<tr>\\n<td>Background/Color</td>\\n<td>Default<br />White<br />Black<br />Red<br />Green<br />Blue<br />Yellow<br />Magenta<br />Cyan</td>\\n</tr>\\n<tr>\\n<td>Background/Opacity</td>\\n<td>Default<br />Off<br />25%<br />50%<br />75%<br />100%</td>\\n</tr>\\n<tr>\\n<td>Window/Color</td>\\n<td>Default<br />White<br />Black<br />Red<br />Green<br />Blue<br />Yellow<br />Magenta<br />Cyan</td>\\n</tr>\\n<tr>\\n<td>Window/Opacity</td>\\n<td>Default<br />Off<br />25%<br />50%<br />75%<br />100%</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"audio-fields\\\">Audio fields</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>mute</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Set to true to mute the audio of the video currently playing in the Video node. Set to false to restore audio.</td>\\n</tr>\\n<tr>\\n<td>audioTrack</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_WRITE</td>\\n<td>The track identifier of the selected audio track. <br /><br />Reading this field will return the track identifier of the audio selected by the user.<br /><br />Writing this value will change the audio track. However,  channels should not do this unless they are implementing  their own track selection menu that users control. This is because the Roku OS selects the best track automatically based on preferred language setting on the device. See <a href=\\\"#automatic-audio-track-selection\\\">Automatic audio track selection</a> for more information.</td>\\n</tr>\\n<tr>\\n<td>currentAudioTrack</td>\\n<td>String</td>\\n<td></td>\\n<td>READ_ONLY</td>\\n<td>The track identifier of the audio being played. Reading this field will return the track that is being played, which may be different than the track being selected (for example, when the Roku media player cannot play a certain format). <br /><br />When the user has not selected an audio track, the platform will select a track based on the preferred audio language setting.</td>\\n</tr>\\n<tr>\\n<td>availableAudioTracks</td>\\n<td>array of associative arrays</td>\\n<td>[ ] empty array</td>\\n<td>READ_ONLY</td>\\n<td>Each associative array has the following entries:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Type</th>\\n<th>Value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Language</td>\\n<td>string</td>\\n<td>ISO 639-2 three-letter language code</td>\\n</tr>\\n<tr>\\n<td>Name</td>\\n<td>string</td>\\n<td>Descriptive name of the audio track</td>\\n</tr>\\n<tr>\\n<td>Track</td>\\n<td>string</td>\\n<td>The track identifier. The value of this field may be used to select the audio track.</td>\\n</tr>\\n</tbody>\\n</table><br /><br />The field also retrieves audio description tracks which are typically seen on broadcast TV. An audio description track is mixed with the main audio track.</td>\\n</tr>\\n<tr>\\n<td>audioFormat</td>\\n<td>string</td>\\n<td></td>\\n<td>READ_ONLY</td>\\n<td>In all other cases they shouldn't .Contains the format of the currently playing audio.<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>\\\"\\\"</td>\\n<td>No stream playing</td>\\n</tr>\\n<tr>\\n<td>none</td>\\n<td>Stream contains no playable audio</td>\\n</tr>\\n<tr>\\n<td>unknown</td>\\n<td>Stream contains unknown audio</td>\\n</tr>\\n<tr>\\n<td>aac</td>\\n<td>ISO/IEC 14496-3, Advanced Audio Coding</td>\\n</tr>\\n<tr>\\n<td>aac_adif</td>\\n<td>ISO/IEC 14496-3, Advanced Audio Coding, ADIF container</td>\\n</tr>\\n<tr>\\n<td>aac_adts</td>\\n<td>ISO/IEC 14496-3, Advanced Audio Coding, ADTS container</td>\\n</tr>\\n<tr>\\n<td>aac_latm</td>\\n<td>ISO/IEC 14496-3, Advanced Audio Coding, LATM container</td>\\n</tr>\\n<tr>\\n<td>ac3</td>\\n<td>Dolby Digital</td>\\n</tr>\\n<tr>\\n<td>ac4</td>\\n<td>Dolby Audio - AC-4</td>\\n</tr>\\n<tr>\\n<td>alac</td>\\n<td>Apple Lossless</td>\\n</tr>\\n<tr>\\n<td>dts</td>\\n<td>DTS Coherent Acoustics</td>\\n</tr>\\n<tr>\\n<td>eac3</td>\\n<td>Dolby Digital Plus</td>\\n</tr>\\n<tr>\\n<td>flac</td>\\n<td>Free Lossless Audio Codec</td>\\n</tr>\\n<tr>\\n<td>flac</td>\\n<td>Free Lossless Audio Codec</td>\\n</tr>\\n<tr>\\n<td>mat</td>\\n<td>Dolby Audio - TrueHD</td>\\n</tr>\\n<tr>\\n<td>mp3</td>\\n<td>ISO/IEC 11172-3, MPEG Audio Layer III</td>\\n</tr>\\n<tr>\\n<td>pcm</td>\\n<td>linear PCM</td>\\n</tr>\\n<tr>\\n<td>vorbis</td>\\n<td>Ogg Vorbis</td>\\n</tr>\\n<tr>\\n<td>wma</td>\\n<td>Microsoft Windows Media Audio</td>\\n</tr>\\n<tr>\\n<td>wmapro</td>\\n<td>Microsoft Windows Media Pro Audio</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>supplementaryAudioVolume</td>\\n<td>int</td>\\n<td>50</td>\\n<td>READ_WRITE</td>\\n<td><em>Available since Roku OS 8.</em><br /><br />Sets the volume of the description tracks separately from the main audio track. The field value can range from 0 to 100.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"automatic-audio-track-selection\\\">Automatic audio track selection</h4>\\n<p>If multiple audio tracks are available for video content, the Roku OS automatically selects the best track based on the preferred audio track settings on the device (language, country code, and descriptive setting) and the quality of the audio track (bitrate/format).</p>\\n<p>The user can manually set their preferred language in the <strong>Settings > Audio > Audio preferred language</strong> menu, and the country code and descriptive setting are automatically set when the user selects an audio track. The preferred language setting is also automatically updated when the user selects an audio track (the preferred language is set to the language of the selected track).</p>\\n<p>For example, if the user chooses Portuguese as their preferred language, the Roku OS will by default select the Portuguese audio track the next time they watch content (if available). If the selected audio track is in Portuguese (Brazil), the user's preferred country is set to Brazil, and the Portuguese (Brazil) audio track is selected by default the next time the user watches content.</p>\\n<blockquote>\\n<p>It is recommend that channels use the audio track selection logic provided by the Roku OS instead of implementing their own.</p>\\n</blockquote>\\n<p>Overall, the Roku OS uses the following criteria (listed in order of priority) to determine which audio track to play:</p>\\n<ol>\\n<li>\\n<p>Preferred audio track settings:</p>\\n<p>a. The track explicitly selected by the user.</p>\\n<p>b. The track with the user's preferred language, country code and descriptive setting.</p>\\n<p>c. The track with the preferred language and the country code.</p>\\n<p>d. The track with the preferred language that is marked as the default audio track.</p>\\n<p>e. The track with the preferred language.</p>\\n<p>f. The first track.</p>\\n</li>\\n<li>\\n<p>Highest quality audio track (based on bitrate/format)</p>\\n</li>\\n</ol>\\n<blockquote>\\n<p>Any language not included in the provided list of common languages is added to the list as the last entry. The common languages list may only have a single unlisted language. For example, if the user selects Korean as the audio track for a movie, the last entry in the common languages list is Korean, which is used as the preferred language from thereon. If the user then selects a Chinese audio track, Chinese overwrites Korean as the last entry in the common language list and is used as the preferred language.</p>\\n</blockquote>\\n<h3 id=\\\"cdn-fields\\\">CDN fields</h3>\\n<p><em>Available since Roku OS 10.5.</em></p>\\n<p>Developers can receive event-based notifications when the CDN is switched during content playback.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute</th>\\n<th>Type</th>\\n<th>Values</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>cdnSwitch<br /><br /><em>Available since Roku OS 10.5</em></td>\\n<td>roArray of roAssociativeArrays</td>\\n<td><table>\\n<thead>\\n<tr>\\n<th>Key</th>\\n<th>Required/ Optional</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>URLFilter</td>\\n<td>Required</td>\\n<td>String</td>\\n<td>A substring that identifies the (base)URL to which these CDN settings apply. <br /><br />The Roku media player matches this string against all (base)URLs listed in the manifest and applies the setting to all (base)URLs that contain this substring.</td>\\n</tr>\\n<tr>\\n<td>ContentFilter</td>\\n<td>Optional</td>\\n<td>String</td>\\n<td>For DASH streams, a substring that filters the period or asset ID to which these CDN settings apply.<br /><br /> The Roku player only applies these CDN setting to periods with a period ID or asset ID that contains this substring. <br /><br />This match is used in addition to the URL filter.</td>\\n</tr>\\n<tr>\\n<td>Priority</td>\\n<td>Required</td>\\n<td>Integer</td>\\n<td>For configuring failovers, sets the priority for this (base)URL from 1 to x (a priority of 0 or less is invalid). <br /><br />A lower value indicates a higher priority. For example, a (base)URL with a priority of 1 is higher than another with a priority of 10. <br /><br />If the highest priority server fails, traffic is routed to the server with the next highest priority. If all servers are configured with the same priority, and one fails, no failover will happen.</td>\\n</tr>\\n<tr>\\n<td>Weight</td>\\n<td>Required</td>\\n<td>Integer</td>\\n<td>For configuring load balancing, sets the relative weight for all (base)URLs with the same priority. This must be a value of 1 or greater (a weight of 0 disables a CDN). <br /><br />The weight of a given BaseURL is its weight value divided by the sum of all weight values. This means that to spread the load equally across multiple CDNs with the same priority, set the weight for each to the same value. To configure the weights for two servers to 80% and a third server to 20%, for example, set servers one and two to 8 and server three to 4.</td>\\n</tr>\\n<tr>\\n<td>ServiceLocation</td>\\n<td>Optional</td>\\n<td>String</td>\\n<td>A blacklist of failed BaseURL locations.</td>\\n</tr>\\n</tbody>\\n</table></td>\\n<td>Indicates that a CDN switching event has occurred.<br /><br />Channels can monitor this field in the background. When the Video player detects a CDN change, it automatically updates this field.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"miscellaneous-fields\\\">Miscellaneous fields</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>MaxVideoDecodeResolution</td>\\n<td>vector2d (width, height)</td>\\n<td>[0,0]</td>\\n<td>READ_WRITE</td>\\n<td>Sets the max resolution required by your video.<br /><br />Video decode memory is a shared resource with OpenGL texture memory. The Brightscript 2D APIs are implemented using OpenGL texture memory on Roku models that support the Open GL APIs (see <a href=\\\"/docs/specs/hardware.md\\\">Hardware specifications</a> for a list of these models).<br /><br />On models that do not support Open GL APIs, this field exists for API compatibility but has no effect on actual memory allocations.<br /><br />Video decode memory allocation is based on a resolution of 1920x1080 or 1280x720 as the maximum supported resolution for a particular Roku model (see <a href=\\\"/docs/specs/hardware.md\\\">Hardware specifications</a> for a list of these models).<br /><br />This field enables applications that want to use both the 2D APIs and video playback with a lower resolution than 1080p. Without this field, these applications are likely to not have enough memory for either video playback or UI rendering.<br /><br />If width is 0 (the default), it is unlimited. If height is 0 (the default), it is unlimited.</td>\\n</tr>\\n<tr>\\n<td>cgms</td>\\n<td>integer</td>\\n<td>0</td>\\n<td>READ_WRITE</td>\\n<td>Sets the CGMS (Copy Guard Management System) on analog outputs to the desired level. The valid values are:<br /><br /><table>\\n<thead>\\n<tr>\\n<th>Value</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>0</td>\\n<td>No copy restriction</td>\\n</tr>\\n<tr>\\n<td>1</td>\\n<td>Copy no more</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td>Copy once allowed</td>\\n</tr>\\n<tr>\\n<td>3</td>\\n<td>No copying permitted</td>\\n</tr>\\n</tbody>\\n</table></td>\\n</tr>\\n<tr>\\n<td>enableScreenSaverWhilePlaying</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Set this to true to allow the screensaver to activate even if video is playing, as long as that video does not cover 50% or more of the screen. Set to false to block the screensaver activating if any video is playing. Note that this field has no effect when the video node plays audio only streams. For screensaver control with audio only streams, use the disableScreenSaver field.</td>\\n</tr>\\n<tr>\\n<td>disableScreenSaver</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_WRITE</td>\\n<td>Set this to true to suppress the screensaver. This is typically used to suppress the screensaver when playing audio-only streams.</td>\\n</tr>\\n<tr>\\n<td>contentBlocked</td>\\n<td>Boolean</td>\\n<td>false</td>\\n<td>READ_ONLY</td>\\n<td><em>Available since Roku OS 8.</em><br /><br />Determines whether the current content is blocked.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"data-bindings\\\">Data bindings</h2>\\n<p>See <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\">Content Meta-Data</a> for the required and optional play parameters, and descriptive information for video playback. Set these parameters in a <a href=\\\"/docs/references/scenegraph/control-nodes/contentnode.md\\\">ContentNode</a> node, and assign the ContentNode to the content field of the Video node to apply the parameters to a particular video content item.</p>\\n<p>For HTTPS access, note the following Content Meta-Data attributes:</p>\\n<ul>\\n<li><code>HttpCertificatesFile</code></li>\\n<li><code>HttpCookies</code></li>\\n<li><code>HttpHeaders</code></li>\\n<li><code>HttpSendClientCertificates</code></li>\\n</ul>\\n<p>These attributes must be set to handle secure HTTP transfers of video files. Note that this is a different HTTPS mechanism than used for other SceneGraph nodes as described in <a href=\\\"/docs/references/brightscript/components/rohttpagent.md\\\">roHttpAgent</a>.</p>\\n<blockquote>\\n<p>Prior to Roku OS 7.2, each Audio and Video node created and configured an <code>HttpAgent</code> only when the first content was played in a given Audio or Video node instance. This sometimes meant that additional content would fail to play in the same node because headers, cookies, and certificates were not updated or correctly replaced from the new content record. Channels that are dependent upon this behavior will need to be updated to set the required data into the Content Meta-Data for each piece of content, or to programmatically set those values into the <code>HttpAgent</code> before playing each piece of content.</p>\\n</blockquote>\\n<h2 id=\\\"example\\\">Example</h2>\\n<p>To play video in an application, you first need to create a Video node, either in BrightScript using the roSGNode <a href=\\\"/docs/references/brightscript/interfaces/ifsgnodechildren.md\\\">ifSGNodeChildren</a> interface, or in XML markup. For example, in XML markup:</p>\\n<pre><code>&#x3C;Video\\n  id=\\\"musicvideos\\\"\\n  width=\\\"1280\\\"\\n  height=\\\"720\\\"\\n  translation=\\\"[0,0]\\\"\\n/>\\n</code></pre>\\n<p>The Video node is then scripted to specify the URL of the video stream, streaming format, video title, and any other <a href=\\\"/docs/developer-program/getting-started/architecture/content-metadata.md\\\">Content Meta-Data</a> attributes needed for the particular playback. Once the video properties are specified, the video can be played by setting the Video node <code>control</code> field value to <code>play</code>.</p>\\n<pre><code>&#x3C;script type=\\\"text/brightscript\\\" >\\n&#x3C;![CDATA[\\n\\nsub init()\\n  m.top.setFocus(true)\\n  setVideo()\\nend sub\\n\\nfunction setVideo() as void\\n  videoContent = createObject(\\\"RoSGNode\\\", \\\"ContentNode\\\")\\n  videoContent.url = \\\"https://roku.s.cpl.delvenetworks.com/media/59021fabe3b645968e382ac726cd6c7b/60b4a471ffb74809beb2f7d5a15b3193/roku_ep_111_segment_1_final-cc_mix_033015-a7ec8a288c4bcec001c118181c668de321108861.m3u8\\\"\\n  videoContent.title = \\\"Test Video\\\"\\n  videoContent.streamformat = \\\"hls\\\"\\n\\n  m.video = m.top.findNode(\\\"musicvideos\\\")\\n  m.video.content = videoContent\\n  m.video.control = \\\"play\\\"\\nend function\\n\\n]]>\\n&#x3C;/script>\\n</code></pre>\\n<p>#{source-enum-list}</p>\\n<ul>\\n<li>\\\"emsg\\\"</li>\\n<li>\\\"id3\\\"</li>\\n<li>\\\"hls\\\"</li>\\n<li>\\\"unk\\\"</li>\\n</ul>\\n<h2 id=\\\"sample-channel\\\">Sample channel</h2>\\n<p><a href=\\\"https://github.com/rokudev/samples/tree/master/media/VideoExample\\\">VideoExample</a> is a sample channel demonstrating Video in action.</p>\"\n}","https://developer.roku.com/api/v1/get-dev-cms-doc?locale=en-us&filePath=references/scenegraph/dynamic-voice-keyboard-nodes/rsg-palette.md":"{\n  \"content\": \"<h1 id=\\\"rsgpalette\\\">RSGPalette</h1>\\n<p><em>Available since Roku OS 9.4</em></p>\\n<p>Extends <a href=\\\"/docs/references/scenegraph/node.md\\\">Node</a></p>\\n<p>The <strong>RSGPalette</strong> node allows developers to specify a named set of color values that can be shared among nodes that support RSGPalette colors.</p>\\n<p>Nodes that support RSGPalette colors include a <strong>palette</strong> field, which can be set to an <strong>RSGPalette</strong> node to override the default colors used by the node. The specific palette values used by those nodes are defined in each node's documentation.</p>\\n<p>If a node that supports a palette does not set its <strong>palette</strong> filed, the RSGPalette is inherited from ancestor nodes in the scene graph. Specifically, the node looks up the scene graph until it finds a <strong>PaletteGroup</strong> node with its <strong>palette</strong> field set. This may be found in the <strong>Scene</strong> itself.</p>\\n<p>If no node in the scene graph has its <strong>palette</strong> field set, the keyboard uses the default palette (gray background/white text).</p>\\n<p>Currently, the <strong>RSGPalette</strong> node is typically used in channels that customize the colors of the dynamic keyboard nodes. In this case, the channel assigns the RSGPalette node to the <strong>palette</strong> field of the <a href=\\\"/docs/references/scenegraph/dynamic-voice-keyboard-nodes/dynamic-keyboard-base.md\\\" title=\\\"DynamicKeyboardBase\\\">DynamicKeyboardBase</a> node and lets the keyboard's <strong>DynamicKeyGrid</strong> and <strong>VoiceTextEditBox</strong> inherit that RSGPalette.</p>\\n<blockquote>\\n<p>The colors in the RSGPalette do not cascade. If a child node overrides its parent's RSGPalette node, that RSGPalette should specify values for all the colors used by the node. Unspecified values will use the system default colors.</p>\\n</blockquote>\\n<h2 id=\\\"rsgpalette-fields\\\">RSGPalette Fields</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Access Permission</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>colors</td>\\n<td>associative array</td>\\n<td>not specified</td>\\n<td>READ_WRITE</td>\\n<td>Specifies an associative array of color name/color key-value pairs. For example: <pre><code>{\\n    PrimaryTextColor: 0x111111FF,\\n    FocusColor: 0x0000FFFF\\n}\\n</code></pre>.</td>\\n</tr>\\n</tbody>\\n</table>\"\n}"}
