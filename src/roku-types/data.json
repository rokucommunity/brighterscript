{
    "generatedDate": "2021-07-15T10:54:53.247Z",
    "nodes": {},
    "components": {
        "roAppInfo": {
            "name": "roAppInfo",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roappinfo.md",
            "interfaces": [
                {
                    "name": "ifAppInfo",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifappinfo.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roAppInfo"
                }
            ]
        },
        "roAppManager": {
            "name": "roAppManager",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roappmanager.md",
            "interfaces": [
                {
                    "name": "ifAppManager",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifappmanager.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roAppManager"
                }
            ]
        },
        "roArray": {
            "name": "roArray",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roarray.md",
            "interfaces": [
                {
                    "name": "ifArray",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarray.md"
                },
                {
                    "name": "ifArrayGet",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarrayget.md"
                },
                {
                    "name": "ifArraySet",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarrayset.md"
                },
                {
                    "name": "ifEnum",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifenum.md"
                },
                {
                    "name": "ifArrayJoin",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarrayjoin.md"
                },
                {
                    "name": "ifArraySort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarraysort.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roAssociativeArray": {
            "name": "roAssociativeArray",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roassociativearray.md",
            "interfaces": [
                {
                    "name": "ifAssociativeArray",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifassociativearray.md"
                },
                {
                    "name": "ifEnum",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifenum.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roAssociativeArray"
                }
            ]
        },
        "roAudioGuide": {
            "name": "roAudioGuide",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roaudioguide.md",
            "interfaces": [
                {
                    "name": "ifAudioGuide",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifaudioguide.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roAudioMetadata": {
            "name": "roAudioMetadata",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roaudiometadata.md",
            "interfaces": [
                {
                    "name": "ifAudioMetadata",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifaudiometadata.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roAudioMetadata"
                }
            ]
        },
        "roAudioPlayer": {
            "name": "roAudioPlayer",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roaudioplayer.md",
            "interfaces": [
                {
                    "name": "ifAudioPlayer",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifaudioplayer.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhttpagent.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roAudioPlayerEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/roaudioplayerevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roAudioPlayer"
                }
            ]
        },
        "roAudioResource": {
            "name": "roAudioResource",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roaudioresource.md",
            "interfaces": [
                {
                    "name": "ifAudioResource",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifaudioresource.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "dynamic"
                        }
                    ],
                    "returnType": "roAudioResource"
                },
                {
                    "params": [
                        {
                            "name": "param1",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "string"
                        }
                    ],
                    "returnType": "roAudioResource"
                }
            ]
        },
        "roBitmap": {
            "name": "roBitmap",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/robitmap.md",
            "interfaces": [
                {
                    "name": "ifDraw2D",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifdraw2d.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "string"
                        }
                    ],
                    "returnType": "roBitmap"
                },
                {
                    "params": [
                        {
                            "name": "param1",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "dynamic"
                        }
                    ],
                    "returnType": "roBitmap"
                }
            ]
        },
        "roBoolean": {
            "name": "roBoolean",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roboolean.md",
            "interfaces": [
                {
                    "name": "ifBoolean",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifboolean.md"
                },
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roByteArray": {
            "name": "roByteArray",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/robytearray.md",
            "interfaces": [
                {
                    "name": "ifByteArray",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifbytearray.md"
                },
                {
                    "name": "ifArray",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarray.md"
                },
                {
                    "name": "ifArrayGet",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarrayget.md"
                },
                {
                    "name": "ifArraySet",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarrayset.md"
                },
                {
                    "name": "ifEnum",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifenum.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roByteArray"
                }
            ]
        },
        "roCaptionRenderer": {
            "name": "roCaptionRenderer",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rocaptionrenderer.md",
            "interfaces": [
                {
                    "name": "ifCaptionRenderer",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifcaptionrenderer.md"
                }
            ],
            "events": [
                {
                    "name": "roCaptionRendererEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/event/rocaptionrendererevent.md"
                }
            ],
            "constructors": []
        },
        "roChannelStore": {
            "name": "roChannelStore",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rochannelstore.md",
            "interfaces": [
                {
                    "name": "ifChannelStore",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifchannelstore.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort ",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roChannelStoreEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rochannelstoreevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roChannelStore"
                }
            ]
        },
        "roCodeRegistrationScreen": {
            "name": "roCodeRegistrationScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rocoderegistrationscreen.md",
            "interfaces": [
                {
                    "name": "ifCodeRegistrationScreen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iifCodeRegistrationScreen.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roCodeRegistrationScreenEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rocoderegistrationscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roCodeRegistrationScreen"
                }
            ]
        },
        "roCompositor": {
            "name": "roCompositor",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rocompositor.md",
            "interfaces": [
                {
                    "name": "ifCompositor",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifcompositor.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roCompositor"
                }
            ]
        },
        "roDataGramSocket": {
            "name": "roDataGramSocket",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodatagramsocket.md",
            "interfaces": [
                {
                    "name": "ifSocket",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocket.md"
                },
                {
                    "name": "ifSocketAsync",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketasync.md"
                },
                {
                    "name": "ifSocketStatus",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketstatus.md"
                },
                {
                    "name": "ifSocketOption",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketoption.md"
                },
                {
                    "name": "ifSocketCastOption ",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketcastoption.md"
                }
            ],
            "events": [
                {
                    "name": "roSocketEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifappinfo.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roDataGramSocket"
                }
            ]
        },
        "roDateTime": {
            "name": "roDateTime",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodatetime.md",
            "interfaces": [
                {
                    "name": "ifDateTime",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifdatetime.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roDateTime"
                }
            ]
        },
        "roDeviceInfo": {
            "name": "roDeviceInfo",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodeviceinfo.md",
            "interfaces": [
                {
                    "name": "ifDeviceInfo",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifdeviceinfo.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roDeviceInfoEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rodeviceinfoevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roDeviceInfo"
                }
            ]
        },
        "roDouble": {
            "name": "roDouble",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodouble.md",
            "interfaces": [
                {
                    "name": "ifDouble",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifdouble.md"
                },
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roDeviceCrypto": {
            "name": "roDeviceCrypto",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodevicecrypto.md",
            "interfaces": [
                {
                    "name": "ifDeviceCrypto",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifdevicecrypto.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roDeviceCrypto"
                }
            ]
        },
        "roEVPCipher": {
            "name": "roEVPCipher",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roevpcipher.md",
            "interfaces": [
                {
                    "name": "ifEVPCipher",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifevpcipher.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roEVPDigest": {
            "name": "roEVPDigest",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roevpdigest.md",
            "interfaces": [
                {
                    "name": "ifEVPDigest",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifevpdigest.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roEVPDigest"
                }
            ]
        },
        "roFileSystem": {
            "name": "roFileSystem",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rofilesystem.md",
            "interfaces": [
                {
                    "name": "ifFileSystem",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iffilesystem.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roFileSystemEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rofilesystemevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roFileSystem"
                }
            ]
        },
        "roFloat": {
            "name": "roFloat",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rofloat.md",
            "interfaces": [
                {
                    "name": "ifFloat",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iffloat.md"
                },
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roFont": {
            "name": "roFont",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rofont.md",
            "interfaces": [
                {
                    "name": "ifFont",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iffont.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roFontMetrics": {
            "name": "roFontMetrics",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rofontmetrics.md",
            "interfaces": [
                {
                    "name": "ifFontMetrics",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iffontmetrics.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "dynamic"
                        }
                    ],
                    "returnType": "roFontMetrics"
                }
            ]
        },
        "roFontRegistry": {
            "name": "roFontRegistry",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rofontregistry.md",
            "interfaces": [
                {
                    "name": "ifFontRegistry",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iffontregistry.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roFontRegistry"
                }
            ]
        },
        "roFunction": {
            "name": "roFunction",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rofunction.md",
            "interfaces": [
                {
                    "name": "ifFunction",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iffunction.md"
                },
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roGridScreen": {
            "name": "roGridScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rogridscreen.md",
            "interfaces": [
                {
                    "name": "ifGridScreen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgridscreen.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhttpagent.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roGridScreenEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rogridscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roGridScreen"
                }
            ]
        },
        "roHdmiStatus": {
            "name": "roHdmiStatus",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rohdmistatus.md",
            "interfaces": [
                {
                    "name": "ifHdmiStatus",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhdmistatus.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roHMAC": {
            "name": "roHMAC",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rohmac.md",
            "interfaces": [
                {
                    "name": "ifHMAC",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhmac.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roHMAC"
                }
            ]
        },
        "roHttpAgent": {
            "name": "roHttpAgent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rohttpagent.md",
            "interfaces": [
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhttpagent.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roHttpAgent"
                }
            ]
        },
        "roImageCanvas": {
            "name": "roImageCanvas",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roimagecanvas.md",
            "interfaces": [
                {
                    "name": "ifImageCanvas",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifimagecanvas.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhttpagent.md"
                }
            ],
            "events": [
                {
                    "name": "roImageCanvasEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/roimagecanvasevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roImageCanvas"
                }
            ]
        },
        "roImageMetaData": {
            "name": "roImageMetaData",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roimagemetadata.md",
            "interfaces": [
                {
                    "name": "ifImageMetadata",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifimagemetadata.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roInput": {
            "name": "roInput",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roinput.md",
            "interfaces": [
                {
                    "name": "ifInput",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifinput.md"
                }
            ],
            "events": [
                {
                    "name": "roInputEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/roinputevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roInput"
                }
            ]
        },
        "roInt": {
            "name": "roInt",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roint.md",
            "interfaces": [
                {
                    "name": "ifInt",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifint.md"
                },
                {
                    "name": "ifIntOps",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifintops.md"
                },
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roInt"
                }
            ]
        },
        "roInvalid": {
            "name": "roInvalid",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roinvalid.md",
            "interfaces": [
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roKeyboardScreen": {
            "name": "roKeyboardScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rokeyboardscreen.md",
            "interfaces": [
                {
                    "name": "ifKeyboardScreen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifkeyboardscreen.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roKeyboardScreenEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rokeyboardscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roKeyboardScreen"
                }
            ]
        },
        "roList": {
            "name": "roList",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolist.md",
            "interfaces": [
                {
                    "name": "ifList",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iflist.md"
                },
                {
                    "name": "ifArray",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarray.md"
                },
                {
                    "name": "ifArrayGet",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarrayget.md"
                },
                {
                    "name": "ifArraySet",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarrayset.md"
                },
                {
                    "name": "ifEnum",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifenum.md"
                },
                {
                    "name": "ifListToArray",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iflisttoarray.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roList"
                }
            ]
        },
        "roListScreen": {
            "name": "roListScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolistscreen.md",
            "interfaces": [
                {
                    "name": "ifListScreen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iflistscreen.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhttpagent.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roListScreenEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rolistscreenevent.md"
                }
            ],
            "constructors": []
        },
        "roLocalization": {
            "name": "roLocalization",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolocalization.md",
            "interfaces": [
                {
                    "name": "ifLocalization",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iflocalization.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roLocalization"
                }
            ]
        },
        "roLongInteger": {
            "name": "roLongInteger",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolonginteger.md",
            "interfaces": [
                {
                    "name": "ifLongInt",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iflongint.md"
                },
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roMessageDialog": {
            "name": "roMessageDialog",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/romessagedialog.md",
            "interfaces": [
                {
                    "name": "ifMessageDialog",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifmessagedialog.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort ",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roMessageDialogEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/romessagedialogevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roMessageDialog"
                }
            ]
        },
        "roMessagePort": {
            "name": "roMessagePort",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/romessageport.md",
            "interfaces": [
                {
                    "name": "ifMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifmessageport.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roMessagePort"
                }
            ]
        },
        "roMicrophone": {
            "name": "roMicrophone",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/romicrophone.md",
            "interfaces": [
                {
                    "name": "ifMicrophone",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifmicrophone.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roMicrophoneEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/romicrophoneevent.md"
                }
            ],
            "constructors": []
        },
        "roOneLineDialog": {
            "name": "roOneLineDialog",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roonelinedialog.md",
            "interfaces": [
                {
                    "name": "ifOneLineDialog",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifonelinedialog.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifGetMessagePort.md"
                }
            ],
            "events": [
                {
                    "name": "roOneLineDialogEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/roonelinedialogevent.md"
                }
            ],
            "constructors": []
        },
        "roParagraphScreen": {
            "name": "roParagraphScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roparagraphscreen.md",
            "interfaces": [
                {
                    "name": "ifParagraphScreen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifparagraphscreen.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roParagraphScreenEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/roparagraphscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roParagraphScreen"
                }
            ]
        },
        "roPath": {
            "name": "roPath",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/ropath.md",
            "interfaces": [
                {
                    "name": "ifPath",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifpath.md"
                },
                {
                    "name": "ifString",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifstring.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "string"
                        }
                    ],
                    "returnType": "roPath"
                },
                {
                    "params": [
                        {
                            "name": "param1",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "dynamic"
                        }
                    ],
                    "returnType": "roPath"
                }
            ]
        },
        "roPinEntryDialog": {
            "name": "roPinEntryDialog",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/ropinentrydialog.md",
            "interfaces": [
                {
                    "name": "ifPinEntryDialog",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifpinentrydialog.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roPinEntryDialogEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/ropinentrydialogevent.md"
                }
            ],
            "constructors": []
        },
        "roPosterScreen": {
            "name": "roPosterScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roposterscreen.md",
            "interfaces": [
                {
                    "name": "ifPosterScreen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifposterscreen.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhttpagent.md"
                }
            ],
            "events": [
                {
                    "name": "roPosterScreenEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/roposterscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roPosterScreen"
                }
            ]
        },
        "roProgramGuide": {
            "name": "roProgramGuide",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roprogramguide.md",
            "interfaces": [
                {
                    "name": "ifProgramGuide",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifprogramguide.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roRegex": {
            "name": "roRegex",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roregex.md",
            "interfaces": [
                {
                    "name": "ifRegex",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifregex.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "string"
                        },
                        {
                            "name": "param2",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "string"
                        }
                    ],
                    "returnType": "roRegex"
                }
            ]
        },
        "roRegion": {
            "name": "roRegion",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roregion.md",
            "interfaces": [
                {
                    "name": "ifRegion",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifregion.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roRegistry": {
            "name": "roRegistry",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roregistry.md",
            "interfaces": [
                {
                    "name": "ifRegistry",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifregistry.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roRegistry"
                }
            ]
        },
        "roRegistrySection": {
            "name": "roRegistrySection",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roregistrysection.md",
            "interfaces": [
                {
                    "name": "ifRegistrySection",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifregistrysection.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "string"
                        }
                    ],
                    "returnType": "roRegistrySection"
                }
            ]
        },
        "roRSA": {
            "name": "roRSA",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rorsa.md",
            "interfaces": [
                {
                    "name": "ifRSA",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifrsa.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roRSA"
                }
            ]
        },
        "roScreen": {
            "name": "roScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roscreen.md",
            "interfaces": [
                {
                    "name": "ifScreen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifscreen.md"
                },
                {
                    "name": "ifDraw2D",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifdraw2d.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roUniversalControlEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rouniversalcontrolevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "boolean"
                        }
                    ],
                    "returnType": "roScreen"
                },
                {
                    "params": [
                        {
                            "name": "param1",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "boolean"
                        },
                        {
                            "name": "param2",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "integer"
                        },
                        {
                            "name": "param3",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "integer"
                        }
                    ],
                    "returnType": "roScreen"
                },
                {
                    "params": [],
                    "returnType": "roScreen"
                }
            ]
        },
        "roSearchHistory": {
            "name": "roSearchHistory",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosearchhistory.md",
            "interfaces": [
                {
                    "name": "ifSearchHistory",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsearchhistory.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roSearchHistory"
                }
            ]
        },
        "roSearchScreen": {
            "name": "roSearchScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosearchscreen.md",
            "interfaces": [
                {
                    "name": "ifSearchScreen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsearchscreen.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roSearchScreenEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rosearchscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roSearchScreen"
                }
            ]
        },
        "roSGNode": {
            "name": "roSGNode",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosgnode.md",
            "interfaces": [
                {
                    "name": "ifAssociativeArray",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifassociativearray.md"
                },
                {
                    "name": "ifSGNodeChildren",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsgnodechildren.md"
                },
                {
                    "name": "ifSGNodeField",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsgnodefield.md"
                },
                {
                    "name": "ifSGNodeDict",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsgnodedict.md"
                },
                {
                    "name": "ifSGNodeFocus",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsgnodefocus.md"
                },
                {
                    "name": "ifSGNodeBoundingRect",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsgnodeboundingrect.md"
                },
                {
                    "name": "ifSGNodeHttpAgentAccess",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsgnodehttpagentaccess.md"
                }
            ],
            "events": [
                {
                    "name": "roSGNodeEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rosgnodeevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "string"
                        }
                    ],
                    "returnType": "roSGNode"
                }
            ]
        },
        "roSGScreen": {
            "name": "roSGScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosgscreen.md",
            "interfaces": [
                {
                    "name": "ifSgScreen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsgscreen.md"
                }
            ],
            "events": [
                {
                    "name": "roSGScreenEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rosgscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roSGScreen"
                }
            ]
        },
        "roSlideShow": {
            "name": "roSlideShow",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roslideshow.md",
            "interfaces": [
                {
                    "name": "ifSlideShow",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifslideshow.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhttpagent.md"
                }
            ],
            "events": [
                {
                    "name": "roSlideShowEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/roslideshowevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roSlideShow"
                }
            ]
        },
        "roSocketAddress": {
            "name": "roSocketAddress",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosocketaddress.md",
            "interfaces": [
                {
                    "name": "ifSocketAddress",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketaddress.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roSocketAddress"
                }
            ]
        },
        "roSpringboardScreen": {
            "name": "roSpringboardScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rospringboardscreen.md",
            "interfaces": [
                {
                    "name": "ifSpringboardScreen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifspringboardscreen.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhttpagent.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roSpringboardScreenEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rospringboardscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roSpringboardScreen"
                }
            ]
        },
        "roSprite": {
            "name": "roSprite",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosprite.md",
            "interfaces": [
                {
                    "name": "ifSprite",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsprite.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roStreamSocket": {
            "name": "roStreamSocket",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rostreamsocket.md",
            "interfaces": [
                {
                    "name": "ifSocketConnection",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketconnection.md"
                },
                {
                    "name": "ifSocket",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocket.md"
                },
                {
                    "name": "ifSocketAsync",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketasync.md"
                },
                {
                    "name": "ifSocketStatus",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketstatus.md"
                },
                {
                    "name": "ifSocketConnectionStatus",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketconnectionstatus.md"
                },
                {
                    "name": "ifSocketConnectionOption",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketconnectionoption.md"
                }
            ],
            "events": [
                {
                    "name": "roSocketEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rosocketevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roStreamSocket"
                }
            ]
        },
        "roString": {
            "name": "roString",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rostring.md",
            "interfaces": [
                {
                    "name": "ifString",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifstring.md"
                },
                {
                    "name": "ifStringOps",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifstringops.md"
                },
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roSystemlog": {
            "name": "roSystemlog",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosystemlog.md",
            "interfaces": [
                {
                    "name": "ifSystemLog",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsystemlog.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roTextScreen": {
            "name": "roTextScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotextscreen.md",
            "interfaces": [
                {
                    "name": "ifTextScreen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftextscreen.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roTextScreenEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rotextscreenevent.md"
                }
            ],
            "constructors": []
        },
        "roTextToSpeech": {
            "name": "roTextToSpeech",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotexttospeech.md",
            "interfaces": [
                {
                    "name": "ifTextToSpeech",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftexttospeech.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roTextToSpeechEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rotexttospeechevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roTextToSpeech"
                }
            ]
        },
        "roTextureManager": {
            "name": "roTextureManager",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotexturemanager.md",
            "interfaces": [
                {
                    "name": "ifTextureManager",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftexturemanager.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhttpagent.md"
                }
            ],
            "events": [
                {
                    "name": "roTextureRequestEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rotexturerequestevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roTextureManager"
                }
            ]
        },
        "roTextureRequest": {
            "name": "roTextureRequest",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotexturerequest.md",
            "interfaces": [
                {
                    "name": "ifTextureRequest",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftexturerequest.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhttpagent.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "default": "invalid",
                            "isRequired": true,
                            "type": "string"
                        }
                    ],
                    "returnType": "roTextureRequest"
                }
            ]
        },
        "roTimespan": {
            "name": "roTimespan",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotimespan.md",
            "interfaces": [
                {
                    "name": "ifTimespan",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftimespan.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roTimespan"
                }
            ]
        },
        "roUrlTransfer": {
            "name": "roUrlTransfer",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rourltransfer.md",
            "interfaces": [
                {
                    "name": "ifUrlTransfer",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifurltransfer.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhttpagent.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roUrlEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rourlevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roUrlTransfer"
                }
            ]
        },
        "roVideoPlayer": {
            "name": "roVideoPlayer",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rovideoplayer.md",
            "interfaces": [
                {
                    "name": "ifVideoPlayer",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifvideoplayer.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhttpagent.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roVideoPlayerEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rovideoplayerevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roVideoPlayer"
                }
            ]
        },
        "roVideoScreen": {
            "name": "roVideoScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rovideoscreen.md",
            "interfaces": [
                {
                    "name": "ifVideoScreen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifvideoscreen.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhttpagent.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roVideoScreenEvent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rovideoscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roVideoScreen"
                }
            ]
        },
        "roXMLElement": {
            "name": "roXMLElement",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roxmlelement.md",
            "interfaces": [
                {
                    "name": "ifXMLElement",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifxmlelement.md"
                }
            ],
            "events": [],
            "constructors": []
        },
        "roXMLList": {
            "name": "roXMLList",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roxmllist.md",
            "interfaces": [
                {
                    "name": "ifList",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iflist.md"
                },
                {
                    "name": "ifXMLList",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifxmllist.md"
                },
                {
                    "name": "ifListToArray",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iflisttoarray.md"
                }
            ],
            "events": [],
            "constructors": []
        }
    },
    "interfaces": {
        "AppManagerTheme": {
            "name": "AppManagerTheme",
            "properties": [
                {
                    "name": "BackgroundColor",
                    "description": "HTML HEX Color Value. Screen types: Gr Li Pa Po Se Sp Te. Example: #E0DFDF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "BreadcrumbDelimiter",
                    "description": "HTML HEX Color Value. Screen types: Gr Li Pa Po Se Sp Te. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "BreadcrumbTextLeft",
                    "description": "HTML HEX Color Value. Screen types: Gr Li Pa Po Se Sp Te. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "BreadcrumbTextRight",
                    "description": "HTML HEX Color Value. Screen types: Gr Li Pa Po Se Sp Te. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ButtonHighlightColor",
                    "description": "HTML HEX Color Value. Screen types: Di Se Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ButtonMenuHighlightText",
                    "description": "HTML HEX Color Value. Screen types: Di Se Sp. Example: #0033FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ButtonMenuNormalOverlayText",
                    "description": "HTML HEX Color Value. Screen types: Di Se Sp. Example: #B0B0B0",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ButtonMenuNormalText",
                    "description": "HTML HEX Color Value. Screen types: Di Se Sp. Example: #686868",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ButtonNormalColor",
                    "description": "HTML HEX Color Value. Screen types: Di Se Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "CounterSeparator",
                    "description": "HTML HEX Color Value. Screen types: Gr Po. Example: #00FF00",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "CounterTextLeft",
                    "description": "HTML HEX Color Value. Screen types: Gr Po. Example: #FF0000",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "CounterTextRight",
                    "description": "HTML HEX Color Value. Screen types: Gr Po. Example: #0000FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "DialogBodyText",
                    "description": "HTML HEX Color Value. Must be a grayscale value. Screen types: Di. Example: #808080",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "DialogTitleText",
                    "description": "HTML HEX Color Value. Must be a grayscale value. Screen types: Di. Example: #363636",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "EpisodeSynopsisText",
                    "description": "HTML HEX Color Value. Screen types: Po. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerActiveColor",
                    "description": "HTML HEX Color Value. Screen types: Po. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerActiveHD",
                    "description": "URL to set HD Filter Banner Active/Focus Highlighter. Screen types: Po. Example: pkg:/images/Filter_ActiveHint_HD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerActiveSD",
                    "description": "URL to set SD Filter Banner Active/Focus Highlighter. Screen types: Po. Example: pkg:/images/Filter_ActiveHint_SD43.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerInactiveColor",
                    "description": "HTML HEX Color Value. Screen types: Po. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerInactiveHD",
                    "description": "URL to set HD Filter Banner Inactive Highlighter. Screen types: Po. Example: pkg:/images/Filter_InactiveHint_HD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerInactiveSD",
                    "description": "URL to set SD Filter Banner Inactive Highlighter. Screen types: Po. Example: pkg:/images/Filter_ActiveHint_SD43.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerSideColor",
                    "description": "HTML HEX Color Value. Screen types: Po. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerSliceHD",
                    "description": "URL to set HD Filter Banner Background Image. Screen types: Po. Example: pkg:/images/Filter_ActiveHint_HD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerSliceSD",
                    "description": "URL to set SD Filter Banner Background Image. Screen types: Po. Example: pkg:/images/Filter_ActiveHint_SD43.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenBackgroundColor",
                    "description": "HTML HEX Color Value Must be a grayscale value. Screen types: Gr. Example: #363636",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenBorderOffsetHD",
                    "description": "String representing point \"(x, y)\" that is the offset from the upper left corner of the focused HD image. Set to the negative width &amp; height of border. Screen types: Gr. Example: (-25,-25)",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenBorderOffsetSD",
                    "description": "String representing point \"(x, y)\" that is the offset from the upper left corner of the focused SD image. Set to the negative width &amp; height of border. Screen types: Gr. Example: (-20,-20)",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionDateColor",
                    "description": "HTML HEX Color Value. Screen types: Gr. Example: #FF005B",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionImageHD",
                    "description": "URL to set HD Description callout background image on Grid. Screen types: Gr. Example: pkg:/images/Description_Background_HD.ng",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionImageSD",
                    "description": "URL to set SD Description callout background image on Grid. Screen types: Gr. Example: pkg:/images/Description_Background_SD43.ng",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionOffsetHD",
                    "description": "String representing point \"(x, y)\" that is the offset from the upper left corner of the focused HD image. Negative values have the description above and to the left of the focused image. Screen types: Gr. Example: (190,255)",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionOffsetSD",
                    "description": "String representing point \"(x, y)\" that is the offset from the upper left corner of the focused SD image. Negative values have the description above and to the left of the focused image. Screen types: Gr. Example: (125,170)",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionRuntimeColor",
                    "description": "HTML HEX Color Value. Screen types: Gr. Example: #5B005B",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionSynopsisColor",
                    "description": "HTML HEX Color Value. Screen types: Gr. Example: #606000",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionTitleColor",
                    "description": "HTML HEX Color Value. Screen types: Gr. Example: #00FFFF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenFocusBorderHD",
                    "description": "URL to set HD Focus image on Active Grid Poster. Screen types: Gr. Example: pkg:/images/Border_16x9_HD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenFocusBorderSD",
                    "description": "URL to set SD Focus image on Active Grid Poster. Screen types: Gr. Example: pkg:/images/Border_16x9_SD43.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenListNameColor",
                    "description": "HTML HEX Color Value. Must be a grayscale value. Screen types: Gr. Example: #FFFFFF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenLogoHD",
                    "description": "Logo formatted for display in the overhang. Screen types: Gr. Example: pkg:/images/gridlogoHD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenLogoOffsetHD_X",
                    "description": "Offset in pixels from the top-left origin of the display. Range 0 to 1280. Screen types: Gr. Example: 592",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenLogoOffsetHD_Y",
                    "description": "Offset in pixels from the top-left origin of the display. Range 0 to 720. Screen types: Gr. Example: 31",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenLogoOffsetSD_X",
                    "description": "Offset in pixels from the top-left origin of the display. Range 0 to 720. Screen types: Gr. Example: 324",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenLogoOffsetSD_Y",
                    "description": "Offset in pixels from the top-left origin of the display. Range 0 to 480. Screen types: Gr. Example: 21",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenLogoSD",
                    "description": "Logo formatted for display in the overhang. Screen types: Gr. Example: pkg:/images/gridlogoSD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenMessageColor",
                    "description": "HTML HEX Color Value. Must be a grayscale value. Screen types: Gr. Example: #808080",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenOverhangHeightHD",
                    "description": "The HD overhang height. Default: \"69\". Screen types: Gr. Example: 75",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenOverhangHeightSD",
                    "description": "The SD overhang height. Default: \"49\". Screen types: Gr. Example: 55",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenOverhangSliceHD",
                    "description": "URI for the overhang slice (thin piece of top of screen border). Screen types: Gr. Example: pkg:/images/gridoverhangHD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenOverhangSliceSD",
                    "description": "URI for the overhang slice (thin piece of top of screen border). Screen types: Gr. Example: pkg:/images/gridoverhangSD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenRetrievingColor",
                    "description": "HTML HEX Color Value. Must be a grayscale value. Screen types: Gr. Example: #CCCCCC",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ListItemHighlightHD",
                    "description": "URL to set HD highlight image. Screen types: Gr Li Po. Example: pkg:/images/listitem_highlight_hd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ListItemHighlightSD",
                    "description": "URL to set SD highlight image. Screen types: Gr Li Po. Example: pkg:/images/listitem_highlight_sd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ListItemHighlightText",
                    "description": "HTML HEX Color Value. Screen types: Gr Li Po. Example: #CCCC00",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ListItemText",
                    "description": "HTML HEX Color Value. Screen types: Gr Li Po. Example: #CCCC00",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ListScreenDescriptionText",
                    "description": "HTML HEX Color Value. Screen types: Li. Example: #CCCC00",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ListScreenTitleColor",
                    "description": "HTML HEX Color Value. Screen types: Li. Example: #CC0000",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangPrimaryLogoHD",
                    "description": "Small application logo formatted for display in overhang top left. Screen types: Co Ke Li Pa Po Se Sp Te. Example: pkg:/images/co_logo_sd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangPrimaryLogoOffsetHD_X",
                    "description": "Offset in pixels from the top-left origin of the display films.Range 0 to 1280. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 25",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangPrimaryLogoOffsetHD_Y",
                    "description": "Offset in pixels from the top-left origin of the display films.Range 0 to 720. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 50",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangPrimaryLogoOffsetSD_X",
                    "description": "Offset in pixels from the top-left origin of the display films.Range 0 to 720. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 25",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangPrimaryLogoOffsetSD_Y",
                    "description": "Offset in pixels from the top-left origin of the display films.Range 0 to 480. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 50",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangPrimaryLogoSD",
                    "description": "Small application logo formatted for display in overhang top left. Screen types: Co Ke Li Pa Po Se Sp Te. Example: pkg:/images/co_logo_sd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSecondaryLogoHD",
                    "description": "Small application logo formatted for display in overhang top left. Screen types: Co Ke Li Pa Po Se Sp Te. Example: pkg:/images/co_logo_hd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSecondaryLogoOffsetHD_X",
                    "description": "Offset in pixels from the top-left origin of the display films. Range 0 to 1280. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 25",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSecondaryLogoOffsetHD_Y",
                    "description": "Offset in pixels from the top-left origin of the display films. Range 0 to 720. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 50",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSecondaryLogoOffsetSD_X",
                    "description": "Offset in pixels from the top-left origin of the display films. Range 0 to 720. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 25",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSecondaryLogoOffsetSD_Y",
                    "description": "Offset in pixels from the top-left origin of the display films. Range 0 to 480. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 50",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSecondaryLogoSD",
                    "description": "Small application logo formatted for display in overhang top left. Screen types: Co Ke Li Pa Po Se Sp Te. Example: pkg:/images/co_logo_sd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSliceHD",
                    "description": "URI for the overhang slice (thin piece of border at the top of the screen in HD size). Screen types: Co Ke Li Pa Po Se Sp Te. Example: pkg:/images/overhang_hd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSliceSD",
                    "description": "URI for the overhang slice (thin piece of top of screen border). Screen types: Co Ke Li Pa Po Se Sp Te. Example: pkg:/images/overhang_sd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ParagraphBodyText",
                    "description": "HTML HEX Color Value. Screen types: Co Pa Te. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ParagraphHeaderText",
                    "description": "HTML HEX Color Value. Screen types: Co Pa Te. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "PosterScreenLine1Text",
                    "description": "HTML HEX Color Value. Screen types: Po. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "PosterScreenLine2Text",
                    "description": "HTML HEX Color Value. Screen types: Po. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "RegistrationCodeColor",
                    "description": "HTML HEX Color Value. Screen types: Co. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "RegistrationFocalColor",
                    "description": "HTML HEX Color Value. Screen types: Co. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "RegistrationFocalRectColor",
                    "description": "HTML HEX Color Value. Screen types: Co. Example: #10FF80",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "RegistrationFocalRectHD",
                    "description": "Position and size of the HD focal rectangle. Four integer: (x,y,width,height). Screen types: Co. Example: (228,360,120,82)",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "RegistrationFocalRectSD",
                    "description": "Position and size of the SD focal rectangle. Four integer: (x,y,width,height). Screen types: Co. Example: (172,220,90,76)",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardActorColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardAlbumColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardAlbumLabel",
                    "description": "Album Label. Screen types: Sp. Example: on",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardAlbumLabelColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardAllow6Buttons",
                    "description": "boolean string. Screen types: Sp. Example: true",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardArtistColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardArtistLabel",
                    "description": "Artist Label. Screen types: Sp. Example: by",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardArtistLabelColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardDirectorColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardDirectorText",
                    "description": "Director Label. Screen types: Sp. Example: Written by",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardDirectorLabelColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardDirectorPrefixText",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardGenreColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardRuntimeColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardSynopsisColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardTitleText",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "TextScreenBodyBackgroundColor",
                    "description": "HTML HEX Color Value. Must be a grayscale value. Screen types: Te. Example: #808080",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "TextScreenBodyText",
                    "description": "HTML HEX Color Value. Screen types: Te. Example: #363636",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "TextScreenScrollBarColor",
                    "description": "HTML HEX Color Value. Screen types: Te. Example: #CC0000",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "TextScreenScrollThumbColor",
                    "description": "HTML HEX Color Value. Screen types: Te. Example: #00CC00",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ThemeType",
                    "description": "Theme type. Generic-dark is the only valid value. Otherwise the default theme applies. Screen types: . Example: generic-dark",
                    "default": "invalid",
                    "type": "string"
                }
            ],
            "implementors": [],
            "methods": []
        },
        "ifAppInfo": {
            "name": "ifAppInfo",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifappinfo.md",
            "methods": [
                {
                    "name": "GetID",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "Channel ID; e.g., \"12345\" or \"dev\""
                        }
                    ],
                    "description": "Returns the app's channel ID."
                },
                {
                    "name": "IsDev",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "True/ False"
                        }
                    ],
                    "description": "Returns true if the application is sideloaded, i.e. the channel ID is \"dev\"."
                },
                {
                    "name": "GetVersion",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "Channel version number. e.g. \"1.2.3\""
                        }
                    ],
                    "description": "Returns the conglomerate version number from the manifest, as formatted major_version + minor_version + build_version."
                },
                {
                    "name": "GetTitle",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "Title of the channel"
                        }
                    ],
                    "description": "Returns the title value from the manifest."
                },
                {
                    "name": "GetSubtitle",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "Possible subtitle configuration"
                        }
                    ],
                    "description": "Returns the subtitle value from the manifest."
                },
                {
                    "name": "GetDevID",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "Channel's Developer ID"
                        }
                    ],
                    "description": "Returns the app's developer ID, or the keyed developer ID, if the application is sideloaded."
                },
                {
                    "name": "GetValue",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "Key",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The manifest value to be returned."
                                }
                            ],
                            "returnType": "String",
                            "returnDescription": "Manifest value; empty string"
                        }
                    ],
                    "description": "Returns the named manifest value, or an empty string if the entry is does not exist."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roAppInfo",
                    "description": "Returns information about the application",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roappinfo.md"
                }
            ]
        },
        "ifAppManager": {
            "name": "ifAppManager",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifappmanager.md",
            "methods": [
                {
                    "name": "SetTheme",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "attributeArray",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "The attributeArray is an <a href=\"/docs/references/brightscript/components/roassociativearray.md\" title=\"roAssociativeArray\">roAssociativeArray</a> of attribute/value pairs. The program may create the roAssociativeArray at runtime or read it from an XML file using the <a href=\"/docs/references/brightscript/components/roxmlelement.md\" title=\"roXMLElement\">roXMLElement</a> object. Existing values for attributes will be overwritten by the values provided. Any values set by a previous SetTheme or SetThemeAttribute call, but not included in the array currently provided by with the subsequent call will remain unchanged. See <a href=\"/docs/references/brightscript/components/roappmanager.md\" title=\"roAppManager\">roAppManager</a> the list of valid attributes."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets a group of theme attributes for the application."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roAppManager",
                    "description": "Returns information about the application",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roappmanager.md"
                }
            ]
        },
        "ifArray": {
            "name": "ifArray",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarray.md",
            "methods": [
                {
                    "name": "Peek",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Dynamic",
                            "returnDescription": "Invalid"
                        }
                    ],
                    "description": "Returns the last (highest index) array entry without removing it. If the array is empty, returns invalid"
                },
                {
                    "name": "Pop",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Dynamic",
                            "returnDescription": "The last (highest index) array entry."
                        }
                    ],
                    "description": "Returns the last entry (highest index) from the array and removes it from the array. If the array is empty, returns invalid and does not change the array."
                },
                {
                    "name": "Push",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "tvalue",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Dynamic",
                                    "description": "The value to be added to the beginning of the array."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Adds the specified value to the end of the array."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roArray",
                    "description": "An array stores an indexed collection of BrightScript objects. Each entry of an array can be a different type, or they may all of the same type",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roarray.md"
                },
                {
                    "name": "roByteArray",
                    "description": "The byte array component is used to contain and manipulate an arbitrary array of bytes",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/robytearray.md"
                },
                {
                    "name": "roList",
                    "description": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolist.md"
                },
                {
                    "name": "roXMLList",
                    "description": "Contains a list of roXML objects",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roxmllist.md"
                }
            ]
        },
        "ifArrayGet": {
            "name": "ifArrayGet",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarrayget.md",
            "methods": [
                {
                    "name": "GetEntry",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "index",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The index of the array entry to be returned."
                                }
                            ],
                            "returnType": "Dynamic",
                            "returnDescription": "The array entry corresponding to the provided index, or invalid if the entry has not been set.  "
                        }
                    ],
                    "description": "Returns an array entry based on the provided index."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roArray",
                    "description": "An array stores an indexed collection of BrightScript objects. Each entry of an array can be a different type, or they may all of the same type",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roarray.md"
                },
                {
                    "name": "roByteArray",
                    "description": "The byte array component is used to contain and manipulate an arbitrary array of bytes",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/robytearray.md"
                },
                {
                    "name": "roList",
                    "description": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolist.md"
                },
                {
                    "name": "roXMLList",
                    "description": "Contains a list of roXML objects",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roxmllist.md"
                }
            ]
        },
        "ifArrayJoin": {
            "name": "ifArrayJoin",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarrayjoin.md",
            "methods": [
                {
                    "name": "Join",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "separator",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The string used to separate elements in an array."
                                }
                            ],
                            "returnType": "String",
                            "returnDescription": "A String containing the array elements. "
                        }
                    ],
                    "description": "Creates a string by joining all array elements together separated by the specified separator. All elements must be of type string; otherwise, an empty string is returned"
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roArray",
                    "description": "Returns information about the application",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roarray.md"
                }
            ]
        },
        "ifArraySet": {
            "name": "ifArraySet",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarrayset.md",
            "methods": [
                {
                    "name": "SetEntry",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "index",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The entry to be updated."
                                },
                                {
                                    "name": "tvalue",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Dynamic",
                                    "description": "The new value for the specified entry."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets an entry at a given index to the passed value. If index is beyond the bounds of the array, the array is expanded to accommodate it."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roArray",
                    "description": "An array stores an indexed collection of BrightScript objects. Each entry of an array can be a different type, or they may all of the same type",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roarray.md"
                },
                {
                    "name": "roByteArray",
                    "description": "The byte array component is used to contain and manipulate an arbitrary array of bytes",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/robytearray.md"
                },
                {
                    "name": "roList",
                    "description": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolist.md"
                },
                {
                    "name": "roXMLList",
                    "description": "Contains a list of roXML objects",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roxmllist.md"
                }
            ]
        },
        "ifArraySort": {
            "name": "ifArraySort",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifarraysort.md",
            "methods": [
                {
                    "name": "Sort",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "flags",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Dynamic",
                                    "description": "Items are arbitrarily grouped by comparable type of number or string, and are sorted within the group with a logical comparison.<br><br>If \"r\" is included in flags, a reverse sort is performed. If \"i\" is included in flags, a case-insensitive sort is performed. If invalid flags are specified, the sort is not performed."
                                }
                            ]
                        }
                    ],
                    "description": " Performs a stable sort on an array. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roArray",
                    "description": "Returns information about the application",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roarray.md"
                }
            ]
        },
        "ifAssociativeArray": {
            "name": "ifAssociativeArray",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifassociativearray.md",
            "methods": [
                {
                    "name": "AddReplace",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "key",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The key to be added to the associative array."
                                },
                                {
                                    "name": "value",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Dynamic",
                                    "description": "The value of the key to be added to the associative array."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Adds a new entry to the array associating the supplied value with the supplied key string. Only one value may be associated with a key. If the key is already associated with a value, the existing value is discarded."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roAssociativeArray",
                    "description": "An associative array allows objects to be associated with string keys",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roassociativearray.md"
                },
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosgnode.md"
                }
            ]
        },
        "ifAudioGuide": {
            "name": "ifAudioGuide",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifaudioguide.md",
            "methods": [
                {
                    "name": "Say",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "text",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The string to be spoken."
                                },
                                {
                                    "name": "flushSpeech",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "Set to true to make the Audio Guide immediately stop speaking any other speech before speaking. <br><br>Set to false to make the Audio Guide wait until any current speech is done before speaking."
                                },
                                {
                                    "name": "dontRepeat",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "Set to true to ignore calls to the say() method with the same text.<br><br>Set to false to speak when calls to the say() method are sent with the same text."
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "An ID associated with the spoken string to be used to notify observer callbacks."
                        }
                    ],
                    "description": "Returns an ID for the spoken string to notify observer callbacks about a specific spoken string. This ID can be used with the <a href=\"/docs/references/brightscript/events/rotexttospeechevent.md\" title=\"roTextToSpeechEvent\">roTextToSpeechEvent</a>.This method will automatically split up text to reduce lag. Due to this automatic splitting, the roTextToSpeechEvent 0 (\"Started speech\") event for the returned ID may not be sent until later than expected. The roTextToSpeechEvents 1 (\"Speech has completed\") and 2 (\"Speech has been flushed\") events are sent at the expected times."
                },
                {
                    "name": "Flush",
                    "signatures": [
                        {
                            "params": []
                        }
                    ],
                    "description": "Interrupts and stops any current text to speech spoken string, to be used when the application does not want the text to speech to continue."
                },
                {
                    "name": "Silence",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "duration",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The number of milliseconds to suppress application background sounds."
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "The number of milliseconds that the background sound has been silenced. "
                        }
                    ],
                    "description": "If Audio Guide is enabled, causes text to speech to continue to suppress any application background sound for the amount of time specified by duration (in milliseconds).This can be used to add clarity for longer spoken text that may have pauses that might otherwise allow application background sound to be heard. This method does nothing if Audio Guide is currently disabled."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roAudioGuide",
                    "description": "Returns information about the application",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roaudioguide.md"
                }
            ]
        },
        "ifAudioMetaData": {
            "name": "ifAudioMetaData",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifaudiometadata.md",
            "methods": [
                {
                    "name": "SetUrl",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "url",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The URL of the audio file."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the URL to the audio file. Only file URLs are initially supported"
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roAudioMetadata",
                    "description": "This component provides developers access to audio file metadata included in many audio files",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roaudiometadata.md"
                }
            ]
        },
        "ifAudioPlayer": {
            "name": "ifAudioPlayer",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifaudioplayer.md",
            "methods": [
                {
                    "name": "SetContentList",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "contentList",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object"
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the content list to be played by the Audio Player."
                },
                {
                    "name": "AddContent",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "contentItem",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "The new ContentMetaData item to be added to the content list."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Adds a new ContentMetaData item to the end of the content list for the Audio Player. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roAudioMetadata",
                    "description": "The Audio Player object provides the ability to setup the playing of a series of audio streams",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roaudiometadata.md"
                }
            ]
        },
        "ifAudioResource": {
            "name": "ifAudioResource",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifaudioresource.md",
            "methods": [
                {
                    "name": "Trigger",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "volume",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The volume is a number between 0 and 100 (percentage of full volume). A value of 50 should be used for normal volume."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "This method triggers the start of the audio resource sound playback. The effect of Trigger(volume) is identical to Trigger(volume, 0)."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roAudioResource",
                    "description": "The roAudioResouce allows .wav files to be cached to memory and quickly played at any time",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roaudioresource.md"
                }
            ]
        },
        "ifBoolean": {
            "name": "ifBoolean",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifboolean.md",
            "methods": [
                {
                    "name": "GetBoolean",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "The boolean value stored in the calling boolean object. "
                        }
                    ],
                    "description": "Gets the boolean value stored in the calling boolean object. "
                },
                {
                    "name": "SetBoolean",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "value",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "True/false."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the calling boolean object to the specified true/false value. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roBoolean",
                    "description": "Object equivalent for intrinsic type Boolean",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roboolean.md"
                }
            ]
        },
        "ifByteArray": {
            "name": "ifByteArray",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifbytearray.md",
            "methods": [
                {
                    "name": "WriteFile",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The path to the file to which the bytes are to be written."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the bytes were successfully written to the file."
                        }
                    ],
                    "description": "Writes the bytes contained in the Byte Array to the specified file."
                },
                {
                    "name": "WriteFile",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The path to the file to which the bytes are to be written."
                                },
                                {
                                    "name": "start_index",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The index of the calling ByteArray from which to start writing bytes."
                                },
                                {
                                    "name": "length",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The length of the bytes to be written to the file, starting from the specified index."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the bytes were successfully written to the file."
                        }
                    ],
                    "description": "Writes a subset of the bytes contained in the Byte Array to the specified file."
                },
                {
                    "name": "ReadFile",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The path to the file to be read."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the bytes were successfully read into the Byte Array."
                        }
                    ],
                    "description": "Reads the specified file into the Byte Array. Any data currently in the Byte Array is discarded."
                },
                {
                    "name": "ReadFile",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The path to the file to be read."
                                },
                                {
                                    "name": "start_pos",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The index of the file from which to start reading bytes."
                                },
                                {
                                    "name": "length",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The length of the bytes to be read from the file, starting from the specified starting position."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the bytes were successfully read into the Byte Array."
                        }
                    ],
                    "description": "Reads the specified file into the Byte Array. Any data currently in the Byte Array is discarded."
                },
                {
                    "name": "AppendFile",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The path to the file to be appended to the ByteArray."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the file was successfully appended to the calling ByteArray."
                        }
                    ],
                    "description": "Appends the contents of the Byte Array to the specified file."
                },
                {
                    "name": "AppendFile",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The path to the file to be appended to the Byte Array."
                                },
                                {
                                    "name": "start_pos",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The position in the file from which to start appending bytes."
                                },
                                {
                                    "name": "length",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The length of the bytes to be appended to the Byte Array, starting from the specified starting position."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the file was successfully appended to the calling ByteArray."
                        }
                    ],
                    "description": "Appends the contents of the Byte Array to the specified file."
                },
                {
                    "name": "SetResize",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "min_size",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The minimum size to which the calling Byte Array is to be expanded."
                                },
                                {
                                    "name": "auto_resize",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "A flag specifying whether auto resize is enabled on the calling Byte Array."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "If the size of the Byte Array is less than min_size, expands the Byte Array to min_size. Also sets the auto-resize attribute of the Byte Array to the specified value."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roByteArray",
                    "description": "The byte array component is used to contain and manipulate an arbitrary array of bytes",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/robytearray.md"
                }
            ]
        },
        "ifCaptionRenderer": {
            "name": "ifCaptionRenderer",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifcaptionrenderer.md",
            "methods": [
                {
                    "name": "SetMode",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "mode",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer"
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the rendering mode for the <a href=\"/docs/references/brightscript/components/rocaptionrenderer.md\" title=\"roCaptionRenderer\">roCaptionRenderer</a>."
                },
                {
                    "name": "SetScreen",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "screen",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "roScreen or roImageCanvas",
                                    "description": "The <a href=\"/docs/references/brightscript/components/roscreen.md\">roScreen</a> or <a href=\"/docs/references/brightscript/components/roimagecanvas.md\">roImageCanvas</a> instance to be associated with this caption renderer."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the  <a href=\"/docs/references/brightscript/components/roscreen.md\">roScreen</a> or <a href=\"/docs/references/brightscript/components/roimagecanvas.md\">roImageCanvas</a> instance associated with this caption renderer.This function only needs to be called if the roCaptionRenderer mode is set to 1 (the default value). In this case, the Roku OS is responsible for all of the closed caption text rendering, and thus must know what screen to draw on.If the mode is set to 2, the BrightScript channel is responsible for all of the caption drawing, and thus the Roku OS does not need to be informed as to what screen is being rendered on."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roCaptionRenderer",
                    "description": "Returns information about the application",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rocaptionrenderer.md"
                }
            ]
        },
        "ifChannelStore": {
            "name": "ifChannelStore",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifchannelstore.md",
            "methods": [
                {
                    "name": "GetIdentity",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The unique number generated for the object."
                        }
                    ],
                    "description": "Returns a unique number for this object that can be used to identify whether a roChannelStoreEvent event originated from this object, by comparing with the roChannelStoreEvent object's GetSourceIdentity() value."
                },
                {
                    "name": "GetCatalog",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Requests the list of In-Channel products that are linked to the running channel."
                },
                {
                    "name": "GetStoreCatalog",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Requests the list of globally available In-Channel products, which are available to all channels."
                },
                {
                    "name": "GetPurchases",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Requests the list of purchases associated with the current user account."
                },
                {
                    "name": "SetOrder",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "order",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "roList of roAssociativeArray items",
                                    "description": "Each roAssociativeArray in the roList contains the following fields: <table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>code</td>\n<td>String</td>\n<td>The product identifier</td>\n</tr>\n<tr>\n<td>qty</td>\n<td>Integer</td>\n<td>The quantity purchased</td>\n</tr>\n</tbody>\n</table>"
                                },
                                {
                                    "name": "orderInfo",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "roAssociativeArray",
                                    "description": "<em>Available since Roku OS 9.3</em><br><br>This parameter is used for subscription upgrades and downgrades. If it is not specified, the action is a product purchase. It contains the following fields: <table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>action</td>\n<td>String</td>\n<td>The action to be performed, which may be one of the following: <ul>\n<li>\"Upgrade\": The order is an upgrade from one subscription product to another.</li>\n<li>\"Downgrade\": The order is a subscription downgrade.</li>\n</ul></td>\n</tr>\n</tbody>\n</table><br><strong>Example</strong> <pre><code>m.store = CreateObject(\"roChannelStore\")​\n' Populate myOrderItems\nmyOrderInfo.action = \"Upgrade\"\nm.store.setOrder(myOrderItems, myOrderInfo)\n</code></pre><br>See <a href=\"/docs/developer-program/roku-pay/implementation/on-device-upgrade-downgrade.md#calling-the-roku-web-service-validate-transaction-api\">On-device upgrade and downgrade</a> for how to implement Roku Pay web services for upgrades/downgrades."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the current Order (shopping cart) to the elements specified in the parameter, which must be an roList of roAssociativeArray items.Passing an empty roList clears the Order, like calling ClearOrder()."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roChannelStore",
                    "description": "allows the application to perform a purchase of an In-Channel Product or upgrade a channel",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rochannelstore.md"
                }
            ]
        },
        "ifCodeRegistrationScreen": {
            "name": "ifCodeRegistrationScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifcoderegistrationscreen.md",
            "methods": [
                {
                    "name": "SetTitle",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "title",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The title to be displayed on the code registration screen."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the title for the screen to the specified string. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roCodeRegistrationScreen",
                    "description": "The Code Registration Screen is designed to present the user a registration code, and the information required to instruct the user on how to register with a service provider",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rocoderegistrationscreen.md"
                }
            ]
        },
        "ifCompositor": {
            "name": "ifCompositor",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifcompositor.md",
            "methods": [
                {
                    "name": "SetDrawTo",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "destBitmap",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "The bitmap to be drawn."
                                },
                                {
                                    "name": "rgbaBackground",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The background color to be used."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the destBitmap (<a href=\"/docs/references/brightscript/components/robitmap.md\" title=\"roBitmap\">roBitmap</a> or <a href=\"/docs/references/brightscript/components/roscreen.md\" title=\"roScreen\">roScreen</a>) and the background color."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roCompositor",
                    "description": "The roCompositor allows the composition and animation of multiple roBitmaps and roRegions",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rocompositor.md"
                }
            ]
        },
        "ifDateTime": {
            "name": "ifDateTime",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifdatetime.md",
            "methods": [
                {
                    "name": "Mark",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the date/time value to the current UTC date and time."
                },
                {
                    "name": "ToLocalTime",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Offsets the date/time value from an assumed UTC date/time to a local date/time using the system time zone setting. This function is not idempotent, and multiple calls will do multiple timezone adjustments to the time yielding an incorrect result."
                },
                {
                    "name": "GetTimeZoneOffset",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "Minutes of offset as Integer."
                        }
                    ],
                    "description": "Returns the offset in minutes from the system time zone to UTC. For example, if the system time zone is in PDT / UTC-7 the value returned would be 420."
                },
                {
                    "name": "AsSeconds",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "Number of seconds as Integer."
                        }
                    ],
                    "description": "Returns the date/time as the number of seconds from the Unix epoch (00:00:00 1/1/1970 GMT)."
                },
                {
                    "name": "FromSeconds",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "numSeconds",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The number of seconds from the Unix epoch."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the date/time value using the number of seconds from the Unix epoch."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roDateTime",
                    "description": "The roDateTime provides an interface to obtain the current date/time for the player and manipulate date/times",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodatetime.md"
                }
            ]
        },
        "ifDeviceInfo": {
            "name": "ifDeviceInfo",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifdeviceinfo.md",
            "methods": [
                {
                    "name": "GetModel",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns the model name of the Roku device. See the <a href=\"/docs/specs/hardware.md\">Hardware Specification</a> for the list of the current, updatable, and legacy Roku models."
                },
                {
                    "name": "GetModelDisplayName",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns the model display name of the Roku device."
                },
                {
                    "name": "GetModelType",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns a string describing the type of device. For future compatibility, the caller should by default assume \"STB\" when anything other than described value is returned"
                },
                {
                    "name": "GetModelDetails",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object"
                        }
                    ],
                    "description": "Returns detailed information about the device model."
                },
                {
                    "name": "GetFriendlyName",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns a string describing the device that may be used for network device selection.  The string is subject to change and should not be used as a persistent key or ID"
                },
                {
                    "name": "GetOSVersion",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object"
                        }
                    ],
                    "description": "Returns an roAssociativeArray containing the <strong>major</strong>, <strong>minor</strong>, <strong>revision</strong>, and <strong>build</strong> numbers of the Roku OS running on the device."
                },
                {
                    "name": "GetVersion",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns the version number of the device."
                },
                {
                    "name": "GetDeviceUniqueId",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns a string of 12 zeroes (it no longer returns the unique identifier for the channel on a device)."
                },
                {
                    "name": "GetAdvertisingId",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns a unique identifier for the device. This identifier is persistent but can be reset by the user from the device's Settings menu or by performing a factory reset on the device."
                },
                {
                    "name": "GetRIDA",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns a unique identifier for the device."
                },
                {
                    "name": "IsAdIdTrackingDisabled",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "If Ad Id tracking is disabled, the identifier returned by GetAdvertisingId() should not be used for Ad targeting"
                },
                {
                    "name": "IsRIDADisabled",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Indicates whether tracking via Roku's ID for Advertisers (RIDA) is disabled on the device."
                },
                {
                    "name": "GetClientTrackingId",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns a unique identifier for the device."
                },
                {
                    "name": "GetChannelClientId",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns a unique identifier for the device. The ID is persistent and cannot be reset. This value can be used to manage or identify devices linked to the channel’s content services."
                },
                {
                    "name": "GetUserCountryCode",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns the ISO 3166-1 (2-letter) country code associated with the user's Roku account."
                },
                {
                    "name": "GetRandomUUID",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns a randomly generated unique identifier. Each time this function is called, a different identifier is returned"
                },
                {
                    "name": "GetTimeZone",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Checks for the user's current system time zone setting."
                },
                {
                    "name": "HasFeature",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "feature",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The feature to be checked, which may be one of the following values: <ul>\n<li>\"5.1_surround_sound\"</li>\n<li>\"can_output_5.1_surround_sound\"</li>\n<li>\"sd_only_hardware\"</li>\n<li>\"usb_hardware\"</li>\n<li>\"sdcard_hardware\"</li>\n<li>\"ethernet_hardware\"</li>\n<li>\"gaming_hardware\"</li>\n<li>\"energy_star_compliant\"</li>\n<li>\"soundbar_hardware\"</li>\n</ul>"
                                }
                            ],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if the current device/firmware supports the passed in feature string."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roDeviceInfo",
                    "description": "The roDeviceInfo component provides an interface to obtain attributes about the device",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodeviceinfo.md"
                }
            ]
        },
        "ifDeviceCrypto": {
            "name": "ifDeviceCrypto",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifdevicecrypto.md",
            "methods": [],
            "properties": [],
            "implementors": [
                {
                    "name": "roDeviceCrypto",
                    "description": "Encrypts and decrypts data on a device using a key that is unique per channel, device, or model.",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodevicecrypto.md"
                }
            ]
        },
        "ifDouble": {
            "name": "ifDouble",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifdouble.md",
            "methods": [
                {
                    "name": "GetDouble",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Double",
                            "returnDescription": "The double value stored in the calling Double object. "
                        }
                    ],
                    "description": "Gets the double value stored in the calling Double object. "
                },
                {
                    "name": "SetDouble",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "value",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Double",
                                    "description": "The double value to be set on the calling Double object."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the calling Double object to the specified double value. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roDouble",
                    "description": "roDouble is a legacy object name, corresponding to the intrinsic Double object",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodouble.md"
                }
            ]
        },
        "ifDraw2D": {
            "name": "ifDraw2D",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifdraw2d.md",
            "methods": [
                {
                    "name": "Clear",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "rgba",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The RGBA color to be used to fill the bitmap."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Clears the bitmap, and fills it with the specified RGBA color."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roBitmap",
                    "description": "The roBitmap component contains image data and provides an interface (ifDraw2D) for drawing",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/robitmap.md"
                },
                {
                    "name": "roRegion",
                    "description": "The roRegion component is used to represent a subsection of a bitmap",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roregion.md"
                },
                {
                    "name": "roScreen",
                    "description": "The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roscreen.md"
                }
            ]
        },
        "ifEnum": {
            "name": "ifEnum",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifenum.md",
            "methods": [
                {
                    "name": "Reset",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Resets the current position to the first element of the enumeration."
                },
                {
                    "name": "Next",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Dynamic",
                            "returnDescription": "The value at the current position of the enumeration. If the current position is already past the end (that is, the last element has already been returned by a previous call to this method), \"invalid\" is returned."
                        }
                    ],
                    "description": "Increments the position of an enumeration. If the last element of the enumeration is returned, this method sets the current position to indicate that it is now past the end. "
                },
                {
                    "name": "IsNext",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the current position is not past the end (true), or is past the end (false). "
                        }
                    ],
                    "description": "Checks whether the current position is not past the end of the enumeration."
                },
                {
                    "name": "IsEmpty",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the enumeration contains no elements (true), or contains elements (false). "
                        }
                    ],
                    "description": "Checks whether the enumeration contains no elements."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roArray",
                    "description": "An array stores an indexed collection of BrightScript objects",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roarray.md"
                },
                {
                    "name": "roAssociativeArray",
                    "description": "An associative array (also known as a map, dictionary or hash table) allows objects to be associated with string keys",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roassociativearray.md"
                },
                {
                    "name": "roByteArray",
                    "description": "The byte array component is used to contain and manipulate an arbitrary array of bytes",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/robytearray.md"
                },
                {
                    "name": "roList",
                    "description": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolist.md"
                },
                {
                    "name": "roMessagePort",
                    "description": "A Message Port is the place messages (events) are sent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/romessageport.md"
                },
                {
                    "name": "roXMLList",
                    "description": "Contains a list of roXML objects",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roxmllist.md"
                }
            ]
        },
        "ifEVPCipher": {
            "name": "ifEVPCipher",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifevpcipher.md",
            "methods": [
                {
                    "name": "Setup",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "encrypt",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "True for encryption; false for decryption"
                                },
                                {
                                    "name": "format",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "Cipher format string, from openssl, listed at roEVPCipher"
                                },
                                {
                                    "name": "key",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "A hex-encoded key"
                                },
                                {
                                    "name": "iv",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "A hex-encoded initialization vector, which can be an empty string"
                                },
                                {
                                    "name": "padding",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "1 to use standard padding; 0 for no padding)"
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "Returns 0 on success or non-zero on failure."
                        }
                    ],
                    "description": "Configures and initializes a new cipher context."
                },
                {
                    "name": "Reinit",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "Returns 0 on success or non-zero on failure."
                        }
                    ],
                    "description": "Reinitializes an existing cipher context. This can be called to reuse an existing <a href=\"/docs/references/brightscript/components/roevpdigest.md\" title=\"roEVPCipher\">roEVPCipher</a> object to encrypt new data"
                },
                {
                    "name": "Process",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "bytes",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An <a href=\"/docs/references/brightscript/components/robytearray.md\">roByteArray</a> containing data that is encrypted or decrypted."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An <a href=\"/docs/references/brightscript/components/robytearray.md\" title=\"roByteArray\">roByteArray</a> containing the result."
                        }
                    ],
                    "description": "Processes the included <a href=\"/docs/references/brightscript/components/robytearray.md\">roByteArray</a> containing encrypted/decrypted data."
                },
                {
                    "name": "Update",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "bytes",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An <a href=\"/docs/references/brightscript/components/robytearray.md\">roByteArray</a> containing data that is encrypted or decrypted."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An <a href=\"/docs/references/brightscript/components/robytearray.md\" title=\"roByteArray\">roByteArray</a> containing a subset of the result. Some or all of the result may not be returned until the next call to Update()."
                        }
                    ],
                    "description": "Updates the included <a href=\"/docs/references/brightscript/components/robytearray.md\">roByteArray</a> containing encrypted/decrypted data."
                },
                {
                    "name": "Final",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "The last remaining encrypted or decrypted bytes."
                        }
                    ],
                    "description": "Signals that all data has been submitted by previous calls to Update()."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roEVPCipher",
                    "description": "The EVP Cipher component provides an interface to the OpenSSL EVP library of symmetric cipher commands",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roevpcipher.md"
                }
            ]
        },
        "ifEVPDigest": {
            "name": "ifEVPDigest",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifevpdigest.md",
            "methods": [
                {
                    "name": "Setup",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "digestType",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The supported digest algorithm from openssl, listed at roEVPDigest."
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "Returns 0 on success or non-zero on failure."
                        }
                    ]
                },
                {
                    "name": "Reinit",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "Returns 0 on success or non-zero on failure."
                        }
                    ],
                    "description": "Re-initializes an existing message digest context. This can be called to reuse an existing <a href=\"/docs/references/brightscript/components/roevpdigest.md\" title=\"roEVPDigest\">roEVPDigest</a> object to digest new data."
                },
                {
                    "name": "Process",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "bytes",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An <a href=\"/docs/references/brightscript/components/robytearray.md\">roByteArray</a> containing digested data"
                                }
                            ],
                            "returnType": "String",
                            "returnDescription": "A Hex string (Digested array data)."
                        }
                    ],
                    "description": "Digests the provided data. "
                },
                {
                    "name": "Update",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "bytes",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An <a href=\"/docs/references/brightscript/components/robytearray.md\">roByteArray</a> containing data to be added to the current digest"
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Adds more data to be digested."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roEVPDigest",
                    "description": "The EVP Digest component provides an interface to the OpenSSL EVP library of message digest algorithms",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roevpdigest.md"
                }
            ]
        },
        "ifFileSystem": {
            "name": "ifFileSystem",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iffilesystem.md",
            "methods": [
                {
                    "name": "GetVolumeList",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "An <a href=\"/docs/references/brightscript/components/rolist.md\" title=\"roList\">roList</a> containing strings representing the available volumes."
                        }
                    ],
                    "description": "Returns the available volumes on the device."
                },
                {
                    "name": "GetDirectoryListing",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "dirPath",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The directory path from which to get a list of file names."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An <a href=\"/docs/references/brightscript/components/rolist.md\" title=\"roList\">roList</a> of strings representing the directory listing of names in dirPath."
                        }
                    ],
                    "description": "Returns the file names in the specified directory path."
                },
                {
                    "name": "Find",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "dirPath",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The directory path from which to get a list of file names."
                                },
                                {
                                    "name": "regex",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The regex to be used to search for files."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An <a href=\"/docs/references/brightscript/components/rolist.md\" title=\"roList\">roList</a> of Strings representing the directory listing of names in dirPath that match the regex."
                        }
                    ],
                    "description": "Returns the file names in the specified directory path matching the provided regex."
                },
                {
                    "name": "FindRecurse",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "dirPath",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The directory path from which to get a list of file names."
                                },
                                {
                                    "name": "regex",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The regex to be used to search for files."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An <a href=\"/docs/references/brightscript/components/rolist.md\" title=\"roList\">roList</a> of Strings representing the directory listing of names in dirPath that match the regex. Each item in the list is the name of the file relative to dirPath."
                        }
                    ],
                    "description": "Returns the file names in the specified directory path and any sudirectories matching the provided regex."
                },
                {
                    "name": "Match",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The directory path from which to get a list of file names."
                                },
                                {
                                    "name": "pattern",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The shell-like pattern to be used to search for files. The pattern may contain wildcards such as <code>*</code>and <code>?</code>."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An <a href=\"/docs/references/brightscript/components/rolist.md\" title=\"roList\">roList</a> of Strings representing the directory listing of names in dirPath that match the shell-like pattern."
                        }
                    ],
                    "description": "Returns the file names in the specified directory path matching the provided shell-like pattern. This method is similar to the <a href=\"#finddirpath-as-string-regex-as-string-as-object\">Find()</a> method except that it uses shell-like pattern matching rather than regular expression matching."
                },
                {
                    "name": "Exists",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The directory path to be checked."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the specified path directory exists on the device."
                        }
                    ],
                    "description": "Checks if the specified directory path exists on the device."
                },
                {
                    "name": "Stat",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The directory path to be checked."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An <a href=\"/docs/references/brightscript/components/roassociativearray.md\" title=\"roAssociativeArray\">roAssociativeArray</a> containing the following key-value pairs for the specified path:"
                        }
                    ],
                    "description": "Returns the keys in the specified directory path."
                },
                {
                    "name": "GetVolumeInfo",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The external volume for which to get information. This should be specified as the volume name plus a directory separator (for example, \"ext1:/\")."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An roAssociativeArray containing the following key-value pairs about the specified external volume:"
                        }
                    ],
                    "description": "Returns information about the specified volume. The function can only be called on external volumes; internal volumes do not return meaningful information."
                },
                {
                    "name": "CreateDirectory",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The path of the directory to be created."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the path was successfully created."
                        }
                    ],
                    "description": "Creates the directory specified by the path parameter. All directories in path except the last one must already exist; that is, only one directory can be created."
                },
                {
                    "name": "Delete",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The path of the directory to be deleted."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the path was successfully deleted."
                        }
                    ],
                    "description": "Permanently removes the file or directory specified by the path parameter. If path is a directory, its contents are recursively removed."
                },
                {
                    "name": "CopyFile",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fromPath",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The source path containing the files to be copied."
                                },
                                {
                                    "name": "toPath",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The target path to which files are to be copied."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the files were successfully copied."
                        }
                    ],
                    "description": "Copies the files from one directory to another."
                },
                {
                    "name": "Rename",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fromPath",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The current name of the path to be renamed."
                                },
                                {
                                    "name": "toPath",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The new name of the path."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the directory was successfully renamed. If the provided target directory (<strong>toPath</strong>) exists, it is not overwritten; instead the operation fails and this method returns false"
                        }
                    ],
                    "description": "Renames the directory."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roFile System",
                    "description": "The roFilesystem component implements common filesystem inspection and modification routines"
                }
            ]
        },
        "ifFloat": {
            "name": "ifFloat",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iffloat.md",
            "methods": [
                {
                    "name": "GetFloat",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Float",
                            "returnDescription": "The float value stored in the calling Float object. "
                        }
                    ],
                    "description": "Gets the float value stored in the calling Float object. "
                },
                {
                    "name": "SetFloat",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "value",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Float",
                                    "description": "The float value to be set on the calling Float object."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the calling Float object to the specified float value. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roFloat",
                    "description": "Object equivalent for intrinsic type 'Float'",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rofloat.md"
                }
            ]
        },
        "ifFont": {
            "name": "ifFont",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iffont.md",
            "methods": [
                {
                    "name": "GetOneLineHeight",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The number of pixels."
                        }
                    ]
                },
                {
                    "name": "GetOneLineWidth",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "text",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The subject text."
                                },
                                {
                                    "name": "MaxWidth",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "Generally, the amount of pixels available for rendering on this line."
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "The number of pixels. This will be less than provided MaxWidth."
                        }
                    ]
                },
                {
                    "name": "GetAscent",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The number of pixels."
                        }
                    ]
                },
                {
                    "name": "GetDescent",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The number of pixels."
                        }
                    ]
                },
                {
                    "name": "GetMaxAdvance",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The number of pixels."
                        }
                    ]
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roFont",
                    "description": "roFont represents a particular font, from a font-family (eg. Arial), with a particular pixel size (e.g 20), and a particular boldness or italicness",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rofont.md"
                }
            ]
        },
        "ifFontMetrics": {
            "name": "ifFontMetrics",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iffontmetrics.md",
            "methods": [
                {
                    "name": "Size",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "stringToDraw",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The string to be drawn."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An <a href=\"/docs/references/brightscript/components/roassociativearray.md\" title=\"roAssociativeArray\">roAssociativeArray</a> with width and height parameters. The following example demonstrates this:"
                        }
                    ],
                    "description": "Returns the width and height of the <strong>stringToDraw</strong> parameter rendered in the font passed on the CreateObject() call."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roFontMetrics",
                    "description": "The roFontMetrics object allows you to get display size information for a specific font returned by the roFontRegistry.Get() method",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rofontmetrics.md"
                }
            ]
        },
        "ifFontRegistry": {
            "name": "ifFontRegistry",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iffontregistry.md",
            "methods": [
                {
                    "name": "Register",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String"
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the fonts in the specified file were successfully installed. "
                        }
                    ],
                    "description": "Registers a font file (.ttf or .otf format). Each font file defines one or more font families (usually one)."
                },
                {
                    "name": "GetFamilies",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "An <a href=\"/docs/references/brightscript/components/roarray.md\" title=\"roArray\">roArray</a> of strings that represent the names of the font families that have been registered."
                        }
                    ],
                    "description": "Returns the names of the font families that have been registered via the <a href=\"#registerpath-as-string-as-boolean\">Register()</a> method. Each name can be passed as the first parameter to the <a href=\"#getfontfamily-as-string-size-as-integer-bold-as-boolean-italic-as-boolean-as-object\">GetFont()</a> method."
                },
                {
                    "name": "GetFont",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "family",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The font family name."
                                },
                                {
                                    "name": "size",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The requested font size, in pixels, not points."
                                },
                                {
                                    "name": "bold",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "\"bold\" specifies a font variant that may be (but is not always) supported by the font file."
                                },
                                {
                                    "name": "italic",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "\"italic\" specifies a font variant that may be (but is not always) supported by the font file."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An <a href=\"/docs/references/brightscript/components/rofont.md\" title=\"roFont\">roFont</a> object representing a font from the specified family."
                        }
                    ],
                    "description": "Returns a font from the specified family, selected from the fonts previously registered via the <a href=\"#registerpath-as-string-as-boolean\">Register()</a> method. "
                },
                {
                    "name": "GetDefaultFont",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "The system font as its default size. "
                        }
                    ],
                    "description": "Returns the system font at its default size. Calling this method is the same as calling the <a href=\"#getdefaultfontsize-as-integer-bold-as-boolean-italic-as-boolean-as-object\">GetDefaultFont()</a> method with the following syntax: <code>reg.GetDefaultFont(reg.GetDefaultFontSize(), false, false)</code>."
                },
                {
                    "name": "GetDefaultFont",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "size",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The requested font size, in pixels, not points."
                                },
                                {
                                    "name": "bold",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "\"bold\" specifies a font variant that may be (but is not always) supported by the font file."
                                },
                                {
                                    "name": "italic",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "\"italic\" specifies a font variant that may be (but is not always) supported by the font file."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An roFont object representing the system font. "
                        }
                    ],
                    "description": "Returns the system font. The system font is always available, even if the <a href=\"#registerpath-as-string-as-boolean\">Register()</a> method has not been called"
                },
                {
                    "name": "GetDefaultFontSize",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The default font size."
                        }
                    ],
                    "description": "Returns the default font size."
                },
                {
                    "name": "Get",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "family",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The font family name."
                                },
                                {
                                    "name": "size",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The requested font size, in pixels, not points."
                                },
                                {
                                    "name": "bold",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "\"bold\" specifies a font variant that may be (but is not always) supported by the font file."
                                },
                                {
                                    "name": "italic",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "\"italic\" specifies a font variant that may be (but is not always) supported by the font file."
                                }
                            ],
                            "returnType": "String",
                            "returnDescription": "A valid font string."
                        }
                    ],
                    "description": "Returns a valid font string that can be used as the value of the Font content meta-data parameter recognized by the <a href=\"/docs/references/brightscript/components/roimagecanvas.md\" title=\"roImageCanvas\">roImageCanvas</a> method."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roFontRegistry",
                    "description": "The roFontRegistry object allows you to create roFont objects, either using the default font or using fonts in TrueType or OpenType files packaged with your application",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rofontregistry.md"
                }
            ]
        },
        "ifFunction": {
            "name": "ifFunction",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iffunction.md",
            "methods": [
                {
                    "name": "GetSub",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Function"
                        }
                    ],
                    "description": "You can get a plain (non-referenced) version of the value by calling the this method."
                },
                {
                    "name": "SetSub",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "value",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Function"
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "This method can be used for in/out function parameters. If you have a boxed object, you can change the value in the object via this method, without changing the variable reference itself."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roFunction",
                    "description": "Object equivalent for intrinsic type Function",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rofunction.md"
                }
            ]
        },
        "ifGetMessagePort": {
            "name": "ifGetMessagePort",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgetmessageport.md",
            "methods": [
                {
                    "name": "GetMessagePort",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "The message port."
                        }
                    ],
                    "description": "Returns the message port (if any) currently associated with the object"
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roHdmiStatus",
                    "description": "The HDMI status component provides an interface to the current HDMI operational status",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rohdmistatus.md"
                },
                {
                    "name": "roScreen",
                    "description": "The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roscreen.md"
                },
                {
                    "name": "roUrlTransfer",
                    "description": "A roUrlTransfer object transfers data to or from remote servers specified by URLs",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rourltransfer.md"
                },
                {
                    "name": "roTextToSpeech",
                    "description": "The roTextToSpeech component provides text to speech capabilities to applications",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotexttospeech.md"
                }
            ]
        },
        "ifGridScreen": {
            "name": "ifGridScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifgridscreen.md",
            "methods": [
                {
                    "name": "SetupLists",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "count",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The number of rows to be used in the grid."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the number of rows in the grid. The number of rows must be set before calling other functions to populate grid data."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roGridScreen",
                    "description": "The Grid Screen provides a graphical display of poster art from multiple content categories from within a single screen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rogridscreen.md"
                }
            ]
        },
        "ifHdmiStatus": {
            "name": "ifHdmiStatus",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhdmistatus.md",
            "methods": [
                {
                    "name": "IsConnected",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the HDMI or MHL output is connected to an HDMI device."
                        }
                    ],
                    "description": "Checks whether the HDMI or MHL output is connected to an HDMI device."
                },
                {
                    "name": "GetHdcpVersion",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "The version number of the HDCP link: 1.4 or 2.2."
                        }
                    ],
                    "description": "Returns the version number of the currently established HDCP link."
                },
                {
                    "name": "IsHdcpActive",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "version",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The HDCP link version to be checked (for example, \"1.4\" or \"2.2\")."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the current established HDCP link is the specified <code>version</code>."
                        }
                    ],
                    "description": "Checks if the current established HDCP link is the specified version or higher"
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roHdmiStatus",
                    "description": "The HDMI status component provides an interface to the current HDMI operational status",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rohdmistatus.md"
                }
            ]
        },
        "ifHMAC": {
            "name": "ifHMAC",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhmac.md",
            "methods": [
                {
                    "name": "Setup",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "digestType",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "Selects one of the supported digest algorithms, as documented in <a href=\"/docs/references/brightscript/components/roevpdigest.md\" title=\"roEVPDigest\">roEVPDigest</a>."
                                },
                                {
                                    "name": "key",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An roByteArray containing the key for the MAC."
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "An integer indicating whether the function succeeded (0) or failed (1)."
                        }
                    ],
                    "description": "Initializes new HMAC context. "
                },
                {
                    "name": "Reinit",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "An integer indicating whether the function succeeded (0) or failed (1)."
                        }
                    ],
                    "description": "Re-initializes an existing HMAC context. This can be called to reuse an existing roHMAC object to authenticate new data. "
                },
                {
                    "name": "Process",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "message",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An <a href=\"/docs/references/brightscript/components/robytearray.md\" title=\"roByteArray\">roByteArray</a> with the data to be digested."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An <a href=\"/docs/references/brightscript/components/robytearray.md\" title=\"roByteArray\">roByteArray</a> containing the generated MAC."
                        }
                    ],
                    "description": "Digests the data in an array generates a MAC. Calling this method is the same as making the following calls:"
                },
                {
                    "name": "Update",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "partialMesssage",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An <a href=\"/docs/references/brightscript/components/robytearray.md\" title=\"roByteArray\">roByteArray</a> with the additional data to be digested."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Adds more data to be digested. The data in the array is added to the current digest."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roHMAC",
                    "description": "The HMAC component provides an interface to the OpenSSL HMAC functions",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rohmac.md"
                }
            ]
        },
        "ifHttpAgent": {
            "name": "ifHttpAgent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifhttpagent.md",
            "methods": [
                {
                    "name": "AddHeader",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "name",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the HTTP header to be added to the list of headers. <br><br>If \"x-roku-reserved-dev-id\" is passed as the name, the value parameter is ignored and in its place, the devid of the currently running channel is used as the value. This allows the developer's server to know which client app is talking to it. <br><br>Any other headers with names beginning with \"x-roku-reserved-\" are reserved and may not be set."
                                },
                                {
                                    "name": "value",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The value of the HTTP header being added."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the HTTP header was successfully added."
                        }
                    ],
                    "description": "Adds the specified HTTP header to the list of headers that will be sent in the HTTP request."
                },
                {
                    "name": "SetHeaders",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "nameValueMap",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An associative array containing the HTTP headers and values to be included in the HTTP request. <br><br>If \"x-roku-reserved-dev-id\" is passed as a key, the value parameter is ignored and in its place, the devid of the currently running channel is used as the value. This allows the developer's server to know which client app is talking to it. <br><br>Any other headers with names beginning with \"x-roku-reserved-\" are reserved and may not be set."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the HTTP header was successfully set."
                        }
                    ],
                    "description": "Sets the HTTP headers to be sent in the HTTP request."
                },
                {
                    "name": "InitClientCertificates",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the object sent to to the Roku client certificate was successfully initialized."
                        }
                    ],
                    "description": "Initializes the object to be sent to the Roku client certificate."
                },
                {
                    "name": "SetCertificatesFile",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The directory path of the .pem file to be used."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the certificate was successfully set."
                        }
                    ],
                    "description": "Set the certificates file used for SSL to the specified .pem file."
                },
                {
                    "name": "SetCertificatesDepth",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "depth",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The maximum depth to be used."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the maximum depth of the certificate chain that will be accepted."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roAppManager",
                    "description": "The Application Manager APIs set application level attributes, which mostly affect the look-and-feel of the application",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roappmanager.md"
                },
                {
                    "name": "roAudioPlayer",
                    "description": "The Audio Player object provides the ability to setup the playing of a series of audio streams",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roaudioplayer.md"
                },
                {
                    "name": "roGridScreen",
                    "description": "The Grid Screen provides a graphical display of poster art from multiple content categories from within a single screen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rogridscreen.md"
                },
                {
                    "name": "roImageCanvas",
                    "description": "The roImageCanvas component provides an interface to render graphic elements at specific spots on the screen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roimagecanvas.md"
                },
                {
                    "name": "roListScreen",
                    "description": "The List Screen provides a graphical display of content in a vertical list within a single screen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolistscreen.md"
                },
                {
                    "name": "roParagraphScreen",
                    "description": "The Paragraph Screen provides a way to display text and selection choices to the user",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roparagraphscreen.md"
                },
                {
                    "name": "roPosterScreen",
                    "description": "The Poster Screen provides a graphical display of poster art for content selection or can be used as a submenu to provide hierarchical structure to the application",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roposterscreen.md"
                },
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosgnode.md"
                },
                {
                    "name": "roSlideShow",
                    "description": "The Slide Show screen provides the ability to setup a photo slide show to playback a series of images",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roslideshow.md"
                },
                {
                    "name": "roSpringboardScreen",
                    "description": "The Springboard Screen shows detailed information about an individual piece of content and provides options for actions that may be taken on that content",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rospringboardscreen.md"
                },
                {
                    "name": "roTextScreen",
                    "description": "roTextScreen provides a way of displaying large amounts of scrollable text",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotextscreen.md"
                },
                {
                    "name": "roTextureManager",
                    "description": "The Texture Manager provides a set of API's for managing an roBitmap cache.",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotexturemanager.md"
                },
                {
                    "name": "roTextureRequest",
                    "description": "An roTextureRequest is used to make requests to the roTextureManager",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotexturerequest.md"
                },
                {
                    "name": "roUrlTransfer",
                    "description": "A roUrlTransfer object transfers data to or from remote servers specified by URLs",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rourltransfer.md"
                },
                {
                    "name": "roVideoPlayer",
                    "description": "The roVideoPlayer component implements a video player with more programmatic control, but less user control than the roVideoScreen component",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rovideoplayer.md"
                },
                {
                    "name": "roVideoScreen",
                    "description": "The Video Screen object implements the video playback portion of the user interface",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rovideoscreen.md"
                }
            ]
        },
        "ifImageCanvas": {
            "name": "ifImageCanvas",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifimagecanvas.md",
            "methods": [
                {
                    "name": "AllowUpdates",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "updatesEnabled",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "Set this flag to true in order to enable updates."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Turns updates on or off. Surrounding changes to several layers with AllowUpdates(false) and AllowUpdates(true) calls makes complex display modification atomic. This gives the application protection against the image canvas trying to render a partial update"
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roImageCanvas",
                    "description": "The roImageCanvas component provides an interface to render graphic elements at specific spots on the screen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roimagecanvas.md"
                }
            ]
        },
        "ifImageMetaData": {
            "name": "ifImageMetaData",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifimagemetadata.md",
            "methods": [
                {
                    "name": "SetUrl",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "url",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The URL of the image."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the URL to the image. Only file URLs are supported"
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roImageMetadata",
                    "description": "The roImageMetadata component provides developers access to image file metadata included in many .jpg EXIF headers"
                }
            ]
        },
        "ifInput": {
            "name": "ifInput",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifinput.md",
            "methods": [
                {
                    "name": "GetMessagePort",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "The message port value."
                        }
                    ],
                    "description": "Returns the message port (if any) currently associated with the object."
                },
                {
                    "name": "SetMessagePort",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "port",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "The port to be used to receive events."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the roMessagePort to be used to receive events."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roInput",
                    "description": "An roInput object can be used to receive events sent from a network client using the External Control Protocol (ECP), as described in External Control API",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roinput.md"
                }
            ]
        },
        "ifInt": {
            "name": "ifInt",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifint.md",
            "methods": [
                {
                    "name": "GetInt",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The integer value stored in the calling Integer object. "
                        }
                    ],
                    "description": "Gets the integer value stored in the calling Integer object. "
                },
                {
                    "name": "SetInt",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "value",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The integer value to be set on the calling Integer object."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the calling Integer object to the specified integer value. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roInt",
                    "description": "Object equivalent for intrinsic type Integer",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roint.md"
                }
            ]
        },
        "ifIntOps": {
            "name": "ifIntOps",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifintops.md",
            "methods": [
                {
                    "name": "ToStr",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "A decimal string."
                        }
                    ],
                    "description": "Returns the integer value formatted as a decimal string. No leading space is appended for non-negative numbers."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roInt",
                    "description": "Object equivalent for intrinsic type Integer",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roint.md"
                }
            ]
        },
        "ifKeyboardScreen": {
            "name": "ifKeyboardScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifkeyboardscreen.md",
            "methods": [
                {
                    "name": "SetTitle",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "title",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The title to be displayed on the keyboard screen."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the title for the screen to the specified string."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roKeyboardScreen",
                    "description": "The Keyboard Screen is designed to allow the user to enter an alpha-numeric string for searching, username/password registration or other purposes",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rokeyboardscreen.md"
                }
            ]
        },
        "ifList": {
            "name": "ifList",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iflist.md",
            "methods": [
                {
                    "name": "ResetIndex",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the index has been reset."
                        }
                    ],
                    "description": "Resets the current index or position in list to the head element."
                },
                {
                    "name": "AddTail",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "tval",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Dynamic"
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Adds an element to the tail of the list."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roList",
                    "description": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolist.md"
                },
                {
                    "name": "roXMLList",
                    "description": "Contains a list of roXML objects",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roxmllist.md"
                }
            ]
        },
        "ifListScreen": {
            "name": "ifListScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iflistscreen.md",
            "methods": [
                {
                    "name": "SetContent",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "contentList",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An roArray of roAssociativeArrays (Content Meta-Data objects) representing the information for each item to be displayed on screen."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ]
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roListScreen",
                    "description": "The List Screen provides a graphical display of content in a vertical list within a single screen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolistscreen.md"
                }
            ]
        },
        "ifListToArray": {
            "name": "ifListToArray",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iflisttoarray.md",
            "methods": [
                {
                    "name": "ToArray",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": " An element list as an array."
                        }
                    ],
                    "description": "Returns an roArray containing the same elements as the list."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roList",
                    "description": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolist.md"
                },
                {
                    "name": "roXMLList",
                    "description": "Contains a list of roXML objects",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roxmllist.md"
                }
            ]
        },
        "ifLocalization": {
            "name": "ifLocalization",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iflocalization.md",
            "methods": [
                {
                    "name": "GetPluralString",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "count",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer"
                                },
                                {
                                    "name": "zeroString",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String"
                                },
                                {
                                    "name": "oneString",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String"
                                },
                                {
                                    "name": "pluralString",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String"
                                }
                            ],
                            "returnType": "String",
                            "returnDescription": "The result of the operation. If count is 0, this returns zeroString. If count is 1, it returns oneString."
                        }
                    ],
                    "description": "Replaces \"^n\" in pluralString with count and returns the result."
                },
                {
                    "name": "GetLocalizedAsset",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "dirName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of a subdirectory in the directory pkg:/locale/XX_YY/ where XX_YY is the current language setting."
                                },
                                {
                                    "name": "fileName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the file."
                                }
                            ],
                            "returnType": "String",
                            "returnDescription": "An asset path. "
                        }
                    ],
                    "description": "Returns an appropriate asset path based on the user's currently selected language."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roLocalization",
                    "description": "The roLocalization object provides functions to assist in localization",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolocalization.md"
                }
            ]
        },
        "ifLongInt": {
            "name": "ifLongInt",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iflongint.md",
            "methods": [
                {
                    "name": "GetLongInt",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "LongInteger",
                            "returnDescription": "The longinteger value stored in the calling Loninteger object. "
                        }
                    ],
                    "description": "Gets the longinteger value stored in the calling Longinteger object. "
                },
                {
                    "name": "SetLongInt",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "value",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Longinteger",
                                    "description": "The longinteger value to be set on the calling Longinteger object."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the calling Longinteger object to the specified longinteger value. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roLongInteger",
                    "description": "Object equivalent for intrinsic type LongInteger",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolonginteger.md"
                }
            ]
        },
        "ifMessageDialog": {
            "name": "ifMessageDialog",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifmessagedialog.md",
            "methods": [
                {
                    "name": "SetTitle",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "Title",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The title to be displayed in the message dialog."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the title for the dialog to the specified string."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roMessageDialog",
                    "description": "The Message Dialog component is used to display a formatted, multi-line text message to the user",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/romessagedialog.md"
                }
            ]
        },
        "ifMessagePort": {
            "name": "ifMessagePort",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifmessageport.md",
            "methods": [
                {
                    "name": "WaitMessage",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "timeout",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The number of milliseconds to wait for a message. If this parameter is set to 0, this method waits indefinitely for a message, with no timeout.<br><br>The native <a href=\"/docs/references/brightscript/language/global-utility-functions.md#waittimeout-as-integer-port-as-object-as-object\">wait()</a> function can also be used to get the event object which WaitMessage() would return.  This means that the following two statements have the same effect:<br><pre><code>msg = port.WaitMessage(timeout)\nmsg = wait(timeout, port)\n</code></pre>"
                                }
                            ],
                            "returnType": "Dynamic",
                            "returnDescription": " If an event is available, it is returned. If the timeout expires, invalid is returned. "
                        }
                    ],
                    "description": "Waits until an event object is available or timeout milliseconds have passed."
                },
                {
                    "name": "GetMessage",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Dynamic",
                            "returnDescription": "An event object."
                        }
                    ],
                    "description": "If an event object is available, it is returned.  Otherwise invalid is returned.  The method returns immediately in either case and does not wait."
                },
                {
                    "name": "PeekMessage",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Dynamic",
                            "returnDescription": "An event object."
                        }
                    ],
                    "description": "This method is similar to the <a href=\"#getmessage-as-dynamic\">GetMessage()</a> method, but the returned object (if not invalid) remains in the message queue.  A later call to <a href=\"#waitmessagetimeout-as-integer-as-dynamic\">WaitMessage()</a>, <a href=\"#getmessage-as-dynamic\">GetMessage()</a> or PeekMessage() will return the same message."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roMessagePort",
                    "description": "A Message Port is the place messages (events) are sent",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/romessageport.md"
                }
            ]
        },
        "ifMicrophone": {
            "name": "ifMicrophone",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifmicrophone.md",
            "methods": [
                {
                    "name": "CanRecord",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the microphone can be opened."
                        }
                    ],
                    "description": "Indicates whether the platform and paired remote control can be requested to open the microphone."
                },
                {
                    "name": "SetPrompt",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "prompt",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The text to be displayed in the system microphone UI."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the text to be displayed in the system microphone UI."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roMicrophone",
                    "description": "The roMicrophone API allows channel applications to receive audio data from the user’s microphone-supported remote control device or mobile phone",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/romicrophone.md"
                }
            ]
        },
        "ifOneLineDialog": {
            "name": "ifOneLineDialog",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifonelinedialog.md",
            "methods": [
                {
                    "name": "SetTitle",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "title",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The text to be displayed on the screen."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the title to be displayed in the upper right-hand corner of the screen in the overhang area."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roOneLineDialog",
                    "description": "The One Line Dialog is a special type of dialog optimized for single line text",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roonelinedialog.md"
                }
            ]
        },
        "ifParagraphScreen": {
            "name": "ifParagraphScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifparagraphscreen.md",
            "methods": [
                {
                    "name": "AddHeaderText",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "text",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The text to be added to the header."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Adds a string of bold, high visibility text to the screen as a header to introduce the subsequent paragraph(s)."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roParagraphScreen",
                    "description": "The Paragraph Screen provides a way to display text and selection choices to the user",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roparagraphscreen.md"
                }
            ]
        },
        "ifPath": {
            "name": "ifPath",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifpath.md",
            "methods": [
                {
                    "name": "Change",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "path",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The new relative or absolute file system path to be used."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the path was successfully changed. "
                        }
                    ],
                    "description": "Modifies or changes the current path via the specified relative or absolute path."
                },
                {
                    "name": "IsValid",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the current path is valid. "
                        }
                    ],
                    "description": "Checks whether the current path is valid (the path is correctly formed). This does not check whether the file actually exists."
                },
                {
                    "name": "Split",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "An <a href=\"/docs/references/brightscript/components/roassociativearray.md\" title=\"roAssociativeArray\">roAssociativeArray</a> that contains the following keys: <table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>basename</td>\n<td>String</td>\n<td>The filename, without parent directories or extension.</td>\n</tr>\n<tr>\n<td>extension</td>\n<td>String</td>\n<td>The filename, with extension, without parent directories.</td>\n</tr>\n<tr>\n<td>filename</td>\n<td>String</td>\n<td>The filename.</td>\n</tr>\n<tr>\n<td>parent</td>\n<td>String</td>\n<td>The parent directory, or empty if in a root directory.</td>\n</tr>\n<tr>\n<td>phy</td>\n<td>String</td>\n<td>The PHY volume.</td>\n</tr>\n</tbody>\n</table>"
                        }
                    ]
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roPath",
                    "description": "The roPath component provides developers an easy way to create valid file system paths",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/ropath.md"
                }
            ]
        },
        "ifPinEntryDialog": {
            "name": "ifPinEntryDialog",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifpinentrydialog.md",
            "methods": [
                {
                    "name": "AddButton",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "id",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The ID of the button to be added to the pin entry dialog."
                                },
                                {
                                    "name": "title",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The text to be displayed on the button."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ]
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roPinEntryDialog",
                    "description": "The Pin Entry Dialog is designed to allow the user to enter a numeric PIN for purchasing content",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/ropinentrydialog.md"
                }
            ]
        },
        "ifPosterScreen": {
            "name": "ifPosterScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifposterscreen.md",
            "methods": [
                {
                    "name": "SetTitle",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "title",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The text to be used as the title for the poster screen."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the title for the poster screen."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roPosterScreen",
                    "description": "The Poster Screen provides a graphical display of poster art for content selection or can be used as a submenu to provide hierarchical structure to the application",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roposterscreen.md"
                }
            ]
        },
        "ifProgramGuide": {
            "name": "ifProgramGuide",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifprogramguide.md",
            "methods": [
                {
                    "name": "GetChannels",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "id",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The program ID containing the channels to be returned."
                                }
                            ],
                            "returnType": "Object"
                        }
                    ],
                    "description": "Returns the list of logical channel numbers on which the given program ID can be found."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roProgramGuide",
                    "description": "Represents Electronic Program Guide (EPG) information from the tuner.",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roprogramguide.md"
                }
            ]
        },
        "ifRegex": {
            "name": "ifRegex",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifregex.md",
            "methods": [
                {
                    "name": "IsMatch",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "str",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The string to be checked."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the string matches the matching pattern."
                        }
                    ],
                    "description": "Checks if a string matches the matching pattern."
                },
                {
                    "name": "Match",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "str",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The string to be searched for matching substrings."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An roArray of matched substrings from str. If no match was made, an empty array is returned. If a match was made, the entire match is returned in array[0]. If there are no parenthetical substrings this is the only entry in the array"
                        }
                    ],
                    "description": "If the matching pattern contains N parenthetical substrings, the relevant substrings are returned as an array of length N+1, where array[0] is again the entire match and each additional entry in the array is the match for the corresponding parenthetical expression. "
                },
                {
                    "name": "MatchAll",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "str",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The string to be searched for matching substrings."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An roArray where the first element is the full matched string and if there are any capture groups those are returned in subsequent array elements"
                        }
                    ],
                    "description": "Returns all matches of the specific regular expression pattern in the target string."
                },
                {
                    "name": "Replace",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "str",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The string to be searched."
                                },
                                {
                                    "name": "replacement",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The string to be used to replace matches in source string."
                                }
                            ],
                            "returnType": "String",
                            "returnDescription": "A string with the result of the replace operation. "
                        }
                    ],
                    "description": "Replaces the first occurrence of a matching pattern in str with replacement and returns the result. The replacement may contain numbered back-references to parenthetical substrings."
                },
                {
                    "name": "ReplaceAll",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "str",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The string to be searched."
                                },
                                {
                                    "name": "replacement",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The string to be used to replace matches in source string."
                                }
                            ],
                            "returnType": "String",
                            "returnDescription": "A string with the result of the replace all operation. "
                        }
                    ],
                    "description": "Replaces all occurrences of a matching pattern in str with replacement and returns the result. The replacement may contain numbered back-references to parenthetical substrings."
                },
                {
                    "name": "Split",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "str",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The string to be split."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An roList of substrings of str that were separated by strings which match the pattern in the CreateObject call. The separator strings are not returned. If no matches were found, the returned list contains a single item with the string unchanged."
                        }
                    ],
                    "description": "Uses the matching pattern as a separator and splits the string on the separator boundaries."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roRegex",
                    "description": "The roRegex component provides the powerful regular expression processing of the PCRE library to Brightscript strings",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roregex.md"
                }
            ]
        },
        "ifRegion": {
            "name": "ifRegion",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifregion.md",
            "methods": [
                {
                    "name": "GetBitmap",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "An roBitmap object of the bitmap. "
                        }
                    ],
                    "description": "Returns the roBitmap object of the bitmap to which this region refers. A region is always a section of a bitmap."
                },
                {
                    "name": "GetX",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The x coordinate value"
                        }
                    ],
                    "description": "Returns the x coordinate of the region in its bitmap."
                },
                {
                    "name": "GetY",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The y coordinate value"
                        }
                    ],
                    "description": "Returns the y coordinate of the region in its bitmap."
                },
                {
                    "name": "GetWidth",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The width of the region."
                        }
                    ],
                    "description": "Returns the width of the region."
                },
                {
                    "name": "GetHeight",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The height of the region."
                        }
                    ],
                    "description": "Returns the height of the region."
                },
                {
                    "name": "Offset",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "x",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Dynamic",
                                    "description": "The x-coordinate of the region."
                                },
                                {
                                    "name": "y",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Dynamic",
                                    "description": "The y-coordinate of the region."
                                },
                                {
                                    "name": "w",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Dynamic",
                                    "description": "The width of the region."
                                },
                                {
                                    "name": "h",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Dynamic",
                                    "description": "The height of the region."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Adds the passed parameters x,y, w, and h to the values of those roRegion fields. Respects the wrap setting when adjusting the fields by the offsets."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roRegion",
                    "description": "The roRegion component is used to represent a subsection of a bitmap",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roregion.md"
                }
            ]
        },
        "ifRegistry": {
            "name": "ifRegistry",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifregistry.md",
            "methods": [
                {
                    "name": "GetSpaceAvailable",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "An integer representing the the number of bytes available in the device registry."
                        }
                    ],
                    "description": "Returns the number of bytes available in the channel application's device registry (16K minus current file size). This function can be used, for example, to check the remaining space and remove older entries before writing newer ones. The following code demonstrates how to do this:"
                },
                {
                    "name": "GetSectionList",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "An roList with one entry for each registry section. Each registry section is an roString containing the name of the section. The section itself can be accessed by creating an <a href=\"/docs/references/brightscript/components/roregistrysection.md\" title=\"roRegistrySection\">roRegistrySection</a> object using that name."
                        }
                    ],
                    "description": "Returns the registry sections on the device. "
                },
                {
                    "name": "Delete",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "section",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The registry section to be deleted."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": " A flag indicating whether the registry section was successfully deleted."
                        }
                    ],
                    "description": "Deletes the specified registry section."
                },
                {
                    "name": "Flush",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the registry was successfully flushed."
                        }
                    ],
                    "description": "Flushes the contents of the registry out to persistent storage in order to permanently store a token or other setting on the device."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roRegistry",
                    "description": "The Registry is an area of non-volatile storage where a small number of persistent settings can be stored",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roregistry.md"
                }
            ]
        },
        "ifRegistrySection": {
            "name": "ifRegistrySection",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifregistrysection.md",
            "methods": [
                {
                    "name": "Read",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "key",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The key name to be read."
                                }
                            ],
                            "returnType": "String",
                            "returnDescription": "The value of the key."
                        }
                    ],
                    "description": "Reads and returns the value of the specified key."
                },
                {
                    "name": "ReadMulti",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "keysArray",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An array of strings containing the key names to be read."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An associative array containing the keys and corresponding values read from the registry."
                        }
                    ],
                    "description": "Reads multiple values from the registry. "
                },
                {
                    "name": "Write",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "key",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the key to be updated."
                                },
                                {
                                    "name": "value",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The updated value to be written to the specified key."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the value of the key was successfully updated. "
                        }
                    ],
                    "description": "Replaces the value of the specified key. Does not guarantee a commit to non-volatile storage until an explicit <a href=\"#flush-as-boolean\">Flush()</a> is done."
                },
                {
                    "name": "WriteMulti",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "roAssociativeArray",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An associative array with key-value pairs to be updated."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the values were successfully updated. "
                        }
                    ],
                    "description": "Writes multiple values to the registry. "
                },
                {
                    "name": "Delete",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "key",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The key to be deleted."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the key was successfully deleted. "
                        }
                    ],
                    "description": "Deletes the specified key."
                },
                {
                    "name": "Exists",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "key",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The key to be checked."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the key is in the registry. "
                        }
                    ],
                    "description": "Checks if the specified key resides in the registry."
                },
                {
                    "name": "Flush",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the registry was successfully flushed. "
                        }
                    ],
                    "description": "Flushes the contents of the registry out to persistent storage in order to permanently store a token or other setting on the device. Developers should explicitly this method after performing a write or series of writes. This method is transactional and all writes between calls to it are atomic."
                },
                {
                    "name": "GetKeyList",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "An roList containing one entry per registry key in this section."
                        }
                    ],
                    "description": "Gets a list of the keys in the registry."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roRegistrySection",
                    "description": "A Registry Section enables the organization of settings within the registry",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roregistrysection.md"
                }
            ]
        },
        "ifSGScreen": {
            "name": "ifSGScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsgscreen.md",
            "methods": [],
            "properties": [],
            "implementors": [
                {
                    "name": "roSGScreen",
                    "description": "The roSGScreen object is a SceneGraph canvas that displays the contents of a SceneGraph Scene node tree",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosgscreen.md"
                }
            ]
        },
        "ifRSA": {
            "name": "ifRSA",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifrsa.md",
            "methods": [
                {
                    "name": "SetPrivateKey",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "keyFileName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "Specifies the private key to be used for signing. The file name should specify a path, either in the package or a temp path."
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "\n<li>1 = The key is valid.</li>\n<li>0 = The file does not contain a valid key.</li>\n<li>-1 = The file was not found.</li>\n"
                        }
                    ],
                    "description": "Specifies the private key to use for signing. "
                },
                {
                    "name": "SetPublicKey",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "keyFileName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "Specifies the public key to be used for signing. The file name should specify a path, either in the package or a temp path."
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "\n<li>1 = The key is valid.</li>\n<li>0 = The file does not contain a valid key.</li>\n<li>-1 = The file was not found.</li>\n"
                        }
                    ],
                    "description": "Specifies the public key to be used for verification. "
                },
                {
                    "name": "SetDigestAlgorithm",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "digestAlgorithm",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String"
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the algorithm was successfully set (true) or the string was not recognized (false)."
                        }
                    ],
                    "description": "Specifies the digest algorithm to use for signing and verification. "
                },
                {
                    "name": "Sign",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "digest",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "roByteArray Object",
                                    "description": "The roByteArray to be signed. Errors will be printed in the BrightScript console. If the digest algorithm is not set (using SetDigestAlgorithm) before calling Sign(), the digest is not encapsulated. This would be equivalent to simply calling the openssl function RSA_private_encrypt()"
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An roByteArray containing the signature, or invalid if an error occurred. Typical values include the following: "
                        }
                    ],
                    "description": "Generates a signature based on the specified digest."
                },
                {
                    "name": "Verify",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "digest",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "roByteArray Object",
                                    "description": "The digest to be verified."
                                },
                                {
                                    "name": "signature",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "roByteArray Object",
                                    "description": "The signature to be verified."
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "Indicates the result of the validation. This may be one of the following values:"
                        }
                    ],
                    "description": "Verifies the given digest and signature. Both digest and signature should be roByteArrays. If the digest algorithm is not set (using the <a href=\"#setdigestalgorithmdigestalgorithm-as-string-as-boolean\">SetDigestAlgorithm</a> method) before calling Verify(), the digest associated with the signature is not expected to be encapsulated. This would be equivalent to simply calling the openssl function RSA_public_decrypt(signature) and then comparing the result with the digest"
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roRSA",
                    "description": "The RSA component provides an interface to the OpenSSL RSA library of signing algorithms",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rorsa.md"
                }
            ]
        },
        "ifScreen": {
            "name": "ifScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifscreen.md",
            "methods": [
                {
                    "name": "SwapBuffers",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Void"
                        }
                    ],
                    "description": "This function first operates the same as a call to <a href=\"/docs/references/brightscript/interfaces/ifdraw2d.md\" title=\"ifDraw2D\">ifDraw2D</a>, completing all queued drawing operations on the back buffer (draw surface)."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roScreen",
                    "description": "The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roscreen.md"
                }
            ]
        },
        "ifSearchhistory": {
            "name": "ifSearchhistory",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsearchhistory.md",
            "methods": [
                {
                    "name": "Clear",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Clears all elements from the search history."
                },
                {
                    "name": "Push",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "searchTerm",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The search term to be pushed onto the search history stack."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Pushes a new search term onto the search history stack."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roSearchHistory",
                    "description": "The Search History object implements the system-wide storage of search terms for use in implementing the roSearchScreen",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosearchhistory.md"
                }
            ]
        },
        "ifSearchScreen": {
            "name": "ifSearchScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsearchscreen.md",
            "methods": [
                {
                    "name": "SetSearchTermHeaderText",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "text",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The text to be displayed for the header in the list are."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the text to be displayed for the header in the list area. This area could contain a list of search terms previously used as a search history or partial results in the case of a progressive disclosure search"
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roSearchScreen",
                    "description": "The Search Screen provides a standard way to allow users to enter text for searching",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosearchscreen.md"
                }
            ]
        },
        "ifSetMessagePort": {
            "name": "ifSetMessagePort",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsetmessageport.md",
            "methods": [
                {
                    "name": "SetMessagePort",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "Port",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "The roMessagePort to be used for screen events."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the <a href=\"/docs/references/brightscript/components/romessageport.md\" title=\"roMessagePort\">roMessagePort</a> to be used for all events from the screen."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roHdmiStatus",
                    "description": "The HDMI status component provides an interface to the current HDMI operational status",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rohdmistatus.md"
                },
                {
                    "name": "roScreen",
                    "description": "The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roscreen.md"
                },
                {
                    "name": "roUrlTransfer",
                    "description": "A roUrlTransfer object transfers data to or from remote servers specified by URLs. It can perform mutual authentication with a web server",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rourltransfer.md"
                },
                {
                    "name": "roTextToSpeech",
                    "description": "The roTextToSpeech component provides text to speech capabilities to applications",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotexttospeech.md"
                }
            ]
        },
        "ifSGNodeBoundingRect": {
            "name": "ifSGNodeBoundingRect",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsgnodeboundingrect.md",
            "methods": [
                {
                    "name": "boundingRect",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Dynamic",
                            "returnDescription": "An associative array with the node bounding rectangle."
                        }
                    ],
                    "description": "Returns the node bounding rectangle. The bounding rectangle of a node is the axis-aligned rectangle computed by transforming the local bounding rectangle of the node by the node transformation matrix. The resulting rectangle corresponds to the node local bounding rectangle transformed into its parent node local coordinate system."
                },
                {
                    "name": "localBoundingRect",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Dynamic",
                            "returnDescription": "An associative array with the node local bounding rectangle."
                        }
                    ],
                    "description": "Returns the node local bounding rectangle. The local bounding rectangle of a node is the axis-aligned rectangle, that includes the union of the bounding rectangle of the geometry of the node, and the bounding rectangles of all of the node children, transformed into the local coordinate system of the node."
                },
                {
                    "name": "sceneBoundingRect",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Dynamic",
                            "returnDescription": "An associative array with the bounding rectangle."
                        }
                    ],
                    "description": "Returns the bounding rectangle for scene components (component nodes extended from a <a href=\"/docs/references/scenegraph/scene.md\" title=\"Scene\">Scene</a> or <a href=\"/docs/references/scenegraph/sliding-panels-nodes/overhangpanelsetscene.md\" title=\"OverhangPanelSetScene\">OverhangPanelSetScene</a> node class)."
                },
                {
                    "name": "localSubBoundingRect",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "itemnumber",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The index of the grid item for the local bounding rectangle to be returned in the following format: <em>rowindex</em>_<em>itemindex</em>."
                                }
                            ],
                            "returnType": "Dynamic",
                            "returnDescription": "An associative array with the local bounding rectangle of the node's identified sub part."
                        }
                    ],
                    "description": "Returns the local bounding rectangle of this node's identified sub part in the node's local coordinate system. If the subpart does not exist, the node's local bounding rectangle is returned."
                },
                {
                    "name": "subBoundingRect",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "itemnumber",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The index of the grid item for the local bounding rectangle to be returned in the following format: <em>rowindex</em>_<em>itemindex</em>."
                                }
                            ],
                            "returnType": "Dynamic",
                            "returnDescription": "An associative array with the bounding rectangle. "
                        }
                    ],
                    "description": "Returns the bounding rectangle of this node's identified sub part, as transformed by this node's transformation matrix, in its parent node's coordinate system. If the subpart does not exist, the node's bounding rectangle is returned."
                },
                {
                    "name": "sceneSubBoundingRect",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "itemnumber",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The index of the grid item for the bounding rectangle to be returned in the following format: <em>rowindex</em>_<em>itemindex</em>."
                                }
                            ],
                            "returnType": "Dynamic",
                            "returnDescription": "An associative array with the bounding rectangle. "
                        }
                    ],
                    "description": "Returns the bounding rectangle of this node's subpart in its Scene's coordinate system If the subpart does not exist or if the node is not an ancestor of a Scene node, this will return the node's bounding rectangle."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosgnode.md"
                }
            ]
        },
        "ifSGNodeChildren": {
            "name": "ifSGNodeChildren",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsgnodechildren.md",
            "methods": [
                {
                    "name": "createChild",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "nodeType",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The node class to be created."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "The child node that was created."
                        }
                    ],
                    "description": "Creates a child node of type nodeType, and adds the new node to the end of the subject node list of children."
                },
                {
                    "name": "removeChildIndex",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "index",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The position in the tree of the child node to be removed."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the child node that was successfully removed."
                        }
                    ],
                    "description": "If the subject node has a child node in the index position, removes that child node from the subject node list of children."
                },
                {
                    "name": "getChild",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "index",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The index of the child node to be retrieved."
                                }
                            ],
                            "returnType": "Dynamic",
                            "returnDescription": "The child node at the index position; otherwise, \"invalid\"."
                        }
                    ],
                    "description": "Returns the child node specified by the index."
                },
                {
                    "name": "getParent",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "roSGNode",
                            "returnDescription": "The parent node; otherwise, \"invalid\"."
                        }
                    ],
                    "description": "Returns the parent node of a node has been added to a list of children."
                },
                {
                    "name": "getChildCount",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The number of child nodes in the tree."
                        }
                    ],
                    "description": "Returns the current number of children in the subject node list of children. This is always a non-negative number."
                },
                {
                    "name": "appendChildren",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "child_nodes",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An roArray of child nodes to be appended to the subject node."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the children nodes were successfully appended."
                        }
                    ],
                    "description": "Appends an array of children nodes to the subject node."
                },
                {
                    "name": "insertChildren",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "child_nodes",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An roArray of child nodes to be inserted in the tree."
                                },
                                {
                                    "name": "index",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The position in the tree where to insert the child nodes."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the children nodes were successfully inserted."
                        }
                    ],
                    "description": "Inserts an array of child nodes to the subject node, starting at a specific position."
                },
                {
                    "name": "removeChildren",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "child_nodes",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An roArray of child nodes to removed from the tree"
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the children nodes were successfully removed."
                        }
                    ],
                    "description": "Removes an array of child nodes from the subject node."
                },
                {
                    "name": "removeChildrenIndex",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "num_children",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The number of child nodes to be removed."
                                },
                                {
                                    "name": "index",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The starting position in the child node tree where the specified number of nodes are to be removed."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the children nodes were successfully removed."
                        }
                    ],
                    "description": "Removes a specific number of child nodes from the subject node starting at a specific position."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosgnode.md"
                }
            ]
        },
        "ifSGNodeDict": {
            "name": "ifSGNodeDict",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsgnodedict.md",
            "methods": [
                {
                    "name": "findNode",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "name",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the node to be retrieved."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "The node that is a descendant of the nearest component ancestor of the subject node."
                        }
                    ],
                    "description": "Returns the node that is a descendant of the nearest component ancestor of the subject node (possibly the subject node itself) and whose id field is set to name. The search for the descendant node is a breadth-first search that includes child nodes in nodes that are declared as custom components defined in other XML component files. These together allow finding siblings and cousins of a node within the context of a component. If a node with the specified name is not found, an invalid object is returned"
                },
                {
                    "name": "subtype",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "The subtype of the subject node. "
                        }
                    ],
                    "description": "Returns the subtype of the subject node as specified when it was created."
                },
                {
                    "name": "parentSubtype",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "nodeType",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The node type of the parent node."
                                }
                            ],
                            "returnType": "String",
                            "returnDescription": "The subtype of the parent node."
                        }
                    ],
                    "description": "Returns the subtype of the parent of the nodeType in the SceneGraph node class hierarchy. "
                },
                {
                    "name": "isSubtype",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "nodeType",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The node type of the subject node."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the subtype of the subject node is a descendant of the subtype nodeType."
                        }
                    ],
                    "description": "Checks whether the subtype of the subject node is a descendant of the subtype nodeType in the SceneGraph node class hierarchy."
                },
                {
                    "name": "isSameNode",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "RoSGNode",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object"
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the nodes refer to the same SceneGraph node object."
                        }
                    ],
                    "description": "Checks whether a specific roSGNode refers to the same SceneGraph node object as the subject node."
                },
                {
                    "name": "clone",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "isDeepCopy",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean"
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "A node tree."
                        }
                    ],
                    "description": "Returns a copy of the entire node tree or just a shallow copy."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosgnode.md"
                }
            ]
        },
        "ifSGNodeField": {
            "name": "ifSGNodeField",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsgnodefield.md",
            "methods": [
                {
                    "name": "setField",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fieldName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the field to be updated."
                                },
                                {
                                    "name": "value",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "The updated value for the field."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the field was successfully updated."
                        }
                    ],
                    "description": "Sets the value of a subject node field. This will fail and stop script execution if the value is not of the appropriate type."
                },
                {
                    "name": "observeField",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fieldName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the field to be monitored."
                                },
                                {
                                    "name": "functionName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the method to be executed when the value of the field   changes."
                                }
                            ],
                            "returnDescription": "A flag indicating whether the value of the field being monitored changes.  "
                        }
                    ],
                    "description": "Calls a function when a field of the subject node changes. The function called must be in the scope of the current component."
                },
                {
                    "name": "observeField",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fieldName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the field to be monitored."
                                },
                                {
                                    "name": "port",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "The <a href=\"/docs/references/brightscript/components/romessageport.md\" title=\"roMessagePort\">roMessagePort</a> to receive a <a href=\"/docs/references/brightscript/components/rosgnode.md\" title=\"roSGNodeEvent\">roSGNodeEvent</a> message when the value of the field changes."
                                }
                            ],
                            "returnDescription": "A flag indicating whether the value of the field being monitored changes. "
                        }
                    ],
                    "description": "This overloaded form sends an <a href=\"/docs/references/brightscript/components/rosgnode.md\" title=\"roSGNodeEvent\">roSGNodeEvent</a> message to the <a href=\"/docs/references/brightscript/components/romessageport.md\" title=\"roMessagePort\">roMessagePort</a> identified by port when the subject node field identified by fieldName changes value. "
                },
                {
                    "name": "queueFields",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "queueNode",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "A flag enabling queuing on the node."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating the current state of <strong>queueNode</strong>."
                        }
                    ],
                    "description": "Makes subsequent operations on the node fields to queue on the node itself rather than on the <a href=\"/docs/references/scenegraph/scene.md\" title=\"Scene\">Scene</a> node render thread. This prevents the operations from being executed immediately."
                },
                {
                    "name": "addFields",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fields",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An roAssociativeArray containing key-value pairs for the fields to be added."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the fields have been successfully added."
                        }
                    ],
                    "description": "Adds the field(s) and corresponding field value(s) defined as key-value pair(s) in the associative array fields to the subject node. The types of the added fields are determined by the values which correspond to the allowable types for an <code>&lt;interface&gt;</code> field."
                },
                {
                    "name": "getField",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fieldName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the field to be retrieved."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "A typed value."
                        }
                    ],
                    "description": "Returns the appropriately-typed value from the specified field of the subject node."
                },
                {
                    "name": "addField",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fieldName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the field to be added."
                                },
                                {
                                    "name": "type",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The type of the field to be added.<br><br>Type declarations must be lowercase or the field will not be added to the node. For example, declaring \"Boolean\" as the type will prevent the field from being added."
                                },
                                {
                                    "name": "alwayNotify",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "Specifies whether observers of the field are triggered when the field value is updated to the same or new value (true), or only when the field changes to a new value (false)."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the field have been successfully added."
                        }
                    ],
                    "description": "Adds a field with the specified name and type to the subject node. The added field is initialized to the default value for the type."
                },
                {
                    "name": "getFieldType",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fieldName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the field to have its type retrieved."
                                }
                            ],
                            "returnType": "String",
                            "returnDescription": "The field type. "
                        }
                    ],
                    "description": "Returns the type of a specific field of the subject node."
                },
                {
                    "name": "setFields",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fields",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An roAssociativeArray containing key-value pairs for the fields to be updated."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the fields have been successfully updated."
                        }
                    ],
                    "description": "Sets the values for one or more fields."
                },
                {
                    "name": "removeFields",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fieldNames",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An roArray containing the names of the fields to be removed."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the fields have been successfully removed."
                        }
                    ],
                    "description": "Removes one or more fields from the subject node. "
                },
                {
                    "name": "unobserveFieldScoped",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fieldName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the field to no longer be monitored."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether this operation was successful. "
                        }
                    ],
                    "description": "Removes the connection between the observing component and the observed node's field. "
                },
                {
                    "name": "removeField",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fieldName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the field to be removed."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the field has been successfully removed."
                        }
                    ],
                    "description": "Removes a field from the subject node. Fields defined in <a href=\"/docs/developer-program/getting-started/architecture/content-metadata.md\" title=\" Content Meta-Data\">content metadata</a> and the related SceneGraph node class metadata bindings can be removed, but will be dynamically re-added at any time they are explicitly accessed."
                },
                {
                    "name": "observeFieldScoped",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fieldName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the field to be monitored."
                                },
                                {
                                    "name": "functionName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the method to be executed when the value of the field   changes."
                                }
                            ],
                            "returnDescription": "A flag indicating whether the value of the field has changed. "
                        }
                    ],
                    "description": "Sets up a connection between the observed node's field and the current component from which this call is made. This method is similar to the <a href=\"/docs/references/brightscript/interfaces/ifsgnodefield.md#observefieldfieldname-as-string-functionname-as-string-as-boolean\" title=\"observeField(fieldName as String, functionName as String)\">observeField()</a> method."
                },
                {
                    "name": "observeFieldScoped",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fieldName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the field to be monitored."
                                },
                                {
                                    "name": "port",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "The <a href=\"/docs/references/brightscript/components/romessageport.md\" title=\"roMessagePort\">roMessagePort</a> to receive a <a href=\"/docs/references/brightscript/components/rosgnode.md\" title=\"roSGNodeEvent\">roSGNodeEvent</a> message when the value of the field changes."
                                }
                            ],
                            "returnDescription": "A flag indicating whether the value of the field has changed. "
                        }
                    ],
                    "description": "Sets up a connection between the observed node's field and the current component from which this call is made. This method is similar to the <a href=\"/docs/references/brightscript/interfaces/ifsgnodefield.md#observefieldfieldname-as-string-functionname-as-string-as-boolean\" title=\"observeField(fieldName as String, functionName as String)\">observeField()</a> method."
                },
                {
                    "name": "unobserveField",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fieldName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the field to no longer be monitored."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether this operation was successful. "
                        }
                    ],
                    "description": "Removes the previously established connections between the subject node field identified by fieldName and any callback functions or message ports."
                },
                {
                    "name": "getFields",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "An roAssociativeArray containing key-value pairs with the element names and values. "
                        }
                    ],
                    "description": "Returns the names and values of all the fields in the node."
                },
                {
                    "name": "hasField",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "fieldName",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The name of the field to be checked for whether it exists in the node."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the subject node has a field whose name exactly matches fieldName, or whose fully lowercase analog is identical to that of fieldName."
                        }
                    ],
                    "description": "Checks whether a field exists in the node. "
                },
                {
                    "name": "getFieldTypes",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "An roAssociativeArray containing key-value pairs with the element names and types. "
                        }
                    ],
                    "description": "Returns the names and types of all the fields in the node."
                },
                {
                    "name": "threadinfo",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "An roAssociatveArray with the following information:"
                        }
                    ],
                    "description": "A runtime debugging method for helping minimize Rendezvous spread.  This method can be called on any node from any thread."
                },
                {
                    "name": "signalBeacon",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "beacon",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String"
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "When you fire a launch event, the system will return an integer indicating the result of its signaling:"
                        }
                    ],
                    "description": "Signals start and/or stop points for measuring channel launch and Electronic Program Grid (EPG) launch times.                                                                                                                     "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosgnode.md"
                }
            ]
        },
        "ifSGNodeFocus": {
            "name": "ifSGNodeFocus",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsgnodefocus.md",
            "methods": [
                {
                    "name": "setFocus",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "on",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "True = Sets the current remote control focus to the subject node. This also automatically removes focus from the node on which it was previously set. <br>False = Removes focus from the subject node if it had it. Setting the remote control focus to false is rarely necessary, and can lead to unexpected behavior."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether focus on the subject node has successfully been updated. "
                        }
                    ],
                    "description": "Sets the current remote control focus to the subject node."
                },
                {
                    "name": "hasFocus",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the subject node has the remote control focus."
                        }
                    ],
                    "description": "Checks whether the subject node has the remote control focus."
                },
                {
                    "name": "isInFocusChain",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the subject node or any of its descendants in the SceneGraph node tree have the remote control focus."
                        }
                    ],
                    "description": "Checks whether the subject node or any of its descendants in the SceneGraph node tree have remote control focus."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosgnode.md"
                }
            ]
        },
        "ifSGNodeHttpAgentAccess": {
            "name": "ifSGNodeHttpAgentAccess",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsgnodehttpagentaccess.md",
            "methods": [
                {
                    "name": "getHttpAgent",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "The roHttpAgent object for the node, which may be one of the following:"
                        }
                    ],
                    "description": "Returns the roHttpAgent object for the node."
                },
                {
                    "name": "setHttpAgent",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "HTTP_agent",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "The roHttpAgent object to be set for the node."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the roHttpAgent object was successfully set."
                        }
                    ],
                    "description": "Sets an roHttpAgent object for the node. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosgnode.md"
                }
            ]
        },
        "ifSlideshow": {
            "name": "ifSlideshow",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifslideshow.md",
            "methods": [
                {
                    "name": "SetContentList",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "contentList",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An <a href=\"/docs/references/brightscript/components/roarray.md\" title=\"roArray\">roArray</a> of <a href=\"/docs/references/brightscript/components/roassociativearray.md\" title=\"roAssociativeArrays\">roAssociativeArrays</a> (<a href=\"/docs/developer-program/getting-started/architecture/content-metadata.md\" title=\"Content Meta-Data\">Content Meta-Data</a> objects) representing the information for each title to be displayed on screen"
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Set the content to be played by the slide show. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roSlideShow",
                    "description": "The Slide Show screen provides the ability to setup a photo slide show to playback a series of images",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roslideshow.md"
                }
            ]
        },
        "ifSocket": {
            "name": "ifSocket",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocket.md",
            "methods": [
                {
                    "name": "Send",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "data",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "A <a href=\"/docs/references/brightscript/components/robytearray.md\" title=\"roByteArray\">roByteArray</a> containing the data to be sent."
                                },
                                {
                                    "name": "startIndex",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The index of the byte array from which to start sending data."
                                },
                                {
                                    "name": "length",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The amount of data to be sent to the socket."
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "The number of bytes sent."
                        }
                    ],
                    "description": "Sends up to length bytes of data to the socket."
                },
                {
                    "name": "SendStr",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "data",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "A string containing the data to be sent."
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "The number of bytes sent."
                        }
                    ],
                    "description": "Sends the whole string to the socket, if possible."
                },
                {
                    "name": "Receive",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "data",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "A <a href=\"/docs/references/brightscript/components/robytearray.md\" title=\"roByteArray\">roByteArray</a> containing the data to be stored."
                                },
                                {
                                    "name": "startIndex",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The index of the byte array from which to start reading data."
                                },
                                {
                                    "name": "length",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The amount of data to be read from the socket."
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "The number of bytes read."
                        }
                    ],
                    "description": "Reads data from the socket. "
                },
                {
                    "name": "ReceiveStr",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "length",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The amount of data to be read from the socket."
                                }
                            ],
                            "returnType": "String",
                            "returnDescription": "The received byte length string.  If no bytes are received, the string is empty."
                        }
                    ],
                    "description": "Reads data from the socket and stores the result in a string."
                },
                {
                    "name": "Close",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Performs an orderly close of socket. After a close, most operations on the socket will return invalid."
                },
                {
                    "name": "SetAddress",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "sockAddr",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An roSocketAddress."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the address was successfully set. "
                        }
                    ],
                    "description": "Sets the address using a BSD bind() call"
                },
                {
                    "name": "GetAddress",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "roSocketAddress Object."
                        }
                    ],
                    "description": "Returns the roSocketAddress object bound to this socket."
                },
                {
                    "name": "SetSendToAddress",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "sockAddr",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An roSocketAddress."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the address was successfully stored as the first half of underlying BSD sendto() call."
                        }
                    ],
                    "description": "Sets the remote address for next message to be sent."
                },
                {
                    "name": "GetSendToAddress",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "The roSocketAddress for the remote address of the next message to be sent."
                        }
                    ],
                    "description": "Returns the roSocketAddress for the remote address of the next message to be sent. This method can also be used to return the remote address on newly accepted sockets."
                },
                {
                    "name": "GetReceivedFromAddress",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "The roSocketAddress for the remote address of the last message received."
                        }
                    ],
                    "description": "Returns the roSocketAddress for the remote address of the last message received via the <a href=\"#receivedata-as-object-startindex-as-integer-length-as-integer-as-integer\">receive()</a> method. This method can also be used to return the remote address on newly accepted sockets."
                },
                {
                    "name": "GetCountRcvBuf",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "Number of bytes."
                        }
                    ],
                    "description": "Returns the number of bytes in the receive buffer."
                },
                {
                    "name": "GetCountSendBuf",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "Number of bytes."
                        }
                    ],
                    "description": "Returns the number of bytes in the send buffer."
                },
                {
                    "name": "Status",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "This method returns 0 if the last operation was successful or an error number if it failed."
                        }
                    ],
                    "description": "Indicates whether the last operation was successful."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roDataGramSocket",
                    "description": "The roDataGramSocket component enables Brightscript apps to send and receive UDP packets",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodatagramsocket.md"
                },
                {
                    "name": "roStreamSocket",
                    "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rostreamsocket.md"
                }
            ]
        },
        "ifSocketAddress": {
            "name": "ifSocketAddress",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketaddress.md",
            "methods": [
                {
                    "name": "SetAddress",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "address",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The string consists of a hostname, optionally followed by a colon and a decimal port number. The hostname may be either dotted quad (such as \"192.168.1.120\") or a DNS name (such as \"roku.com\"). If a name is given, a DNS lookup is performed to convert it to dotted quad. Use IsAddressValid() to determine the result of the DNS lookup. Example: \"192.168.1.120:8888\" or \"roku.com\"."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the IPV4 address was successfully set."
                        }
                    ],
                    "description": "Sets the IPV4 address. "
                },
                {
                    "name": "GetAddress",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "The IPV4 address."
                        }
                    ],
                    "description": "Returns the IPV4 address in dotted quad format (for example, \"192.168.1.120:8888\")."
                },
                {
                    "name": "SetHostName",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "hostname",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The hostname to be used."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the hostname was successfully set."
                        }
                    ],
                    "description": "Sets the hostname. The port number is unchanged. "
                },
                {
                    "name": "GetHostName",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "The hostname. "
                        }
                    ],
                    "description": "Returns the hostname."
                },
                {
                    "name": "SetPort",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "port",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The port number to be used."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the port number was successfully set."
                        }
                    ],
                    "description": "Sets the port number. The hostname is unchanged. "
                },
                {
                    "name": "GetPort",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The port number. "
                        }
                    ],
                    "description": "Returns the port number."
                },
                {
                    "name": "IsAddressValid",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the component contains a valid IP address."
                        }
                    ],
                    "description": "Checks whether the component contains a valid IP address."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roSocketAddress",
                    "description": "The roSocketAddress is used by the roStreamSocket and roDataGramSocket components for TCP and UDP traffic respectively",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosocketaddress.md"
                }
            ]
        },
        "ifSocketAsync": {
            "name": "ifSocketAsync",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketasync.md",
            "methods": [
                {
                    "name": "IsReadable",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether underlying select determines non-blocking read is possible."
                        }
                    ],
                    "description": "Checks whether underlying select determines non-blocking read is possible."
                },
                {
                    "name": "IsWritable",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether underlying select determines non-blocking write is possible."
                        }
                    ],
                    "description": "Checks whether underlying select determines non-blocking write is possible."
                },
                {
                    "name": "IsException",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether underlying select determines non-blocking read of OOB data is possible."
                        }
                    ],
                    "description": "Checks whether underlying select determines non-blocking read of OOB data is possible."
                },
                {
                    "name": "NotifyReadable",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "enable",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "A flag specifying whether roSocketEvent events are to be sent when the underlying socket becomes readable."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Enables roSocketEvent events to be sent via the message port when the underlying socket becomes readable."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roDataGramSocket",
                    "description": "The roDataGramSocket component enables Brightscript apps to send and receive UDP packets",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodatagramsocket.md"
                },
                {
                    "name": "roStreamSocket",
                    "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rostreamsocket.md"
                }
            ]
        },
        "ifSocketCastOption": {
            "name": "ifSocketCastOption",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketcastoption.md",
            "methods": [
                {
                    "name": "GetBroadcast",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether broadcast messages may be sent or received."
                        }
                    ],
                    "description": "Checks whether broadcast messages may be sent or received."
                },
                {
                    "name": "SetBroadcast",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "enable",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "A flag specifying whether broadcast messages may be sent or received."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether this operation succeeded."
                        }
                    ],
                    "description": "Enables broadcast messages to be sent or received. "
                },
                {
                    "name": "JoinGroup",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "ipAddress",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An <a href=\"/docs/references/brightscript/components/rostreamsocket.md\" title=\"roSocketAddress\">roSocketAddress</a> representing the group to be joined. IPV4 multicast addresses are in the range of 224.0.0.0 through 239.255.255.255."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether this operation was successful."
                        }
                    ],
                    "description": "Joins a specific multicast group."
                },
                {
                    "name": "DropGroup",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "ipAddress",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An <a href=\"/docs/references/brightscript/components/rostreamsocket.md\" title=\"roSocketAddress\">roSocketAddress</a> representing the group to leave. IPV4 multicast addresses are in the range of 224.0.0.0 through 239.255.255.255."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether this operation was successful."
                        }
                    ],
                    "description": "Drops out of a specific multicast group."
                },
                {
                    "name": "GetMulticastLoop",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether multicast messages are enabled for local loopback. If this flag is true, multicast message sent locally are to be received locally."
                        }
                    ],
                    "description": "Checks whether multicast messages are enabled for local loopback."
                },
                {
                    "name": "SetMulticastLoop",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "enable",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "A flag specifying whether local loopback of multicast messages; otherwise do not send or receive broadcast messages."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether this operation was successful."
                        }
                    ],
                    "description": "Enables local loopback of multicast messages."
                },
                {
                    "name": "GetMulticastTTL",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The multicast messages value."
                        }
                    ],
                    "description": "Returns the TTL integer value for multicast messages. This is the number of hops a packet is allowed before a router drops the packet."
                },
                {
                    "name": "SetMulticastTTL",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "ttl",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The number of hops a packet is allowed before a router drops the packet"
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the TTL value was successfully set."
                        }
                    ],
                    "description": "Sets the TTL integer value for multicast messages. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roDataGramSocket",
                    "description": "The roDataGramSocket component enables Brightscript apps to send and receive UDP packets",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodatagramsocket.md"
                }
            ]
        },
        "ifSocketConnection": {
            "name": "ifSocketConnection",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketconnection.md",
            "methods": [
                {
                    "name": "Listen",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "backlog",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The limit for the queue of incoming connections"
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether listening can be done (generally, if bound address is valid)."
                        }
                    ],
                    "description": "Puts the socket into the listen state. "
                },
                {
                    "name": "IsListening",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the <a href=\"#listenbacklog-as-integer-as-boolean\">listen()</a> method has been successfully called on this socket."
                        }
                    ],
                    "description": "Checks whether if the <a href=\"#listenbacklog-as-integer-as-boolean\">listen()</a> method has been successfully called on this socket."
                },
                {
                    "name": "Connect",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether a socket connection has successfully been created. The connection might still not be complete if the socket is non-blocking"
                        }
                    ],
                    "description": "Establishes a connection. "
                },
                {
                    "name": "Accept",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "An roStreamSocket if the connection is pending; invalid otherwise. Use status to distinguish among success (eSuccess() or isConnected()), not ready (eOK()), and error."
                        }
                    ],
                    "description": "Accepts incoming requests."
                },
                {
                    "name": "IsConnected",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether a connection has been established or accepted on this socket."
                        }
                    ],
                    "description": "Checks whether a <a href=\"#connect-as-boolean\">connect</a> or <a href=\"#accept-as-object\">accept</a> function has been completed on this socket. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roStreamSocket",
                    "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rostreamsocket.md"
                }
            ]
        },
        "ifSocketConnectionoption": {
            "name": "ifSocketConnectionoption",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketconnectionoption.md",
            "methods": [
                {
                    "name": "GetKeepAlive",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether keep alive is set. "
                        }
                    ],
                    "description": "Checks whether keep alive is set. If keep alive is set, occasional no-data packets are sent to keep the connection alive. "
                },
                {
                    "name": "SetKeepAlive",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "enable",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "A flag specifying whether keep alive is enabled."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether keep alive was successfully set."
                        }
                    ],
                    "description": "Sends no-data packets to keep the connection alive. "
                },
                {
                    "name": "GetLinger",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The max time in seconds."
                        }
                    ],
                    "description": "Returns the max time in seconds that the socket close() blocks to allow send data to be flushed in synchronous mode."
                },
                {
                    "name": "SetLinger",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "time",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The max time."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the linger was successfully set."
                        }
                    ],
                    "description": "Sets the max time in seconds that the socket close() blocks to allow send data to be flushed in synchronous mode. "
                },
                {
                    "name": "GetMaxSeg",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The segment size."
                        }
                    ],
                    "description": "Returns the max TCP segment size."
                },
                {
                    "name": "SetMaxSeg",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "time",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The max TCP segment size."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the max TCP segment size was successfully set."
                        }
                    ],
                    "description": "Sets the max TCP segment size. "
                },
                {
                    "name": "GetNoDelay",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the no delay property is enabled. "
                        }
                    ],
                    "description": "Checks whether the no delay property is enabled on the socket. This means that data is sent as soon as it is available rather than once there is enough data to fill a segment."
                },
                {
                    "name": "SetNoDelay",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "enable",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "A flag specifying whether the no delay property is enabled."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the no delay property was successfully set. "
                        }
                    ],
                    "description": "Enables the no delay property on the socket. This means that data is sent as soon as it is available rather than once there is enough data to fill a segment."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roStreamSocket",
                    "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rostreamsocket.md"
                }
            ]
        },
        "ifSocketConnectionstatus": {
            "name": "ifSocketConnectionstatus",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketconnectionstatus.md",
            "methods": [
                {
                    "name": "eConnAborted",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether an ECONNABORTED error has occurred. "
                        }
                    ],
                    "description": "Checks whether a connection aborted error (ECONNABORTED) has occurred. "
                },
                {
                    "name": "eConnRefused",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether an ECONNREFUSED error has occurred. "
                        }
                    ],
                    "description": "Checks whether a connection refused (ECONNREFUSED) has occurred. "
                },
                {
                    "name": "eConnReset",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether an ECONNRESET error has occurred. "
                        }
                    ],
                    "description": "Checks whether a connection reset error (ECONNRESET) has occurred. "
                },
                {
                    "name": "eIsConn",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether an EISCONN error has occurred. "
                        }
                    ],
                    "description": "Checks whether an is connected error (EISCONN) has occurred. "
                },
                {
                    "name": "eNotConn",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether an ENOTCONN error has occurred. "
                        }
                    ],
                    "description": "Checks whether a not connected error (ENOTCONN) has occurred. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roStreamSocket",
                    "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rostreamsocket.md"
                }
            ]
        },
        "ifSocketOption": {
            "name": "ifSocketOption",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketoption.md",
            "methods": [
                {
                    "name": "GetTTL",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The TTL value."
                        }
                    ],
                    "description": "Returns the TTL (Time To Live) value for all IP packets on the socket."
                },
                {
                    "name": "SetTTL",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "ttl",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The TTL value to be used for IP packets on the socket."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the TTL was successfully set. "
                        }
                    ],
                    "description": "Sets the TTL value for all IP packets on the socket. "
                },
                {
                    "name": "GetReuseAddr",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the previously assigned address can be reassigned."
                        }
                    ],
                    "description": "Checks whether an address that has been previously assigned can be immediately reassigned."
                },
                {
                    "name": "SetReuseAddr",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "Reuse",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "A flag specifying whether the address can be reused."
                                }
                            ],
                            "returnType": "Dynamic",
                            "returnDescription": "A flag indicating whether the reuse address feature was successfully set. "
                        }
                    ],
                    "description": "Enables a previously assigned address to be immediately reassigned. "
                },
                {
                    "name": "GetOOBInline",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether OOB data is read inline with regular data."
                        }
                    ],
                    "description": "Checks whether Out Of Bounds (OOB) data is read inline with regular data."
                },
                {
                    "name": "SetOOBInline",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "inline",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "A flag specifying whether OOB data is read inline."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the OOB inline data feature was successfully set. "
                        }
                    ],
                    "description": "Enables Out Of Bounds (OOB) data to be read inline with regular data."
                },
                {
                    "name": "GetSendBuf",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The buffer size."
                        }
                    ],
                    "description": "Returns the current send buffer size."
                },
                {
                    "name": "SetSendBuf",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "size",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The send buffer size to be used."
                                }
                            ],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Sets the current send buffer size. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roDataGramSocket",
                    "description": "The roDataGramSocket component enables Brightscript apps to send and receive UDP packets",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodatagramsocket.md"
                },
                {
                    "name": "roStreamSocket",
                    "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rostreamsocket.md"
                }
            ]
        },
        "ifSocketStatus": {
            "name": "ifSocketStatus",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsocketstatus.md",
            "methods": [
                {
                    "name": "eAgain",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether an EAGAIN error has occurred. "
                        }
                    ],
                    "description": "Checks whether an EAGAIN error has occurred. "
                },
                {
                    "name": "eAlready",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether an EALREADY error has occurred. "
                        }
                    ],
                    "description": "Checks whether an EALREADY error has occurred. "
                },
                {
                    "name": "eBadAddr",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether an EBADADDR error has occurred. "
                        }
                    ],
                    "description": "Checks whether an EBADADDR error has occurred. "
                },
                {
                    "name": "eDestAddrReq",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether an EDESTADDRREQ error has occurred. "
                        }
                    ],
                    "description": "Checks whether an EDESTADDRREQ error has occurred. "
                },
                {
                    "name": "eHostUnreach",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether an EHOSTUNREACH error has occurred. "
                        }
                    ],
                    "description": "Checks whether an EHOSTUNREACH error has occurred. "
                },
                {
                    "name": "eInvalid",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether an EINVALID error has occurred. "
                        }
                    ],
                    "description": "Checks whether an EINVALID error has occurred. "
                },
                {
                    "name": "eInProgress",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether an EINPROGRESS error has occurred. "
                        }
                    ],
                    "description": "Checks whether an EINPROGRESS error has occurred. "
                },
                {
                    "name": "eWouldBlock",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether an EWOULDBLOCK error has occurred. "
                        }
                    ],
                    "description": "Checks whether an EWOULDBLOCK error has occurred. "
                },
                {
                    "name": "eSuccess",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether there are no errors (the error number is 0)."
                },
                {
                    "name": "eOK",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether an EOK error has occurred. "
                        }
                    ],
                    "description": "Checks whether there is no hard error, but possibly one of the following async conditions: EAGAIN, EALREADY, EINPROGRESS, EWOULDBLOCK."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roDataGramSocket",
                    "description": "The roDataGramSocket component enables Brightscript apps to send and receive UDP packets",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodatagramsocket.md"
                },
                {
                    "name": "roStreamSocket",
                    "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rostreamsocket.md"
                }
            ]
        },
        "ifSourceIdentity": {
            "name": "ifSourceIdentity",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsourceidentity.md",
            "methods": [
                {
                    "name": "GetSourceIdentity",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The ID value of the source or event object."
                        }
                    ],
                    "description": "Returns the ID currently associated with this source (event generating) or event object"
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roChannelStoreEvent",
                    "description": "The roChannelStore sends an roChannelStoreEvent in response to a call to any of several Get* methods in ifChannelStore"
                },
                {
                    "name": "roUrlEvent",
                    "description": "The roUrlTransfer component sends the roUrlEvent"
                }
            ]
        },
        "ifSpringboardScreen": {
            "name": "ifSpringboardScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifspringboardscreen.md",
            "methods": [
                {
                    "name": "SetContent",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "content",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "A <a href=\"/docs/developer-program/getting-started/architecture/content-metadata.md\" title=\" Content Meta-Data\">content metadata</a> object (an <a href=\"/docs/references/brightscript/components/roassociativearray.md\" title=\"roAssociativeArray\">roAssociativeArray</a>) describing the attributes for the title."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the content to be displayed on the Springboard Screen. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roSpringboardScreen",
                    "description": "The Springboard Screen shows detailed information about an individual piece of content and provides options for actions that may be taken on that content",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rospringboardscreen.md"
                }
            ]
        },
        "ifSprite": {
            "name": "ifSprite",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsprite.md",
            "methods": [
                {
                    "name": "MoveTo",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "x",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The x-coordinate to which the sprite is to be moved."
                                },
                                {
                                    "name": "y",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The y-coordinate to which the sprite is to be moved."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Move the sprite to a new set of coordinates. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roSprite",
                    "description": "This component is associated with a managing roCompositor object",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rosprite.md"
                }
            ]
        },
        "ifString": {
            "name": "ifString",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifstring.md",
            "methods": [
                {
                    "name": "GetString",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "The string value stored in the calling String object. "
                        }
                    ],
                    "description": "Gets the string value stored in the calling String object. "
                },
                {
                    "name": "SetString",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "value",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The string value to be set on the calling String object."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the calling String object to the specified string value. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roChannelStoreEvent",
                    "description": "The roChannelStore sends an roChannelStoreEvent in response to a call to any of several Get* methods in ifChannelStore"
                },
                {
                    "name": "roPath",
                    "description": "The roPath component provides developers an easy way to create valid file system paths",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/ropath.md"
                },
                {
                    "name": "roString",
                    "description": "Object equivalent for intrinsic type 'String'",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rostring.md"
                },
                {
                    "name": "roUrlEvent",
                    "description": "The roUrlTransfer component sends the roUrlEvent component"
                }
            ]
        },
        "ifStringOps": {
            "name": "ifStringOps",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifstringops.md",
            "methods": [
                {
                    "name": "SetString",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "s",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The source string to be used for setting the roString object."
                                },
                                {
                                    "name": "len",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The first number of characters in the source string to which the roString object is to be set."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the roString object to the specified first set of characters of the provided string."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roString",
                    "description": "Object equivalent for intrinsic type 'String'",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rostring.md"
                }
            ]
        },
        "ifSystemLog": {
            "name": "ifSystemLog",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsystemlog.md",
            "methods": [
                {
                    "name": "EnableType",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "LogType",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "When enabled, the “http.complete” events will be sent to Roku after an http transfer is completed for adaptive streams. This event consolidates information related to: <ul>\n<li>a cURL transfer such as DNS look up time,</li>\n<li>connection latency,</li>\n<li>transfer speed,</li>\n<li>and number of bytes.</li>\n</ul>"
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Enables log message of type logType. When a log type is enabled, system log messages of that type are sent to the message port that was set using SetMessagePort().  "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roSystemLog",
                    "description": "The roSystemLog component enables the application to receive events from the Roku Streaming Player that are intended for reporting errors and trends, rather than trigger a response to a user action"
                }
            ]
        },
        "ifTextScreen": {
            "name": "ifTextScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftextscreen.md",
            "methods": [
                {
                    "name": "SetTitle",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "title",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The text to be displayed in the overhang."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the title for the screen, which appears in the overhang"
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roTextScreen",
                    "description": "roTextScreen provides a way of displaying large amounts of scrollable text",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotextscreen.md"
                }
            ]
        },
        "ifTextToSpeech": {
            "name": "ifTextToSpeech",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftexttospeech.md",
            "methods": [
                {
                    "name": "Say",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "text",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The UTF8 text to be spoken."
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "The ID for the spoken string."
                        }
                    ],
                    "description": "Returns an ID for the spoken string to notify observer callbacks about a specific spoken string."
                },
                {
                    "name": "Silence",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "duration",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Integer",
                                    "description": "The amount of time to suppress application background sound"
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "The duration for the speech suppression. "
                        }
                    ],
                    "description": "Causes text to speech to continue to suppress any application background sound for the amount of time specified by <code>duration</code>."
                },
                {
                    "name": "Flush",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Interrupts and stops any current text to speech spoken string, to be used when the channel does not want to the text to speech to continue."
                },
                {
                    "name": "IsEnabled",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether text-to-speech is enabled. "
                        }
                    ],
                    "description": "Checks whether text-to-speech is enabled. Text-to-speech may be enabled or disabled for various technical reasons (for example, on some platforms, text-to-speech may only be enabled once in connected mode). This is not affected by the state of any of its clients. In particular, it does not depend on whether a CVAA compliant accessibility feature is enabled or not."
                },
                {
                    "name": "GetAvailableLanguages",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "A list of languages. "
                        }
                    ],
                    "description": "Returns an array containing the current list of languages available for text-to-speech."
                },
                {
                    "name": "SetLanguage",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "name",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The text-to-speech language to be used."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the language specified by <code>name</code> for text to speech, from one of the available languages returned by the <a href=\"#getavailablelanguages-as-object\">GetAvailableLanguages()</a> method. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roTextToSpeech",
                    "description": "The roTextToSpeech component provides text to speech capabilities to applications",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotexttospeech.md"
                }
            ]
        },
        "ifTextureManager": {
            "name": "ifTextureManager",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftexturemanager.md",
            "methods": [
                {
                    "name": "RequestTexture",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "req",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "The roTextureRequest"
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Makes a request for an roBitmap with the attributes specified by the roTextureRequest. The roTextureManager will pass an roTextureRequestEvent to the message port when completed."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roTextureManager",
                    "description": "The Texture Manager provides a set of API's for managing an roBitmap cache",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotexturemanager.md"
                }
            ]
        },
        "ifTextureRequest": {
            "name": "ifTextureRequest",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftexturerequest.md",
            "methods": [
                {
                    "name": "GetId",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns a unique id for the request."
                },
                {
                    "name": "GetState",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The state value, which may be one of the following:"
                        }
                    ],
                    "description": "Returns the state of the request."
                },
                {
                    "name": "SetAsync",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "async",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Boolean",
                                    "description": "The method used to send the request: asynchronous (true) or synchronous (false)."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the request to be either asynchronous (true) or synchronous (false). The default is asynchronous"
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roTextureRequest",
                    "description": "An roTextureRequest is used to make requests to the roTextureManager",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotexturerequest.md"
                }
            ]
        },
        "ifTimeSpan": {
            "name": "ifTimeSpan",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftimespan.md",
            "methods": [
                {
                    "name": "Mark",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the \"Mark\" point to the current time. The Mark point is also automatically set to the current time when an roTimespan object is created."
                },
                {
                    "name": "TotalMilliseconds",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The number of milliseconds. "
                        }
                    ],
                    "description": "Returns the total number of milliseconds from the \"Mark\" point to the current time."
                },
                {
                    "name": "TotalSeconds",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "The number of seconds."
                        }
                    ],
                    "description": "Returns the total number of seconds from the \"Mark\" point to the current time."
                },
                {
                    "name": "GetSecondsToISO8601Date",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "date",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String"
                                }
                            ],
                            "returnType": "Integer",
                            "returnDescription": "The number of seconds. "
                        }
                    ],
                    "description": "Parses the ISO8601 date (e.g. 2008-11-29T14:54:02.171) and returns the number of seconds from now (not the \"Mark\" point) until the specified date/time."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roTimespan",
                    "description": "The Timespan object provides an interface to a simple timer for tracking the duration of activities",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rotimespan.md"
                }
            ]
        },
        "ifToStr": {
            "name": "ifToStr",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/iftostr.md",
            "methods": [
                {
                    "name": "ToStr",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "The string."
                        }
                    ],
                    "description": "Returns the value as a string."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roBoolean",
                    "description": "Object equivalent for intrinsic type Boolean",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roboolean.md"
                },
                {
                    "name": "roDouble",
                    "description": "Object equivalent for intrinsic type 'Double'",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rodouble.md"
                },
                {
                    "name": "roFloat",
                    "description": "Object equivalent for intrinsic type 'Float'",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rofloat.md"
                },
                {
                    "name": "roFunction",
                    "description": "Object equivalent for intrinsic type Function",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rofunction.md"
                },
                {
                    "name": "roInt",
                    "description": "Object equivalent for intrinsic type Integer",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roint.md"
                },
                {
                    "name": "roInvalid",
                    "description": "Object equivalent for intrinsic type 'Invalid'",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roinvalid.md"
                },
                {
                    "name": "roLongInteger",
                    "description": "Object equivalent for intrinsic type LongInteger",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rolonginteger.md"
                },
                {
                    "name": "roString",
                    "description": "Object equivalent for intrinsic type 'String'",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rostring.md"
                }
            ]
        },
        "ifUrlTransfer": {
            "name": "ifUrlTransfer",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifurltransfer.md",
            "methods": [
                {
                    "name": "GetIdentity",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer",
                            "returnDescription": "A unique number for the object."
                        }
                    ],
                    "description": "Returns a unique number for this object that can be used to identify whether events originated from this object. The value can be any arbitrary value as assigned by the Roku OS, and should only be used for comparison purposes. For example, the value should not be used as an array index. For use as a look-up key, one option would be to use <code>GetIdentity().ToStr()</code> as an associative array key."
                },
                {
                    "name": "SetUrl",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "url",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The URL to be used for the transfer request"
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the URL to use for the transfer request."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roUrlTransfer",
                    "description": "A roUrlTransfer object transfers data to or from remote servers specified by URLs. It can perform mutual authentication with a web server",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rourltransfer.md"
                }
            ]
        },
        "ifVideoPlayer": {
            "name": "ifVideoPlayer",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifvideoplayer.md",
            "methods": [
                {
                    "name": "SetContentList",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "contentList",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An <a href=\"/docs/references/brightscript/components/roarray.md\" title=\"roArray\">roArray</a> of <a href=\"/docs/references/brightscript/components/roassociativearray.md\" title=\"roAssociativeArray\">roAssociativeArray</a> (<a href=\"/docs/developer-program/getting-started/architecture/content-metadata.md\" title=\" Content Meta-Data\">Content Meta-Data</a> objects) representing the information for each stream to be played.<br><br>If the player is currently playing the player will be stopped. Next, the current player position is reset so the next time Play() is called, playback will start at the first item of the content list (unless Seek() is called prior to Play()).<br><br>roVideoPlayer prefetches the next item in the content list while the current item is playing. Given sufficient network throughput, there is no rebuffering when the player switches to the next item in the list. To signal the content transition, the player sends an isRequestSucceeded notification with the old content index and isListItemSelected notification with the new content index."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the content to be played by the roVideoPlayer."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roVideoPlayer",
                    "description": "The roVideoPlayer component implements a video player with more programmatic control, but less user control than the roVideoScreen component",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rovideoplayer.md"
                }
            ]
        },
        "ifVideoScreen": {
            "name": "ifVideoScreen",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifvideoscreen.md",
            "methods": [
                {
                    "name": "SetContent",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "content",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "An <a href=\"/docs/references/brightscript/components/roassociativearray.md\" title=\"roAssociativeArray\">roAssociativeArray</a> describing the attributes (<a href=\"/docs/developer-program/getting-started/architecture/content-metadata.md\" title=\" Content Meta-Data\">Content Meta-Data</a>) for the title."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the content to be played in the <a href=\"/docs/references/brightscript/components/rovideoscreen.md\" title=\"roVideoScreen\">roVideoScreen</a>. You can call this method while playing video, and it will use the new data (release date, length, and title) when showing the program info in the Heads Up Display (HUD)."
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roVideoScreen",
                    "description": "The Video Screen object implements the video playback portion of the user interface",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/rovideoscreen.md"
                }
            ]
        },
        "ifXMLElement": {
            "name": "ifXMLElement",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifxmlelement.md",
            "methods": [
                {
                    "name": "Parse",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "xml",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The XML string to be parsed"
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the operation was successful. In that case, other methods below can then be used to extract information about the parsed element."
                        }
                    ],
                    "description": "Parses a string of XML. "
                },
                {
                    "name": "GetBody",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "Object body."
                        }
                    ],
                    "description": "Returns the body of the element. If the element contains child elements, <code>GetBody()</code> returns an <a href=\"/docs/references/brightscript/components/roxmllist.md\" title=\"roXMLList\">roXMLList</a> representing those elements, like GetChildElements(). If there are no children but the element contains text, <code>GetBody()</code> returns an <a href=\"/docs/references/brightscript/components/rostring.md\" title=\"roString\">roString</a> like <code>GetText()</code>. If the element is empty, <code>GetBody()</code> returns invalid."
                },
                {
                    "name": "GetAttributes",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "An associative array representing the XML attributes of the element."
                        }
                    ],
                    "description": "Returns the XML attributes of the element. "
                },
                {
                    "name": "GetName",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "Element name."
                        }
                    ],
                    "description": "Returns the name of the element."
                },
                {
                    "name": "GetText",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "The text in the element."
                        }
                    ],
                    "description": "Returns any text contained in the element. This returns immediate body text only (for example, it does not include text from child elements)."
                },
                {
                    "name": "GetChildElements",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "An element list."
                        }
                    ],
                    "description": "If this element contains any child elements, this method returns an <a href=\"/docs/references/brightscript/components/roxmllist.md\" title=\"roXMLList\">roXMLList</a> representing those elements. If there are no child elements, returns invalid. "
                },
                {
                    "name": "GetChildNodes",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "An element list."
                        }
                    ],
                    "description": "If this element contains any child elements, this method returns an <a href=\"/docs/references/brightscript/components/rolist.md\" title=\"roList\">roList</a> representing those elements. If there are no child elements, returns invalid. The difference between this function and <code>GetChildElements()</code> is that <code>GetChildNodes()</code> handles the case of mixed XML content, i.e., content with both child elements and text such as: Child TextMore Text. In this case <code>GetChildNodes()</code> called with the top level as an argument would return an roList with two elements. The first element would be an <code>roXMLElement</code> containing the information about. The second would be an <code>roString</code> containing \"More Text\"."
                },
                {
                    "name": "GetNamedElements",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "name",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The parent element containing the child elements to be listed. Matching of the parent element name is case-sensitive."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An element list."
                        }
                    ],
                    "description": "Returns an <a href=\"/docs/references/brightscript/components/roxmllist.md\" title=\"roXMLList\">roXMLList</a> representing all child elements of this element whose case-sensitive name is specified. If only one element matches the name, an roXMLList containing one element is returned. If no elements match, an empty roXMLList is returned."
                },
                {
                    "name": "GetNamedElementsCi",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "name",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The parent element containing the child elements to be listed. Matching of the parent element name is case-sensitive."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An element list."
                        }
                    ],
                    "description": "Returns an <a href=\"/docs/references/brightscript/components/roxmllist.md\" title=\"roXMLList\">roXMLList</a> representing all child elements of this element whose case-insensitive name is specified. If only one element matches the name, an roXMLList containing one element is returned. If no elements match, an empty roXMLList is returned."
                },
                {
                    "name": "IsName",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "name",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The element name to be verified."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the element has the specified name."
                        }
                    ],
                    "description": "Checks whether the element has the specified name."
                },
                {
                    "name": "HasAttribute",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "attr",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The element attribute to be verified."
                                }
                            ],
                            "returnType": "Boolean",
                            "returnDescription": "A flag indicating whether the element has the specified attribute."
                        }
                    ],
                    "description": "Checks whether the element has the specified attribute."
                },
                {
                    "name": "SetBody",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "body",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "Object",
                                    "description": "The string to be used to set the element text."
                                }
                            ],
                            "returnType": "Void"
                        }
                    ],
                    "description": "Sets the element text from the specified string"
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roXMLElement",
                    "description": "roXMLElement is used to contain an XML tree",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roxmlelement.md"
                }
            ]
        },
        "ifXMLList": {
            "name": "ifXMLList",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifxmllist.md",
            "methods": [
                {
                    "name": "GetNamedElements",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "Name",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The XML element to be used to find matches."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An XMLList that contains the matches. "
                        }
                    ],
                    "description": "Returns a new XMLList that contains all roXMLElements that matched the passed in name (case-sensitive matching is used). This is the same as using the dot operator on an roXMLList."
                },
                {
                    "name": "GetNamedElementsCi",
                    "signatures": [
                        {
                            "params": [
                                {
                                    "name": "Name",
                                    "isRequired": true,
                                    "default": null,
                                    "type": "String",
                                    "description": "The XML element to be used to find matches."
                                }
                            ],
                            "returnType": "Object",
                            "returnDescription": "An XMLList that contains the matches. "
                        }
                    ],
                    "description": "Returns a new XMLList that contains all roXMLElements that matched the passed in name (case-insensitive matching is used). This is the same as using the dot operator on an roXMLList."
                },
                {
                    "name": "Simplify",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "The object item."
                        }
                    ],
                    "description": "If the list contains exactly one item, this function returns that item. Otherwise, it returns itself."
                },
                {
                    "name": "GetAttributes",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "The object item."
                        }
                    ],
                    "description": "If the list contains exactly one item, this function returns the attributes of that item. Otherwise it returns invalid."
                },
                {
                    "name": "GetText",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String",
                            "returnDescription": "The object string."
                        }
                    ],
                    "description": "If the list contains exactly one item, this function returns the text of that item. Otherwise, it returns an empty string."
                },
                {
                    "name": "GetChildElements",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object",
                            "returnDescription": "The object item."
                        }
                    ],
                    "description": "If the list contains exactly one item, this function returns the child elements of that item. Otherwise it returns invalid. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "roXMLList",
                    "description": "Contains a list of roXML objects",
                    "url": "https://developer.roku.com/en-ca/docs/references/brightscript/components/roxmllist.md"
                }
            ]
        }
    },
    "events": {
        "roAudioPlayerEvent": {
            "name": "roAudioPlayerEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/roaudioplayerevent.md",
            "methods": [
                {
                    "name": "isListItemSelected",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "A stream has been selected to start playing."
                },
                {
                    "name": "isStatusMessage",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Status information is available."
                },
                {
                    "name": "isFullResult",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Audio playback completed at end of content."
                },
                {
                    "name": "isPaused",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Audio playback was paused by the user."
                },
                {
                    "name": "isResumed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Audio playback has resumed"
                },
                {
                    "name": "isPartialResult",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Audio playback was interrupted"
                },
                {
                    "name": "isRequestFailed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Audio playback failed due to an error"
                },
                {
                    "name": "isTimedMetaData",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "This event is fired when an ID3 timecode has passed with an event that includes key/value pairs for timed metadata that the Brightscript channel is interested in."
                },
                {
                    "name": "isRequestSucceeded",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Stream playback has completed successfully."
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roCaptionRendererEvent": {
            "name": "roCaptionRendererEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rocaptionrendererevent.md",
            "methods": [
                {
                    "name": "isCaptionUpdateRequest",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "This event notifies the BrightScript channel that a caption is ready to be rendered by the Roku OS. In response, if the channel uses roScreen, the BrightScript code must call <a href=\"/docs/references/brightscript/interfaces/ifcaptionrenderer.md#updatecaption-as-void\" title=\"UpdateCaption()\">UpdateCaption()</a> to tell the Roku OS to draw the caption text. If roImageCanvas is being used, this function does not need to be called."
                },
                {
                    "name": "isCaptionText",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "This event is fired when the roCaptionRenderer has mode 2 set whenever a caption is encountered in the stream or external caption file."
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roCECStatusEvent": {
            "name": "roCECStatusEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rocecstatusevent.md",
            "methods": [
                {
                    "name": "isActiveSource",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the device is the active source. This method returns true if the device is the active source; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roChannelStoreEvent": {
            "name": "roChannelStoreEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rochannelstoreevent.md",
            "methods": [
                {
                    "name": "isRequestSucceeded",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the previous GET request has completed successfully."
                },
                {
                    "name": "isRequestFailed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the previous GET request has completed failed."
                },
                {
                    "name": "isRequestInterrupted",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if the previous GET request did not complete. This method returns true if the request was not complete; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": [
                {
                    "name": "amount",
                    "description": "Price of each purchased item"
                },
                {
                    "name": "code",
                    "description": "Product code. This corresponds to the product identifier that the developer assigns to the specific in-app purchase product"
                },
                {
                    "name": "purchaseID",
                    "description": "Contains the unique transaction ID of the transaction. Channels often use this value to entitle users to purchased subscriptions, etc. in their back end systems"
                },
                {
                    "name": "qty",
                    "description": "Quantity of the specific product purchased"
                },
                {
                    "name": "total",
                    "description": "Total purchase amount (including taxes) in the local currency"
                }
            ]
        },
        "roCodeRegistrationScreenEvent": {
            "name": "roCodeRegistrationScreenEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rocoderegistrationscreenevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if the screen was closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false."
                },
                {
                    "name": "isButtonPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a button on the screen was selected. This method returns true if the button was selected; otherwise, it returns false."
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roDeviceInfoEvent": {
            "name": "roDeviceInfoEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rodeviceinfoevent.md",
            "methods": [
                {
                    "name": "isStatusMessage",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if the device status has changed. This method returns true if the device status has changed; otherwise, it returns false."
                },
                {
                    "name": "isCaptionModeChanged",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Indicates whether the user has changed the closed caption mode or track.  This method returns true if the caption mode changed; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roFileSystemEvent": {
            "name": "roFileSystemEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rofilesystemevent.md",
            "methods": [
                {
                    "name": "isStorageDeviceAdded",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a storage device was inserted in the USB port. This method returns true if a storage device was inserted; otherwise, it returns false. "
                },
                {
                    "name": "isStorageDeviceRemoved",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a storage device was removed from the USB port. This method returns true if a storage device was removed; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roGridScreenEvent": {
            "name": "roGridScreenEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rogridscreenevent.md",
            "methods": [
                {
                    "name": "isListItemSelected",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a content item in the poster screen has been selected. This method returns true if a content item has been selected; otherwise, it returns false. "
                },
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if the screen was closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false. "
                },
                {
                    "name": "isListItemFocused",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a new content item in the poster screen has gained focus. This method returns true if a new item has focus; otherwise, it returns false. "
                },
                {
                    "name": "isRemoteKeyPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a remote key was pressed. This method returns true if a remote key was pressed; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roHdmiHotPlugEvent": {
            "name": "roHdmiHotPlugEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rohdmihotplugevent.md",
            "methods": [
                {
                    "name": "isHdmiHotPlug",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if an HDMI hot plug has occurred. This method returns true if an HDMI hot plug occurs; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roHdmiStatusEvent": {
            "name": "roHdmiStatusEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rohdmistatusevent.md",
            "methods": [
                {
                    "name": "isHdmiStatus",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if an HDMI status event has occurred. This method returns true if an HDMI status event has occurred; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roImageCanvasEvent": {
            "name": "roImageCanvasEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/roimagecanvasevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if the screen was closed and is no longer displayed to the user. This method returns true if the screen is closed; otherwise, it returns false. "
                },
                {
                    "name": "isButtonPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a button on the screen was selected. This method returns true if a button is selected; otherwise, it returns false. "
                },
                {
                    "name": "isRemoteKeyPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a remote key was pressed. This method returns true if a remote key is pressed; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roInputEvent": {
            "name": "roInputEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/roinputevent.md",
            "methods": [
                {
                    "name": "isInput",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if an input event was received. This method returns true if an input event was received; otherwise, it returns false. "
                },
                {
                    "name": "GetInfo",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object"
                        }
                    ],
                    "description": "Returns an roAssociativeArray describing the input event, which may be one of the following values:"
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roKeyboardScreenEvent": {
            "name": "roKeyboardScreenEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rokeyboardscreenevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if the screen was closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false. "
                },
                {
                    "name": "isButtonPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a button on the screen was selected. This method returns true if a button is selected; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roListScreenEvent": {
            "name": "roListScreenEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rolistscreenevent.md",
            "methods": [
                {
                    "name": "isListItemSelected",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a content item in the list screen has been selected. This method returns true if a content item is selected; otherwise, it returns false. "
                },
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if the screen was closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false. "
                },
                {
                    "name": "isListItemFocused",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a new content item in the list screen has gained focus. This method returns true if a new content item gains focus; otherwise, it returns false. "
                },
                {
                    "name": "isRemoteKeyPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a remote key was pressed. This method returns true if a remote key is pressed; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roMessageDialogEvent": {
            "name": "roMessageDialogEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/romessagedialogevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if the screen was closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false. "
                },
                {
                    "name": "isButtonPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a button on the screen was selected. This method returns true if a button is selected; otherwise, it returns false. "
                },
                {
                    "name": "isButtonInfo",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if the Info remote key was pressed. This method returns true if the info remote key is selected; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roMicrophoneEvent": {
            "name": "roMicrophoneEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/romicrophoneevent.md",
            "methods": [
                {
                    "name": "IsRecordingDone",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if the microphone recording session has been closed.  This method returns true if the recording session is closed; otherwise, it returns false. "
                },
                {
                    "name": "IsRecordingInfo",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the microphone is open. This method returns true when the microphone is open; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roOneLineDialogEvent": {
            "name": "roOneLineDialogEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/roonelinedialogevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Indicates whether the screen was closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roParagraphScreenEvent": {
            "name": "roParagraphScreenEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/roparagraphscreenevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Indicates whether the screen was closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false. "
                },
                {
                    "name": "isButtonPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a button on the screen was selected. This method returns true if a button is selected; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roPinEntryDialogEvent": {
            "name": "roPinEntryDialogEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/ropinentrydialogevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Indicates whether the screen was closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false. "
                },
                {
                    "name": "isButtonPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if a button on the screen was selected. This method returns true if a button is selected; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roPosterScreenEvent": {
            "name": "roPosterScreenEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/roposterscreenevent.md",
            "methods": [
                {
                    "name": "isListItemSelected",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether a content item in the poster screen has been selected. This method returns true if a content item is selected; otherwise, it returns false. "
                },
                {
                    "name": "isListFocused",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Indicates whether a new category in the filter banner has gained focus. This method returns true if a new category gains focus; otherwise, it returns false. "
                },
                {
                    "name": "isAdSelected",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the banner advertisement in the poster screen has been selected. This method returns true if a banner advertisement is selected; otherwise, it returns false. "
                },
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the screen has been closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false. "
                },
                {
                    "name": "isListItemFocused",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether a new content item in the poster screen has gained focus. This method returns true if a new content item gains focus; otherwise, it returns false. "
                },
                {
                    "name": "isListItemInfo",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the Info remote key has been pressed. This method returns true if the Info remote key is pressed; otherwise, it returns false. "
                },
                {
                    "name": "isRemoteKeyPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether a remote key has been pressed. Currently only left/right navigation events are passed, which allow the caller to navigate the content list from the springboard level. This method returns true if a remote key is pressed; otherwise, it returns false. "
                },
                {
                    "name": "isListSelected",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether a category on the filter banner has been selected. This method returns true if a category is selected; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roSearchScreenEvent": {
            "name": "roSearchScreenEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rosearchscreenevent.md",
            "methods": [
                {
                    "name": "IsFullResult",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Dynamic"
                        }
                    ],
                    "description": "Returns all results of a search request. The results received are a complete search request."
                },
                {
                    "name": "IsScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the screen has been closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false. "
                },
                {
                    "name": "IsCleared",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the search list has been cleared. This method returns true if the list was cleared; otherwise, it returns false. "
                },
                {
                    "name": "IsButtonInfo",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the Info remote key was pressed.  This method returns true if the Info remote key was pressed; otherwise, it returns false. This event is only sent for the search results on the right side of the screen."
                },
                {
                    "name": "IsPartialResult",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the results received are a partial entry based on last key. This method returns true  if the results are partial; otherwise, it returns false."
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roSGNodeEvent": {
            "name": "roSGNodeEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rosgnodeevent.md",
            "methods": [
                {
                    "name": "getData",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Dynamic"
                        }
                    ],
                    "description": "Retrieves the new field value at the time of the change."
                },
                {
                    "name": "getField",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Dynamic"
                        }
                    ],
                    "description": "Retrieves the name of the field that changed."
                },
                {
                    "name": "getRoSGNode",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Dynamic"
                        }
                    ],
                    "description": "Retrieves a pointer to the node. This can be used for nodes without an ID."
                },
                {
                    "name": "getNode",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Dynamic"
                        }
                    ],
                    "description": "Retrieves the ID of the node that changed."
                },
                {
                    "name": "getInfo",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object"
                        }
                    ],
                    "description": "Retrieves an AA that contains the values of selected \"context\" fields, which\nwere <a href=\"/docs/references/brightscript/interfaces/ifsgnodefield.md#event-field-aggregation\">specified in an earlier-executed call</a> to <code>observeField()</code> or <code>observeFieldScoped()</code>.\n(If no such \"context\" fields were designated previously, <code>getInfo()</code> returns an empty AA.)\nThe array is keyed on the names of the \"context\" fields, and the entry values are the\ninstantaneous values of the corresponding fields,\nat the point when the observed field changed."
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roSGScreenEvent": {
            "name": "roSGScreenEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rosgscreenevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the screen has been closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roSlideShowEvent": {
            "name": "roSlideShowEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/roslideshowevent.md",
            "methods": [
                {
                    "name": "isPaused",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if the slide show was paused. This method returns true if the slide show was paused; otherwise, it returns false. "
                },
                {
                    "name": "isResumed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks if the slide show has resumed. This method returns true if the slide show resumes; otherwise, it returns false. "
                },
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the screen has been closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false. "
                },
                {
                    "name": "isRequestFailed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether an image in the slide show could not be decoded. This method returns true if the image cannot be decoded; otherwise, it returns false. "
                },
                {
                    "name": "isPlaybackPosition",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether a new image has been displayed in the slide show. This method returns true if the image is displayed; otherwise, it returns false. "
                },
                {
                    "name": "isButtonPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether a button on the screen was selected. This method returns true if a button is selected; otherwise, it returns false. "
                },
                {
                    "name": "isRemoteKeyPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether a remote key was pressed. This method returns true if a key is pressed; otherwise, it returns false. "
                },
                {
                    "name": "isRequestSucceeded",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether an image has been successfully displayed. This method returns true if an image is displayed; otherwise, it returns false. "
                },
                {
                    "name": "isRequestInterrupted",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the slide show was interrupted. This method returns true if the slide show was interrupted; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roSocketEvent": {
            "name": "roSocketEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rosocketevent.md",
            "methods": [
                {
                    "name": "GetSocketID",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns the ID of the socket this event is for. The ID of a socket can be obtained from ifSocketAsync.GetID(). Use <a href=\"/docs/references/brightscript/interfaces/ifsocketstatus.md\" title=\"ifSocketStatus\">ifSocketStatus</a> or <a href=\"/docs/references/brightscript/interfaces/ifsocketconnectionstatus.md\" title=\"ifSocketConnectionStatus\">ifSocketConnectionStatus</a> on the indicated socket to query the new status for the socket."
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roSpringboardScreenEvent": {
            "name": "roSpringboardScreenEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rospringboardscreenevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the screen has been closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false. "
                },
                {
                    "name": "isButtonPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether a button on the screen was selected. This method returns true if a button is selected; otherwise, it returns false. "
                },
                {
                    "name": "isRemoteKeyPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether a remote key was pressed. This method returns true if a key is pressed; otherwise, it returns false. "
                },
                {
                    "name": "isButtonInfo",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the Info remote key was pressed.  This method returns true if the Info remote key was pressed; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roSystemLogEvent": {
            "name": "roSystemLogEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rosystemlogevent.md",
            "methods": [
                {
                    "name": "GetInfo",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object"
                        }
                    ],
                    "description": "Returns an AssociativeArray containing information describing the event, which may be one of the following values:"
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roTextScreenEvent": {
            "name": "roTextScreenEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rotextscreenevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the screen has been closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false. "
                },
                {
                    "name": "isButtonPressed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether a button on the screen was selected. This method returns true if a button is selected; otherwise, it returns false. "
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roTextToSpeechEvent": {
            "name": "roTextToSpeechEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rotexttospeechevent.md",
            "methods": [
                {
                    "name": "GetData",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns the description of the speech, which may be one of the following values:"
                },
                {
                    "name": "GetInfo",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object"
                        }
                    ],
                    "description": "Returns an associative array with the following key-value pairs, depending the value returned by the <a href=\"/docs/references/brightscript/events/rotexttospeechevent.md#getinfo-as-object\" title=\"GetData()\">GetData()</a> method:"
                },
                {
                    "name": "GetIndex",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "The text to speech service may be shared among any number of clients; therefore, the IDs returned to a given client are not necessarily contiguous. The value is only meaningful if <a href=\"/docs/references/brightscript/events/rotexttospeechevent.md#getinfo-as-object\" title=\"GetData()\">GetData()</a> returned 0, 1 or 2; it returns 0 otherwise."
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roTextureRequestEvent": {
            "name": "roTextureRequestEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rotexturerequestevent.md",
            "methods": [
                {
                    "name": "GetId",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns the unique id of the request."
                },
                {
                    "name": "GetState",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns the state of the request. See <a href=\"/docs/references/brightscript/interfaces/iftexturerequest.md\" title=\"ifTextureRequest\">ifTextureRequest</a>.GetState() for the list of states."
                },
                {
                    "name": "GetURI",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns the URI of the request."
                },
                {
                    "name": "GetBitmap",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object"
                        }
                    ],
                    "description": "Returns an roBitmap from the request if the state is ready."
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roUniversalControlEvent": {
            "name": "roUniversalControlEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rouniversalcontrolevent.md",
            "methods": [
                {
                    "name": "GetInt",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns an integer representing pressed or released keys on the remote. This table can be accessed at runtime by calling <code>bslCore.brs: bslUniversalControlEventCodes()</code>: "
                },
                {
                    "name": "GetKey",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns the ID of the remote button that generated an event."
                },
                {
                    "name": "GetRemoteID",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns an identifier associated with the type and ID of the remote control that generated the event.  For example, if multiple wireless remotes are paired, this may be used to distinguish the event sources.  Some remote controls, such as IR remotes, can not be distinguished using this API."
                },
                {
                    "name": "GetID",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns the ID of the remote button or character value represented by the event.  Values 0x20..0x10FFFF represent a Unicode character value.  Other values represent a remote button ID.  GetID() returns the same value for a release event as for the press event."
                },
                {
                    "name": "IsPress",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether a press event has occurred. This method returns true if a press event has occurred; otherwise, it returns false. "
                },
                {
                    "name": "GetChar",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns the Unicode character value generated by a keyboard key press event."
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roUrlEvent": {
            "name": "roUrlEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rourlevent.md",
            "methods": [
                {
                    "name": "GetInt",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns the type of event, which may be one of the following values:"
                },
                {
                    "name": "GetResponseCode",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns the protocol response code associated with this event. For a successful HTTP request this will be the HTTP status code 200. For unexpected errors the return value is negative. There are lots of possible negative errors from the CURL library but it's often best just to look at the text version via GetFailureReason(). "
                },
                {
                    "name": "GetFailureReason",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns a description of the failure that occurred."
                },
                {
                    "name": "GetString",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "For transfer complete AsyncGetToString, AsyncPostFromString and AsnycPostFromFile requests this will be the actual response body from the server. This method returns the string associated with the event."
                },
                {
                    "name": "GetSourceIdentity",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns a magic number that can be matched with the value returned by the <a href=\"/docs/references/brightscript/interfaces/ifurltransfer.md#getidentity-as-integer\">roUrlTransfer.GetIdentity()</a> method to determine the source of the roUrlTransfer event."
                },
                {
                    "name": "GetResponseHeaders",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object"
                        }
                    ],
                    "description": "Returns an <a href=\"/docs/references/brightscript/components/roassociativearray.md\" title=\"roAssociativeArray\">roAssociativeArray </a>containing all the headers returned by the server for appropriate protocols (such as HTTP). Headers are only returned when the status code is greater than or equal to 200 and less than 300"
                },
                {
                    "name": "GetTargetIpAddress",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "String"
                        }
                    ],
                    "description": "Returns the IP address of the destination. "
                },
                {
                    "name": "GetResponseHeadersArray",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object"
                        }
                    ],
                    "description": "This method returns an <a href=\"/docs/references/brightscript/components/roarray.md\" title=\"roArray\">roArray</a> of <a href=\"/docs/references/brightscript/components/roassociativearray.md\" title=\"roAssociativeArray\">roAssociativeArrays</a>, where each associative array contains a single header name/value pair. Use this function if you need access to duplicate headers, since GetResponseHeaders() returns only the last name/value pair for a given name. All headers are returned regardless of the status code"
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roVideoPlayerEvent": {
            "name": "roVideoPlayerEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rovideoplayerevent.md",
            "methods": [
                {
                    "name": "isPaused",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether video playback was paused by the user. This method returns true if video playback was paused; otherwise, it returns false."
                },
                {
                    "name": "isListItemSelected",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the video player is about to start playing a new item in the content list. This method returns true if a new item in the content list was selected; otherwise, it returns false."
                },
                {
                    "name": "isFormatDetected",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether an event has been fired when the format of all tracks in the media stream have been identified."
                },
                {
                    "name": "isRequestFailed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether video playback has failed. This method returns true if video playback failed; otherwise, it returns false."
                },
                {
                    "name": "isSegmentDownloadStarted",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the individual segments in an HLS or smooth stream are about to be downloaded. This method returns true if segments in the stream are going to be downloaded; otherwise, it returns false."
                },
                {
                    "name": "isStreamStarted",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the video stream has started playing. This method returns true if the video stream has started playing; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetIndex() and GetInfo() methods on the event."
                },
                {
                    "name": "isStatusMessage",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether status information or other diagnostic message is available. This method returns true if status information or  diagnostic message is available; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetMessage() method on the event."
                },
                {
                    "name": "isFullResult",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether video playback has completed at the end of the content list. This method returns true if video playback has completed at the end of the content list; otherwise, it returns false."
                },
                {
                    "name": "isResumed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether video playback has resumed. This method returns true if video playback has resumed; otherwise, it returns false."
                },
                {
                    "name": "isCaptionModeChanged",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether closed caption mode or track has been changed by the user. This method returns true if closed caption mode or track has been changed by the user; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetMessage(), GetIndex(), and GetInfo() methods on the event."
                },
                {
                    "name": "isTimedMetaData",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether an ID3 timecode has passed with an event that includes key-value pairs for timed metadata that the BrightScript channel is interested in."
                },
                {
                    "name": "isPlaybackPosition",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the current position in the video stream has changed. This event is sent periodically while playing, as determined by the last call to <a href=\"/docs/references/brightscript/interfaces/ifvideoplayer.md#setpositionnotificationperiodperiod-as-integer-as-void\" title=\"ifVideoPlayer.SetPositionNotificationPeriod\">ifVideoPlayer.SetPositionNotificationPeriod</a>. This method returns true if the current position in the video stream has changed; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetIndex() and GetInfo() methods on the event."
                },
                {
                    "name": "GetIndex",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns current position in the stream (in seconds) from the beginning."
                },
                {
                    "name": "GetInfo",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Object"
                        }
                    ],
                    "description": "Returns an roAssociativeArray array with the following key-value pairs:"
                },
                {
                    "name": "isStreamSegmentInfo",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether playback has begun of a segment in an HLS, DASH, or smooth stream. This method returns true if the playback of a segment in an HLS, DASH, or smooth stream has begun; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetMessage(), GetIndex() and GetInfo() methods on the event."
                },
                {
                    "name": "isDownloadSegmentInfo",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether a segment in an adaptive stream (HLS, Smooth, or DASH) has been downloaded. This method returns true if a segment in an adaptive stream (HLS, Smooth, or DASH) has been downloaded; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetMessage(), GetIndex() and GetInfo() methods on the event."
                },
                {
                    "name": "isRequestSucceeded",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the player has finished playing an item in the content list. This method returns true if the  player has finished playing a content list item; otherwise, it returns false.  Specific information about the event can be obtained by calling the GetIndex() method on the event."
                }
            ],
            "properties": [],
            "implementors": []
        },
        "roVideoScreenEvent": {
            "name": "roVideoScreenEvent",
            "url": "https://developer.roku.com/en-ca/docs/references/brightscript/events/rovideoscreenevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether the screen has been closed and is no longer displayed to the user. This method returns true if the screen was closed; otherwise, it returns false."
                },
                {
                    "name": "isPartialResult",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "Checks whether video playback was interrupted. This method returns true if video playback was interrupted; otherwise, it returns false."
                },
                {
                    "name": "isResumeRequest",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Boolean"
                        }
                    ],
                    "description": "This method notifies the channel that the user wants to resume playback at the specified position. The roVideoScreen player will pause playback until the channel acknowledges this request by calling ResumeAck() with the same trickplay session id. This gives the application time to switch content before playback is resumed. "
                },
                {
                    "name": "GetData",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns the stream position (in milliseconds) at which playback will be restarted."
                },
                {
                    "name": "GetIndex",
                    "signatures": [
                        {
                            "params": [],
                            "returnType": "Integer"
                        }
                    ],
                    "description": "Returns a unique id that identifies the trickplay session this event belongs to."
                }
            ],
            "properties": [],
            "implementors": []
        }
    }
}