{
    "generatedDate": "2021-07-20T19:40:40.138Z",
    "nodes": {},
    "components": {
        "roAppInfo": {
            "name": "roAppInfo",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roappinfo.md",
            "interfaces": [
                {
                    "name": "ifAppInfo",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifappinfo.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roAppInfo"
                }
            ],
            "description": "roAppInfo retrieves the developer ID, which can be useful during development. It also retrieves manifest values, such as the title and version number, avoiding the need to parse the manifest file from BrightScript. This object is created with no parameters."
        },
        "roAppManager": {
            "name": "roAppManager",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roappmanager.md",
            "interfaces": [
                {
                    "name": "ifAppManager",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifappmanager.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roAppManager"
                }
            ],
            "description": "The Application Manager APIs set application level attributes, which mostly affect the look-and-feel of the application. The use of screen styles gives each application a consistent look-and-feel, but it's often desirable to customize attributes such as colors, fonts, and logos for each application. Setting artwork and colors allows the developer to specify a theme for their application. If these values are not set, the application will use default values.\n\nThe table below describes each attribute and its values, the screen types to which it applies, and the Roku OS version in which the attribute was first supported. Unless otherwise indicated, an attribute is supported in all Roku OS versions after the one in which it was first supported.\n\nTo save space, the screen types in the table are specified by a two letter code:\n\n| Code | Screen Type |\n| --- | --- |\n| Co | roCodeRegistrationScreen |\n| Di | roMessageDialog, roOneLineDialog, roPinEntryDialog |\n| Gr | roGridScreen |\n| Ke | roKeyboardScreen |\n| Li | roListScreen |\n| Pa | roParagraphScreen |\n| Po | roPosterScreen |\n| Se | roSearchScreen |\n| Sp | roSpringboardScreen |\n| Te | roTextScreen |\n\nAll attribute values are strings. Numeric values are specified as decimal strings.\n\n| Attribute | Screen Types | Values | Example | Version |\n| --- | --- | --- | --- | --- |\n| BackgroundColor | Gr Li Pa Po Se Sp Te | HTML HEX Color Value | #E0DFDF | 1.0 |\n| BreadcrumbDelimiter | Gr Li Pa Po Se Sp Te | HTML HEX Color Value | #FF00FF | 1.0 |\n| BreadcrumbTextLeft | Gr Li Pa Po Se Sp Te | HTML HEX Color Value | #FF00FF | 1.0 |\n| BreadcrumbTextRight | Gr Li Pa Po Se Sp Te | HTML HEX Color Value | #FF00FF | 1.0 |\n| ButtonHighlightColor | Di Se Sp | HTML HEX Color Value | #FF00FF | 1.0 |\n| ButtonMenuHighlightText | Di Se Sp | HTML HEX Color Value | #0033FF | 1.0 |\n| ButtonMenuNormalOverlayText | Di Se Sp | HTML HEX Color Value | #B0B0B0 | 1.0 |\n| ButtonMenuNormalText | Di Se Sp | HTML HEX Color Value | #686868 | 1.0 |\n| ButtonNormalColor | Di Se Sp | HTML HEX Color Value | #FF00FF | 1.0 |\n| CounterSeparator | Gr Po | HTML HEX Color Value | #00FF00 | 2.7 |\n| CounterTextLeft | Gr Po | HTML HEX Color Value | #FF0000 | 2.7 |\n| CounterTextRight | Gr Po | HTML HEX Color Value | #0000FF | 2.7 |\n| DialogBodyText | Di | HTML HEX Color Value. Must be a grayscale value | #808080 | 3.1 |\n| DialogTitleText | Di | HTML HEX Color Value. Must be a grayscale value | #363636 | 3.1 |\n| EpisodeSynopsisText | Po | HTML HEX Color Value | #FF00FF | 1.0 |\n| FilterBannerActiveColor | Po | HTML HEX Color Value | #FF00FF | 1.0 |\n| FilterBannerActiveHD | Po | URL to set HD Filter Banner Active/Focus Highlighter | pkg:/images/Filter\\_ActiveHint\\_HD.png | 1.0 |\n| FilterBannerActiveSD | Po | URL to set SD Filter Banner Active/Focus Highlighter | pkg:/images/Filter\\_ActiveHint\\_SD43.png | 1.0 |\n| FilterBannerInactiveColor | Po | HTML HEX Color Value | #FF00FF | 1.0 |\n| FilterBannerInactiveHD | Po | URL to set HD Filter Banner Inactive Highlighter | pkg:/images/Filter\\_InactiveHint\\_HD.png | 1.0 |\n| FilterBannerInactiveSD | Po | URL to set SD Filter Banner Inactive Highlighter | pkg:/images/Filter\\_ActiveHint\\_SD43.png | 1.0 |\n| FilterBannerSideColor | Po | HTML HEX Color Value | #FF00FF | 1.0 |\n| FilterBannerSliceHD | Po | URL to set HD Filter Banner Background Image | pkg:/images/Filter\\_ActiveHint\\_HD.png | 1.0 |\n| FilterBannerSliceSD | Po | URL to set SD Filter Banner Background Image | pkg:/images/Filter\\_ActiveHint\\_SD43.png | 1.0 |\n| GridScreenBackgroundColor | Gr | HTML HEX Color Value Must be a grayscale value | #363636 | 2.7 |\n| GridScreenBorderOffsetHD | Gr | String representing point \"(x, y)\" that is the offset from the upper left corner of the focused HD image. Set to the negative width & height of border | (-25,-25) | 2.8 |\n| GridScreenBorderOffsetSD | Gr | String representing point \"(x, y)\" that is the offset from the upper left corner of the focused SD image. Set to the negative width & height of border | (-20,-20) | 2.8 |\n| GridScreenDescriptionDateColor | Gr | HTML HEX Color Value | #FF005B | 2.7 |\n| GridScreenDescriptionImageHD | Gr | URL to set HD Description callout background image on Grid | pkg:/images/Description\\_Background\\_HD.ng | 2.8 |\n| GridScreenDescriptionImageSD | Gr | URL to set SD Description callout background image on Grid | pkg:/images/Description\\_Background\\_SD43.ng | 2.8 |\n| GridScreenDescriptionOffsetHD | Gr | String representing point \"(x, y)\" that is the offset from the upper left corner of the focused HD image. Negative values have the description above and to the left of the focused image | (190,255) | 2.8 |\n| GridScreenDescriptionOffsetSD | Gr | String representing point \"(x, y)\" that is the offset from the upper left corner of the focused SD image. Negative values have the description above and to the left of the focused image | (125,170) | 2.8 |\n| GridScreenDescriptionRuntimeColor | Gr | HTML HEX Color Value | #5B005B | 2.7 |\n| GridScreenDescriptionSynopsisColor | Gr | HTML HEX Color Value | #606000 | 2.7 |\n| GridScreenDescriptionTitleColor | Gr | HTML HEX Color Value | #00FFFF | 2.7 |\n| GridScreenFocusBorderHD | Gr | URL to set HD Focus image on Active Grid Poster | pkg:/images/Border\\_16x9\\_HD.png | 2.8 |\n| GridScreenFocusBorderSD | Gr | URL to set SD Focus image on Active Grid Poster | pkg:/images/Border\\_16x9\\_SD43.png | 2.8 |\n| GridScreenListNameColor | Gr | HTML HEX Color Value. Must be a grayscale value | #FFFFFF | 2.7 |\n| GridScreenLogoHD | Gr | Logo formatted for display in the overhang | pkg:/images/gridlogoHD.png | 2.7 |\n| GridScreenLogoOffsetHD\\_X | Gr | Offset in pixels from the top-left origin of the display. Range 0 to 1280 | 592 | 2.7 |\n| GridScreenLogoOffsetHD\\_Y | Gr | Offset in pixels from the top-left origin of the display. Range 0 to 720 | 31 | 2.7 |\n| GridScreenLogoOffsetSD\\_X | Gr | Offset in pixels from the top-left origin of the display. Range 0 to 720 | 324 | 2.7 |\n| GridScreenLogoOffsetSD\\_Y | Gr | Offset in pixels from the top-left origin of the display. Range 0 to 480 | 21 | 2.7 |\n| GridScreenLogoSD | Gr | Logo formatted for display in the overhang | pkg:/images/gridlogoSD.png | 2.7 |\n| GridScreenMessageColor | Gr | HTML HEX Color Value. Must be a grayscale value | #808080 | 2.7 |\n| GridScreenOverhangHeightHD | Gr | The HD overhang height. Default: \"69\" | 75 | 2.8 |\n| GridScreenOverhangHeightSD | Gr | The SD overhang height. Default: \"49\" | 55 | 2.8 |\n| GridScreenOverhangSliceHD | Gr | URI for the overhang slice (thin piece of top of screen border) | pkg:/images/gridoverhangHD.png | 2.7 |\n| GridScreenOverhangSliceSD | Gr | URI for the overhang slice (thin piece of top of screen border) | pkg:/images/gridoverhangSD.png | 2.7 |\n| GridScreenRetrievingColor | Gr | HTML HEX Color Value. Must be a grayscale value | #CCCCCC | 2.7 |\n| ListItemHighlightHD | Gr Li Po | URL to set HD highlight image | pkg:/images/listitem\\_highlight\\_hd.png | 3.1 |\n| ListItemHighlightSD | Gr Li Po | URL to set SD highlight image | pkg:/images/listitem\\_highlight\\_sd.png | 3.1 |\n| ListItemHighlightText | Gr Li Po | HTML HEX Color Value | #CCCC00 | 3.1 |\n| ListItemText | Gr Li Po | HTML HEX Color Value | #CCCC00 | 3.1 |\n| ListScreenDescriptionText | Li | HTML HEX Color Value | #CCCC00 | 3.1 |\n| ListScreenTitleColor | Li | HTML HEX Color Value | #CC0000 | 3.1 |\n| OverhangPrimaryLogoHD | Co Ke Li Pa Po Se Sp Te | Small application logo formatted for display in overhang top left | pkg:/images/co\\_logo\\_sd.png | 1.0 |\n| OverhangPrimaryLogoOffsetHD\\_X | Co Ke Li Pa Po Se Sp Te | Offset in pixels from the top-left origin of the display films.Range 0 to 1280 | 25 | 1.0 |\n| OverhangPrimaryLogoOffsetHD\\_Y | Co Ke Li Pa Po Se Sp Te | Offset in pixels from the top-left origin of the display films.Range 0 to 720 | 50 | 1.0 |\n| OverhangPrimaryLogoOffsetSD\\_X | Co Ke Li Pa Po Se Sp Te | Offset in pixels from the top-left origin of the display films.Range 0 to 720 | 25 | 1.0 |\n| OverhangPrimaryLogoOffsetSD\\_Y | Co Ke Li Pa Po Se Sp Te | Offset in pixels from the top-left origin of the display films.Range 0 to 480 | 50 | 1.0 |\n| OverhangPrimaryLogoSD | Co Ke Li Pa Po Se Sp Te | Small application logo formatted for display in overhang top left | pkg:/images/co\\_logo\\_sd.png | 1.0 |\n| OverhangSecondaryLogoHD | Co Ke Li Pa Po Se Sp Te | Small application logo formatted for display in overhang top left | pkg:/images/co\\_logo\\_hd.png | 1.0 |\n| OverhangSecondaryLogoOffsetHD\\_X | Co Ke Li Pa Po Se Sp Te | Offset in pixels from the top-left origin of the display films. Range 0 to 1280 | 25 | 1.0 |\n| OverhangSecondaryLogoOffsetHD\\_Y | Co Ke Li Pa Po Se Sp Te | Offset in pixels from the top-left origin of the display films. Range 0 to 720 | 50 | 1.0 |\n| OverhangSecondaryLogoOffsetSD\\_X | Co Ke Li Pa Po Se Sp Te | Offset in pixels from the top-left origin of the display films. Range 0 to 720 | 25 | 1.0 |\n| OverhangSecondaryLogoOffsetSD\\_Y | Co Ke Li Pa Po Se Sp Te | Offset in pixels from the top-left origin of the display films. Range 0 to 480 | 50 | 1.0 |\n| OverhangSecondaryLogoSD | Co Ke Li Pa Po Se Sp Te | Small application logo formatted for display in overhang top left | pkg:/images/co\\_logo\\_sd.png | 1.0 |\n| OverhangSliceHD | Co Ke Li Pa Po Se Sp Te | URI for the overhang slice (thin piece of border at the top of the screen in HD size) | pkg:/images/overhang\\_hd.png | 1.0 |\n| OverhangSliceSD | Co Ke Li Pa Po Se Sp Te | URI for the overhang slice (thin piece of top of screen border) | pkg:/images/overhang\\_sd.png | 1.0 |\n| ParagraphBodyText | Co Pa Te | HTML HEX Color Value | #FF00FF | 1.0 |\n| ParagraphHeaderText | Co Pa Te | HTML HEX Color Value | #FF00FF | 1.0 |\n| PosterScreenLine1Text | Po | HTML HEX Color Value | #FF00FF | 1.0 |\n| PosterScreenLine2Text | Po | HTML HEX Color Value | #FF00FF | 1.0 |\n| RegistrationCodeColor | Co | HTML HEX Color Value | #FF00FF | 1.0 |\n| RegistrationFocalColor | Co | HTML HEX Color Value | #FF00FF | 1.0 |\n| RegistrationFocalRectColor | Co | HTML HEX Color Value | #10FF80 |  |\n| RegistrationFocalRectHD | Co | Position and size of the HD focal rectangle. Four integer: (x,y,width,height) | (228,360,120,82) |  |\n| RegistrationFocalRectSD | Co | Position and size of the SD focal rectangle. Four integer: (x,y,width,height) | (172,220,90,76) |  |\n| SpringboardActorColor | Sp | HTML HEX Color Value | #FF00FF | 1.0 |\n| SpringboardAlbumColor | Sp | HTML HEX Color Value | #FF00FF | 1.0 |\n| SpringboardAlbumLabel | Sp | Album Label | on | 1.0 |\n| SpringboardAlbumLabelColor | Sp | HTML HEX Color Value | #FF00FF | 1.0 |\n| SpringboardAllow6Buttons | Sp | boolean string | true |  |\n| SpringboardArtistColor | Sp | HTML HEX Color Value | #FF00FF | 1.0 |\n| SpringboardArtistLabel | Sp | Artist Label | by | 1.0 |\n| SpringboardArtistLabelColor | Sp | HTML HEX Color Value | #FF00FF | 1.0 |\n| SpringboardDirectorColor | Sp | HTML HEX Color Value | #FF00FF | 1.0 |\n| SpringboardDirectorText | Sp | Director Label | Written by | 1.0 |\n| SpringboardDirectorLabelColor | Sp | HTML HEX Color Value | #FF00FF | 1.0 |\n| SpringboardDirectorPrefixText | Sp | HTML HEX Color Value | #FF00FF |  |\n| SpringboardGenreColor | Sp | HTML HEX Color Value | #FF00FF | 1.0 |\n| SpringboardRuntimeColor | Sp | HTML HEX Color Value | #FF00FF | 1.0 |\n| SpringboardSynopsisColor | Sp | HTML HEX Color Value | #FF00FF | 1.0 |\n| SpringboardTitleText | Sp | HTML HEX Color Value | #FF00FF | 1.0 |\n| TextScreenBodyBackgroundColor | Te | HTML HEX Color Value. Must be a grayscale value | #808080 | 4.3 |\n| TextScreenBodyText | Te | HTML HEX Color Value | #363636 | 4.3 |\n| TextScreenScrollBarColor | Te | HTML HEX Color Value | #CC0000 | 4.3 |\n| TextScreenScrollThumbColor | Te | HTML HEX Color Value | #00CC00 | 4.3 |\n| ThemeType |  | Theme type. Generic-dark is the only valid value. Otherwise the default theme applies | generic-dark | 2.7 |\n\n**Example**\n\n```\nSub SetApplicationTheme()\n    app = CreateObject(\"roAppManager\")\n    theme = CreateObject(\"roAssociativeArray\")\n    theme.OverhangSliceHD = \"pkg:/images/Overhang_Slice_HD.png\"\n    theme.OverhangPrimaryLogoSD = \"pkg:/images/Logo_Overhang_SD43.png\"\n    theme.OverhangPrimaryLogoOffsetSD_X = \"72\"\n    theme.OverhangPrimaryLogoOffsetSD_Y = \"25\"\n    theme.OverhangPrimaryLogoHD = \"pkg:/images/Logo_Overhang_HD.png\"\n    theme.OverhangPrimaryLogoOffsetHD_X = \"123\"\n    theme.OverhangPrimaryLogoOffsetHD_Y = \"48\"\n    app.SetTheme(theme)\nEnd Sub\n```"
        },
        "roArray": {
            "name": "roArray",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roarray.md",
            "interfaces": [
                {
                    "name": "ifArray",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarray.md"
                },
                {
                    "name": "ifArrayGet",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarrayget.md"
                },
                {
                    "name": "ifArraySet",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarrayset.md"
                },
                {
                    "name": "ifEnum",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifenum.md"
                },
                {
                    "name": "ifArrayJoin",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarrayjoin.md"
                },
                {
                    "name": "ifArraySort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarraysort.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "An array stores an indexed collection of BrightScript objects. Each entry of an array can be a different type, or they may all of the same type.\n\nAn roArray is created with two parameters:\n\n**CreateObject(\"roArray\", size As Integer, resizeAs Boolean)**\n\nSize is the initial number of elements allocated for the array. If resize is true, the array will be resized if needed to accommodate more elements. If the array is large, this might be slow. The \"dim\" statement may be used instead of CreateObject to allocate a new array. Dim has the advantage in that it automatically creates arrays of arrays for multi-dimensional arrays."
        },
        "roAssociativeArray": {
            "name": "roAssociativeArray",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roassociativearray.md",
            "interfaces": [
                {
                    "name": "ifAssociativeArray",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifassociativearray.md"
                },
                {
                    "name": "ifEnum",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifenum.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roAssociativeArray"
                }
            ],
            "description": "An associative array (also known as a map, dictionary or hash table) allows objects to be associated with string keys. Associative arrays are built into the language. They can be accessed implicitly by using the dot or bracket operators, or by calling functions from the [ifAssociativeArray](/docs/references/brightscript/interfaces/ifassociativearray.md \"ifAssociativeArray\") interface. For example, the last three lines in this example are equivalent:\n\n```\naa = { one : 1, two : 2, three : 3 }\nx = aa[\"two\"]\nx = aa.two\nx = aa.Lookup(\"two\")\n```\n\nThis object is created with no parameters:\n\n```\nCreateObject(\"roAssociativeArray\")\n```\n\nIt can also be created implicitly by using an Associative Array literal.\n\nStarting from Roku OS 8, the quoted keys in Associative Array literals are now case-preserving. This change improves the readability of your code and is compatible with JSON usage.\n\n**Example**\n\n```\n' Creation of associative arrays\n\naa1 = CreateObject(\"roAssociativeArray\")   ' Explicitly \naa2 = {}                                   ' Implicitly\naa3 = {                                    ' With some initial values\n   foo : 12,\n   bar : 13\n}\n\n' Assigning values\n\naa1.AddReplace(\"Bright\", \"Script\")  ' With explicit function calls\naa1.AddReplace(\"TMOL\", 42)\naa1.boo = 112                       ' With dot operator\naa1[\"baz\"] = \"abcdefg\"              ' With bracket operator\n\n' Accessing values\n\nprint aa1.Bright           ' With dot operator (will print 'Script')\nprint aa1.Lookup(\"TMOL\")   ' With function call (will print 42)\nprint aa1[\"boo\"]           ' With bracket operator (will print 112)\n\n' Using ifEnum interface to walk through keys in an associative array\nfor each key in aa1\n\n    print \"  \" key \"=\" aa1[key]\n\nend for\n```"
        },
        "roAudioGuide": {
            "name": "roAudioGuide",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roaudioguide.md",
            "interfaces": [
                {
                    "name": "ifAudioGuide",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifaudioguide.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "> This component is only available on the following devices: Roku Streaming Stick (3600X), Roku Express (3700X) and Express+ (3710X), Roku Premiere (4620X) and Premiere+ (4630X), Roku Ultra (4640X), and any Roku TV running Roku OS version 7.5 and later.\nThe roAudioGuide component provides Audio Guide support for applications that require custom speech beyond what is provided by automatic Audio Guide in SDK and Scene Graph components.\n\nThough some of the roAudioGuide API is similar to [roTextToSpeech](/docs/references/brightscript/components/rotexttospeech.md \"roTextToSpeech\"), roAudioGuide provides support specific to Audio Guide, including:\n\n*   Speaks when Audio Guide is enabled, and doesn't speak if it isn't.\n*   Automatically splits up text to reduce lag.\n*   Uses the correct voice, language, volume, and speech rate for Audio Guide.\n*   Tries to be \"smart\" by pre-processing the text for correct pronunciation of things like currency, email addresses, acronyms, media-related names and titles, etc.\n\nUsually, roAudioGuide would be used on its own, but it can be used in conjunction with [roTextToSpeech](/docs/references/brightscript/components/rotexttospeech.md \"roTextToSpeech\")."
        },
        "roAudioMetadata": {
            "name": "roAudioMetadata",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roaudiometadata.md",
            "interfaces": [
                {
                    "name": "ifAudioMetadata",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifaudiometadata.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roAudioMetadata"
                }
            ],
            "description": "The roAudioMetadata component provides developers access to audio file metadata included in many audio files. This should enable some audiofiles to deliver the information needed to fill out an roSpringboard screen without passing the info in a separate xml feed. roAudioMetadata currently only works with local file URLs.\n\nThe component requires the use of a dynamically loaded library that is not part of the initially booted image. Therefore, an entry must be added to the manifest of any applications that use the roAudioMetadata component so it can be loaded when the channel is launched. Here's the manifest entry:\n\n_requires\\_audiometadata=1_\n\nThis object is created without any arguments:\n\n`CreateObject(\"roAudioMetadata\")`\n\n**Example**\n\n```\nREM printAA() is from generalUtils.brs in our sample apps\nREM and used to print an associative Array\n\nSub SaveCoverArtFile(filename As String)\n    meta = CreateObject(\"roAudioMetadata\")\n    meta.SetUrl(filename)\n    print \"------------- GetTags() -------------------------\"\n    tags = meta.GetTags()\n    printAA(tags)\n    print \"------------- GetAudioProperties() --------------\"\n    properties = meta.GetAudioProperties()\n    printAA(properties)\n    print \"------------- GetCoverArt() ---------------------\"\n    thumbnail = meta.GetCoverArt()\n    if (thumbnail <> invalid) then\n            if (thumbnail.bytes = invalid) then\n            return\n        end if\n        imgtype = thumbnail.type\n        image_ext=\"\"\n        if (imgtype = \"image/jpeg\" or imgtype = \"jpg\") then\n            image_ext = \"jpg\"\n        else if (imgtype = \"image/png\" or imgtype = \"png\") then\n            image_ext = \"png\"\n        else\n            image_ext = \"jpg\"\n        end if\n        tmp_img = \"tmp:/CoverArtImage\" + \".\" + image_ext\n        if (tmp_img <> invalid) then\n            DeleteFile(tmp_img)\n        end if\n        thumbnail.bytes.Writefile(tmp_img)\n    end if\nEnd Sub\n```"
        },
        "roAudioPlayer": {
            "name": "roAudioPlayer",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roaudioplayer.md",
            "interfaces": [
                {
                    "name": "ifAudioPlayer",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifaudioplayer.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhttpagent.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roAudioPlayerEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/roaudioplayerevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roAudioPlayer"
                }
            ],
            "description": "The Audio Player object provides the ability to setup the playing of a series of audio streams. The object accepts an array of content meta-data objects, describing the audio and providing URLs for accessing each stream. The component understands the following streamformat values: \"mp3\", \"wma\", \"mp4\", \"hls\", \"es.aac-adts\", \"flac.\"\n\nThis object does not provide an interface to a screen. In order to get events both from the screen you are using and the Audio Player, you should use the same Message Port for both objects.\n\nThis object is created with no parameters:\n\n`CreateObject(\"roAudioPlayer\")`\n\n**Example**\n\n```\nSub Main()\n    audioPlayer = CreateObject(\"roAudioPlayer\")\n    port = CreateObject(\"roMessagePort\")\n    audioPlayer.SetMessagePort(port)\n    song = CreateObject(\"roAssociativeArray\")\n    song.url = \"http://www.theflute.co.uk/media/BachCPE_SonataAmin_1.wma\"\n    audioplayer.addcontent(song)\n    audioplayer.setloop(false)\n    audioPlayer.play()\n    while true\n            msg = wait(0, port)\n            if type(msg) = \"roAudioPlayerEvent\"\n                    if msg.isStatusMessage() then\n                        print \"roAudioPlayerEvent: \"; msg.getmessage()\n                        if msg.getmessage() = \"end of playlist\" return\n                    endif\n            endif\n        end while\nEnd Sub\n```"
        },
        "roAudioResource": {
            "name": "roAudioResource",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roaudioresource.md",
            "interfaces": [
                {
                    "name": "ifAudioResource",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifaudioresource.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "isRequired": true,
                            "type": "dynamic"
                        }
                    ],
                    "returnType": "roAudioResource"
                },
                {
                    "params": [
                        {
                            "name": "param1",
                            "isRequired": true,
                            "type": "string"
                        }
                    ],
                    "returnType": "roAudioResource"
                }
            ],
            "description": "The roAudioResouce allows .wav files to be cached to memory and quickly played at any time. roAudioResource is intended to support short audio clips which need to be played with very little latency. The system caches the entire wav file in memory so that playback can begin very quickly.\n\nOn Roku \"Classic\" models, roAudioResource does not support mixing of sounds. So when you play a sound effect, any background music is paused while the sound effect plays and then resumes after the sound effect ends. On later models, sound effects are mixed with background music. See the [Hardware specifications document](/docs/specs/hardware.md#current-models) for a list of Current and Classic models.\n\nThis object is created with a filename parameter that is a path to the sound resource file:\n\n`CreateObject(\"roAudioResource\", filename)`\n\nThe filename must be the name of a local file and cannot be a URL. To use a URL, you may download the file to the application's \"tmp:\" file system using [roUrlTransfer](/docs/references/brightscript/components/rourltransfer.md) and pass a filename of the form \"tmp:/file.wav\" to CreateObject.\n\n```\nsound = CreateObject(\"roAudioResource\", \"pkg:/sounds/beep1.wav\")\nsound.Trigger(75)\n```\n\nAn object can also be created using the name of a system sound effect:\n\n*   \"select\" - the sound effect to be played when a selection is made, e.g. when OK is pressed.\n*   \"navsingle\" - the sound effect to be played when navigating a list or grid, e.g. when left or right is pressed.\n*   \"navmulti\" - the sound effect to be played when paging through a list or grid, e.g. when rewind or fast-forward is pressed.\n*   \"deadend\" - the sound effect to be played when a button press could not be processed.\n\nNote that system sound effects are played at the volume selected in the user's settings, or not played at all if the user has turned sound effects off, regardless of the volume value passed to Trigger.\n\n```\nsound = CreateObject(\"roAudioResource\", \"select\")\nsound.Trigger(50)\n```\n\nMult iple sounds can be mixed and played at the same time:\n\n```\nsound1 = CreateObject(\"roAudioResource\", \"pkg:/sounds/beep1.wav\")\nsound2 = CreateObject(\"roAudioResource\", \"select\")\nsound1.Trigger(50, 0)\nif sound2.maxSimulStreams() > 1\n  sound2.Trigger(50, 1)\nend if\n```"
        },
        "roBitmap": {
            "name": "roBitmap",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/robitmap.md",
            "interfaces": [
                {
                    "name": "ifDraw2D",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifdraw2d.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "isRequired": true,
                            "type": "string"
                        }
                    ],
                    "returnType": "roBitmap"
                },
                {
                    "params": [
                        {
                            "name": "param1",
                            "isRequired": true,
                            "type": "dynamic"
                        }
                    ],
                    "returnType": "roBitmap"
                }
            ],
            "description": "The roBitmap component contains image data and provides an interface (ifDraw2D) for drawing. Bitmaps can be used for a variety of purposes, such as for sprites, compositing, or as double buffers.\n\nIt stores four color channels: red, green, blue, and alpha, with 32-bits per pixel. They can be any arbitrary size up to 2048x2048. However, the maximum size bitmap uses 16MB of memory, so there are practical memory limitations which would compel smaller bitmap sizes. Coordinates (x,y) for 2D bitmaps have an origin (0,0) at the top left. roBitmap is always offscreen. The top roScreen is the only ifDraw2D surface which is displayed. roBitmap represents something that can be drawn onto, as well as something that can be drawn.\n\nDrawing operations into a roBitmap (or other surface with ifDraw2D interface, such as an [roScreen](/docs/references/brightscript/components/roscreen.md \"roScreen\")) are clipped so the only the part that is within its bounds is rendered. X,Y coordinates that specify a location in a bitmap to render to (for example, as used by DrawObject() or DrawText() ) may be positive or negative. Negative implies that the left and top of the rendered object will be clipped.The same bitmap cannot be used as a source and a destination in a single DrawObject() call.\n\nThere are limitations when using the onscreen bitmap as a source. For example, Alpha blending may not work.\n\nAn empty roBitmap object can be created with CreateObject():\n\n`CreateObject(\"roBitmap\", bitmapProps As Object)`\n\nbitmapProps is an roAssociativeArray with Integers width (Integer), height (Integer), and AlphaEnable (Boolean), and name (String) parameters. The contents of an empty RoBitmap are initialized to zero (transparent black).\n\nExample: `CreateObject(\"roBitmap\", {width:10, height:10, AlphaEnable:false, name:\"MyBitmapName\"})`\n\nAn roBitmap can also load its image data from a file:\n\n`CreateObject(\"roBitmap\", String filename)`\n\n**Example**\n\n```\n' Draw three bitmaps as fast as we can\n'\nScreen=CreateObject(\"roScreen\")\nbm1=CreateObject(\"roBitmap\", \"pkg:/images/myphoto1.jpg\")\nbm2=CreateObject(\"roBitmap\", \"pkg:/images/myphoto2.jpg\")\nbm3=CreateObject(\"roBitmap\", \"pkg:/images/myphoto3.jpg\")\nbmarray=[bm1, bm2, bm3]\nWhile true\n    For each bitmap in bmarray\n        Screen.DrawObject(0,0, bitmap)\n        Screen.Finish()\n    End for\nEnd While\n```\n\n**Example: Double buffering with roBitmap**\n\n```\nscreen1=CreateObject(\"roScreen\")\noff=CreateObject(\"roBitmap\", {width:1280, height:720, AlphaEnable:false})\noff.Clear(white)\ndfDrawImage(off, \"pkg:/images/myimage.png\", 50, 50)\noff.DrawRect(150, 150, 200, 200, &hFF) ' black, alpha: all source\nscreen1.DrawObject(0, 0, off)\nScreen1.Finish()\n```"
        },
        "roBoolean": {
            "name": "roBoolean",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roboolean.md",
            "interfaces": [
                {
                    "name": "ifBoolean",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifboolean.md"
                },
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "roBoolean is the object equivalent for intrinsic type Boolean.\n\nThis is useful in the following situations:\n\n*   When an object is needed, instead of an intrinsic value. For example, \"roList\" maintains a list of objects. If an Boolean is added to roList, it will be automatically wrapped in an roBoolean by the language interpreter. When a function that expects a BrightScript Component as a parameter is passed a boolean, BrightScript automatically creates the equivalent BrightScript Component.\n*   If any object exposes the ifBoolean interface, that object can be used in any expression that expects an intrinsic value."
        },
        "roByteArray": {
            "name": "roByteArray",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/robytearray.md",
            "interfaces": [
                {
                    "name": "ifByteArray",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifbytearray.md"
                },
                {
                    "name": "ifArray",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarray.md"
                },
                {
                    "name": "ifArrayGet",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarrayget.md"
                },
                {
                    "name": "ifArraySet",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarrayset.md"
                },
                {
                    "name": "ifEnum",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifenum.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roByteArray"
                }
            ],
            "description": "The byte array component is used to contain and manipulate an arbitrary array of bytes.\n\nThis object contains functions to convert strings to or from a byte array, as well as to or from ascii hex or ascii base 64. Note that if you are converting a byte array to a string, and the byte array contains a zero, the string conversion will end at that point. roByteArray will autosize to become larger as needed. If you wish to turn off this behavior, then use the SetResize() function. If you read an uninitialized index, \"invalid\" is returned. roByteArray supports the [ifArray](/docs/references/brightscript/interfaces/ifarray.md \"ifArray\") interface, and so can be accessed with the array \\[\\] operator. The byte array is always accessed as unsigned bytes when using this interface. roByteArray also supports the ifEnum interface, and so can be used with a \"for each\" statement.\n\n**Example**\n\n```\nba=CreateObject(\"roByteArray\")\nba.FromAsciiString(\"leasure.\")\nif ba.ToBase64String()<>\"bGVhc3VyZS4=\" then stop\n\nba=CreateObject(\"roByteArray\")\nba.fromhexstring(\"00FF1001\")\nif ba[0]<>0 or ba[1]<>255 or ba[2]<>16 or ba[3]<>1 then stop\n\nba=CreateObject(\"roByteArray\")\nfor x=0 to 4000\n    ba.push(x)\nend for\n\nba.WriteFile(\"tmp:/ByteArrayTestFile\")\nba2=CreateObject(\"roByteArray\")\nba2.ReadFile(\"tmp:/ByteArrayTestFile\")\nif ba.Count()<>ba2.Count() then stop\nfor x=0 to 4000\n    if ba[x]<>ba2[x] then stop\nend for\n\nba2.ReadFile(\"tmp:/ByteArrayTestFile\", 10, 100)\nif ba2.count()<>100 then stop\nfor x=10 to 100\n    if ba2[x-10]<>x then stop\nend for\n```"
        },
        "roCaptionRenderer": {
            "name": "roCaptionRenderer",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rocaptionrenderer.md",
            "interfaces": [
                {
                    "name": "ifCaptionRenderer",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifcaptionrenderer.md"
                }
            ],
            "events": [
                {
                    "name": "roCaptionRendererEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/event/rocaptionrendererevent.md"
                }
            ],
            "constructors": [],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roCaptionRenderer component provides a mechanism for BrightScript channels to render closed captions in video played back with the roVideoPlayer. Prior to the v 5.2 Roku firmware, captions could only be rendered in roVideoScreen.\n\nPrior to the 5.2 Roku OS version, closed captions could only be rendered in roVideoScreen. Now channels that use roVideoPlayer embedded in an roScreen or roImageCanvas can also take advantage of Roku's closed captioning support. roCaptionRenderer supports two different modes, which is set using the [SetMode()](/docs/references/brightscript/interfaces/ifcaptionrenderer.md#setmodemode-as-integer-as-void \"SetMode()\") method. Depending on the mode set, and the type of screen being used, the BrightScript channel needs to do different levels of work to render captions. These different workflows are highlighted in the tables below:\n\n**Model 1**\n\n| roScreen | roImageCanvas |\n| --- | --- |\n| Call [SetScreen()](/docs/references/brightscript/interfaces/ifcaptionrenderer.md#setscreenscreen-as-object-as-void \"SetScreen()\") | Call [SetScreen()](/docs/references/brightscript/interfaces/ifcaptionrenderer.md#setscreenscreen-as-object-as-void \"SetScreen()\") |\n| Call [UpdateCaption()](/docs/references/brightscript/interfaces/ifcaptionrenderer.md#updatecaption-as-void \"UpdateCaption()\") |  |\n\n**Model 2**\n\n| roScreen | roImageCanvas |\n| --- | --- |\n| All caption rendering is done by the channel's BrightScript code | All caption rendering is done by the channel's BrightScript code |\n\nBrightScript channels do not create roCaptionRenderer instances directly using CreateObject(). Instead, when an roVideoPlayer is created, it contains an roCaptionRenderer. BrightScript channels call [ifVideoPlayer.GetCaptionRenderer()](/docs/references/brightscript/interfaces/ifvideoplayer.md#getcaptionrenderer-as-object \"ifVideoPlayer.GetCaptionRenderer()\") to get the caption renderer associated with their video player.\n\n**Example**\n\n```\nFunction Main() as void\n  mode = 1\n  fonts = CreateObject(\"roFontRegistry\")\n  fonts.Register(\"pkg:/fonts/vSHandprinted.otf\")\n  font = fonts.GetFont(\"vSHandprinted\", 28, 500, false)\n  screen = CreateObject(\"roScreen\", true)\n  port = CreateObject(\"roMessagePort\")\n  screen.Clear(&h00)\n  screen.SwapBuffers()\n  screen.SetMessagePort(port)\n  timer = CreateObject(\"roTimespan\")\n  screenSize = {}\n  screenSize.width = screen.GetWidth()\n  screenSize.height = screen.GetHeight()\n\n  player = CreateObject(\"roVideoPlayer\")\n  player.SetContentList([\n    {\n        Stream : { url :\"http://ecn.channel9.msdn.com/o9/content/smf/smoothcontent/elephantsdream/Elephants_Dream_1024-h264-st-aac.ism/manifest\" }\n        StreamFormat : \"ism\"\n        TrackIDAudio: \"audio_eng\"\n        TrackIDSubtitle: \"ism/textstream_eng\"\n    }\n  ])\n\n  captions = player.GetCaptionRenderer()\n  if (mode = 1)\n    captions.SetScreen(screen)\n  endif\n  captions.SetMode(mode)\n  captions.SetMessagePort(port)\n  captions.ShowSubtitle(true)\n\n  player.play()\n\n  while true\n    msg = wait(250, port)\n    if type(msg) = \"roCaptionRendererEvent\"\n      if msg.isCaptionText()\n        print \"isCaptionText\"\n        if msg.GetMessage() <> invalid and msg.GetMessage() <> \"\"\n          DrawCaptionString(screen, screenSize, msg.GetMessage(), font)\n          timer.Mark()\n        else if timer.TotalSeconds() > 2\n          ClearCaptionString(screen)\n        endif\n      else if msg.isCaptionUpdateRequest()\n        print \"isCaptionUpdateRequest()\"\n        UpdateCaptions(screen, captions)\n      end if\n    endif\n  end while\nEnd Function\n\nFunction UpdateCaptions(screen as object, captions as object) as Void\n  screen.Clear(&h00)\n  captions.UpdateCaption()\n  screen.SwapBuffers()\nEnd Function\n\nFunction DrawCaptionString(screen as object, screenSize as object, caption as String, font as object) as Void\n  screen.Clear(&h00)\n  textHeight = font.GetOneLineHeight()\n  textWidth = font.GetOneLineWidth(caption, screenSize.width)\n  x = (screenSize.width - textWidth) / 2\n  y = screenSize.height - textHeight\n  screen.DrawText(caption, x, y, &hd5d522ff, font)\n  screen.SwapBuffers()\nEnd Function\n\nFunction ClearCaptionString(screen as object) as void\n  screen.Clear(&h00)\n  screen.SwapBuffers()\nEnd Function\n```"
        },
        "roChannelStore": {
            "name": "roChannelStore",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rochannelstore.md",
            "interfaces": [
                {
                    "name": "ifChannelStore",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifchannelstore.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roChannelStoreEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rochannelstoreevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roChannelStore"
                }
            ],
            "description": "The roChannelStore component allows the application to perform a purchase of an In-Channel Product or upgrade a channel. Most of the purchase flow, screens and messaging associated with the financial transaction are handled by the Roku OS outside of control or monitoring by BrightScript code. The BrightScript code merely initiates the purchase and receives a final result. This will engender trust with users and give them confidence that they are dealing with the Roku Channel Store.\n\nThe roChannelStore component allows purchasing only those In-Channel Products which are associated with the running channel. Please see [Adding in-channel products](/docs/developer-program/roku-pay/quickstart/in-channel-products.md \"Adding in-channel products\") for details on how to create an In-Channel Product and associate it with a channel. After one or Products are created, GetCatalog() can be used to retrieve a list of Products and their attributes. DoOrder() can be called to initiate a purchase of one or more of the Products.\n\nThe roChannelStore object has a FakeServer() method that will enable you to test the purchase flow scenarios without actually making a real transaction in the Roku channel store. This will be useful in the development of your channel, but should never be used in the actual channel you publish.\n\nThis object is created without any arguments:\n\n`CreateObject(\"roChannelStore\")`\n\n> Because [ifChannelStore.DoOrder()](/docs/references/brightscript/interfaces/ifchannelstore.md#doorder-as-boolean \"ifChannelStore.DoOrder()\") needs to read the product type returned by GetCatalog(), only one instance of roChannelStore should ever be used for a complete purchase flow - you should never create a separate roChannelStore object to complete a purchase that was initiated by a different instance of roChannelStore."
        },
        "roCodeRegistrationScreen": {
            "name": "roCodeRegistrationScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rocoderegistrationscreen.md",
            "interfaces": [
                {
                    "name": "ifCodeRegistrationScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iifCodeRegistrationScreen.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roCodeRegistrationScreenEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rocoderegistrationscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roCodeRegistrationScreen"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe Code Registration Screen is designed to present the user a registration code, and the information required to instruct the user on how to register with a service provider. This screen is designed for a rendezvous registration process, where the user is presented a code and the URL for a registration site. The user goes to the site and enters their code, which causes the device and the account to be linked. In the background, the script is polling for completion and the screen is closed to display an activation successful screen when done.\n\n**Diagram: roCodeRegistrationScreen**\n\n![Diagram: roCodeRegistrationScreen](https://image.roku.com/ZHZscHItMTc2/roCodeRegistrationScreenImage1.png \"roCodeRegistrationScreenImage1\")\n\n**Example**\n\n```\nFunction ShowMessageDialog() As Void\n     port = CreateObject(\"roMessagePort\")\n     screen = CreateObject(\"roCodeRegistrationScreen\")\n     screen.SetMessagePort(port)\n     screen.SetTitle(\"[Registration screen title]\")\n     screen.AddParagraph(\"[Registration screen paragraphs are justified to right and left edges]\")\n     screen.AddFocalText(\" \", \"spacing-dense\")\n     screen.AddFocalText(\"From your computer,\", \"spacing-dense\")\n     screen.AddFocalText(\"go to mysite.com/roku\", \"spacing-dense\")\n     screen.AddFocalText(\"and enter this code:\", \"spacing-dense\")\n     screen.AddFocalText(\" \", \"spacing-dense\")\n     screen.SetRegistrationCode(\"retrieving code...\")\n     screen.AddParagraph(\"[Registration screen paragraphs are justified to right and left edges and may continue on multiple lines]\")\n     screen.AddButton(0, \"get a new code\")\n     screen.AddButton(1, \"back\")\n     screen.Show()\n     sleep (10000) 'simulate fetching registration code from webapi\n     screen.SetRegistrationCode(\"ABC7TG\")\n     screen.Show()\n     while true\n         dlgMsg = wait(0, dialog.GetMessagePort())\n         exit while\n     end while\n End Function\n```\n\n**Image: roCodeRegistrationScreen example results**\n\n![cdregistscrn1](https://image.roku.com/ZHZscHItMTc2/cdregistscrn1.jpg \"cdregistscrn1\")\n\n![cdregistscrn2](https://image.roku.com/ZHZscHItMTc2/cdregistscrn2.jpg \"cdregistscrn2\")"
        },
        "roCompositor": {
            "name": "roCompositor",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rocompositor.md",
            "interfaces": [
                {
                    "name": "ifCompositor",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifcompositor.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roCompositor"
                }
            ],
            "description": "The roCompositor allows the composition and animation of multiple roBitmaps and roRegions.\n\nThis object can create and manage roSprites in a z-ordered list. The sprites can be of arbitrary size and can be thought of as planes. The compositor can manage collision detection between the sprites, support scrolling the sprite bitmap source, and support animated sprites (multi-frame sprites with frame-flipping animation). You may have multiple roCompositor components, and they can composite onto the same or separate bitmaps. That said, the most common scenario is to have a single roCompositor.\n\n**Example: Scrolling a bitmap**\n\n```\nLibrary \"v30/bslCore.brs\"\nFunction main()\n        black=&hFF'RGBA\n        screen=CreateObject(\"roScreen\")\n        compositor=CreateObject(\"roCompositor\")\n        compositor.SetDrawTo(screen, black)\n        http = CreateObject(\"roUrlTransfer\")\n        http.SetMessagePort(CreateObject(\"roMessagePort\"))\n        http.SetUrl(\"http://rokudev.roku.com/rokudev/examples/scroll/VeryBigPng.png\")\n        http.AsyncGetToFile(\"tmp:/VeryBigPng.png\")\n        wait(0, http.GetPort())\n        bigbm=CreateObject(\"roBitmap\",\"tmp:/VeryBigPng.png\")\n        region=CreateObject(\"roRegion\", bigbm, 0, 0, 1280, 720)\n        region.SetWrap(True)\n\n        view_sprite=compositor.NewSprite(0, 0, region)\n        compositor.draw()\n        screen.SwapBuffers()\n        msgport = CreateObject(\"roMessagePort\")\n        screen.SetMessagePort(msgport)\n        codes = bslUniversalControlEventCodes()\n        While True\n                msg=wait(0, msgport) ' wait for a button\n                print \"Msg: \"; type(msg); \" event: \"; msg.GetInt()\n                If type(msg)=\"roUniversalControlEvent\" Then\n                        If msg.GetInt()=codes.BUTTON_UP_PRESSED Then\n                                Zip(screen, view_sprite, compositor, 0,-4) 'up\n                        Else If msg.GetInt()=codes.BUTTON_DOWN_PRESSED Then\n                                Zip(screen, view_sprite, compositor, 0,+4) ' down\n                        Else If msg.GetInt()=codes.BUTTON_RIGHT_PRESSED Then\n                                Zip(screen, view_sprite, compositor, +4,0) ' right\n                        Else If msg.GetInt()=codes.BUTTON_LEFT_PRESSED Then\n                                Zip(screen, view_sprite, compositor, -4, 0) ' left\n                        Else If msg.GetInt() = codes.BUTTON_BACK_PRESSED ' back button\n                                Exit While\n                        End If\n                End If\n        End While\nEnd Function\nFunction Zip(screen, view_sprite, compositor, xd, yd)\n        For x=1 To 60\n                view_sprite.OffsetRegion(xd, yd, 0, 0)\n                compositor.draw()\n                screen.SwapBuffers()\n        End For\nEnd Function\n```"
        },
        "roDataGramSocket": {
            "name": "roDataGramSocket",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodatagramsocket.md",
            "interfaces": [
                {
                    "name": "ifSocket",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocket.md"
                },
                {
                    "name": "ifSocketAsync",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketasync.md"
                },
                {
                    "name": "ifSocketStatus",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketstatus.md"
                },
                {
                    "name": "ifSocketOption",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketoption.md"
                },
                {
                    "name": "ifSocketCastOption",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketcastoption.md"
                }
            ],
            "events": [
                {
                    "name": "roSocketEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifappinfo.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roDataGramSocket"
                }
            ],
            "description": "The roDataGramSocket component enables Brightscript apps to send and receive UDP packets. The interface is modeled on and works much like standard Berkeley sockets.\n\nThis object is created without any arguments:\n\n`CreateObject(\"roDataGramSocket\")`\n\n**Example**\n\n```\n' UDP 2-way peer-to-peer asynchronous comm on port 54321\n' periodically sends out a message to a specific address and port\n' prints any message it receives\nFunction UDPPeer()\n    msgPort = createobject(\"roMessagePort\")\n    udp = createobject(\"roDatagramSocket\")\n    udp.setMessagePort(msgPort) 'notifications for udp come to msgPort\n    addr = createobject(\"roSocketAddress\")\n    addr.setPort(54321)\n    udp.setAddress(addr) ' bind to all host addresses on port 54321\n    addr.SetHostName(\"10.1.1.1\")\n    udp.setSendToAddress(addr) ' peer IP and port\n    udp.notifyReadable(true)\n    timeout = 1 * 10 * 1000 ' ten seconds in milliseconds\n    deviceName = Createobject(\"roDeviceInfo\").GetFriendlyName()\n    message = \"Datagram from \" + deviceName\n    udp.sendStr(message)\n    continue = udp.eOK()\n    While continue\n        event = wait(timeout, msgPort)\n        If type(event)=\"roSocketEvent\"\n        If event.getSocketID()=udp.getID()\n                If udp.isReadable()\n                    message = udp.receiveStr(512) ' max 512 characters\n                    print \"Received message: '\"; message; \"'\"\n                End If\n            End If\n        Else If event=invalid\n            print \"Timeout\"\n            udp.sendStr(message) ' periodic send\n        End If\n    End While\n    udp.close() ' would happen automatically as udp goes out of scope\n\nEnd Function\n```\n\n> GetDeviceUniqueId() was deprecated in Spring OS 2019."
        },
        "roDateTime": {
            "name": "roDateTime",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodatetime.md",
            "interfaces": [
                {
                    "name": "ifDateTime",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifdatetime.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roDateTime"
                }
            ],
            "description": "The roDateTime provides an interface to obtain the current date/time for the player and manipulate date/times.\n\nThis component provides several options for obtaining attributes about the date/time. All times are GMT unless they are converted to the system timezone with a call to the method: toLocalTime().\n\nThis object is created with no parameters:\n\n`CreateObject(\"roDateTime\")`\n\nThe date/time of the object is set to the current system time when the object is created. The date/time represented by the object can be changed by calling Mark(), FromSeconds(), or FromISO8601String().\n\n**Example**\n\n```\ndate = CreateObject(\"roDateTime\")\nprint \"The date is now \"; date.AsDateString(\"long-date\")\n```"
        },
        "roDeviceInfo": {
            "name": "roDeviceInfo",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodeviceinfo.md",
            "interfaces": [
                {
                    "name": "ifDeviceInfo",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifdeviceinfo.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roDeviceInfoEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rodeviceinfoevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roDeviceInfo"
                }
            ],
            "description": "The Device Info provides an interface to obtain attributes about the device.\n\nThese attributes are not changeable by the script, but may be queried to obtain values for the player. It is common for scripts to need access to the serial number and model info for negotiating with backend services.\n\nThis object is created with no parameters:\n\n`CreateObject(\"roDeviceInfo\")`\n\n**Example**\n\n```\ndi = CreateObject(\"roDeviceInfo\")\nprint di.GetModel()\nprint di.GetVersion()\nprint di.GetChannelClientId()\n```\n\n**Output**\n\nThe output from the above code would like the following:\n\n```\n N1000\n 999.99E99999X\n 20E825000036\n```"
        },
        "roDouble": {
            "name": "roDouble",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodouble.md",
            "interfaces": [
                {
                    "name": "ifDouble",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifdouble.md"
                },
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "roDouble is the object equivalent for intrinsic type 'Double'.\n\nIt is a legacy object name, corresponding to the intrinsic Double object. Applications should use Double literal values and/or Double-typed variables directly."
        },
        "roDeviceCrypto": {
            "name": "roDeviceCrypto",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodevicecrypto.md",
            "interfaces": [
                {
                    "name": "ifDeviceCrypto",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifdevicecrypto.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roDeviceCrypto"
                }
            ],
            "description": "The roDeviceCrypto component enables you to encrypt and decrypt data on a device using a key that is unique per channel, device, or model. Using a channel key for example, you can encrypt data for a channel so that it may only be decrypted by that same channel. In this case, you could provision credentials or an API key from the cloud to devices securely. With a device key for example, you could implement a secure-storage like algorithm."
        },
        "roEVPCipher": {
            "name": "roEVPCipher",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roevpcipher.md",
            "interfaces": [
                {
                    "name": "ifEVPCipher",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifevpcipher.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "The EVP Cipher component provides an interface to the OpenSSL EVP library of symmetric cipher commands. The EVP library provides a high-level interface to cryptographic functions to implement digital \"envelopes\".\n\nThese commands allow data to be encrypted or decrypted using various block and stream ciphers using keys based on passwords or explicitly provided.\n\nSome of the ciphers do not have large keys and others have security implications if not used correctly. A beginner is advised to just use a strong block cipher in CBC mode such as bf or des3. All the block ciphers normally use PKCS#5 padding also known as standard block padding. If padding is disabled then the input data must be a multiple of the cipher block length.\n\n> For additional information on the OpenSSL library of symmetric ciphers see: [https://www.openssl.org/docs/manmaster/man1/enc.html](https://www.openssl.org/docs/manmaster/man1/enc.html).\n**List of supported ciphers**\n\n| Name | Cipher | Key size (bits) | Block size (bits) |\n| --- | --- | --- | --- |\n| bf-cbc | Blowfish in CBC mode | 128 | 64 |\n| bf | Alias for bf-cbc | 128 | 64 |\n| bf-cfb | Blowfish in CFB mode | 128 | 64 |\n| bf-ecb | Blowfish in ECB mode | 128 | 64 |\n| bf-ofb | Blowfish in OFB mode | 128 | 64 |\n| des-cbc | DES in CBC mode | 56 | 64 |\n| des | Alias for des-cbc | 56 | 64 |\n| des-cfb | DES in CBC mode | 56 | 64 |\n| des-ecb | DES in ECB mode | 56 | 64 |\n| des-ofb | DES in OFB mode | 56 | 64 |\n| des-ede-cbc | Two key triple DES EDE in CBC mode | 80 | 64 |\n| des-ede | Two key triple DES EDE in ECB mode | 80 | 64 |\n| des-ede-cfb | Two key triple DES EDE in CFB mode | 80 | 64 |\n| des-ede-ofb | Two key triple DES EDE in OFB mode | 80 | 64 |\n| des-ede3-cbc | Three key triple DES EDE in CBC mode | 112 | 64 |\n| des-ede3 | Three key triple DES EDE in ECB mode | 112 | 64 |\n| des3 | Alias for des-ede3-cbc | 112 | 64 |\n| des-ede3-cfb | Three key triple DES EDE in CFB mode | 112 | 64 |\n| des-ede3-ofb | Three key triple DES EDE in OFB mode | 112 | 64 |\n| desx | DESX algorithm | approx. 119 | 64 |\n| desx-cbc | DESX in CBC mode | approx. 119 | 64 |\n| aes-\\[128/192/256\\]-cbc | 128/192/256 bit AES in CBC mode | 128,192,256 | 128 |\n| aes-\\[128/192/256\\] | Alias for aes-\\[128/192/256\\]-cbc | 128,192,256 | 128 |\n| aes-\\[128/192/256\\]-cfb | 128/192/256 bit AES in 128 bit CFB mode | 128,192,256 | 128 |\n| aes-\\[128/192/256\\]-cfb1 | 128/192/256 bit AES in 1 bit CFB mode | 128,192,256 | 128 |\n| aes-\\[128/192/256\\]-cfb8 | 128/192/256 bit AES in 8 bit CFB mode | 128,192,256 | 128 |\n| aes-\\[128/192/256\\]-ecb | 128/192/256 bit AES in ECB mode | 128,192,256 | 128 |\n| aes-\\[128/192/256\\]-ofb | 128/192/256 bit AES in OFB mode | 128,192,256 | 128 |"
        },
        "roEVPDigest": {
            "name": "roEVPDigest",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roevpdigest.md",
            "interfaces": [
                {
                    "name": "ifEVPDigest",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifevpdigest.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roEVPDigest"
                }
            ],
            "description": "The EVP Digest component provides an interface to the OpenSSL EVP library of message digest algorithms. The EVP library provides a high-level interface to cryptographic hash functions.\n\nroEVPDigest processes an arbitrary amount of data and generates a hash of the data, using a selected algorithm.\n\n> For additional information on the OpenSSL library of message digest algorithms see: [http://www.openssl.org/docs/apps/dgst.html](http://www.openssl.org/docs/apps/dgst.html)\n**List of Supported Digest Algorithms**\n\n*   md5 - MD5 message digest algorithm (default)\n*   sha1 - SHA-1 message digest algorithm\n*   sha224 - SHA-2, 224 bit variant\n*   sha256 - SHA-2, 256 bit variant\n*   sha384 - SHA-2, 384 bit variant\n*   sha512 - SHA-2, 512 bit variant\n\n**Example: SHA1 Message Digest with roEVPDigest**\n\n```\nba = CreateObject(\"roByteArray\")\n' ...populate bytearray...\ndigest = CreateObject(\"roEVPDigest\")\ndigest.Setup(\"sha1\")\nresult = digest.Process(ba)\nprint result\n```\n\n**Example: MD5 Message Digest with roEVPDigest**\n\n```\nba1 = CreateOjbect(\"roByteArray\")\n' ...populate ba1...\nba2 = CreateObject(\"roByteArray\")\nba2.FromAsciiString(somestring)\ndigest = CreateObject(\"roEVPDigest\")\ndigest.Setup(\"md5\")\ndigest.Update(ba1)\ndigest.Update(ba2)\nresult = digest.Final()\nprint result\n```"
        },
        "roFileSystem": {
            "name": "roFileSystem",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rofilesystem.md",
            "interfaces": [
                {
                    "name": "ifFileSystem",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iffilesystem.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roFileSystemEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rofilesystemevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roFileSystem"
                }
            ],
            "description": "The roFilesystem component implements common filesystem inspection and modificationroutines.\n\nAll paths are matched case-insensitively, regardless of the case-sensitivity of the underlying filesystem. The supported character set is limited to only those characters supported by vfat filesystems (valid Windows characters). The usbplayer sample application is a good example of roFileSystem usage. USB devices with VFAT, NTFS, HFS, and HFS Plus filesystems are supported. The USB filesystems are currently mounted read only.\n\nThis object is created with no parameters:\n\n`CreateObject(\"roFileSystem\")`"
        },
        "roFloat": {
            "name": "roFloat",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rofloat.md",
            "interfaces": [
                {
                    "name": "ifFloat",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iffloat.md"
                },
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "roFloat is the object equivalent for intrinsic type 'Float'.\n\nThis is useful in the following situations:\n\n*   If any object exposes the ifFloat interface, that object can be used in any expression that expects an intrinsic value."
        },
        "roFont": {
            "name": "roFont",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rofont.md",
            "interfaces": [
                {
                    "name": "ifFont",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iffont.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "roFont represents a particular font, from a font-family (eg. Arial), with a particular pixel size (e.g 20), and a particular boldness or italicness.\n\nIt is used in conjunction with [roFontRegistry](/docs/references/brightscript/components/rofontregistry.md \"roFontRegistry\") to create and manage fonts. Font files are registered with roFontRegistry and then various methods in roFontRegistry can be used to create roFont objects. Applications should not create roFonts with CreateObject() but should always use roFontRegistry to create them. roFont objects in turn can be used with [ifDraw2D.DrawText](/docs/references/brightscript/interfaces/ifdraw2d.md#drawtextrgba-as-integer-x-as-integer-y-as-integer-text-as-string-font-as-object-as-boolean \"ifDraw2D.DrawText\") to draw text on the screen or into bitmaps.\n\n**Example**\n\n```\nscreen = CreateObject(\"roScreen\")\nwhite = &hFFFFFFFF\nblue = &h0000FFFF\nfont_registry = CreateObject(\"roFontRegistry\")\nfont = font_registry.GetDefaultFont()\n\n' Draw white text in a blue rectangle\ntext = \"Hello world\"\nw = font.GetOneLineWidth(text, screen.GetWidth())\nh = font.GetOneLineHeight()\nx = 200\ny = 100\nborder = 8\nscreen.DrawRect(x, y, w + 2*border, h + 2*border, blue)\nscreen.DrawText(text, x+border, y+border, white, font)\n```"
        },
        "roFontMetrics": {
            "name": "roFontMetrics",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rofontmetrics.md",
            "interfaces": [
                {
                    "name": "ifFontMetrics",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iffontmetrics.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "isRequired": true,
                            "type": "dynamic"
                        }
                    ],
                    "returnType": "roFontMetrics"
                }
            ],
            "description": "> This class is deprecated. Developers should use [roFont](/docs/references/brightscript/components/roFont.md \"roFont\") methods (GetOneLineHeight and GetOneLineWidth).\nThe roFontMetrics object allows you to get display size information for a specific font returned by the roFontRegistry.Get() method.\n\nIn order to use this object, you must first initialize the roFontMetrics object with a font name that had been previously registered with the roFontRegistry, then the total rendered size of strings in that font can be returned by roFontMetrics.Size().\n\nThis object is created with a string that represents the font to use in its size calculations:\n\n`CreateObject(\"roFontMetrics\", String font)`\n\n**Example: Simple use of roFontRegistry and roFontMetrics to render a string on the roImageCanvas**\n\n```\nhelloString = \"Hello ImageCanvas\"\n\nfontReg = CreateObject(\"roFontRegistry\")\nfontReg.Register(\"pkg:/fonts/LCDMono.ttf\")\nfont = fontReg.Get(\"LCDMono\",36,50,false) ' 36pt, 50 is normal\n                                          ' weight, no italics\n\nfontMetrics = CreateObject(\"roFontMetrics\", font)\nstringSize = fontMetrics.size(helloString)\n\ncanvasItem = { \n    Text:helloString\n    TextAttrs:{Color:\"#FFCCCCCC\", Font:font, \n    HAlign:\"HCenter\",\n    VAlign:\"VCenter\", Direction:\"LeftToRight\"}\n    TargetRect:{x:390,y:357, w:stringSize.w,h:stringSize.h}\n}\n\ncanvas = CreateObject(\"roImageCanvas\")\nport = CreateObject(\"roMessagePort\")\ncanvas.SetMessagePort(m.port)\n'Set opaque background\ncanvas.SetLayer(0, {Color:\"#FF000000\", CompositionMode:\"Source\"})\ncanvas.SetRequireAllImagesToDraw(true)\ncanvas.SetLayer(1, canvasItem)\ncanvas.Show()\n```"
        },
        "roFontRegistry": {
            "name": "roFontRegistry",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rofontregistry.md",
            "interfaces": [
                {
                    "name": "ifFontRegistry",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iffontregistry.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roFontRegistry"
                }
            ],
            "description": "The roFontRegistry object allows you to create roFont objects, either using the default font or using fonts in TrueType or OpenType files packaged with your application.\n\nThis object is created with no parameters:\n\n`CreateObject(\"roFontRegistry\")`\n\n**Example**\n\n```\nreg = CreateObject(\"roFontRegistry\")\nfont = reg.GetDefaultFont(30, false, false)\nscreen = CreateObject(\"roScreen\")\nscreen.DrawText(\"hello world\", 100, 100, &hFFFFFFFF, font)\n```\n\n**Example using a font file**\n\n```\nreg.Register(\"pkg:/fonts/myfont.ttf\")\nfont = reg.GetFont(\"MyFont\", 30, false, false)\nscreen = CreateObject(\"roScreen\")\nscreen.DrawText(\"hello world\", 100, 100, &hFFFFFFFF, font)\n```\n\nFont files can quickly get very large, so be conscious of the size of the font files you include with your application. You should be able to find very good font files that are 50k or less. Anything larger is probably too big. The customvideoplayer sample application is a good example of usage."
        },
        "roFunction": {
            "name": "roFunction",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rofunction.md",
            "interfaces": [
                {
                    "name": "ifFunction",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iffunction.md"
                },
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "roFunction is the object equivalent for intrinsic type Function."
        },
        "roGridScreen": {
            "name": "roGridScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rogridscreen.md",
            "interfaces": [
                {
                    "name": "ifGridScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgridscreen.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhttpagent.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roGridScreenEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rogridscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roGridScreen"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe Grid Screen provides a graphical display of poster art from multiple content categories from within a single screen.\n\nUsers can browse within a category list by scrolling horizonally and between category lists by scrolling vertically. There is an optional callout box in the lower right corner of the screen that can display details about the focused item without leaving the screen. Each item in the grid screen is represented by an image (aka poster), so any type of item that can be visually represented by an image can be displayed in the poster screen. It is used to show lists of data to users and common patterns include content categories, movies, podcasts, pictures, and search results. The initial release of roGridScreen only enabled the default list style, \"portrait\", using the following art sizes:\n\n*   Artwork sizes: SD=110x150; HD=210x270\n\nIt also required grid posters to be .jpg files.\n\nLater Roku OS versions added mixed aspect ratio grids, and the [ifGridScreen](/docs/references/brightscript/interfaces/ifgridscreen.md \"ifGridScreen\") interface [SetListPosterStyles()](/docs/references/brightscript/interfaces/ifgridscreen.md#setlistposterstylesstyles-as-object-as-void \"SetListPosterStyles()\") to set the aspect ratio of each row in the grid. If you want a mixed aspect ratio grid, you must call SetListPosterStyles() before you call [SetContentList()](/docs/references/brightscript/interfaces/ifgridscreen.md#setcontentlistrowindex-as-integer-contentlist-as-object-as-void \"SetContentList()\"), to avoid possible distortion of the graphic images in the grid.\n\n**Since Roku OS version 2.8**\n\nFile types of .png and .gif files are now supported, though they are converted internally to .jpg by the roGridScreen so they have a performance penalty.\n\nIn v2.8, there are now multiple grid styles that are specified in the SetGridStyle()method below. It's also worth going back and reviewing the appManager theme parameters in [roAppManager](/docs/references/brightscript/components/roappmanager.md \"roAppManager\"), as v2.8 adds some new grid parameters. The border around the focused poster screen can be customized with the GridScreenFocusBorder images in png format. PNG files can have a transparent color value that you will need to allow the focused poster image to show through the border image. The corresponding offsets should be negative offsets that would be up and to the left of the top left corner of the poster image. The width of the borders should be the absolute values of the offsets and the rest of the image should be transparent inside. The GridScreenDescriptionImage is also positioned relative to the top left corner of the focused image. It can be positioned up and to the left with negative x and y offsets, below and to the right with positive offsets, or in the other corners with mixed signed x and y offsets. It's recommended that you include a \"callout\" tip pointing to the focused image in the GridScreenDescriptionImage.\n\n**Diagram: roGridScreen**\n\n![Diagram: roGridScreen](https://image.roku.com/ZHZscHItMTc2/roGridScreen.png \"roGridScreen\")\n\nThis object is created with no parameters:\n\n`CreateObject(\"roGridScreen\")`\n\n**Example**\n\n```\nFunction Main()\n    port = CreateObject(\"roMessagePort\")\n    grid = CreateObject(\"roGridScreen\")\n    grid.SetMessagePort(port)\n    rowTitles = CreateObject(\"roArray\", 10, true)\n    for j = 0 to 10\n        rowTitles.Push(\"[Row Title \" + j.toStr() + \" ] \")\n    end for\n    grid.SetupLists(rowTitles.Count())\n    grid.SetListNames(rowTitles)\n    for j = 0 to 10\n    list = CreateObject(\"roArray\", 10, true)\n    for i = 0 to 10\n             o = CreateObject(\"roAssociativeArray\")\n             o.ContentType = \"episode\"\n             o.Title = \"[Title\" + i.toStr() + \"]\"\n             o.ShortDescriptionLine1 = \"[ShortDescriptionLine1]\"\n             o.ShortDescriptionLine2 = \"[ShortDescriptionLine2]\"\n             o.Description = \"\"\n             o.Description = \"[Description] \"\n             o.Rating = \"NR\"\n             o.StarRating = \"75\"\n             o.ReleaseDate = \"[<mm/dd/yyyy]\"\n             o.Length = 5400\n             o.Actors = []\n             o.Actors.Push(\"[Actor1]\")\n             o.Actors.Push(\"[Actor2]\")\n             o.Actors.Push(\"[Actor3]\")\n             o.Director = \"[Director]\"\n             list.Push(o)\n         end for\n         grid.SetContentList(j, list)\n     end for\n     grid.Show()\n     while true\n         msg = wait(0, port)\n         if type(msg) = \"roGridScreenEvent\" then\n             if msg.isScreenClosed() then\n                 return -1\n             elseif msg.isListItemFocused()\n                 print \"Focused msg: \";msg.GetMessage();\"row: \";msg.GetIndex();\n                 print \" col: \";msg.GetData()\n             elseif msg.isListItemSelected()\n                 print \"Selected msg: \";msg.GetMessage();\"row: \";msg.GetIndex();\n                 print \" col: \";msg.GetData()\n             endif\n         endif\n     end while\nEnd Function\n```"
        },
        "roHdmiStatus": {
            "name": "roHdmiStatus",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rohdmistatus.md",
            "interfaces": [
                {
                    "name": "ifHdmiStatus",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhdmistatus.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "The HDMI status component provides an interface to the current HDMI operational status.\n\nThis component allows you to query the status of the HDMI connection for the device through the ifHdmiStatus interface functions."
        },
        "roHMAC": {
            "name": "roHMAC",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rohmac.md",
            "interfaces": [
                {
                    "name": "ifHMAC",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhmac.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roHMAC"
                }
            ],
            "description": "The HMAC component provides an interface to the OpenSSL HMAC functions. These functions generate a Message Authentication Code (MAC) based on a key, in such a way that no one without the key could plausibly generate the MAC. HMAC uses a digest (hash) algorithm to generate the MAC.\n\n> For additional information on the OpenSSL HMAC functions, please see: [http://www.openssl.org/docs/crypto/hmac.html](http://www.openssl.org/docs/crypto/hmac.html)\n**Supported Digest Algorithms**\n\nThe supported digest algorithms are the same as those supported by [roEVPDigest](/docs/references/brightscript/components/roevpdigest.md \"roEVPDigest\").\n\n**Example**\n\n```\nhmac = CreateObject(\"roHMAC\")\nsignature_key = CreateObject(\"roByteArray\")\nsignature_key.fromAsciiString(getKey())\nIf hmac.setup(\"sha1\", signature_key) = 0\n    message = CreateObject(\"roByteArray\")\n    message.fromAsciiString(getMessage())\n    result = hmac.process(message)\n    print result.toBase64String()\nEnd If\n\n\nhmac = CreateObject(\"roHMAC\")\nsignature_key = CreateObject(\"roByteArray\")\nsignature_key.fromAsciiString(getKey())\nIf hmac.setup(\"sha1\", signature_key) = 0\n    message1 = CreateObject(\"roByteArray\")\n    message1.fromAsciiString(getMessage1())\n    hmac.update(message1)\n    message2 = CreateObject(\"roByteArray\")\n    message2.fromAsciiString(getMessage2())\n    hmac.update(message2)\n    result = hmac.final()\n    print result.toBase64String()\nEnd If\n```"
        },
        "roHttpAgent": {
            "name": "roHttpAgent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rohttpagent.md",
            "interfaces": [
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhttpagent.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roHttpAgent"
                }
            ],
            "description": "All SceneGraph nodes can use the roHttpAgent component to support cookies, custom HTTP headers, and support secure HTTP file transfer protocols, such as passing certificates to the server as part of a URL transfer. An roHttpAgent component object is created by default for all SceneGraph nodes for this purpose. The roHttpAgent object supports the [ifHttpAgent](/docs/references/brightscript/interfaces/ifhttpagent.md \"ifHttpAgent\") interface used by many BrightScript components to allow secure HTTP file transfer protocols. Child nodes of a SceneGraph node automatically inherit the parent roHttpAgent object, unless a new roHttpAgent object is created, or an existing roHttpAgent is set for a child node. There are two roSGNode [ifSGNodeHttpAgentAccess](/docs/references/brightscript/interfaces/ifsgnodehttpagentaccess.md \"ifSGNodeHttpAgentAccess\") interface methods that allow a specific roHttpAgent object to be selected and set for a specific SceneGraph node.\n\nAn roHttpAgent object is created automatically for all SceneGraph nodes, or can be created with no parameters:\n\n`CreateObject(\"roHttpAgent\")`\n\n> SceneGraph Audio and Video nodes always create a new roHttpAgent object and do not share it, and can use a different mechanism for HTTPS and cookie support, that involves setting certificates and cookies as Content Meta-Data attributes for the node ContentNode node."
        },
        "roImageCanvas": {
            "name": "roImageCanvas",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roimagecanvas.md",
            "interfaces": [
                {
                    "name": "ifImageCanvas",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifimagecanvas.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhttpagent.md"
                }
            ],
            "events": [
                {
                    "name": "roImageCanvasEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/roimagecanvasevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roImageCanvas"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roImageCanvas component provides an interface to render graphic elements at specific spots on the screen.\n\nAlthough it is not intended to be a full-fledged graphics component for high-performance gaming, it does provide a simple interface for building custom animations out of arrays of images displayed on the screen.\n\nAn item (graphical element) may be one of three types: image, text, or colored rectangle. The item type is determined by the [Content Meta-data](/docs/developer-program/getting-started/architecture/content-metadata.md \"Content Meta-data\") fields set on the item."
        },
        "roImageMetaData": {
            "name": "roImageMetadata",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roimagemetadata.md",
            "interfaces": [
                {
                    "name": "ifImageMetadata",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifimagemetadata.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "The roImageMetadata component provides developers access to image file metadata included in many .jpg EXIF headers.\n\nroImageMetadata currently only works with local file Urls.\n\nThis object is created without any arguments:\n\n`CreateObject(\"roImageMetadata\")`"
        },
        "roInput": {
            "name": "roInput",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roinput.md",
            "interfaces": [
                {
                    "name": "ifInput",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifinput.md"
                }
            ],
            "events": [
                {
                    "name": "roInputEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/roinputevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roInput"
                }
            ],
            "description": "An roInput object can be used to receive events sent from a network client using the External Control Protocol (ECP), as described in [External Control API](/docs/developer-program/debugging/external-control-api.md \"External Control API\").\n\n> The [supports\\_input\\_launch manifest flag](/docs/developer-program/getting-started/architecture/channel-manifest.md#launch-requirement-attributes) must be set for channels to accept deep linking parameters when already running. This flag enables deep linking into content without relaunching the channel. See the [Deep Linking sample channel](https://github.com/rokudev/deep-Linking-samples) for how to use roInput to handle deep links into content while the channel is already running.\nRefer to [External Control Service Commands](/docs/developer-program/debugging/external-control-api.md#external-control-service-commands \"External Control Service Commands\") for information about the ECP input command.\n\nThis object is created without any arguments:\n\n`CreateObject(\"roInput\")`\n\n**Example**\n\nThe following prints information received from an external device in JSON format. If the external device sends the following input command:\n\n```\ncurl -d '' '<roku_target_device>:8060/input?my_event=My%20Test&x=100&y=200&action=start'\n```\n\nThe following will be printed:\n\n```\n{\"action\":\"start\",\"my_event\":\"My Test\",\"x\":\"100\",\"y\":\"200\"}\n```\n\n**roInput Example**\n\n```\nmsgPort = CreateObject(\"roMessagePort\")\n\ninput = CreateObject(\"roInput\")\ninput.SetMessagePort(msgPort)\n\nprint \"Waiting for messages...\"\nwhile true\n  msg = wait(0, msgPort)\n  if type(msg) = \"roInputEvent\"\n    if msg.IsInput()\n      info = msg.GetInfo()\n      print \"Received input: \"; FormatJSON(info)\n    end if\n  end if\nend while\n```"
        },
        "roInt": {
            "name": "roInt",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roint.md",
            "interfaces": [
                {
                    "name": "ifInt",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifint.md"
                },
                {
                    "name": "ifIntOps",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifintops.md"
                },
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roInt"
                }
            ],
            "description": "roInt is the object equivalent for intrinsic type Integer.\n\nThis is useful in the following situations:\n\n*   When an object is needed, instead of an intrinsic value. For example, \"roList\" maintains a list of objects. If an Integer is added to roList, it will be automatically wrapped in an roInt by the language interpreter. When a function that expects a BrightScript Component as a parameter is passed an int, BrightScript automatically creates the equivalent BrightScript Component.\n*   If any object exposes the ifInt interface, that object can be used in any expression that expects an intrinsic value. For example, in this way an roTouchEvent can be used as an integer whose value is the userid of the roTouchEvent.\n\n> If o is an roInt, then the following statements have the following effects\n> \n> print o ' prints o.GetInt()\n> \n> i%=o ' assigns the integer i% the value of o.GetInt()\n> \n> k=o 'presumably k is dynamic typed, so it becomes another reference to the roInt o\n> \n> o=5 'this is NOT the same as o.SetInt(5). Instead it releases o, and 'changes the type of o to Integer (o is dynamically typed). And assigns it to 5.\n**Example**\n\n```\nBrightScript> o=CreateObject(\"roInt\")\nBrightScript> o.SetInt(555)\nBrightScript> print o\n555\nBrightScript> print o.GetInt()\n555\nBrightScript> print o-55\n500\n```"
        },
        "roInvalid": {
            "name": "roInvalid",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roinvalid.md",
            "interfaces": [
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "roInvalid is the object equivalent for intrinsic type 'Invalid'."
        },
        "roKeyboardScreen": {
            "name": "roKeyboardScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rokeyboardscreen.md",
            "interfaces": [
                {
                    "name": "ifKeyboardScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifkeyboardscreen.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roKeyboardScreenEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rokeyboardscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roKeyboardScreen"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe Keyboard Screen is designed to allow the user to enter an alpha-numeric string for searching, username/password registration or other purposes.\n\nThis component is generally used as part of a sequence of screens and the results are displayed on the subsequent screen in the sequence. In the case of a search screen, results are displayed on the roPosterScreen and categories may be used to segregate TV and Movie results.\n\n**Diagram: roKeyboardScreen**\n\n![**Diagram: roKeyboardScreen**](https://image.roku.com/ZHZscHItMTc2/roKeyboardScreenImage1.png \"roKeyboardScreenImage1\")\n\n**Example**\n\n```\nSub Main()\n     screen = CreateObject(\"roKeyboardScreen\")\n     port = CreateObject(\"roMessagePort\")\n     screen.SetMessagePort(port)\n     screen.SetTitle(\"Search Screen\")\n     screen.SetText(\"default\")\n     screen.SetDisplayText(\"enter text to search\")\n     screen.SetMaxLength(8)\n     screen.AddButton(1, \"finished\")\n     screen.AddButton(2, \"back\")\n     screen.Show()\n\n     while true\n         msg = wait(0, screen.GetMessagePort())\n         print \"message received\"\n         if type(msg) = \"roKeyboardScreenEvent\"\n             if msg.isScreenClosed()\n                 return\n             else if msg.isButtonPressed() then\n                 print \"Evt:\"; msg.GetMessage ();\" idx:\"; msg.GetIndex()\n                 if msg.GetIndex() = 1\n                     searchText = screen.GetText()\n                     print \"search text: \"; searchText\n                     return\n                 endif\n             endif\n         endif\n     end while\nEnd Sub\n```\n\n**Image: roKeyboardScreen example results**\n\n![Image: roKeyboardScreen example results](https://image.roku.com/ZHZscHItMTc2/roKeyboardScreenImage2.png \"roKeyboardScreenImage2\")"
        },
        "roList": {
            "name": "roList",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolist.md",
            "interfaces": [
                {
                    "name": "ifList",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iflist.md"
                },
                {
                    "name": "ifArray",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarray.md"
                },
                {
                    "name": "ifArrayGet",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarrayget.md"
                },
                {
                    "name": "ifArraySet",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarrayset.md"
                },
                {
                    "name": "ifEnum",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifenum.md"
                },
                {
                    "name": "ifListToArray",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iflisttoarray.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roList"
                }
            ],
            "description": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members. The array operator \\[ \\] can be used to access any element in the ordered list.\n\n**Example**\n\nImplementation:\n\n```\nlist = CreateObject(\"roList\")\nlist.AddTail(\"a\")\nlist.AddTail(\"b\")\nlist.AddTail(\"c\")\nlist.AddTail(\"d\")\nlist.ResetIndex()\nx= list.GetIndex()\nwhile x <> invalid\n    print x\n    x = list.GetIndex()\nend while\n\n\nprint list[2]\n```\n\nOutput:\n\n```\na\nb\nc\nd\nc \n```"
        },
        "roListScreen": {
            "name": "roListScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolistscreen.md",
            "interfaces": [
                {
                    "name": "ifListScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iflistscreen.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhttpagent.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roListScreenEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rolistscreenevent.md"
                }
            ],
            "constructors": [],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe List Screen provides a graphical display of content in a vertical list within a single screen.\n\nUsers can browse the content by scrolling the text list vertically. The vertical list is displayed on the left side of the screen and the poster is displayed on the right side of the screen. As the user scrolls through the content, the poster is updated with the poster art of the focused list item. There is an optional short description text below the poster that can display the description of the focused item and gets updated as the user scrolls the list.\n\nThe poster art uses the following art sizes:\n\n```\n         Artwork sizes: SD=136x124; HD=250x250\n```\n\nroListScreen has a default dark highlight for the focused list item. The highlight can be customized by including a .png file with the following dimensions:\n\n```\n         Highlight sizes: SD=304x38; HD=511x54\n```\n\n![List Screen Draft](https://image.roku.com/ZHZscHItMTc2/roListScreen.png \"roListScreen\")"
        },
        "roLocalization": {
            "name": "roLocalization",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolocalization.md",
            "interfaces": [
                {
                    "name": "ifLocalization",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iflocalization.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roLocalization"
                }
            ],
            "description": "The roLocalization object provides functions to assist in localization. This object provides functions to assist in localization.\n\nIt is created with no parameters:\n\n`CreateObject(\"roLocalization\")`\n\n**Example**\n\n```\nloc = CreateObject(\"roLocalization\")\nimage = loc.GetLocalizedAsset(\"images\", \"splash.png\")\n```"
        },
        "roLongInteger": {
            "name": "roLongInteger",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolonginteger.md",
            "interfaces": [
                {
                    "name": "ifLongInt",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iflongint.md"
                },
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "roLongInteger is the object name corresponding to the intrinsic LongInteger object."
        },
        "roMessageDialog": {
            "name": "roMessageDialog",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/romessagedialog.md",
            "interfaces": [
                {
                    "name": "ifMessageDialog",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifmessagedialog.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roMessageDialogEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/romessagedialogevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roMessageDialog"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe Message Dialog displays a formatted, multi-line text message to the user. The dialog may optionally be displayed with a busy animation to indicate progress on a long running operation. The dialog will automatically handle formatting of text and resize to fit. It may also display buttons to get user acknowledgment or a selection choice.\n\nThe following example shows an roMessageDialog with a single done button. When the title, text and button are added, the dialog automatically formats and resizes the dialog as needed for display when Show() is called.\n\n**Diagram: roMessageDialog**\n\n![Diagram: roMessageDialog](https://image.roku.com/ZHZscHItMTc2/roMessageDialog.png \"roMessageDialog\")\n\n**Example**\n\nThe following code example creates a message dialog and displays it to the user. Note that dialogs are not full screen and that the previous screen is dimmed and displays in the background. When the user presses the message dialog button, the dialog is dismissed and the previous screen comes to the foreground. Since dialog.EnableBackButton(true) is also called, the message dialog is dismissed when the remote control's back button is pressed as well. You can of course add additional buttons to your message dialogs that do things other than dismiss the dialog. You would simply need to implement button specific event handling code for these cases in the dlgMsg.isButtonPressed() code block.\n\n```\nFunction ShowMessageDialog() As Void\n    port = CreateObject(\"roMessagePort\")\n    dialog = CreateObject(\"roMessageDialog\")\n    dialog.SetMessagePort(port)\n    dialog.SetTitle(\"[Message dialog title]\")\n    dialog.SetText(\"[Message dialog text............]\")\n\n    dialog.AddButton(1, \"[button text]\")\n    dialog.EnableBackButton(true)\n    dialog.Show()\n    While True\n        dlgMsg = wait(0, dialog.GetMessagePort())\n        If type(dlgMsg) = \"roMessageDialogEvent\"\n            if dlgMsg.isButtonPressed()\n                if dlgMsg.GetIndex() = 1\n                    exit while\n                end if\n            else if dlgMsg.isScreenClosed()\n                exit while\n            end if\n        end if\n    end while\nEnd Function\n```\n\n**Image: roMessageDialog example results**\n\n![roMessageDialog example results](https://image.roku.com/ZHZscHItMTc2/roMessageDialogimage2.png \"roMessageDialogimage2\")"
        },
        "roMessagePort": {
            "name": "roMessagePort",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/romessageport.md",
            "interfaces": [
                {
                    "name": "ifMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifmessageport.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roMessagePort"
                }
            ],
            "description": "A Message Port is the place messages ([events](/docs/developer-program/core-concepts/event-loops.md)) are sent.\n\nWhen using BrightScript, you would not call these functions directly. Instead, use the \"Wait\" BrightScript statement.\n\nThis object is created with no parameters:\n\n`CreateObject(\"roMessagePort\")`"
        },
        "roMicrophone": {
            "name": "roMicrophone",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/romicrophone.md",
            "interfaces": [
                {
                    "name": "ifMicrophone",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifmicrophone.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roMicrophoneEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/romicrophoneevent.md"
                }
            ],
            "constructors": [],
            "description": "The roMicrophone API allows channel applications to receive audio data from the user’s microphone-supported remote control device or mobile phone. When a user initiates recording on their remote control device or mobile phone (via the Roku Mobile App) for the first time within the application, the application will request the user’s permission for the application to access the microphone by displaying a UI dialog box.\n\nThe application will only receive microphone access if the permission is granted by the user.\n\n![microphone-access](https://image.roku.com/ZHZscHItMTc2/microphone-access.jpg \"microphone-access\")\n\nAfter the permission is granted, whenever a user activates the microphone, the application will display a notice informing the user that the microphone is currently being used by the application.\n\nFrom the settings menu (Settings > Privacy > Microphone), the user can revoke microphone permissions from individual applications, at which time the particular application will not be able to access the microphone unless the user re-enables microphone permissions.\n\nFrom the settings menu, the user may also:\n\n*   (a) enable universal microphone access permissions for all applications (thereby eliminating the need to request microphone permission on an application by application basis), and\n*   (b) prohibit all applications from accessing the microphone.\n\n![microphone-setting](https://image.roku.com/ZHZscHItMTc2/microphone-setting.jpg \"microphone-setting\")\n\nWhen integrating the roMicrophone API, you acknowledge and agree to the following:\n\n*   (i) that you will notify your users of your collection, use, and disclosure of any voice recordings or other derived data that you receive through the roMicrophone API;\n*   (ii) you will not modify, circumvent, obscure, or otherwise diminish the notices provided by the roMicrophone API to users when they activate or enable microphone recording from their remote control device or mobile phone;\n*   (iii) you will not collect any information from, or otherwise activate, the microphone on any remote control device or mobile phone using the roMicrophone API feature without receiving the requisite permissions from the user;\n*   (iv) you have and will maintain a legally adequate privacy policy;\n*   (v) you have and will maintain all necessary rights and consents from users to use the roMicrophone API features; and\n*   (vi) your use of the roMicrophone API features will comply with all applicable laws, rules, and regulations.\n\nYOU FURTHER AGREE YOU WILL NOT USE THE roMicrophone API AND FEATURES IN CONNECTION WITH CONTENT OR CHANNELS DIRECTED TOWARD CHILDREN OR IN CONNECTION WITH USERS KNOWN TO BE CHILDREN. If Roku discovers or determines that you are using the roMicrophone API and features in connection with content or channels directed toward children or with users known to be children, Roku reserves the right to disable or otherwise limit your access to the roMicrophone API feature and related functionality.\n\nYOU MAY NOT ENABLE THE roMicrophone API FEATURES IF YOU DO NOT AGREE TO ABOVE. PLEASE CONTACT ROKU FOR FURTHER INFORMATION. Implementation\n\nThe application should display a focusable button or indicator in the UI that the user selects by pressing and holding the OK button. In response to the OK press event, the application can call:\n\n*   [StartRecording()](/docs/references/brightscript/interfaces/ifmicrophone.md \"StartRecording\") - to receive streamed audio data from the microphone asynchronously or\n*   [RecordToFile()](/docs/references/brightscript/interfaces/ifmicrophone.md \"RecordToFile()\") - to have the audio data directly captured to a WAV format output file.\n\n> Roku OS will display a HUD to let the user initially consent to be recorded and to subsequently be informed when the microphone is being used. Recording is performed as long as the user holds down the OK button, or until a limit is reached or if an error should occur."
        },
        "roOneLineDialog": {
            "name": "roOneLineDialog",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roonelinedialog.md",
            "interfaces": [
                {
                    "name": "ifOneLineDialog",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifonelinedialog.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifGetMessagePort.md"
                }
            ],
            "events": [
                {
                    "name": "roOneLineDialogEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/roonelinedialogevent.md"
                }
            ],
            "constructors": [],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe One Line Dialog is a special type of dialog optimized for single line text.\n\nUnlike the message dialog ([roMessageDialog](/docs/references/brightscript/components/roMessageDialog.md \"roMessageDialog\")) which displays formatted multi-line messages, roOneLineDialog displays a single line of text centered for the user.\n\nThis dialog is optimized for rendering of single-line text strings. It is generally used for displaying text to indicate that an operation is in progress. When the operation completes, the dialog is destroyed and the message dialog disappears."
        },
        "roParagraphScreen": {
            "name": "roParagraphScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roparagraphscreen.md",
            "interfaces": [
                {
                    "name": "ifParagraphScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifparagraphscreen.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roParagraphScreenEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/roparagraphscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roParagraphScreen"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe Paragraph Screen provides a way to display text and selection choices to the user.\n\nThis type of screen is frequently used for implementing wizard functionality to guide the user through a specific task. The caller may specify header text which is displayed at the top of the screen and one or more paragraphs of text on the screen. In addition, one or more buttons may be added to the screen to get user input or allow navigation. The screen is designed to automatically format the text, headings and buttons and create the photo-fit for them on screen. Some care must be taken to not provide too much text or clipping may occur.\n\n![roParagraphScreen image](https://image.roku.com/ZHZscHItMTc2/roParagraphScreenImage1.png \"roParagraphScreenImage1\")\n\nThis object is created with no parameters:\n\n`CreateObject(\"roParagraphScreen\")`\n\n**Example**\n\n```\nFunction ShowParagraphScreen() As Void\n    port = CreateObject(\"roMessagePort\")\n    screen = CreateObject(\"roParagraphScreen\")\n    screen.SetMessagePort(port)\n    screen.SetTitle(\"[Screen Title]\")\n    screen.AddHeaderText(\"[Header Text]\")\n    screen.AddParagraph(\"[Paragraph text 1 - Text in the paragraph screen is justified to the right and left edges]\")\n    screen.AddParagraph(\"[Paragraph text 2 - Multiple paragraphs may be added to the screen by simply making additional calls]\")\n    screen.AddButton(1, \"[button text 1]\")\n    screen.AddButton(2, \"[button text 2]\")\n    screen.Show()\n    while true\n        msg = wait(0, screen.GetMessagePort())\n        if type(msg) = \" roParagraphScreenEvent\"\n            exit while\n        endif\n    end while\nEnd Function\n```\n\n**Image: roParagraphScreen example results**\n\n![Image: roParagraphScreen example results](https://image.roku.com/ZHZscHItMTc2/roParagraphScreenImage2.png \"roParagraphScreenImage2\")"
        },
        "roPath": {
            "name": "roPath",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/ropath.md",
            "interfaces": [
                {
                    "name": "ifPath",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifpath.md"
                },
                {
                    "name": "ifString",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifstring.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "isRequired": true,
                            "type": "string"
                        }
                    ],
                    "returnType": "roPath"
                },
                {
                    "params": [
                        {
                            "name": "param1",
                            "isRequired": true,
                            "type": "dynamic"
                        }
                    ],
                    "returnType": "roPath"
                }
            ],
            "description": "The roPath component provides developers an easy way to create valid file system paths.\n\nThe roPath component is a convenience class that implements [ifString](/docs/references/brightscript/interfaces/ifstring.md \"ifString\") while providing additional validation and path inspection functionality. See [File System](docs/developer-program/getting-started/architecture/file-system.md \"File System\") for more information about valid path names.\n\nThis object is created with a string that represents the initial path:\n\n`CreateObject(\"roPath\", \"ext1:/vid\")`\n\n**Example**\n\n```\npath = CreateObject(\"roPath\", filename)\nparts = path.Split()\nif parts.phy = \"tmp:\" then print \"this is a temp file\"\nif parts.extension = \".bmp\" then print \"this is a bitmap file\"\n```"
        },
        "roPinEntryDialog": {
            "name": "roPinEntryDialog",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/ropinentrydialog.md",
            "interfaces": [
                {
                    "name": "ifPinEntryDialog",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifpinentrydialog.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roPinEntryDialogEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/ropinentrydialogevent.md"
                }
            ],
            "constructors": [],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe Pin Entry Dialog is designed to allow the user to enter a numeric PIN for purchasing content.\n\nUsers establish a PIN on the partner's website for purchasing transactions. The roPinEntryDialog allows the script to present the user with a pop-up, modal dialog for PIN entry and then the script can subsequently call the API's to conclude the purchase transaction. When the last digit is entered, focus jumps to the first button.\n\n**Image: roPinEntryDialog sample**\n\n![roPinEntryDialog](https://image.roku.com/ZHZscHItMTc2/roPinEntryDialog.png \"roPinEntryDialog\")"
        },
        "roPosterScreen": {
            "name": "roPosterScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roposterscreen.md",
            "interfaces": [
                {
                    "name": "ifPosterScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifposterscreen.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhttpagent.md"
                }
            ],
            "events": [
                {
                    "name": "roPosterScreenEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/roposterscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roPosterScreen"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThis object is created with no parameters:\n\n`CreateObject(\"roPosterScreen\")`\n\nThe Poster Screen provides a graphical display of poster art for content selection or can be used as a submenu to provide hierarchical structure to the application.\n\nIn some cases, applications may wish to present a flat single-level list of titles in a queue, but the Poster Screen can also be used at multiple levels in the application to provide hierarchical browsing. It also provides an optional \"filter banner\" for displaying categories representing filtered subsets of the data or categorized groups.\n\nEach item in the poster screen is represented by an image (aka poster), so any type of item that can be visually represented by an image can be displayed in the poster screen. It is used to show lists of data to users and common patterns include content categories, movies, podcasts, and search results.\n\nJust below the overhang is the filter banner. It allows a method of easily selecting or filtering content based on categories. The categories are set by the developer during screen initialization, and the script is notified when a new category is highlighted or selected. Based on the event notification, the script can set the desired content in the view. The filter banner is optional.\n\n**Diagram: roPosterScreen (flat-category)**\n\n![Diagram: roPosterScreen (flat-category)](https://image.roku.com/ZHZscHItMTc2/roPosterScreenImage1.png \"roPosterScreenImage1\")\n\nShortDescriptionLine1 from the content metadata. Generally the category title.\n\nShortDescriptionLine2 from the content metadata. Generally a description for the category.\n\n**Diagram: roPosterScreen (arced-landscape)**\n\n![Diagram: roPosterScreen (arced-landscape](https://image.roku.com/ZHZscHItMTc2/roPosterScreenImage2.png \"roPosterScreenImage2\")\n\n**Diagram: roPosterScreen (arced-portrait)**\n\n![Diagram: roPosterScreen (arced-portrait)](https://image.roku.com/ZHZscHItMTc2/roPosterScreenImage3.png \"roPosterScreenImage3\")\n\n**Diagram: roPosterScreen (flat-episodic)**\n\n![Diagram: roPosterScreen (flat-episodic)](https://image.roku.com/ZHZscHItMTc2/roPosterScreenImage4.png \"roPosterScreenImage4\")\n\nTV content is often displayed as a series of episodes within a season. The flat-episodic screen type provides a standard way to display episodic content, such as a TV series.\n\nThere is also a flat-episodic-16x9-episodic screen type to display episodic content with 16x9 images.\n\nThe paragraph text allows the user to view the synopsis for the currently selected episode. As the user scrolls right/left to select a new episode, the paragraph text and the short description lines are updated to reflect the description of the highlighted episode\n\nIn order to see poster art in the side posters instead of episode numbers, please ensure that the SDPosterUrl and HDPosterUrl are defined for the content and that episodeNumber is not defined for that content. EpisodeNumber overrides the poster URL.\n\n**Example**\n\n```\nFunction Main()\n     port = CreateObject(\"roMessagePort\")\n     poster = CreateObject(\"roPosterScreen\")\n     poster.SetBreadcrumbText(\"[location1]\", \"[location2]\")\n     poster.SetMessagePort(port)\n     list = CreateObject(\"roArray\", 10, true)\n     For i = 0 To 10\n         o = CreateObject(\"roAssociativeArray\")\n         o.ContentType = \"episode\"\n         o.Title = \"[Title]\"\n         o.ShortDescriptionLine1 = \"[ShortDescriptionLine1]\"\n         o.ShortDescriptionLine2 = \"[ShortDescriptionLine2]\"\n         o.Description = \"\"\n         o.Description = \"[Description] \"\n         o.Rating = \"NR\"\n         o.StarRating = \"75\"\n         o.ReleaseDate = \"[<mm/dd/yyyy]\"\n         o.Length = 5400\n         o.Categories = []\n         o.Categories.Push(\"[Category1]\")\n         o.Categories.Push(\"[Category2]\")\n         o.Categories.Push(\"[Category3]\")\n         o.Actors = []\n         o.Actors.Push(\"[Actor1]\")\n         o.Actors.Push(\"[Actor2]\")\n         o.Actors.Push(\"[Actor3]\")\n         o.Director = \"[Director]\"\n         list.Push(o)\n     End For\n     poster.SetContentList(list)\n     poster.Show()\n\n     While True\n         msg = wait(0, port)\n         If msg.isScreenClosed() Then\n             return -1\n         ElseIf msg.isListItemSelected()\n             print \"msg: \";msg.GetMessage();\"idx: \";msg.GetIndex()\n         End If\n     End While\n End Function\n```\n\nThe following screen is displayed when this code is executed:\n\n![Image: roPosterScreen example result](https://image.roku.com/ZHZscHItMTc2/roPosterScreenImage5.png \"roPosterScreenImage5\")\n\n**Image: roPosterScreen example result**\n\nNote that in this example, we did not set valid values for SDPosterUrl or HDPoster URL, so no artwork is displayed. We have also elected not to display the filter banner and did not call the SetListNames API, so no filter banner is displayed. The screen is fully functional in other respects and responds to user input, scrolls left/right and receives events as the poster selection changes."
        },
        "roProgramGuide": {
            "name": "roProgramGuide",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roprogramguide.md",
            "interfaces": [
                {
                    "name": "ifProgramGuide",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifprogramguide.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "Represents Electronic Program Guide (EPG) information from the tuner.\n\nSome Roku devices incorporate a tuner giving access to broadcast TV and radio received over an antenna or cable. In addition to the video and audio data from the tuner, the Roku Player receives electronic program guide (EPG) data about the currently-broadcasting program, and the next few programs to be broadcast. The roProgramGuide object provides access to that guide data.\n\nThis object can be created with no parameters:\n\n`createObject(\"roProgramGuide\")`"
        },
        "roRegex": {
            "name": "roRegex",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roregex.md",
            "interfaces": [
                {
                    "name": "ifRegex",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifregex.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "isRequired": true,
                            "type": "string"
                        },
                        {
                            "name": "param2",
                            "isRequired": true,
                            "type": "string"
                        }
                    ],
                    "returnType": "roRegex"
                }
            ],
            "description": "The roRegex component provides the powerful regular expression processing of the PCRE library to Brightscript strings.\n\n> Please see the PCRE documentation ([http://www.pcre.org/](http://www.pcre.org/)) for documentation on the PCRE library used for regular expression matching. See the [perlre documentation](http://perldoc.perl.org/perlre.html) for complete documentation of the possible regular expressions this library can parse and match. In general, most Perl compatible regular expressions are supported.\nThis object is created with a string that represents the matching-pattern and a string to indicate flags that modify the behavior of the matching operation(s):\n\n`CreateObject(\"roRegex\", \"[a-z]+\", \"i\")`\n\nThe match string (\"\\[a-z\\]+\" in the example above, which matches all lowercase letters) can include most Perl compatible regular expressions documented in the PCRE documentation ([http://www.pcre.org/](http://www.pcre.org/)).\n\nAny combination of the following behavior flags (\"i\" in the example above which modifies to match upper and lowercase letters) is supported:\n\n*   \"i\" Case insensitive match\n*   \"m\" Multiline mode. The start of line \"^\" and end of line \"$\" constructs match immediately following or before any newline in the subject string as well as the very start and end of the string. Normally, just the start and end of the string would match.\n*   \"s\" Sets dot-all mode that includes newline in the \".\\*\" regular expression. This modifier is equivalent to Perl's /s modifier.\n*   \"x\" Sets extended mode that ignores whitespace characters except when escaped or inside a character class. Characters between an unescaped # outside a character a character class and the next newline character, inclusive, are also ignored. This modifier is equivalent to Perl's /x modifier."
        },
        "roRegion": {
            "name": "roRegion",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roregion.md",
            "interfaces": [
                {
                    "name": "ifRegion",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifregion.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "The roRegion component is used to represent a subsection of a bitmap.\n\nThe region is specified with an x,y, width, and height as well as a time field for use with animated sprites and a wrap field which causes the region to wrap during scrolling. The roRegion is a common parameter used by the drawing functions of [roBitmap](/docs/references/brightscript/components/robitmap.md \"roBitmap\"). Wrap and Time are used by [roCompositor](/docs/references/brightscript/components/roCompositor.md \"roCompositor\"). roRegion is also used to specify a pretranslation (x,y) for the draw, rotate, and scale operation. The pretranslation is normally used to specify the center of the region. The scaling operation is controlled by the scalemode specified in the region.\n\nThis object is created with parameters to initialize the x,y coordinates, width, height. If time and wrap are desired, use the SetTime() and SetWrap().\n\n`CreateObject(\"roRegion\", Object bitmap, Integer x, Integer y,Integer width, Integer height)`"
        },
        "roRegistry": {
            "name": "roRegistry",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roregistry.md",
            "interfaces": [
                {
                    "name": "ifRegistry",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifregistry.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roRegistry"
                }
            ],
            "description": "The Registry is an area of non-volatile storage where a small number of persistent settings can be stored.\n\nThe Registry provides a means for an application to write and read small amounts of data such as settings, scores, etc. The data persists even if the user exits the application and even if the player is rebooted. Registry data is removed only when the application explicitly removes it, the user uninstalls the application, which remove the registry for the application, or the user performs a factory reset, which removes the registry for all applications.\n\nAccess to the registry is available through the roRegistry object. This object is created with no parameters:\n\n`CreateObject(\"roRegistry\")`\n\nThere is a separate registry for each [developer ID](/docs/developer-program/publishing/packaging-channels.md#step-3-run-the-genkey-utility-to-create-a-signing-key \"developer ID\"). This allows multiple applications to use the registry without being able to read or modify the registry from other applications. If desired, a single registry can be shared across multiple applications by using the same developer ID to package the applications. This is the conventional way that an \"application suite\" with shared preferences and other shared information should work. Each registry is divided into sections which are specified by the developer for organization and grouping of attributes. Methods in ifRegistry are provided to list the sections in the registry and to provide access to the data in each section.\n\n> The maximum size of each zlib-compressed application registry is **16K bytes**. Channels should minimize the amount of data stored in the registry and the frequency in which they update it.\n> \n> Use the **ifRegistry.GetSpaceAvailable()** function to check the number of bytes available in the registry.\nThe Registry also supports the use of a special transient registry section. A registry section named \"Transient\" can be used to store attributes that have the lifetime of a single boot. Within a specific boot session, these values will be persistent to the application and stored as any other registry value. Whenever the user reboots the Roku Streaming Player, all \"Transient\" registry sections are removed and the values no longer persist. This technique is useful for caching data to minimize network access, yet still ensuring that this data is always fresh after a system reboot.\n\nThe registry is encrypted, and updates are relatively performance intensive and should be used sparingly. Note that all writes to the registry are delayed, and not committed to non-volatile storage until ifRegistry.Flush() or ifRegistrySection.Flush() is explicitly called. The platform may choose opportune times to flush data on its own, but no application is technically correct unless it explicitly calls Flush() at appropriate times. Flushing the registry is a relatively time-consuming operation, so it should be done as infrequently as possible. The Registry data is stored in a fault tolerant manner by preserving a backup for each write which is automatically rolled-back in the event of a failure."
        },
        "roRegistrySection": {
            "name": "roRegistrySection",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roregistrysection.md",
            "interfaces": [
                {
                    "name": "ifRegistrySection",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifregistrysection.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "isRequired": true,
                            "type": "string"
                        }
                    ],
                    "returnType": "roRegistrySection"
                }
            ],
            "description": "A Registry Section enables the organization of settings within the registry. Different registry sections may have their own keys with the same name. In other words, key names are scoped within the registry section to which they belong.\n\nThis object must be supplied with a \"section\" name on creation. If no such section exists, it will be created. Section names are case sensitive, so sections named \"Settings\" and \"settings\" are two different sections.\n\n`CreateObject(\"roRegistrySection\", section as String)`\n\n**Example: Get and set some user authentication in the registry**\n\n```\nFunction GetAuthData() As Dynamic\n     sec = CreateObject(\"roRegistrySection\", \"Authentication\")\n     if sec.Exists(\"UserRegistrationToken\")\n         return sec.Read(\"UserRegistrationToken\")\n     endif\n     return invalid\nEnd Function\n\nFunction SetAuthData(userToken As String) As Void\n    sec = CreateObject(\"roRegistrySection\", \"Authentication\")\n    sec.Write(\"UserRegistrationToken\", userToken)\n    sec.Flush()\nEnd Function\n```"
        },
        "roRSA": {
            "name": "roRSA",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rorsa.md",
            "interfaces": [
                {
                    "name": "ifRSA",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifrsa.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roRSA"
                }
            ],
            "description": "The RSA component provides an interface to the OpenSSL RSA library of signing algorithms.\n\nThis component can be used to sign/verify using RSA.\n\nTypically, you would use the roEVPDigest component to create a message digest, then use roRSA to sign it.\n\n**Example: RSA signing using SHA1**\n\n```\nba = CreateObject(\"roByteArray\")\n\n' ...populate bytearray...\n\ndigest = CreateObject(\"roEVPDigest\")\ndigest.Setup(\"sha1\")\nhashString = digest.Process(ba)\nhashBA = CreateObject(\"roByteArray\")\nhashBA.FromHexString(hashString)\nrsa = CreateObject(\"roRSA\")\n\n' ... save private key to tmp:/privateKey.txt\n\nrsa.SetPrivateKey(\"tmp:/privateKey.txt\")\nrsa.SetDigestAlgorithm(\"sha1\")\nsignature = rsa.Sign(hashBA)\n```\n\n**Example: RSA verification using SHA1**\n\n```\nrsa = CreateObject(\"roRSA\")\nrsa.SetPublicKey(:tmp:/publicKey.txt\")\nrsa.SetDigestAlgorithm(\"sha1\")\n\n' see hashBA and signature from above example\n\nresult = rsa.Verify(hashBA, signature)\nif (result = 1)\n    print \"Verified\"\nelse\n    print \"Not verified, result = \" ; result\nend if\n```"
        },
        "roScreen": {
            "name": "roScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roscreen.md",
            "interfaces": [
                {
                    "name": "ifScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifscreen.md"
                },
                {
                    "name": "ifDraw2D",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifdraw2d.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roUniversalControlEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rouniversalcontrolevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "isRequired": true,
                            "type": "boolean"
                        }
                    ],
                    "returnType": "roScreen"
                },
                {
                    "params": [
                        {
                            "name": "param1",
                            "isRequired": true,
                            "type": "boolean"
                        },
                        {
                            "name": "param2",
                            "isRequired": true,
                            "type": "integer"
                        },
                        {
                            "name": "param3",
                            "isRequired": true,
                            "type": "integer"
                        }
                    ],
                    "returnType": "roScreen"
                },
                {
                    "params": [],
                    "returnType": "roScreen"
                }
            ],
            "description": "The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from.\n\nYou will need at least one roScreen component in your 2D game application to draw on and get events from. The origin (0,0) is the top left corner of the screen. The pixels are always RGBA 32 bits. Multiple roScreen components stack, and like other screen components only the top screen is viewable and gets events. An roScreen that is not the top most screen can still be drawn to.\n\n> Once an roScreen is created, the display stack enters \"Game Mode\", and other screen components cannot be used. Screensavers will also be disabled and will appear as a black screen in its place. Other screen components cannot be intermixed with roScreens as the roScreen display stack is maintained independently from the main screen component display stack. When the final roScreen component is closed, other screen components can be used again.\nWhen the roScreen constructor is called, an optional double buffer flag, and an optional resolution can be passed. If the screen is double buffered, two buffers are fully allocated when CreateObject() succeeds. If the screen is single buffered only one buffer is allocated and the \"front\" and \"back\" buffers in method descriptions below are the same buffer. When a screen is created with a different resolution than the output display, it is scaled automatically to the output display resolution.\n\nTo maintain proper aspect ratio, and take care of the different pixel aspect ratio in HD vs SD; there is a fixed set of bitmap resolutions that are allowed to be created for screens:\n\n**HD mode screensizes**\n\n*   1280x720PAR=1:1 (default for HD)\n*   854x480 PAR=1:1 useful for higher performance HD games, also for 640x480 games\n*   940x480 PAR=1.1:1 used for displaying a RokuSD (720x480) games\n\n**SD mode screensizes**\n\n*   720x480 PAR=1.1:1 (default for SD)\n*   640x480 PAR=1:1 (used for 640x480 games)\n*   854x626 PAR=1:1 (used for 854x480 HD games)\n\nThe screen dimensions correspond to the drawable area that applications see. The dimensions were chosen so that applications do not need to compensate for screen aspect ratio or pixel aspect ratio.\n\nIt's likely that when porting games from other platforms, the active game area may be smaller and correspond to more traditional dimensions. In this case, the application can supply letterbox or pillarbox artwork and use an [roRegion](/docs/references/brightscript/components/roregion.md \"roRegion\") to define the active area. The roRegion will translate and clip graphics to the proper area for the game. Similarly, roRegions are used to describe the left and right pillars for an SD game in HD mode, or the upper and lower letterbox regions for an HD game in SD mode.\n\nGames that require more performance should use smaller dimensions. Games should run in HD and SD mode. The screensizes HD 854x480 paired with SD 854x626 and HD 940x480 paired with SD 720x480 were designed for this purpose.\n\nThe game creates a single active game roRegion to do all graphics operations in. roRegions for pillar or letter boxes are used to fill the rest of the screen area depending on if the app is in HD or SD mode. Please refer to the dfSetupDisplayRegions() function in [v30/bslDefender.brs](/docs/references/brightscript/language/component-architecture.md#v30bslcorebrs \"v30/bslDefender.brs\") for help in setting up the drawable regions in screen scaling.\n\nThere are some useful rules of thumb to be aware of to get the best performance when rendering your games:\n\n*   Alpha enabled regions are expensive to render\n\nIt is a requirement that the destination be alpha enabled in order for non-rectangular sprites to be properly rendered with transparency. However the sprite used for a background would typically have all pixels be fully nontransparent. Since alpha blending is expensive, a quick way to blit the background in this scenario is to first disable alpha on the screen, manually draw the background, and then enable alpha for the screen before drawing the rest of the sprites.\n\n*   Use smaller resolution images wherever possible. Scaling a large image down at run time is expensive with no benefit to the user\n*   Rendering text with DrawText() is expensive\n\nFortunately, many of these calls are redundant and can be eliminated. The static text for a particular level can be drawn on the background once and this newly created background can be used for refreshing the screen. This will eliminate almost all text redraws.\n\nA screen can be created with one of three constructors. If it is created with no parameters, the screen will be single buffered, and its output resolution will match the current display resolution (if the current resolution is specified in the manifest file ui\\_resolutions entry, otherwise the size will be 720p).\n\n`CreateObject(\"roScreen\")`\n\nIf a single parameter is passed, it is a Boolean that indicates if the screen is double buffered or not. See SwapBuffers():\n\n`CreateObject(\"roScreen\", true) ' double buffered screen`\n\nIf four parameters are passed, the last two specify the screen's resolution. The dimensions must be one of the screen sizes specified above:\n\n`CreateObject(\"roScreen\", true, 720, 480) ' db & SD res`\n\n**Example: Display an image**\n\n```\nScreen=CreateObject(\"roScreen\")\ndfDrawImage(screen, \"myphoto.jpg\",0,0)\nScreen.Finish()\n```\n\n**Example: Alpha blending**\n\n```\nwhite=&hFFFFFFFF\nscreen0=CreateObject(\"roScreen\")\nscreen0.SetAlphaEnable(true)\nscreen0.Clear(white)\nscreen0.DrawRect(100,100, screen0.GetWidth()-200, screen0.GetHeight()-200, &h80)\n' &h80 is black with a 50% alpha mix (RGBA)\nscreen0.finish()\n```"
        },
        "roSearchHistory": {
            "name": "roSearchHistory",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosearchhistory.md",
            "interfaces": [
                {
                    "name": "ifSearchHistory",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsearchhistory.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roSearchHistory"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe Search History object implements the system wide storage of search terms for use in implementing the roSearchScreen.\n\nAs the user searches for content, recent searches are placed into the search history. This allows the user to easily re-execute these commands later without typing on the keyboard. The initial list of recent searches is displayed on the roSearchScreen to assist the user in finding content to watch. This history is used system wide, so that the user can find references to their search in multiple types of content.\n\nThis object is created with no parameters:\n\n`CreateObject(\"roSearchHistory\")`\n\n**Example**\n\n```\nhistory = CreateObject(\"roSearchHistory\")\nlist = history.GetAsArray()\nprint \"There are \"; list.Count(); \" items in the history\"\n```"
        },
        "roSearchScreen": {
            "name": "roSearchScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosearchscreen.md",
            "interfaces": [
                {
                    "name": "ifSearchScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsearchscreen.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roSearchScreenEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rosearchscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roSearchScreen"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe Search Screen provides a standard way to allow users to enter text for searching.\n\nThis screen features a simplified keyboard (a-z, 0-9) designed to provide just the keys necessary to perform case-insensitive searches without punctuation.\n\nIdeally, the user would enter a search string and the backend service would perform that query in a case-insensitive manner ignoring special characters like punctuation. The script is notified as each key is pressed so that a progress disclosure search can be performed if supported by the back-end service. In addition, the script can control the text displayed on the screen and will receive events when the text entry is complete.\n\nIn addition to entering search strings, this screen features a list that can be used to display search results or show the most recent searches. It's desirable for the screen to maintain a list of recent searches for the user to allow them to easily repeat a recent query without typing. In some implementations, it may be desirable to use this list to show a progressive set of results after each character while the user is typing.\n\nThis object is created with no parameters:\n\n`CreateObject(\"roSearchScreen\")`\n\n**Example**\n\n```\nREM ******************************************************\nREM Main routine - example of search screen usage\nREM ******************************************************\nSub Main()\n    print \"start\"\n    'toggle the search suggestions vs. search history behavior\n    'this allow you to generate both versions of the example below\n    displayHistory = false\n    history = CreateObject(\"roArray\", 1, true)\n    'prepopulate the search history with sample results\n    history.Push(\"seinfeld\")\n    history.Push(\"fraiser\")\n    history.Push(\"cheers\")\n    port = CreateObject(\"roMessagePort\")\n    screen = CreateObject(\"roSearchScreen\")\n    'commenting out SetBreadcrumbText() hides breadcrumb on screen\n    screen.SetBreadcrumbText(\"\", \"search\")\n    screen.SetMessagePort(port)\n    if displayHistory\n        screen.SetSearchTermHeaderText(\"Recent Searches:\")\n        screen.SetSearchButtonText(\"search\")\n        screen.SetClearButtonText(\"clear history\")\n        screen.SetClearButtonEnabled(true) 'defaults to true\n        screen.SetSearchTerms(history)\n    else\n        screen.SetSearchTermHeaderText(\"Suggestions:\")\n        screen.SetSearchButtonText(\"search\")\n        screen.SetClearButtonEnabled(false)\n    endif\n    print \"Doing show screen...\"\n    screen.Show()\n    print \"Waiting for a message from the screen...\"\n    ' search screen main event loop\n    done = false\n    while done = false\n        msg = wait(0, screen.GetMessagePort())\n        if type(msg) = \"roSearchScreenEvent\"\n            if msg.isScreenClosed()\n                print \"screen closed\"\n                done = true\n            else if msg.isCleared()\n                print \"search terms cleared\"\n                history.Clear()\n            else if msg.isPartialResult()\n                print \"partial search: \"; msg.GetMessage()\n                if not displayHistory\n                    screen.SetSearchTerms(GenerateSearchSuggestions(msg.GetMessage()))\n                endif\n            else if msg.isFullResult()\n                print \"full search: \"; msg.GetMessage()\n                history.Push(msg.GetMessage())\n                if displayHistory\n                    screen.AddSearchTerm(msg.GetMessage())\n                end if\n                'uncomment to exit the screen after a full search result:\n                'done = true\n            else\n                print \"Unknown event: \"; msg.GetType(); \" msg: \"; msg.GetMessage()\n            endif\n        endif\n    endwhile\n    print \"Exiting...\"\nEnd Sub\n\nFunction GenerateSearchSuggestions(partSearchText As String) As Object\n    availableContent = [\n        \"ghost in the shell\"\n        \"parasite dolls\"\n        \"final fantasy\"\n        \"ninja scroll\"\n        \"space ghost\"\n        \"hellboy\"\n        \"star wars\"\n        \"terminator\"\n        \"house of cards\"\n        \"dexter\"\n        ]\n    suggestions = []\n    if partSearchText <> \"\"\n        partSearchText = LCase(partSearchText)\n        for each available in availableContent\n            if available.Instr(partSearchText) >= 0\n                suggestions.Push(available)\n            end if\n        end for\n    end if\n    return suggestions\nEnd Function\n```\n\n**Image: roSearchScreen example results (search suggestions)**\n\n![Image: roSearchScreen example results (search suggestions)](https://image.roku.com/ZHZscHItMTc2/roSearchScreen.png \"roSearchScreen\")"
        },
        "roSGNode": {
            "name": "roSGNode",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosgnode.md",
            "interfaces": [
                {
                    "name": "ifAssociativeArray",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifassociativearray.md"
                },
                {
                    "name": "ifSGNodeChildren",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsgnodechildren.md"
                },
                {
                    "name": "ifSGNodeField",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsgnodefield.md"
                },
                {
                    "name": "ifSGNodeDict",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsgnodedict.md"
                },
                {
                    "name": "ifSGNodeFocus",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsgnodefocus.md"
                },
                {
                    "name": "ifSGNodeBoundingRect",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsgnodeboundingrect.md"
                },
                {
                    "name": "ifSGNodeHttpAgentAccess",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsgnodehttpagentaccess.md"
                }
            ],
            "events": [
                {
                    "name": "roSGNodeEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rosgnodeevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "isRequired": true,
                            "type": "string"
                        }
                    ],
                    "returnType": "roSGNode"
                }
            ],
            "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation. To create an roSGNode object for a specific node class, call:\n\n`CreateObject(\"roSGNode\", \"nodetype\")`\n\nWhere nodetype is a string specifying the node class to be created. For example, the following creates an object of the SceneGraph Poster node class:\n\n`CreateObject(\"roSGNode\", \"Poster\")`\n\nReference information on all SceneGraph node classes can be found in [SceneGraph API Reference](/docs/references/scenegraph/node.md).\n\nPrior to creating an roSGScreen object and calling its `show()` function, creating roSGNode objects and using their interfaces is not guaranteed to work correctly. If you need to create some roSGNode objects and/or use roSGNode interfaces prior to calling an roSGScreen object `show()` function, you can use an roSGScreen object `createScene()` function to create an instance of a SceneGraph XML component that does any required setup and initialization prior to the roSGScreen object being displayed.\n\nIn addition, roSGNode implements the ifAssociativeArray interface as a wrapper for ifSGNodeFIeld so that the convenient node.field notation may be using for setting, getting, and observing fields."
        },
        "roSGScreen": {
            "name": "roSGScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosgscreen.md",
            "interfaces": [
                {
                    "name": "ifSgScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsgscreen.md"
                }
            ],
            "events": [
                {
                    "name": "roSGScreenEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rosgscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roSGScreen"
                }
            ],
            "description": "The roSGScreen object is a SceneGraph canvas that displays the contents of a SceneGraph Scene node instance. The object is created by calling:\n\n`CreateObject(\"roSGScreen\")`\n\n`CreateScene()` takes one argument, the name of the scene component. A channel will typically extend Scene to define its own channel specific Scene type (such as MyScene, etc.) This Scene component name is passed to `CreateScene().`\n\n**roSGScreen typical usage example**\n\n```\nscreen = CreateObject(\"roSGScreen\")\nscene  = screen.CreateScene(\"Scene\")\nscreen.show()\n```"
        },
        "roSlideShow": {
            "name": "roSlideShow",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roslideshow.md",
            "interfaces": [
                {
                    "name": "ifSlideShow",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifslideshow.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhttpagent.md"
                }
            ],
            "events": [
                {
                    "name": "roSlideShowEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/roslideshowevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roSlideShow"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe Slide Show screen provides the ability to setup a photo slide show to playback a series of images.\n\nImages may be jpg, png or gif files. The developer can control the sequencing and timing of the slideshow. The object is designed to accept an array of [Content Meta-Data](/docs/developer-program/getting-started/architecture/content-metadata.md \"Content Meta-Data\") objects, describing the images and providing URLs for accessing each image. TextOverlayUL, TextOverlayUR, and TextOverlayBody are content meta-data properties used to display a text overlay.\n\nThis object is created with no parameters:\n\n`CreateObject(\"roSlideShow\")`"
        },
        "roSocketAddress": {
            "name": "roSocketAddress",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosocketaddress.md",
            "interfaces": [
                {
                    "name": "ifSocketAddress",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketaddress.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roSocketAddress"
                }
            ],
            "description": "The roSocketAddress is used by the roStreamSocket and roDataGramSocket components for TCP and UDP traffic respectively.\n\nThis object is created without any arguments:\n\n`CreateObject(\"roSocketAddress\")`\n\nMethods in [ifSocketAddress](/docs/references/brightscript/interfaces/ifsocketaddress.md \"ifSocketAddress\") are used to assign an IP address to the object. roSocketAddress currently supports only IPV4 addresses."
        },
        "roSpringboardScreen": {
            "name": "roSpringboardScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rospringboardscreen.md",
            "interfaces": [
                {
                    "name": "ifSpringboardScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifspringboardscreen.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhttpagent.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roSpringboardScreenEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rospringboardscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roSpringboardScreen"
                }
            ],
            "description": "The Springboard Screen shows detailed information about an individual piece of content and provides options for actions that may be taken on that content.\n\nThe detailed description of the content is displayed with poster art for the title. Artwork may be displayed portrait or landscape orientation depending on the ContentType set in the [Content Meta-Data](/docs/developer-program/getting-started/architecture/content-metadata.md \"Content Meta-Data\").\n\nThe caller may add one or more buttons to the screen with actions such as Play, Resume, Purchase or More Info. The script is notified via an event when a button is selected and it is the responsibility of the script writer to handle that event as desired and perform the requested action.\n\n![worddav-button-actions](https://image.roku.com/ZHZscHItMTc2/worddav3570180012b8208f098d035b989f8fa8.png \"worddav3570180012b8208f098d035b989f8fa8\")\n\nThis object is created with no parameters:\n\n`CreateObject(\"roSpringboardScreen\")`\n\n*   Orientation for artwork is based on ContentType setting and may be portrait or landscape.\n    \n*   The audio springboard is capable of adding a progress bar.\n    \n*   If the ContentType is audio, the album art dimensions are:\n    \n\n```\n    SD: 124 x 112\n    HD: 188 x 188\n```\n\n*   If the ContentType is episode, the album art dimensions are:\n\n```\n    SD: 180 x 122\n    HD: 264 x 198\n```\n\n*   If the ContentType is any other value, the album art dimensions are:\n\n```\n    SD: 112 x 142\n    HD: 148 x 212\n```\n\n*   Up to 5 user-defined buttons may be displayed. Buttons are displayed in the order they are added and always appear in a fixed region of the screen\n    \n*   The description text will be formatted and justified (right and left edges) to fit between the margins. When the maximum length is reached, the text will be clipped and terminated with an ellipsis. The font is variable pitch, so the maximum number of characters is dependent on the text. The spacing is approximately 85 characters per line x 4 lines = 340 characters. The fonts and character spacing for HD and SD are similar, and display approximately the same number of characters, but the relationship is not exactly 1:1.\n    \n*   The star rating can show either community StarRating (red) or UserStarRating (yellow). If both values are set, the control will display the UserStarRating. If ratings are not desired, it can be removed by calling SetStaticRatingEnabled(false), providing more space to display actor names.\n    \n*   The Length attribute will display a formatted string or show length. If the value is zero, this field will display 0m, if the attribute is not set/missing then this field will not be displayed.\n    \n\n**Example**\n\nThe following example shows the process of creating an roSpringboardScreen, setting up the content meta-data, showing the screen and waiting for an event. This example is simplified for clarity and it's assumed the real-world applications will use techniques like getting data from web services using roUrlTransfer.\n\n![springboard-audio](https://image.roku.com/ZHZscHItMTc2/springboard-audio.png \"springboard-audio\")\n\n```\nFunction Main()\n    port = CreateObject(\"roMessagePort\")\n    springBoard = CreateObject(\"roSpringboardScreen\")\n    springBoard.SetBreadcrumbText(\"[location 1]\", \"[location2]\")\n    springBoard.SetMessagePort(port)\n    o = CreateObject(\"roAssociativeArray\")\n    o.ContentType = \"episode\"\n    o.Title = \"[Title]\"\n    o.ShortDescriptionLine1 = \"[ShortDescriptionLine1]\"\n    o.ShortDescriptionLine2 = \"[ShortDescriptionLine2]\"\n    o.Description = \"\"\n    For i = 1 To 15\n        o.Description = o.Description + \"[Description] \"\n    End For\n    o.SDPosterUrl = \"\"\n    o.HDPosterUrl = \"\"\n    o.Rating = \"NR\"\n    o.StarRating = \"75\"\n    o.ReleaseDate = \"[mm/dd/yyyy]\"\n    o.Length = 5400\n    o.Categories = CreateObject(\"roArray\", 10, true)\n    o.Categories.Push(\"[Category1]\")\n    o.Categories.Push(\"[Category2]\")\n    o.Categories.Push(\"[Category3]\")\n    o.Actors = CreateObject(\"roArray\", 10, true)\n    o.Actors.Push(\"[Actor1]\")\n    o.Actors.Push(\"[Actor2]\")\n    o.Actors.Push(\"[Actor3]\")\n    o.Director = \"[Director]\"\n    springBoard.SetContent(o)\n    springBoard.Show()\n    While True\n        msg = wait(0, port)\n        If msg.isScreenClosed() Then\n            Return -1\n        Elseif msg.isButtonPressed()\n            print \"msg: \"; msg.GetMessage(); \"idx: \"; msg.GetIndex()\n        Endif\n    End While\nEnd Function\n```\n\nThe following screen is displayed when this code is executed:\n\n![worddav-code-displayed](https://image.roku.com/ZHZscHItMTc2/worddav256ada1e0e0cdc53d79428655ca7702b.png \"worddav256ada1e0e0cdc53d79428655ca7702b\")"
        },
        "roSprite": {
            "name": "roSprite",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosprite.md",
            "interfaces": [
                {
                    "name": "ifSprite",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsprite.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "The roSprite object cannot be created directly with a CreateObject() call. It must be associated with a managing roCompositor object. This association is implicitly created by creating an roSprite object with the roCompositor methods NewSprite() or NewAnimatedSprite()."
        },
        "roStreamSocket": {
            "name": "roStreamSocket",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rostreamsocket.md",
            "interfaces": [
                {
                    "name": "ifSocketConnection",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketconnection.md"
                },
                {
                    "name": "ifSocket",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocket.md"
                },
                {
                    "name": "ifSocketAsync",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketasync.md"
                },
                {
                    "name": "ifSocketStatus",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketstatus.md"
                },
                {
                    "name": "ifSocketConnectionStatus",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketconnectionstatus.md"
                },
                {
                    "name": "ifSocketConnectionOption",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketconnectionoption.md"
                }
            ],
            "events": [
                {
                    "name": "roSocketEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rosocketevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roStreamSocket"
                }
            ],
            "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them. The interface is modeled on and works much like standard Berkeley sockets.\n\nThis object is created without any arguments:\n\n`CreateObject(\"roStreamSocket\")`\n\n**Example: Open TCP Connection to Server**\n\n```\nsendAddress = CreateObject(\"roSocketAddress\")\nsendAddress.SetAddress(\"www.google.com:80\")\nsocket = CreateObject(\"roStreamSocket\")\nsocket.setSendToAddress(sendAddress)\nIf socket.Connect()\n    Print \"Connected Successfully\"\nEnd If\n```\n\n**Example: Echo Server**\n\n```\nfunction main()\n    messagePort = CreateObject(\"roMessagePort\")\n    connections = {}\n    buffer = CreateObject(\"roByteArray\")\n    buffer[512] = 0\n    tcpListen = CreateObject(\"roStreamSocket\")\n    tcpListen.setMessagePort(messagePort)\n    addr = CreateObject(\"roSocketAddress\")\n    addr.setPort(54321)\n    tcpListen.setAddress(addr)\n    tcpListen.notifyReadable(true)\n    tcpListen.listen(4)\n    if not tcpListen.eOK()\n        print \"Error creating listen socket\"\n        stop\n    end if\n    while True\n        event = wait(0, messagePort)\n        if type(event) = \"roSocketEvent\"\n            changedID = event.getSocketID()\n            if changedID = tcpListen.getID() and tcpListen.isReadable()\n                ' New\n                newConnection = tcpListen.accept()\n                if newConnection = Invalid\n                    print \"accept failed\"\n                else\n                    print \"accepted new connection \" newConnection.getID()\n                    newConnection.notifyReadable(true)\n                    newConnection.setMessagePort(messagePort)\n                    connections[Stri(newConnection.getID())] = newConnection\n                end if\n            else\n                ' Activity on an open connection\n                connection = connections[Stri(changedID)]\n                closed = False\n                if connection.isReadable()\n                    received = connection.receive(buffer, 0, 512)\n                    print \"received is \" received\n                    if received > 0\n                        print \"Echo input: '\"; buffer.ToAsciiString(); \"'\"\n                        ' If we are unable to send, just drop data for now.\n                        ' You could use notifywritable and buffer data, but that is\n                        ' omitted for clarity.\n                        connection.send(buffer, 0, received)\n                    else if received=0 ' client closed\n                        closed = True\n                    end if\n                end if\n                if closed or not connection.eOK()\n                    print \"closing connection \" changedID\n                    connection.close()\n                    connections.delete(Stri(changedID))\n                end if\n            end if\n        end if\n    end while\n\n    print \"Main loop exited\"\n    tcpListen.close()\n    for each id in connections\n        connections[id].close()\n    end for\nEnd Function\n```"
        },
        "roString": {
            "name": "roString",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rostring.md",
            "interfaces": [
                {
                    "name": "ifString",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifstring.md"
                },
                {
                    "name": "ifStringOps",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifstringops.md"
                },
                {
                    "name": "ifToStr",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftostr.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "roString is the object equivalent for intrinsic type 'String'.\n\nThis is useful in the following situations:\n\n*   When an object is needed, instead of an intrinsic value. For example, \"roList\" maintains a list of objects. If an String is added to roList, it will be automatically wrapped in an roString by the language interpreter. When a function that expects a BrightScript Component as a parameter is passed a string, BrightScript automatically creates the equivalent BrightScript Component.\n    \n*   If any object exposes the ifString interface, that object can be used in any expression that expects an intrinsic value."
        },
        "roSystemlog": {
            "name": "roSystemLog",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosystemlog.md",
            "interfaces": [
                {
                    "name": "ifSystemLog",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsystemlog.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "The roSystemLog component enables the application to receive events from the Roku Streaming Player that are intended for reporting errors and trends, rather than trigger a response to a user action.\n\nAll of the log event messages are sent to the roMessagePort that is registered on the [roSystemLogEvent](/docs/references/brightscript/events/rosystemlogevent.md \"roSystemLogEvent\") object. See roSystemLogEvent for details on the messages.\n\nThis object is created with no parameters:\n\n`CreateObject(\"roSystemLog\")`\n\nThe roSystemLog component requires specific Design Patterns in your BrightScript Application. Take care to:\n\n*   Use one roMessagePort throughout the application (instead of creating a new roMessagePort for each screen).\n*   Create one roSystemLog instance at startup that remains for the entire lifetime of the application.\n*   Pass the global roMessagePort referenced in the first bullet point to SetMessagePort() on the roSystemLog component.\n*   Enable the desired log types using EnableType().\n*   Handle the [roSystemLogEvents](/docs/references/brightscript/events/rosystemlogevent.md \"roSystemLogEvents\") in all message loops."
        },
        "roTextScreen": {
            "name": "roTextScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotextscreen.md",
            "interfaces": [
                {
                    "name": "ifTextScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftextscreen.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roTextScreenEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rotextscreenevent.md"
                }
            ],
            "constructors": [],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nroTextScreen provides a way of displaying large amounts of scrollable text.\n\nThis type of screen can be used to display help text, credits, license agreements, or other large amounts of text that require scrolling.\n\nThe interface allows you to set the text and specify zero or more buttons.\n\nIf no buttons are specified, then the user can exit the screen by pressing BACK or OK."
        },
        "roTextToSpeech": {
            "name": "roTextToSpeech",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotexttospeech.md",
            "interfaces": [
                {
                    "name": "ifTextToSpeech",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftexttospeech.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roTextToSpeechEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rotexttospeechevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roTextToSpeech"
                }
            ],
            "description": "> Please note this component is only available on the following devices: Roku Streaming Stick (3600X), Roku Express (3700X) and Express+ (3710X), Roku Premiere (4620X) and Premiere+ (4630X), Roku Ultra (4640X), and any Roku TV running Roku OS version 7.2 and later.\nThe roTextToSpeech component provides text to speech capabilities to applications.\n\nAn roTextToSpeech component object is created with no parameters:\n\n`CreateObject(\"roTextToSpeech\")`"
        },
        "roTextureManager": {
            "name": "roTextureManager",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotexturemanager.md",
            "interfaces": [
                {
                    "name": "ifTextureManager",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftexturemanager.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhttpagent.md"
                }
            ],
            "events": [
                {
                    "name": "roTextureRequestEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rotexturerequestevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roTextureManager"
                }
            ],
            "description": "The Texture Manager provides a set of API's for managing an roBitmap cache.\n\n**Example: Requesting an roBitmap from the roTextureManager**\n\n```\nSub Main()\n    mgr = CreateObject(\"roTextureManager\")\n    msgport = CreateObject(\"roMessagePort\")\n    mgr.SetMessagePort(msgport)\n\n    request = CreateObject(\"roTextureRequest\",\"pkg:/assets/comet.jpg\")\n    mgr.RequestTexture(request)\n\n    msg=wait(0, msgport)\n    if type(msg)=\"roTextureRequestEvent\" then\n        print \"request id\";msg.GetId()\n        print \"request state:\";msg.GetState()\n        print \"request URI:\";msg.GetURI()\n        state = msg.GetState()\n        if state = 3 then\n            bitmap = msg.GetBitmap()\n            if type(bitmap)<>\"roBitmap\" then\n                print \"Unable to create robitmap\"\n                stop   ' stop exits to the debugger\n            end if\n        end if\n   end if\nEnd Sub\n```"
        },
        "roTextureRequest": {
            "name": "roTextureRequest",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotexturerequest.md",
            "interfaces": [
                {
                    "name": "ifTextureRequest",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftexturerequest.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhttpagent.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [
                        {
                            "name": "param1",
                            "isRequired": true,
                            "type": "string"
                        }
                    ],
                    "returnType": "roTextureRequest"
                }
            ],
            "description": "An roTextureRequest is used to make requests to the roTextureManager.\n\nAn roTextureRequest object is created using the CreateObject() method and passing it a URI string:\n\n`CreateObject(\"roTextureRequest\", \"pkg:/assets/comet.jpg\")`\n\n**Example: Requesting a URL from the roTextureManager**\n\n```\nSub Main()\n    mgr = CreateObject(\"roTextureManager\")\n    msgport = CreateObject(\"roMessagePort\")\n    mgr.SetMessagePort(msgport)\n\n    request = CreateObject(\"roTextureRequest\",\"http://192.168.1.10/ball.png\")\n    mgr.RequestTexture(request)\n\n    msg=wait(0, msgport)\n    if type(msg)=\"roTextureRequestEvent\" then\n        print \"request id\";msg.GetId()\n        print \"request state:\";msg.GetState()\n        print \"request URI:\";msg.GetURI()\n        state = msg.GetState()\n        if state = 3 then\n            bitmap = msg.GetBitmap()\n            if type(bitmap)<>\"roBitmap\" then\n                print \"Unable to create robitmap\"\n                stop   ' stop exits to the debugger\n            end if\n        end if\n   end if\nEnd Sub\n```\n\n**Example: Requesting a scaled image from the roTextureManager**\n\n```\nSub Main()\n    mgr = CreateObject(\"roTextureManager\")\n    msgport = CreateObject(\"roMessagePort\")\n    mgr.SetMessagePort(msgport)\n\n    request = CreateObject(\"roTextureRequest\",\"pkg:/assets/ball.png\")\n    request.SetSize(100, 100)\n    request.SetScaleMode(1)\n    mgr.RequestTexture(request)\nEnd Sub\n```\n\n**Example: Making an HTTPS request from the roTextureManager**\n\n```\nSub Main()\n    mgr = CreateObject(\"roTextureManager\")\n    msgport = CreateObject(\"roMessagePort\")\n    mgr.SetMessagePort(msgport)\n\n    request = CreateObject(\"roTextureRequest\",\"https://192.168.1.10/ball.png\")\n    request.SetCertificatesFile(\"common:/certs/ca-bundle.crt\")\n    request.InitClientCertificates()\n\n    mgr.RequestTexture(request)\nEnd Sub\n```"
        },
        "roTimespan": {
            "name": "roTimespan",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotimespan.md",
            "interfaces": [
                {
                    "name": "ifTimespan",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftimespan.md"
                }
            ],
            "events": [],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roTimespan"
                }
            ],
            "description": "The Timespan object provides an interface to a simple timer for tracking the duration of activities. It's useful for tracking how an action has taken or if a specified time has elapsed from some starting event.\n\n**Example: Timing an activity**\n\n```\nREM ******************************************************\nREM Compute the number of millisecs to perform a task\nREM ******************************************************\ntimer = CreateObject(\"roTimespan\")\ntimer.Mark()\nDoTimeConsumingTask()\nPrint \"Task took: \" + timer.TotalMilliseconds().ToStr()\n\nREM ******************************************************\nREM Compute how many seconds until rental expires\nREM ******************************************************\nFunction secondsLeft(String expirationDate) As Integer\n    str = expirationDate\n    if str = invalid return -1\n    ts = CreateObject(\"roTimespan\")\n    seconds = ts.GetSecondsToISO8601Date(str)\n    print \"Expires: \" + str + \" secs: \" + Stri(seconds)\n    return seconds\nEnd Function\n```"
        },
        "roUrlTransfer": {
            "name": "roUrlTransfer",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rourltransfer.md",
            "interfaces": [
                {
                    "name": "ifUrlTransfer",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifurltransfer.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhttpagent.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roUrlEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rourlevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roUrlTransfer"
                }
            ],
            "description": "A roUrlTransfer object transfers data to or from remote servers specified by URLs. It can perform mutual authentication with a web server.\n\nThis object is created with no parameters:\n\n`CreateObject(\"roUrlTransfer\")`\n\nIf using HTTPS, the developer must specify a certificate file by calling SetCertificatesFile() with a .pem file that includes the certificate authority cert (like Verisign, Thawte, etc., or your own with OpenSSL) that signed the web server certificate. This must be called before making a request. The developer can also use the Roku standard cert bundle (which contains certificates for most common signing authorities) stored in common:/certs/ca-bundle.crt; or download the CA certificate [here](https://github.com/rokudev/ca-certificate/blob/master/ca-bundle.crt).\n\nThe web server can authenticate that the requested connection is from a Roku Streaming Player and that the request is from your application by taking the following actions:\n\n*   Add the Roku CA certificate to the web server's certificate authorities keychain, download the CA certificate.\n*   Configure your web server to reject any connection that does not have a valid client certificate.\n*   Check the X-Roku-Reserved-Dev-Id header in the request. It should contain the Developer ID of your application. If it does not, another application on the Roku is attempting to access the server, and the request is rejected.\n\n**Example**\n\nIn order for your web server to perform the steps above to authenticate your Roku Streaming Player, your application needs to call the following functions before performing any https requests:\n\n```\nobject.SetCertificatesFile(\"common:/certs/ca-bundle.crt\")\nobject.AddHeader(\"X-Roku-Reserved-Dev-Id\", \"\")\nobject.InitClientCertificates()\n```"
        },
        "roVideoPlayer": {
            "name": "roVideoPlayer",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rovideoplayer.md",
            "interfaces": [
                {
                    "name": "ifVideoPlayer",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifvideoplayer.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhttpagent.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roVideoPlayerEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rovideoplayerevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roVideoPlayer"
                }
            ],
            "description": "The roVideoPlayer component implements a video player with more programmatic control, but less user control than the roVideoScreen component.\n\nThe roVideoPlayer can be used in conjunction with the roImageCanvas to do graphical overlays, windowed video, zoom, and programmatic control of playlists and trick play. When using with the roImageCanvas, you can put the roVideoPlayer is at a lower z-order layer than other imageCanvas layers and implement overlays on top of the playing video.\n\nUnlike the roVideoScreen component roVideoPlayer does not have automatic trick play modes and built in controls to support that trick play. Any trick play requires the developer to build his own controls using buttons on the roImageCanvas.\n\nNote that all the video playback notes under roVideoScreen apply to the roVideoPlayer. The customvideoplayer sample application is a good example of roVideoPlayer usage.\n\nThis object is created with no parameters:\n\n`CreateObject(\"roVideoPlayer\")`"
        },
        "roVideoScreen": {
            "name": "roVideoScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rovideoscreen.md",
            "interfaces": [
                {
                    "name": "ifVideoScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifvideoscreen.md"
                },
                {
                    "name": "ifHttpAgent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhttpagent.md"
                },
                {
                    "name": "ifSetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md"
                },
                {
                    "name": "ifGetMessagePort",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md"
                }
            ],
            "events": [
                {
                    "name": "roVideoScreenEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rovideoscreenevent.md"
                }
            ],
            "constructors": [
                {
                    "params": [],
                    "returnType": "roVideoScreen"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe Video Screen object implements the video playback portion of the user interface.\n\nThis object is created with no parameters:\n\n`CreateObject(\"roVideoScreen\")`\n\nThe API's to the video screen allow the developer to setup a fully featured playback environment with minimal coding. The developer is responsible for initial playback setup and providing the required data (e.g. StreamURLs, SteamsBitrates, etc.) as part of the [Content Meta-Data](/docs/developer-program/getting-started/architecture/content-metadata.md \"Content Meta-Data\"). Once created and displayed, the screen will respond to events and manage the playback experience for the user.\n\nThe roVideoScreen is designed for streaming content. The preferred implementation should provide multiple bitrates (ideally four) of video to provide a high quality user experience under a variety of network conditions. Using the StreamBitrates and StreamURLs provided in the content meta-data for the item, the roVideoScreen will automatically monitor and select the best stream based on the users measured bandwidth. If network performance changes, the system will adapt and rebuffer to stream at a different bandwidth if necessary. Note that the StreamURLs, StreamBitrates, StreamQualities and StreamStickyHttpRedirects are all arrays that are aligned with each other. For example, the first stream listed would be the 0th element of all of these arrays.\n\nThe bitrates should represent the actual bitrate of the stream. The bitrate is used for both the display of the dots as well as the stream selection algorithm. The dots work a follows; If the stream bitrate equals:\n\n*   0 = no dots\n*   < 500 Kbps= 1 dot\n*   < 800 Kbps = 2 dots\n*   <1.1 Mbps = 3 dots\n*   > \\= 1.1 Mbps = 4 dots\n    \n\nThe dots are displayed automatically based on the bitrate of the stream selected unless there is a single stream and the bitrate is set to zero, then it won't show any dots. The StreamQuality attribute is used to select streams and indicates if a stream is HD or not. If the attribute for HDBranded is set to true and the stream is HD, the HD icon will show beside the quality dots. If the StreamQuality is set to HD, and the user display type is set to SD, the HD stream will not be selected.\n\nThe roVideoScreen automatically provides trick mode for all supported content types. There are two type of trick modes supported; scene based selection and time-based selection. If BIF image files are provided for a title, scene-based trick modes will appear. (See the BIF File format Documentation for more information) The user will be presented with the images and progress bar needed for SEEK, FF, REW within a stream. The following image shows how trick modes are rendered with BIF files:\n\n![IMAGE](https://image.roku.com/ZHZscHItMTc2/worddavdc8a50b63d70082736fbebee19c18eff.png \"worddavdc8a50b63d70082736fbebee19c18eff\")\n\nThe FF/REW functionality provides three speeds; slow, medium and fast. At slower speeds, the system displays the current frame in the center of the screen and additional frames on the side for contextual information. At higher speeds, the side frames disappear and only the center image is displayed. The I-frames within the video do not need to precisely align with the time stamp of the image frames in the BIF file. When the user stops and selects a frame, the video playback begins at the first I-frame less than or equal to the time position of the selected frame.\n\nWhen BIF images are not available, the system will default to a time based trick play behavior. The user control is still the same, but only the progress bar is displayed and the user will not see individual scenes within the video. This mode is the default, so if images are not available for an individual title, the system will always provide this functionality by default.\n\nThe system will only seek to locations on an I-Frame boundary. Window Media (WMA9 or VC-1) uses the simple index object to determine the I-frame locations and H.264 uses the MOOV atom to determine the correct offsets. If the BIF images are at a consistent time intervals which do not align to I-Frame boundaries, the system will use the nearest I-Frame less than or equal to the time of the BIF image. MP4 or Windows Media are the preferred formats.\n\n**Important Notes on Video Playback**\n\n*   The dimensions vary on a title-by-title basis depending on the source material and the target aspect ratio for the encode (e.g. 4:3 or 16:9). Content is always encoded at full width and the height is adjusted. For example, a 1.66 aspect ratio source is encoded as a 720x432 video and displayed as letterboxed for a 4:3 display.\n    \n*   The frame rate used for encoding is dependent on the source material. Film content is generally 23.976 fps, while video content is generally at 29.97.\n    \n*   For typical streaming video applications, we recommend a range of 384Kbps to 4.5Mbps. For USB playback, we recommend that you stay under 8.0 Mbps. This provides a good balance between quality and support for a wide number of users. In some cases lower and higher bitrates have been used, but this frequently results in poor quality or limits the % of the installed base that can view this encoding.\n    \n*   It is critical that the StreamURLs, StreamBitrates, StreamQualities and StreamStickyHttpRedirects arrays are all aligned with each other. For example, the first stream listed would be the 0th element of all of these arrays. You may have multiple streams in the arrays and the system will automatically pick the most appropriate stream based on the users available bandwidth and video settings.\n    \n*   The StreamQualities array identifies streams as either SD or HD. If the user is configured for SD the system will not select HD streams for playback.\n    \n*   The optional StreamStartTimeOffset is the offset into the stream which is considered to be the new origin of playback.\n    \n*   Live – declares the video as live and replaces the time remaining text in the progress bar with \"live\".\n    \n*   HLS Http Live Streaming support is included in the Roku OS (Introduced in Roku OS2.6). We currently support version 3 of the Http Live Streaming protocol (Pantos – Draft submitted to IETF November 19, 2010 [http://tools.ietf.org/html/draft-pantos-http-live-streaming-05](http://tools.ietf.org/html/draft-pantos-http-live-streaming-05) ). When using HLS, the StreamUrls and StreamQualities array should each have exactly one element. If the HLS stream has only a single bitrate stream, the StreamBitrates array should contain one element specifying that bitrate. If the stream contains more than one variant stream at multiple bitrates, the StreamBitrates array should contain one element with a value of zero. Please see the Video Encoding Guide for information about creating HLS .m3u8 files and segmented .ts files from your current h264 encoded video or distributing live video over HLS to the Roku box.\n    \n*   In addition to the support for version 2 of the HLS Pantos draft spec, the Roku box supports .m3u8 files that are compressed via deflate or gzip.\n    \n    *   The HTTP response for a query that returns a gzip-compressed file must contain the header: Content-Encoding: gzip\n    *   The HTTP response for a query that returns a deflate-compressed file must contain the header: Content-Encoding: deflate\n*   \"Trick Modes\" and seeking work a little differently with HLS streams. There are a couple of ways that seeking works with HLS and they are different than other streams.\n    \n    One way of seeking uses the \"target duration\" specified in the .m3u8 file. The first segment in an m3u8 file is assigned a time offset:\n    \n    T = G \\* N\n    \n    where G is the \"target duration\" value and N is the sequence number of the segment. Each subsequent segment is assigned a time offset equal to T (the time offset of the first segment) plus the duration value of all earlier segments. The duration of a segment is determined by the EXTINF line before that segment.\n    \n*   Smooth Streaming (since v4.7) and later by setting the StreamFormat to \"ism\" and setting the streamURL to the MANIFEST url.\n    \n    *   The player type (ContentMetaData.StreamFormat) is \"ism\"\n    *   The stream URL is the URL that points to the manifest\n    *   Only H.264 and/or AAC encoding formats are currently supported.\n    *   Only direct PlayReady licensing is supported. Indirect licensing is currently unsupported. That is, for decryption to work, the ProtectionHeader must be available in the manifest and the LA\\_URL should contain a valid URL to an accessible PlayReady license server.\n    *   If there are multiple audio tracks, a track will be chosen based on the StreamIndex.Language attribute in the manifest. If the StreamIndex.Language attribute is not populated, the audio track will be chosen arbitrarily. To select a specific audio track before playback, set the ContentMetaData.TrackIDAudio field to the desired track's StreamIndex.Name attribute.\n    *   If there are multiple video tracks, a track will be chosen arbitrarily. To select a specific video track before playback, set the ContentMetaData.TrackIDVideo field to the desired track's StreamIndex.Name attribute.\n*   Standard PlayReady SDK 2.0 Direct License Acquisition Over-the-Air (since v4.8) works by reading the Rights Management Protection Header in the Smooth Streaming Manifest Url. The Roku OS retrieves the license from the PlayReady license server at the license acquisition url endpoint in the Protection Header.\n    \n\n```\n#EXT-X_TARGETDURATION:10\n#EXT-X-MEDIA-SEQUENCE:37\n#EXTINF:10\nurl1\n#EXTINF:8\nurl2\n#EXTINF:10\nurl3\n```\n\nThe segment url1 has a time offset of 370, url2 is 380, and url3 is 388. Note that if no TARGETDURATION is specified, the default is 1, so the first segment in the file will have a nonzero time offset (equal to the target duration). The PlayStart content-meta data value allows direct seeking to an offset that is valid within the window of data in the current .m3u8 file.\n\nThere is a second way to seek in an HLS stream. If the m3u8 file has #EXT-X-PROGRAM-DATE-TIME entries, you can seek to a particular date/time by passing a value equal to a modified Unix epoch value. The modified epoch is 1/1/2004 rather than the standard Unix epoch of 1/1/1970. A Unix time value can be converted to an HLS seek time by subtracting 1072915200 (the number of seconds between 1/1/1970 and 1/1/2004). Once again, setting the PlayStart content meta data value allows direct seeking to a specific time offset.\n\nFor example, to seek to the segment marked with the date/time of 7/4/2010 11:30, set PlayStart to 205327800. An example shell expression showing this arithmetic is:\n\n```\n% expr `date -d \"7/4/2010Z11:30:00.000\" +%s` - 1072915200\n205327800\n```\n\nIn BrightScript, the same calculation might be:\n\n```\ndt = CreateObject(\"roDateTime\")\ndt.fromISO8601String(\"7/4/2010T11:30:00.000\")\nitemContentMetaData.PlayStart = dt. asSeconds() - 1072915200 '205327800\n```\n\n1.  In Roku OS version 2.6, we've introduced support for SRT files. Please see the content meta-data parameter SubtitleUrl for pointing to a matching SRT file for your video content.\n    \n2.  In Roku OS version 2.7, we've introduced 1080p support. Please see the content meta-data parameter FullHD for specifying 1080p resolution. Playback at 1080p resolution will only occur when the user has set the display type to HDTV 1080p. Another content meta-data parameter, FrameRate, specifies the frames per second of the video. Valid values are 24 and 30. If the user's display type is set to 1080p and FullHD for the content is false or not set, HD playback will be at 720p resolution. If the user's display type is set to HDTV 720p and FullHD content is set to 1080p resolution, the box will downscale the content to 720p resolution.\n    \n\n**Example**\n\n```\n'**********************************************************************\n' This example function is passed an associative array representing a ' piece of content (e.g. a TV episode) There are other attributes\n' (title, description, etc.) but this example focuses on showing\n' attributes required for initiating playback. It creates a video\n' screen, sets the content and starts playback by calling Show()\n'**********************************************************************\nFunction showVideoScreen(episode As Object)\n    if type(episode) <> \"roAssociativeArray\" then\n        print \"invalid data passed to showVideoScreen\"\n        return -1\n    endif\n    port = CreateObject(\"roMessagePort\")\n    screen = CreateObject(\"roVideoScreen\")\n   ' Note: HDBranded controls whether the \"HD\" logo is displayed for a\n   '       title. This is separate from IsHD because its possible to\n' have an HD title where you don't want to show the HD logo\n' branding for the title. Set these two as appropriate for\n' your content\n   episode.HDBranded = false\n   episode.IsHD = false\n   ' Note: The preferred way to specify stream info in v2.6 is to use\n' the Stream roAssociativeArray content meta data parameter.\n\nepisode.Stream = { url:\"http://myserver.mydomain.com/mycontent.mp4\",\nbitrate:2000\nquality:false\ncontentid:\"mycontent-2000\"\n}\nepisode.StreamFormat: \"mp4\"\n   ' now just tell the screen about the title to be played, set the\n   ' message port for where you will receive events and call show to\n   ' begin playback.  You should see a buffering screen and then\n   ' playback will start immediately when we have enough data buffered.\n    screen.SetContent(episode)\n    screen.SetMessagePort(port)\n    screen.Show()\n   ' Wait in a loop on the message port for events to be received.\n   ' We will just quit the loop and return to the calling function\n   ' when the users terminates playback, but there are other things\n   ' you could do here like monitor playback position and see events\n   ' from the streaming player.  Look for status messages from the video\n   ' player for status and failure events that occur during playback\n    while true\n       msg = wait(0, port)\n\n       if type(msg) = \"roVideoScreenEvent\" then\n           print \"showVideoScreen | msg = \"; msg.GetMessage() \" | index = \"; msg.GetIndex()\n           if msg.isScreenClosed()\n               print \"Screen closed\"\n               exit while\n            else if msg.isStatusMessage()\n                  print \"status message: \"; msg.GetMessage()\n            else if msg.isPlaybackPosition()\n                  print \"playback position: \"; msg.GetIndex()\n            else if msg.isFullResult()\n                  print \"playback completed\"\n                  exit while\n            else if msg.isPartialResult()\n                  print \"playback interrupted\"\n                  exit while\n            else if msg.isRequestFailed()\n                  print \"request failed - error: \"; msg.GetIndex();\" - \"; msg.GetMessage()\n                  exit while\n            end if\n       end if\n    end while\nEnd Function\n```"
        },
        "roXMLElement": {
            "name": "roXMLElement",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roxmlelement.md",
            "interfaces": [
                {
                    "name": "ifXMLElement",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifxmlelement.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "roXMLElement is used to contain an XML tree.\n\nFor instance,\n\n```\n<tag1>this is some text</tag1>\n```\n\nWould parse such that:\n\n```\n    Name = \"tag1\"\n    Attributes = invalid\n    Body = roString with \"this is some text\"\n```\n\n**Example**\n\n```\n<emptytag caveman=\"barney\" /> \n```\n\nWould parse such that:\n\n```\n    Name = \"emptytag\"\n    Attributes = roAssociativeArray, with one entry { caveman: \"barney\" }\n    Body = invalid\n```\n\nIf the tag contains other tags, body will be of type roXMLList.\n\nTo generate XML, create an roXMLElement, then use functions like SetName(), AddAttribute(), SetBody(), AddElementWithBody(), AddElement(), AddBodyElement(), and AddText() functions to build the XML object hierarchy.\n\nThen call GenXML() to return the XML as a string.\n\nGenXML() takes one parameter (boolean) that indicates whether the generated xml should have the <?xml …> tag at the top.\n\n**Example: Subroutine to print out the contents of an roXMLElement tree**\n\n```\nPrintXML(root, 0)\n\nSub PrintXML(element As Object, depth As Integer)\n    print tab(depth*3);\"Name: \";element.GetName()\n    if not element.GetAttributes().IsEmpty() then\n        print tab(depth*3);\"Attributes: \";\n        for each a in element.GetAttributes()\n            print a;\"=\";left(element.GetAttributes()[a], 20);\n            if element.GetAttributes().IsNext() then print \", \";\n        end for\n        print\n    end if\n    if element.GetText()<>invalid then\n        print tab(depth*3);\"Contains Text: \";left(element.GetText(), 40)\n    end if\n    if element.GetChildElements()<>invalid\n        print tab(depth*3);\"Contains roXMLList:\"\n        for each e in element.GetChildElements()\n            PrintXML(e, depth+1)\n        end for\n    end if\n    print\nend sub\n```\n\n**Example: Generating XML**\n\n```\nroot.SetName(\"myroot\")\nroot.AddAttribute(\"key1\", \"value1\")\nroot.AddAttribute(\"key2\", \"value2\")\nne = root.AddBodyElement()\nne.SetName(\"sub\")\nne.SetBody(\"this is the sub1 text\")\nne = root.AddBodyElement()\nne.SetName(\"subelement2\")\nne.SetBody(\"more sub text\")\nne.AddAttribute(\"k\", \"v\")\nne = root.AddElement(\"subelement3\")\nne.SetBody(\"more sub text 3\")\nroot.AddElementWithBody(\"sub\", \"another sub (#4)\")\nPrintXML(root, 0)\nprint root.GenXML(false)\n```"
        },
        "roXMLList": {
            "name": "roXMLList",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roxmllist.md",
            "interfaces": [
                {
                    "name": "ifList",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iflist.md"
                },
                {
                    "name": "ifXMLList",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifxmllist.md"
                },
                {
                    "name": "ifListToArray",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iflisttoarray.md"
                }
            ],
            "events": [],
            "constructors": [],
            "description": "Contains a list of roXML objects.\n\nNormally roXMLList objects are not created via CreateObject(), but are returned from various ifXMLElement functions such as GetChildElements() and GetBod"
        }
    },
    "interfaces": {
        "AppManagerTheme": {
            "name": "AppManagerTheme",
            "properties": [
                {
                    "name": "BackgroundColor",
                    "description": "HTML HEX Color Value. Screen types: Gr Li Pa Po Se Sp Te. Example: #E0DFDF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "BreadcrumbDelimiter",
                    "description": "HTML HEX Color Value. Screen types: Gr Li Pa Po Se Sp Te. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "BreadcrumbTextLeft",
                    "description": "HTML HEX Color Value. Screen types: Gr Li Pa Po Se Sp Te. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "BreadcrumbTextRight",
                    "description": "HTML HEX Color Value. Screen types: Gr Li Pa Po Se Sp Te. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ButtonHighlightColor",
                    "description": "HTML HEX Color Value. Screen types: Di Se Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ButtonMenuHighlightText",
                    "description": "HTML HEX Color Value. Screen types: Di Se Sp. Example: #0033FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ButtonMenuNormalOverlayText",
                    "description": "HTML HEX Color Value. Screen types: Di Se Sp. Example: #B0B0B0",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ButtonMenuNormalText",
                    "description": "HTML HEX Color Value. Screen types: Di Se Sp. Example: #686868",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ButtonNormalColor",
                    "description": "HTML HEX Color Value. Screen types: Di Se Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "CounterSeparator",
                    "description": "HTML HEX Color Value. Screen types: Gr Po. Example: #00FF00",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "CounterTextLeft",
                    "description": "HTML HEX Color Value. Screen types: Gr Po. Example: #FF0000",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "CounterTextRight",
                    "description": "HTML HEX Color Value. Screen types: Gr Po. Example: #0000FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "DialogBodyText",
                    "description": "HTML HEX Color Value. Must be a grayscale value. Screen types: Di. Example: #808080",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "DialogTitleText",
                    "description": "HTML HEX Color Value. Must be a grayscale value. Screen types: Di. Example: #363636",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "EpisodeSynopsisText",
                    "description": "HTML HEX Color Value. Screen types: Po. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerActiveColor",
                    "description": "HTML HEX Color Value. Screen types: Po. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerActiveHD",
                    "description": "URL to set HD Filter Banner Active/Focus Highlighter. Screen types: Po. Example: pkg:/images/Filter\\_ActiveHint\\_HD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerActiveSD",
                    "description": "URL to set SD Filter Banner Active/Focus Highlighter. Screen types: Po. Example: pkg:/images/Filter\\_ActiveHint\\_SD43.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerInactiveColor",
                    "description": "HTML HEX Color Value. Screen types: Po. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerInactiveHD",
                    "description": "URL to set HD Filter Banner Inactive Highlighter. Screen types: Po. Example: pkg:/images/Filter\\_InactiveHint\\_HD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerInactiveSD",
                    "description": "URL to set SD Filter Banner Inactive Highlighter. Screen types: Po. Example: pkg:/images/Filter\\_ActiveHint\\_SD43.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerSideColor",
                    "description": "HTML HEX Color Value. Screen types: Po. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerSliceHD",
                    "description": "URL to set HD Filter Banner Background Image. Screen types: Po. Example: pkg:/images/Filter\\_ActiveHint\\_HD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "FilterBannerSliceSD",
                    "description": "URL to set SD Filter Banner Background Image. Screen types: Po. Example: pkg:/images/Filter\\_ActiveHint\\_SD43.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenBackgroundColor",
                    "description": "HTML HEX Color Value Must be a grayscale value. Screen types: Gr. Example: #363636",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenBorderOffsetHD",
                    "description": "String representing point \"(x, y)\" that is the offset from the upper left corner of the focused HD image. Set to the negative width & height of border. Screen types: Gr. Example: (-25,-25)",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenBorderOffsetSD",
                    "description": "String representing point \"(x, y)\" that is the offset from the upper left corner of the focused SD image. Set to the negative width & height of border. Screen types: Gr. Example: (-20,-20)",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionDateColor",
                    "description": "HTML HEX Color Value. Screen types: Gr. Example: #FF005B",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionImageHD",
                    "description": "URL to set HD Description callout background image on Grid. Screen types: Gr. Example: pkg:/images/Description\\_Background\\_HD.ng",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionImageSD",
                    "description": "URL to set SD Description callout background image on Grid. Screen types: Gr. Example: pkg:/images/Description\\_Background\\_SD43.ng",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionOffsetHD",
                    "description": "String representing point \"(x, y)\" that is the offset from the upper left corner of the focused HD image. Negative values have the description above and to the left of the focused image. Screen types: Gr. Example: (190,255)",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionOffsetSD",
                    "description": "String representing point \"(x, y)\" that is the offset from the upper left corner of the focused SD image. Negative values have the description above and to the left of the focused image. Screen types: Gr. Example: (125,170)",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionRuntimeColor",
                    "description": "HTML HEX Color Value. Screen types: Gr. Example: #5B005B",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionSynopsisColor",
                    "description": "HTML HEX Color Value. Screen types: Gr. Example: #606000",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenDescriptionTitleColor",
                    "description": "HTML HEX Color Value. Screen types: Gr. Example: #00FFFF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenFocusBorderHD",
                    "description": "URL to set HD Focus image on Active Grid Poster. Screen types: Gr. Example: pkg:/images/Border\\_16x9\\_HD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenFocusBorderSD",
                    "description": "URL to set SD Focus image on Active Grid Poster. Screen types: Gr. Example: pkg:/images/Border\\_16x9\\_SD43.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenListNameColor",
                    "description": "HTML HEX Color Value. Must be a grayscale value. Screen types: Gr. Example: #FFFFFF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenLogoHD",
                    "description": "Logo formatted for display in the overhang. Screen types: Gr. Example: pkg:/images/gridlogoHD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenLogoOffsetHD\\_X",
                    "description": "Offset in pixels from the top-left origin of the display. Range 0 to 1280. Screen types: Gr. Example: 592",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenLogoOffsetHD\\_Y",
                    "description": "Offset in pixels from the top-left origin of the display. Range 0 to 720. Screen types: Gr. Example: 31",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenLogoOffsetSD\\_X",
                    "description": "Offset in pixels from the top-left origin of the display. Range 0 to 720. Screen types: Gr. Example: 324",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenLogoOffsetSD\\_Y",
                    "description": "Offset in pixels from the top-left origin of the display. Range 0 to 480. Screen types: Gr. Example: 21",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenLogoSD",
                    "description": "Logo formatted for display in the overhang. Screen types: Gr. Example: pkg:/images/gridlogoSD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenMessageColor",
                    "description": "HTML HEX Color Value. Must be a grayscale value. Screen types: Gr. Example: #808080",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenOverhangHeightHD",
                    "description": "The HD overhang height. Default: \"69\". Screen types: Gr. Example: 75",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenOverhangHeightSD",
                    "description": "The SD overhang height. Default: \"49\". Screen types: Gr. Example: 55",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenOverhangSliceHD",
                    "description": "URI for the overhang slice (thin piece of top of screen border). Screen types: Gr. Example: pkg:/images/gridoverhangHD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenOverhangSliceSD",
                    "description": "URI for the overhang slice (thin piece of top of screen border). Screen types: Gr. Example: pkg:/images/gridoverhangSD.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "GridScreenRetrievingColor",
                    "description": "HTML HEX Color Value. Must be a grayscale value. Screen types: Gr. Example: #CCCCCC",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ListItemHighlightHD",
                    "description": "URL to set HD highlight image. Screen types: Gr Li Po. Example: pkg:/images/listitem\\_highlight\\_hd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ListItemHighlightSD",
                    "description": "URL to set SD highlight image. Screen types: Gr Li Po. Example: pkg:/images/listitem\\_highlight\\_sd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ListItemHighlightText",
                    "description": "HTML HEX Color Value. Screen types: Gr Li Po. Example: #CCCC00",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ListItemText",
                    "description": "HTML HEX Color Value. Screen types: Gr Li Po. Example: #CCCC00",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ListScreenDescriptionText",
                    "description": "HTML HEX Color Value. Screen types: Li. Example: #CCCC00",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ListScreenTitleColor",
                    "description": "HTML HEX Color Value. Screen types: Li. Example: #CC0000",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangPrimaryLogoHD",
                    "description": "Small application logo formatted for display in overhang top left. Screen types: Co Ke Li Pa Po Se Sp Te. Example: pkg:/images/co\\_logo\\_sd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangPrimaryLogoOffsetHD\\_X",
                    "description": "Offset in pixels from the top-left origin of the display films.Range 0 to 1280. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 25",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangPrimaryLogoOffsetHD\\_Y",
                    "description": "Offset in pixels from the top-left origin of the display films.Range 0 to 720. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 50",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangPrimaryLogoOffsetSD\\_X",
                    "description": "Offset in pixels from the top-left origin of the display films.Range 0 to 720. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 25",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangPrimaryLogoOffsetSD\\_Y",
                    "description": "Offset in pixels from the top-left origin of the display films.Range 0 to 480. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 50",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangPrimaryLogoSD",
                    "description": "Small application logo formatted for display in overhang top left. Screen types: Co Ke Li Pa Po Se Sp Te. Example: pkg:/images/co\\_logo\\_sd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSecondaryLogoHD",
                    "description": "Small application logo formatted for display in overhang top left. Screen types: Co Ke Li Pa Po Se Sp Te. Example: pkg:/images/co\\_logo\\_hd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSecondaryLogoOffsetHD\\_X",
                    "description": "Offset in pixels from the top-left origin of the display films. Range 0 to 1280. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 25",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSecondaryLogoOffsetHD\\_Y",
                    "description": "Offset in pixels from the top-left origin of the display films. Range 0 to 720. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 50",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSecondaryLogoOffsetSD\\_X",
                    "description": "Offset in pixels from the top-left origin of the display films. Range 0 to 720. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 25",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSecondaryLogoOffsetSD\\_Y",
                    "description": "Offset in pixels from the top-left origin of the display films. Range 0 to 480. Screen types: Co Ke Li Pa Po Se Sp Te. Example: 50",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSecondaryLogoSD",
                    "description": "Small application logo formatted for display in overhang top left. Screen types: Co Ke Li Pa Po Se Sp Te. Example: pkg:/images/co\\_logo\\_sd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSliceHD",
                    "description": "URI for the overhang slice (thin piece of border at the top of the screen in HD size). Screen types: Co Ke Li Pa Po Se Sp Te. Example: pkg:/images/overhang\\_hd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "OverhangSliceSD",
                    "description": "URI for the overhang slice (thin piece of top of screen border). Screen types: Co Ke Li Pa Po Se Sp Te. Example: pkg:/images/overhang\\_sd.png",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ParagraphBodyText",
                    "description": "HTML HEX Color Value. Screen types: Co Pa Te. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ParagraphHeaderText",
                    "description": "HTML HEX Color Value. Screen types: Co Pa Te. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "PosterScreenLine1Text",
                    "description": "HTML HEX Color Value. Screen types: Po. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "PosterScreenLine2Text",
                    "description": "HTML HEX Color Value. Screen types: Po. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "RegistrationCodeColor",
                    "description": "HTML HEX Color Value. Screen types: Co. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "RegistrationFocalColor",
                    "description": "HTML HEX Color Value. Screen types: Co. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "RegistrationFocalRectColor",
                    "description": "HTML HEX Color Value. Screen types: Co. Example: #10FF80",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "RegistrationFocalRectHD",
                    "description": "Position and size of the HD focal rectangle. Four integer: (x,y,width,height). Screen types: Co. Example: (228,360,120,82)",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "RegistrationFocalRectSD",
                    "description": "Position and size of the SD focal rectangle. Four integer: (x,y,width,height). Screen types: Co. Example: (172,220,90,76)",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardActorColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardAlbumColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardAlbumLabel",
                    "description": "Album Label. Screen types: Sp. Example: on",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardAlbumLabelColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardAllow6Buttons",
                    "description": "boolean string. Screen types: Sp. Example: true",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardArtistColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardArtistLabel",
                    "description": "Artist Label. Screen types: Sp. Example: by",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardArtistLabelColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardDirectorColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardDirectorText",
                    "description": "Director Label. Screen types: Sp. Example: Written by",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardDirectorLabelColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardDirectorPrefixText",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardGenreColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardRuntimeColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardSynopsisColor",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "SpringboardTitleText",
                    "description": "HTML HEX Color Value. Screen types: Sp. Example: #FF00FF",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "TextScreenBodyBackgroundColor",
                    "description": "HTML HEX Color Value. Must be a grayscale value. Screen types: Te. Example: #808080",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "TextScreenBodyText",
                    "description": "HTML HEX Color Value. Screen types: Te. Example: #363636",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "TextScreenScrollBarColor",
                    "description": "HTML HEX Color Value. Screen types: Te. Example: #CC0000",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "TextScreenScrollThumbColor",
                    "description": "HTML HEX Color Value. Screen types: Te. Example: #00CC00",
                    "default": "invalid",
                    "type": "string"
                },
                {
                    "name": "ThemeType",
                    "description": "Theme type. Generic-dark is the only valid value. Otherwise the default theme applies. Screen types: . Example: generic-dark",
                    "default": "invalid",
                    "type": "string"
                }
            ],
            "implementers": [],
            "methods": []
        },
        "ifAppInfo": {
            "name": "ifAppInfo",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifappinfo.md",
            "methods": [
                {
                    "name": "GetID",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the app's channel ID.",
                    "returnDescription": "Channel ID; e.g., \"12345\" or \"dev\""
                },
                {
                    "name": "IsDev",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Returns true if the application is sideloaded, i.e. the channel ID is \"dev\".",
                    "returnDescription": "True/ False"
                },
                {
                    "name": "GetVersion",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the conglomerate version number from the manifest, as formatted major\\_version + minor\\_version + build\\_version.",
                    "returnDescription": "Channel version number. e.g. \"1.2.3\""
                },
                {
                    "name": "GetTitle",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the title value from the manifest.",
                    "returnDescription": "Title of the channel"
                },
                {
                    "name": "GetSubtitle",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the subtitle value from the manifest.",
                    "returnDescription": "Possible subtitle configuration"
                },
                {
                    "name": "GetDevID",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the app's developer ID, or the keyed developer ID, if the application is sideloaded.",
                    "returnDescription": "Channel's Developer ID"
                },
                {
                    "name": "GetValue",
                    "params": [
                        {
                            "name": "key",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The manifest value to be returned."
                        }
                    ],
                    "returnType": "String",
                    "description": "Returns the named manifest value, or an empty string if the entry is does not exist.",
                    "returnDescription": "Manifest value; empty string"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roAppInfo",
                    "description": "Returns information about the application",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roappinfo.md"
                }
            ]
        },
        "ifAppManager": {
            "name": "ifAppManager",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifappmanager.md",
            "methods": [
                {
                    "name": "SetTheme",
                    "params": [
                        {
                            "name": "attributeArray",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The attributeArray is an [roAssociativeArray](/docs/references/brightscript/components/roassociativearray.md \"roAssociativeArray\") of attribute/value pairs. The program may create the roAssociativeArray at runtime or read it from an XML file using the [roXMLElement](/docs/references/brightscript/components/roxmlelement.md \"roXMLElement\") object. Existing values for attributes will be overwritten by the values provided. Any values set by a previous SetTheme or SetThemeAttribute call, but not included in the array currently provided by with the subsequent call will remain unchanged. See [roAppManager](/docs/references/brightscript/components/roappmanager.md \"roAppManager\") the list of valid attributes."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets a group of theme attributes for the application."
                },
                {
                    "name": "SetThemeAttribute",
                    "params": [
                        {
                            "name": "attributeName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The attributeName is the name of one of the settable theme attributes and the value is the desired setting. If the attributeName is not valid, no action is performed."
                        },
                        {
                            "name": "attributeValue",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "This attributeValue will override the default value for that attribute or modify the value provided by a previous SetTheme or SetThemeAttribute call to the new value provided."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Set an individual theme attribute for the application."
                },
                {
                    "name": "ClearThemeAttribute",
                    "params": [
                        {
                            "name": "attributeName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The theme attribute to be cleared."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Clears a previously set attribute and reverts to its default value."
                },
                {
                    "name": "GetUptime",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an [roTimespan](/docs/references/brightscript/components/rotimespan.md \"roTimespan\") object, which is \"marked\" when the user clicked on the application button on the home screen.Calling the TotalMilliseconds() method on the returned roTimespan object returns the total number of milliseconds since the application started.",
                    "returnDescription": "An [roTimespan](/docs/references/brightscript/components/rotimespan.md \"roTimespan\") object."
                },
                {
                    "name": "GetScreensaverTimeout",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the user's screensaver wait time setting in number of minutes, or zero if the screensaver is disabled.",
                    "returnDescription": "The number of minutes set for the screensaver wait time."
                },
                {
                    "name": "SetUserSignedIn",
                    "params": [
                        {
                            "name": "signedIn",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Set to true to indicate that the user is signed in; set to false to indicate the user is signed out."
                        }
                    ],
                    "returnType": "Void",
                    "description": "This method allows a channel to tell Roku when the user is signed in or signed out of the channelIf the channel is removed, the Roku OS will call SetUserSignedIn(false) on the channel's behalf."
                },
                {
                    "name": "SetAutomaticAudioGuideEnabled",
                    "params": [
                        {
                            "name": "enabled",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag indicating whether to enable or disable the automatic audio guide."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables or disables automatic Audio Guide and override any manifest setting.This is useful for channels that want to temporarily turn off automatic Audio Guide for specific screens."
                },
                {
                    "name": "LaunchApp",
                    "params": [
                        {
                            "name": "channelID",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The unique ID of the channel to be launched."
                        },
                        {
                            "name": "version",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The minimum version of the channel required to launch the channel. If the specified version (or later) is not being used, the channel is not launched. To skip the version check, pass an empty string."
                        },
                        {
                            "name": "params",
                            "isRequired": true,
                            "default": null,
                            "type": "roAssociative Array",
                            "description": "Key-value pairs specifying the playback experience upon launching the channel."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Launches the channel with the specified channelID and the specified version, with the playback experience upon launching the channel based on the provided params."
                },
                {
                    "name": "ShowChannelStoreSpringboard",
                    "params": [
                        {
                            "name": "channelID",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The unique ID of the channel to be launched."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Launches the channel store springboard of the specified channel. The channel store springboard contains detailed information about the channel, including ratings, version, date of last update, developer name, and a description."
                },
                {
                    "name": "IsAppInstalled",
                    "params": [
                        {
                            "name": "channelID",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The unique id of the channel."
                        },
                        {
                            "name": "version",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The minimum version number of the channel to be used for the query."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "This method returns true if a channel with the specified channelID and the minimum version required is installed.",
                    "returnDescription": "A boolean indicating whether the specified channel is installed."
                },
                {
                    "name": "SetNowPlayingContentMetaData",
                    "params": [
                        {
                            "name": "contentMetaData",
                            "isRequired": true,
                            "default": null,
                            "type": "roAssociativeArray",
                            "description": "The video or audio [content metadata](/docs/developer-program/getting-started/architecture/content-metadata.md) parameters to be updated (for example, the title and contentType)"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Updates video or audio [content metadata](/docs/developer-program/getting-started/architecture/content-metadata.md) during playback. This method takes a subset of content metadata parameters to be updated. These values override any previously ones sent to the Roku Media Player, and they are used until this function is called again or until the [**roAppManager**](/docs/references/brightscript/components/roappmanager.md) instance is deleted."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roAppManager",
                    "description": "Returns information about the application",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roappmanager.md"
                }
            ]
        },
        "ifArray": {
            "name": "ifArray",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarray.md",
            "methods": [
                {
                    "name": "Peek",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Returns the last (highest index) array entry without removing it. If the array is empty, returns invalid",
                    "returnDescription": "Invalid"
                },
                {
                    "name": "Pop",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Returns the last entry (highest index) from the array and removes it from the array. If the array is empty, returns invalid and does not change the array.",
                    "returnDescription": "The last (highest index) array entry."
                },
                {
                    "name": "Push",
                    "params": [
                        {
                            "name": "tvalue",
                            "isRequired": true,
                            "default": null,
                            "type": "Dynamic",
                            "description": "The value to be added to the beginning of the array."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds the specified value to the end of the array."
                },
                {
                    "name": "Shift",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Removes the first entry (zero index) from the beginning of the array and shifts the other entries up. This method is similar to the [Pop method](#pushtvalue-as-dynamic-as-void), but removes the first entry in the array instead of the last.",
                    "returnDescription": "The first entry (zero index) removed from the array."
                },
                {
                    "name": "Unshift",
                    "params": [
                        {
                            "name": "tvalue",
                            "isRequired": true,
                            "default": null,
                            "type": "Dynamic",
                            "description": "The value to be added to the beginning of the array."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds the specified value to the beginning of the array (at the zero index) and shifts the other entries down. This method is similar to the [Push method](#push-as-dynamic), but removes the first entry in the array instead of the last."
                },
                {
                    "name": "Delete",
                    "params": [
                        {
                            "name": "index",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Deletes the indicated array entry, and shifts all entries up. This decreases the array length by one.",
                    "returnDescription": "A flag indicating whether the specified array entry has been removed. If the entry was successfully deleted, returns true. If index is out of range, returns false and does not change the array."
                },
                {
                    "name": "Count",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the length of the array, which is one more than the index of highest entry.",
                    "returnDescription": "The length of the array."
                },
                {
                    "name": "Clear",
                    "params": [],
                    "returnType": "Void",
                    "description": "Deletes all the entries in the array."
                },
                {
                    "name": "Append",
                    "params": [
                        {
                            "name": "array",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The **roArray** to be appended to the target array."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Appends the entries in one **roArray** to another. If the passed array contains entries that have not been set to a value, they are not appended."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roArray",
                    "description": "An array stores an indexed collection of BrightScript objects. Each entry of an array can be a different type, or they may all of the same type",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roarray.md"
                },
                {
                    "name": "roByteArray",
                    "description": "The byte array component is used to contain and manipulate an arbitrary array of bytes",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/robytearray.md"
                },
                {
                    "name": "roList",
                    "description": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolist.md"
                },
                {
                    "name": "roXMLList",
                    "description": "Contains a list of roXML objects",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roxmllist.md"
                }
            ]
        },
        "ifArrayGet": {
            "name": "ifArrayGet",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarrayget.md",
            "methods": [
                {
                    "name": "GetEntry",
                    "params": [
                        {
                            "name": "index",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The index of the array entry to be returned."
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Returns an array entry based on the provided index.",
                    "returnDescription": "The array entry corresponding to the provided index, or invalid if the entry has not been set."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roArray",
                    "description": "An array stores an indexed collection of BrightScript objects. Each entry of an array can be a different type, or they may all of the same type",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roarray.md"
                },
                {
                    "name": "roByteArray",
                    "description": "The byte array component is used to contain and manipulate an arbitrary array of bytes",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/robytearray.md"
                },
                {
                    "name": "roList",
                    "description": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolist.md"
                },
                {
                    "name": "roXMLList",
                    "description": "Contains a list of roXML objects",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roxmllist.md"
                }
            ],
            "description": "The ifArrayGet interface supports the array indexing operator \\[ \\]\n\n(See [Array Operator](/docs/references/brightscript/language/expressions-variables-types.md#effects-of-type-conversions-on-accuracy \"Array Operator\"))"
        },
        "ifArrayJoin": {
            "name": "ifArrayJoin",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarrayjoin.md",
            "methods": [
                {
                    "name": "Join",
                    "params": [
                        {
                            "name": "separator",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string used to separate elements in an array."
                        }
                    ],
                    "returnType": "String",
                    "description": "Creates a string by joining all array elements together separated by the specified separator. All elements must be of type string; otherwise, an empty string is returned",
                    "returnDescription": "A String containing the array elements."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roArray",
                    "description": "Returns information about the application",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roarray.md"
                }
            ]
        },
        "ifArraySet": {
            "name": "ifArraySet",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarrayset.md",
            "methods": [
                {
                    "name": "SetEntry",
                    "params": [
                        {
                            "name": "index",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The entry to be updated."
                        },
                        {
                            "name": "tvalue",
                            "isRequired": true,
                            "default": null,
                            "type": "Dynamic",
                            "description": "The new value for the specified entry."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets an entry at a given index to the passed value. If index is beyond the bounds of the array, the array is expanded to accommodate it."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roArray",
                    "description": "An array stores an indexed collection of BrightScript objects. Each entry of an array can be a different type, or they may all of the same type",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roarray.md"
                },
                {
                    "name": "roByteArray",
                    "description": "The byte array component is used to contain and manipulate an arbitrary array of bytes",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/robytearray.md"
                },
                {
                    "name": "roList",
                    "description": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolist.md"
                },
                {
                    "name": "roXMLList",
                    "description": "Contains a list of roXML objects",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roxmllist.md"
                }
            ],
            "description": "The ifArraySet interface supports the array indexing operator \\[\\].\n\n(See ArrayOperator)"
        },
        "ifArraySort": {
            "name": "ifArraySort",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifarraysort.md",
            "methods": [
                {
                    "name": "Sort",
                    "params": [
                        {
                            "name": "flags",
                            "isRequired": true,
                            "default": null,
                            "type": "Dynamic",
                            "description": "Items are arbitrarily grouped by comparable type of number or string, and are sorted within the group with a logical comparison."
                        }
                    ],
                    "description": "Performs a stable sort on an array."
                },
                {
                    "name": "SortBy",
                    "params": [
                        {
                            "name": "fieldName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The field to be used for sorting."
                        },
                        {
                            "name": "flags",
                            "isRequired": true,
                            "default": null,
                            "type": "Dynamic",
                            "description": "Items are arbitrarily grouped by comparable type of number or string, and are sorted within the group with a logical comparison."
                        }
                    ],
                    "description": "Performs a stable sort of an array of associative arrays by value of a common field."
                },
                {
                    "name": "Reverse",
                    "params": [],
                    "returnType": "Void",
                    "description": "Reverses the order of elements in an array."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roArray",
                    "description": "Returns information about the application",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roarray.md"
                }
            ]
        },
        "ifAssociativeArray": {
            "name": "ifAssociativeArray",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifassociativearray.md",
            "methods": [
                {
                    "name": "AddReplace",
                    "params": [
                        {
                            "name": "key",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The key to be added to the associative array."
                        },
                        {
                            "name": "value",
                            "isRequired": true,
                            "default": null,
                            "type": "Dynamic",
                            "description": "The value of the key to be added to the associative array."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds a new entry to the array associating the supplied value with the supplied key string. Only one value may be associated with a key. If the key is already associated with a value, the existing value is discarded."
                },
                {
                    "name": "Lookup",
                    "params": [
                        {
                            "name": "key",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The key associated with the value to be retrieved from the associative array."
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Returns the value in the array associated with the specified key. The key comparison is case-insensitive, unless the **SetModeCaseSensitive()** method has been called.",
                    "returnDescription": "Returns the value in the array associated with the specified key. If there is no value associated with the key, the type \"invalid\" is returned."
                },
                {
                    "name": "LookupCI",
                    "params": [
                        {
                            "name": "key",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The key (case-insensitive) associated with the value to be retrieved from the associative array."
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Same as the [Lookup()](#lookupkey-as-string-as-dynamic) method except that the key comparison is always case insensitive, regardless of the case mode.",
                    "returnDescription": "Returns the value in the array associated with the specified key. If there is no value associated with the key, the type \"invalid\" is returned."
                },
                {
                    "name": "DoesExist",
                    "params": [
                        {
                            "name": "key",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The key associated with the entry to be checked."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Looks for an entry in the associative array associated with the specified key.",
                    "returnDescription": "A flag indicating whether an entry is associated with the specified key exists. If there is no associated object then false is returned. If there is such an object then true is returned."
                },
                {
                    "name": "Delete",
                    "params": [
                        {
                            "name": "key",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The key associated with the entry to be deleted."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Deletes an entry from an associative array based on the key.",
                    "returnDescription": "A flag indicating whether an entry is associated with the specified key exists. If there is no associated object then false is returned. If there is such an object then true is returned."
                },
                {
                    "name": "Clear",
                    "params": [],
                    "returnType": "Void",
                    "description": "Remove all key/values from the associative array."
                },
                {
                    "name": "Keys",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an array containing the associative array keys in lexicographical order.",
                    "returnDescription": "An array of associative array keys."
                },
                {
                    "name": "Items",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an array containing the associative array key/value pairs in lexicographical order of key.",
                    "returnDescription": "An array of associative array keys/value pairs."
                },
                {
                    "name": "SetModeCaseSensitive",
                    "params": [],
                    "returnType": "Void",
                    "description": "Makes all subsequent associative array lookups case sensitive (by default, lookups are case insensitive)."
                },
                {
                    "name": "Append",
                    "params": [
                        {
                            "name": "aa",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The associative array to be appended to the calling object."
                        }
                    ],
                    "description": "Appends an associative array to this calling object. If any key in the **aa** parameter is already associated with a value in the calling object, the current value is discarded and is replaced with the value provided in the **aa** parameter."
                },
                {
                    "name": "Count",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the number of keys in the associative array.",
                    "returnDescription": "The number of keys in the associative array."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roAssociativeArray",
                    "description": "An associative array allows objects to be associated with string keys",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roassociativearray.md"
                },
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosgnode.md"
                }
            ]
        },
        "ifAudioGuide": {
            "name": "ifAudioGuide",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifaudioguide.md",
            "methods": [
                {
                    "name": "Say",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string to be spoken."
                        },
                        {
                            "name": "flushSpeech",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Set to true to make the Audio Guide immediately stop speaking any other speech before speaking."
                        },
                        {
                            "name": "dontRepeat",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Set to true to ignore calls to the say() method with the same text."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Returns an ID for the spoken string to notify observer callbacks about a specific spoken string. This ID can be used with the [roTextToSpeechEvent](/docs/references/brightscript/events/rotexttospeechevent.md \"roTextToSpeechEvent\").This method will automatically split up text to reduce lag. Due to this automatic splitting, the roTextToSpeechEvent 0 (\"Started speech\") event for the returned ID may not be sent until later than expected. The roTextToSpeechEvents 1 (\"Speech has completed\") and 2 (\"Speech has been flushed\") events are sent at the expected times.",
                    "returnDescription": "An ID associated with the spoken string to be used to notify observer callbacks."
                },
                {
                    "name": "Flush",
                    "params": [],
                    "description": "Interrupts and stops any current text to speech spoken string, to be used when the application does not want the text to speech to continue."
                },
                {
                    "name": "Silence",
                    "params": [
                        {
                            "name": "duration",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The number of milliseconds to suppress application background sounds."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "If Audio Guide is enabled, causes text to speech to continue to suppress any application background sound for the amount of time specified by duration (in milliseconds).This can be used to add clarity for longer spoken text that may have pauses that might otherwise allow application background sound to be heard. This method does nothing if Audio Guide is currently disabled.",
                    "returnDescription": "The number of milliseconds that the background sound has been silenced."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roAudioGuide",
                    "description": "Returns information about the application",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roaudioguide.md"
                }
            ],
            "description": "> Please note this component is only available on the following devices: Roku Streaming Stick (3600X), Roku Express (3700X) and Express+ (3710X), Roku Premiere (4620X) and Premiere+ (4630X), Roku Ultra (4640X), and any Roku TV running Roku OS version 7.5 and later."
        },
        "ifAudioMetaData": {
            "name": "ifAudioMetaData",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifaudiometadata.md",
            "methods": [
                {
                    "name": "SetUrl",
                    "params": [
                        {
                            "name": "url",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The URL of the audio file."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the URL to the audio file. Only file URLs are initially supported"
                },
                {
                    "name": "GetTags",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an associative array that contains a simple set of tags that are common to most audio formats.",
                    "returnDescription": "An associative array that may be set to one of the following values:"
                },
                {
                    "name": "GetAudioProperties",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an associative array with a simple set of audio properties.",
                    "returnDescription": "An associative array that may be set to one of the following values (these are values that may involve reading a larger portion of the file and thus may take longer to retrieve than tags):"
                },
                {
                    "name": "GetCoverArt",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the cover art, if available.",
                    "returnDescription": "An associative array with two entries: \"bytes\" and \"type\"."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roAudioMetadata",
                    "description": "This component provides developers access to audio file metadata included in many audio files",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roaudiometadata.md"
                }
            ]
        },
        "ifAudioPlayer": {
            "name": "ifAudioPlayer",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifaudioplayer.md",
            "methods": [
                {
                    "name": "SetContentList",
                    "params": [
                        {
                            "name": "contentList",
                            "isRequired": true,
                            "default": null,
                            "type": "Object"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the content list to be played by the Audio Player."
                },
                {
                    "name": "AddContent",
                    "params": [
                        {
                            "name": "contentItem",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The new ContentMetaData item to be added to the content list."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds a new ContentMetaData item to the end of the content list for the Audio Player."
                },
                {
                    "name": "ClearContent",
                    "params": [],
                    "returnType": "Void",
                    "description": "Clears the content list."
                },
                {
                    "name": "Play",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Puts the Audio Player into play mode starting at the current item in the Content List. This will stop any currently playing content.",
                    "returnDescription": "A flag indicating whether the Audio Player was successfully set to play mode."
                },
                {
                    "name": "Stop",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Stops the Audio Player from playing or pausing and cleanup.",
                    "returnDescription": "A flag indicating whether the Audio Player was successfully stopped."
                },
                {
                    "name": "Pause",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Puts the Audio Player into pause mode. It is an error to Pause if player is not in play mode.",
                    "returnDescription": "A flag indicating whether the Audio Player was successfully set to pause mode."
                },
                {
                    "name": "Resume",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Puts the Audio Player into play mode starting from the pause point. It is an error to Resume if the player is not in pause mode.",
                    "returnDescription": "A flag indicating whether the Audio Player was successfully set to play mode."
                },
                {
                    "name": "SetLoop",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Set to true to have the Audio Player automatically begin playing the first item in the content list after playing the last item."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables/disables the automatic replaying of the Content List."
                },
                {
                    "name": "SetNext",
                    "params": [
                        {
                            "name": "item",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "Item is the zero-based index of the item in the content list. This item will be played after the currently playing item finishes."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the next item in the Content List to be played."
                },
                {
                    "name": "Seek",
                    "params": [
                        {
                            "name": "offsetMs",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The offset to be used to determine the start point of the current content item."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Set the start point of playback for the current item to offsetMs milliseconds.",
                    "returnDescription": "A flag indicating whether the Audio Player was successfully set to the specified offset."
                },
                {
                    "name": "SetTimedMetaDataForKeys",
                    "params": [
                        {
                            "name": "keys",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Specifies the timedMetaData keys that the channel is interested in receiving from the timedMetaData event."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roAudioMetadata",
                    "description": "The Audio Player object provides the ability to setup the playing of a series of audio streams",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roaudiometadata.md"
                }
            ]
        },
        "ifAudioResource": {
            "name": "ifAudioResource",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifaudioresource.md",
            "methods": [
                {
                    "name": "Trigger",
                    "params": [
                        {
                            "name": "volume",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The volume is a number between 0 and 100 (percentage of full volume). A value of 50 should be used for normal volume."
                        }
                    ],
                    "returnType": "Void",
                    "description": "This method triggers the start of the audio resource sound playback. The effect of Trigger(volume) is identical to Trigger(volume, 0)."
                },
                {
                    "name": "Trigger",
                    "params": [
                        {
                            "name": "volume",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The volume is a number between 0 and 100 (percentage of full volume). 50 should be used for normal volume."
                        },
                        {
                            "name": "index",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The index is a value between 0 and [MaxSimulStreams()](#maxsimulstreams-as-integer) allowing for multiple sounds to be mixed."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Triggers the start of the audio resource sound playback. This method will interrupt any playing sound when the index is the same. It will mix with any playing sound if the index is different."
                },
                {
                    "name": "IsPlaying",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether this audio resource is currently playing.",
                    "returnDescription": "A flag indicating whether the calling audio resource is playing."
                },
                {
                    "name": "Stop",
                    "params": [],
                    "returnType": "Void",
                    "description": "Stops playing the audio resource. If the resource is not currently playing, has no effect."
                },
                {
                    "name": "MaxSimulStreams",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the device-dependent maximum number of audio streams that can be mixed together and presented simultaneously.",
                    "returnDescription": "Typically, 1-2."
                },
                {
                    "name": "GetMetaData",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an [roAssociativeArray](/docs/references/brightscript/components/roassociativearray.md \"roAssociativeArray\") array containing the indicated metadata parameters about the audio resource.",
                    "returnDescription": "An associative array with the following integer values:"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roAudioResource",
                    "description": "The roAudioResouce allows .wav files to be cached to memory and quickly played at any time",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roaudioresource.md"
                }
            ]
        },
        "ifBoolean": {
            "name": "ifBoolean",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifboolean.md",
            "methods": [
                {
                    "name": "GetBoolean",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Gets the boolean value stored in the calling boolean object.",
                    "returnDescription": "The boolean value stored in the calling boolean object."
                },
                {
                    "name": "SetBoolean",
                    "params": [
                        {
                            "name": "value",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "True/false."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the calling boolean object to the specified true/false value."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roBoolean",
                    "description": "Object equivalent for intrinsic type Boolean",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roboolean.md"
                }
            ],
            "description": "Interface equivalent for intrinsic type Boolean."
        },
        "ifByteArray": {
            "name": "ifByteArray",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifbytearray.md",
            "methods": [
                {
                    "name": "WriteFile",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The path to the file to which the bytes are to be written."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Writes the bytes contained in the Byte Array to the specified file.",
                    "returnDescription": "A flag indicating whether the bytes were successfully written to the file."
                },
                {
                    "name": "WriteFile",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The path to the file to which the bytes are to be written."
                        },
                        {
                            "name": "start",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Writes a subset of the bytes contained in the Byte Array to the specified file.",
                    "returnDescription": "A flag indicating whether the bytes were successfully written to the file."
                },
                {
                    "name": "ReadFile",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The path to the file to be read."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Reads the specified file into the Byte Array. Any data currently in the Byte Array is discarded.",
                    "returnDescription": "A flag indicating whether the bytes were successfully read into the Byte Array."
                },
                {
                    "name": "ReadFile",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The path to the file to be read."
                        },
                        {
                            "name": "start",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Reads the specified file into the Byte Array. Any data currently in the Byte Array is discarded.",
                    "returnDescription": "A flag indicating whether the bytes were successfully read into the Byte Array."
                },
                {
                    "name": "AppendFile",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The path to the file to be appended to the ByteArray."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Appends the contents of the Byte Array to the specified file.",
                    "returnDescription": "A flag indicating whether the file was successfully appended to the calling ByteArray."
                },
                {
                    "name": "AppendFile",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The path to the file to be appended to the Byte Array."
                        },
                        {
                            "name": "start",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Appends the contents of the Byte Array to the specified file.",
                    "returnDescription": "A flag indicating whether the file was successfully appended to the calling ByteArray."
                },
                {
                    "name": "SetResize",
                    "params": [
                        {
                            "name": "min",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "If the size of the Byte Array is less than min\\_size, expands the Byte Array to min\\_size. Also sets the auto-resize attribute of the Byte Array to the specified value."
                },
                {
                    "name": "ToHexString",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns a hexadecimal string representing the contents of the Byte Array, two digits per byte.",
                    "returnDescription": "A hexadecimal string."
                },
                {
                    "name": "FromHexString",
                    "params": [
                        {
                            "name": "hexstring",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "An even number of hexadecimal digits. The string must contain valid hexadecimal digits, or the result is undefined"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the contents of the Byte Array to the specified value. Any data currently in the Byte Array is discarded."
                },
                {
                    "name": "ToBase64String",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns a base-64 string representing the contents of the Byte Array.",
                    "returnDescription": "A base-64 string representing the contents of the Byte Array."
                },
                {
                    "name": "FromBase64String",
                    "params": [
                        {
                            "name": "s",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "A valid base-64 encoding"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the contents of the Byte Array to the specified value. Any data currently in the Byte Array is discarded."
                },
                {
                    "name": "ToAsciiString",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the contents of the Byte Array as a string. The contents must be valid UTF-8 (or ASCII subset), or the result is undefined",
                    "returnDescription": "A String containing the contents of the ByteArray."
                },
                {
                    "name": "FromAsciiString",
                    "params": [
                        {
                            "name": "s",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string to which the ByteArray is to be set."
                        }
                    ],
                    "description": "Sets the contents of the Byte Array to the specified string using UTF-8 encoding. Any data currently in the Byte Array is discarded."
                },
                {
                    "name": "GetSignedByte",
                    "params": [
                        {
                            "name": "index",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The index of the signed byte to be returned."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Returns the signed byte at the specified zero-based index in the Byte ArrayUse the [ifArrayGet.GetEntry()](/docs/references/brightscript/interfaces/ifarrayget.md#getentryindex-as-integer-as-dynamic) method or the \\[ \\] array operator to read an unsigned byte in the Byte Array.",
                    "returnDescription": "The signed byte at the specified zero-based index in the Byte Array."
                },
                {
                    "name": "GetSignedLong",
                    "params": [
                        {
                            "name": "index",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The index of the ByteArray from which to start retrieving the signed long."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Returns the signed long (four bytes) starting at the specified zero-based index in the Byte Array.",
                    "returnDescription": "A signed long."
                },
                {
                    "name": "GetCRC32",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Calculates a CRC-32 of the contents of the Byte Array.",
                    "returnDescription": "The calculated CRC-32 checksum."
                },
                {
                    "name": "GetCRC32",
                    "params": [
                        {
                            "name": "start",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The starting index of the subset of bytes to be used in the CRC-32 calculation."
                        },
                        {
                            "name": "length",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The length of the bytes to be included."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Calculates a CRC-32 of a subset of bytes within the Byte Array.",
                    "returnDescription": "The calculated CRC-32 checksum."
                },
                {
                    "name": "IsLittleEndianCPU",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Returns true if the CPU architecture is little-endian.",
                    "returnDescription": "A flag indicating whether the CPU architecture is little-endian."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roByteArray",
                    "description": "The byte array component is used to contain and manipulate an arbitrary array of bytes",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/robytearray.md"
                }
            ]
        },
        "ifCaptionRenderer": {
            "name": "ifCaptionRenderer",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifcaptionrenderer.md",
            "methods": [
                {
                    "name": "SetMode",
                    "params": [
                        {
                            "name": "mode",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the rendering mode for the [roCaptionRenderer](/docs/references/brightscript/components/rocaptionrenderer.md \"roCaptionRenderer\")."
                },
                {
                    "name": "SetScreen",
                    "params": [
                        {
                            "name": "screen",
                            "isRequired": true,
                            "default": null,
                            "type": "roScreen or roImageCanvas",
                            "description": "The [roScreen](/docs/references/brightscript/components/roscreen.md) or [roImageCanvas](/docs/references/brightscript/components/roimagecanvas.md) instance to be associated with this caption renderer."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the [roScreen](/docs/references/brightscript/components/roscreen.md) or [roImageCanvas](/docs/references/brightscript/components/roimagecanvas.md) instance associated with this caption renderer.This function only needs to be called if the roCaptionRenderer mode is set to 1 (the default value). In this case, the Roku OS is responsible for all of the closed caption text rendering, and thus must know what screen to draw on.If the mode is set to 2, the BrightScript channel is responsible for all of the caption drawing, and thus the Roku OS does not need to be informed as to what screen is being rendered on."
                },
                {
                    "name": "SetMessagePort",
                    "params": [
                        {
                            "name": "port",
                            "isRequired": true,
                            "default": null,
                            "type": "Object"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the [roMessagePort](/docs/references/brightscript/components/romessageport.md) that should receive [roCaptionRendererEvents](/docs/references/brightscript/events/rocaptionrendererevent.md) from the roCaptionRenderer."
                },
                {
                    "name": "ShowSubtitle",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag indicating whether the roCaptionRenderer displays captions."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Specifies whether the roCaptionRenderer displays captions. This function behaves the same as [ifVideoScreen.ShowSubtitle()](/docs/references/brightscript/interfaces/ifvideoscreen.md \"ifVideoScreen.ShowSubtitle/(/)\")."
                },
                {
                    "name": "UpdateCaption",
                    "params": [],
                    "returnType": "Void",
                    "description": "For roCaptionRenderer instances with the mode set to 1, this method tells the Roku OS to render the current caption. If the mode is 2, this function does nothing"
                },
                {
                    "name": "GetSubtitleTracks",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an roArray of roAssociativeArrays for each closed caption track found in the stream. This function can also be used to retrieve caption URLs for external (sideloaded) caption files.",
                    "returnDescription": "Each associative array in the returned array contains track information similar to that specified in the SubtitleTracks content metadata structure:"
                },
                {
                    "name": "ChangeSubtitleTrack",
                    "params": [
                        {
                            "name": "track",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "One of the 608 channels or ttml text tracks to be selected. The 608 channels are specified as 'eia608/' where is 1, 2, 3, or 4. The ttml text tracks are specified as 'ism/<track\\_name>'."
                        }
                    ],
                    "returnType": "Void",
                    "description": "The ChangeSubtitleTrack function is used to change the caption source after playback has begun."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roCaptionRenderer",
                    "description": "Returns information about the application",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rocaptionrenderer.md"
                }
            ],
            "description": "> This component is no longer updated and will be deprecated on January 1st, 2019.Beginning July 1st, 2017, any new channels using this component will be rejected during certification.Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification."
        },
        "ifChannelStore": {
            "name": "ifChannelStore",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifchannelstore.md",
            "methods": [
                {
                    "name": "GetIdentity",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns a unique number for this object that can be used to identify whether a roChannelStoreEvent event originated from this object, by comparing with the roChannelStoreEvent object's GetSourceIdentity() value.",
                    "returnDescription": "The unique number generated for the object."
                },
                {
                    "name": "GetCatalog",
                    "params": [],
                    "returnType": "Void",
                    "description": "Requests the list of In-Channel products that are linked to the running channel."
                },
                {
                    "name": "GetStoreCatalog",
                    "params": [],
                    "returnType": "Void",
                    "description": "Requests the list of globally available In-Channel products, which are available to all channels."
                },
                {
                    "name": "GetPurchases",
                    "params": [],
                    "returnType": "Void",
                    "description": "Requests the list of purchases associated with the current user account."
                },
                {
                    "name": "SetOrder",
                    "params": [
                        {
                            "name": "order",
                            "isRequired": true,
                            "default": null,
                            "type": "roList of roAssociativeArray items",
                            "description": "Each roAssociativeArray in the roList contains the following fields:"
                        },
                        {
                            "name": "orderInfo",
                            "isRequired": true,
                            "default": null,
                            "type": "Object"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the current Order (shopping cart) to the elements specified in the parameter, which must be an roList of roAssociativeArray items.Passing an empty roList clears the Order, like calling ClearOrder()."
                },
                {
                    "name": "ClearOrder",
                    "params": [],
                    "returnType": "Void"
                },
                {
                    "name": "DeltaOrder",
                    "params": [
                        {
                            "name": "code",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The product identifier."
                        },
                        {
                            "name": "qty",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The quantity purchased. This may be a negative number."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Applies a change in quantity to one item in the current Order (shopping cart)."
                },
                {
                    "name": "GetOrder",
                    "params": [],
                    "returnType": "Object",
                    "description": "Retrieves the current Order.",
                    "returnDescription": "The returned object is an roList of roAssociativeArray items, where each item contains the following parameter names with specified value type:"
                },
                {
                    "name": "DoOrder",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays the Roku Channel Store Product Purchase Screen populated with information from the current Order.",
                    "returnDescription": "A flag indicating whether the user approved the order (true if the order was approved; false otherwise)."
                },
                {
                    "name": "FakeServer",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "If enable is true, enables a test mode for the roChannelStore component."
                        }
                    ],
                    "returnType": "Void",
                    "description": "This test mode short circuits communication to the Roku Channel store. It makes other methods get their responses to async queries and operations from configuration files, rather than actual server communication."
                },
                {
                    "name": "GetUserData",
                    "params": [],
                    "returnType": "Object",
                    "description": "The GetUserData() function provides a way to request user authorization to share the user’s account information with the calling channel.",
                    "returnDescription": "When called, the method presents a dialog screen containing the user’s account information, along with two buttons labeled Share and Don’t Share."
                },
                {
                    "name": "GetPartialUserData",
                    "params": [
                        {
                            "name": "properties",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "A comma-separated list of the attribute names to be returned. For example, to return only the email address and first name of the user's account, you would call GetPartialUserData(\"email, firstname\"). The full set of user account properties that can be queried with the function is:"
                        },
                        {
                            "name": "requestInfo",
                            "isRequired": true,
                            "default": null,
                            "type": "Object"
                        }
                    ],
                    "returnType": "Object",
                    "description": "This function works like GetUserData(), but allows the caller to specify which user data elements to return. The specified values are also displayed in the user data dialog screen.",
                    "returnDescription": "An roAssociativeArray containing the Roku account information passed in the method."
                },
                {
                    "name": "GetUserRegionData",
                    "params": [],
                    "returnType": "Object",
                    "description": "Retrieves the state, zip code, and country associated with the customer's Roku account. The location information returned by this command can be used to determine a customer's eligibility for regional-specific subscription products and content.",
                    "returnDescription": "An associative array that contains the following fields:"
                },
                {
                    "name": "StoreChannelCredData",
                    "params": [
                        {
                            "name": "data",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "An OAuth token, custom token, or other custom data to be stored."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Stores an access token, oAuth token, or other authentication artifact that can be retrieved by calling the [GetChannelCred()](/docs/references/brightscript/interfaces/ifchannelstore.md#getchannelcred-as-object)method. This data is stored securely in the Roku cloud and can be retrieved by other devices linked to the same Roku account. This method can be used to store an authentication artifact with Roku for a signed in user, associating that user with a particular Roku account. For more information, see [Automatic Account Link](/docs/developer-program/authentication/universal-authentication-protocol-for-single-sign-on.md).",
                    "returnDescription": "This command returns an roAssociativeArray with the following values:"
                },
                {
                    "name": "GetChannelCred",
                    "params": [],
                    "returnType": "Object",
                    "description": "Retrieves a Roku Partner Unique Customer Identifier (roku\\_pucid), or retrieves an access token, oAuth token, or other authentication artifact (channel\\_data).",
                    "returnDescription": "An associative array that contains the following fields:"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roChannelStore",
                    "description": "allows the application to perform a purchase of an In-Channel Product or upgrade a channel",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rochannelstore.md"
                }
            ]
        },
        "ifCodeRegistrationScreen": {
            "name": "ifCodeRegistrationScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifcoderegistrationscreen.md",
            "methods": [
                {
                    "name": "SetTitle",
                    "params": [
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title to be displayed on the code registration screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the title for the screen to the specified string."
                },
                {
                    "name": "AddHeaderText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be displayed in the header of the code registration screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Add a string of bold, high visibility text to the screen as a header to introduce the subsequent paragraph(s)."
                },
                {
                    "name": "AddParagraph",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The paragraph of text to be displayed on the code registration screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds a paragraph of text to the screen. A paragraph is specified as a single string and are ordered on the screen in the same order as they are added. The roCodeRegistrationScreen handles all text formatting and justification. Spacing is automatically inserted between paragraphs for readability."
                },
                {
                    "name": "AddButton",
                    "params": [
                        {
                            "name": "id",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID of the button."
                        },
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title of the button."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds a button to the screen identified by the title and ID provided. The buttons are at the bottom of the screen and appear in the order added",
                    "returnDescription": "When the button is pressed, the script will receive an event from the application indicating the ID of the button pressed."
                },
                {
                    "name": "AddFocalText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "This text is intended to provide the user important instructions on where to use the registration code. It is generally a few words of instruction followed by the URL for the registration site on the web."
                        },
                        {
                            "name": "spacingFormat",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "Multiple lines of text may be added and the spacing between each is controlled by specifying the spacing format as one of the following: spacing-dense, spacing–normal or spacing-sparse."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds high visibility focal text to the screen to be placed above the registration code."
                },
                {
                    "name": "SetBreadcrumbText",
                    "params": [
                        {
                            "name": "String",
                            "isRequired": true,
                            "default": null,
                            "type": "location2",
                            "description": "The second location value."
                        }
                    ],
                    "description": "Breadcrumbs allow the application to display a two-part navigational title which shows the current and the previous locations in the application hierarchy (e.g. TV – Friends). If both location values are set, the application will display the title in breadcrumb format. If only the first location is set, the application will display the specified text in the title area like the SetTitle API call"
                },
                {
                    "name": "SetRegistrationCode",
                    "params": [
                        {
                            "name": "regCode",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the registration code (e.g. XM3RT) or text (e.g. retrieving…) to be displayed on the screen."
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays or refreshes the screen after creation or state changes.",
                    "returnDescription": "A flag indicating whether the screen is displayed (returns true if the screen is displayed, otherwise false)."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void",
                    "description": "Closes the screen and deletes the associated object. This is useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roCodeRegistrationScreen",
                    "description": "The Code Registration Screen is designed to present the user a registration code, and the information required to instruct the user on how to register with a service provider",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rocoderegistrationscreen.md"
                }
            ],
            "description": "> This component is deprecated.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification."
        },
        "ifCompositor": {
            "name": "ifCompositor",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifcompositor.md",
            "methods": [
                {
                    "name": "SetDrawTo",
                    "params": [
                        {
                            "name": "destBitmap",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The bitmap to be drawn."
                        },
                        {
                            "name": "rgbaBackground",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The background color to be used."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the destBitmap ([roBitmap](/docs/references/brightscript/components/robitmap.md \"roBitmap\") or [roScreen](/docs/references/brightscript/components/roscreen.md \"roScreen\")) and the background color."
                },
                {
                    "name": "Draw",
                    "params": [],
                    "returnType": "Void",
                    "description": "Draws any dirty sprites (that is, whatever is new or has changed since the last Draw). No compositor or sprite operations will be reflected on the display until Draw() is called. After calling Draw(), you must call Finish() (if single buffered) or SwapBuffers() (if double buffered) before the changes will be user visible"
                },
                {
                    "name": "DrawAll",
                    "params": [],
                    "returnType": "Void",
                    "description": "Redraws all sprites even if not dirty. After calling Draw(), you must call Finish() (if single buffered) or SwapBuffers() (if double buffered) before the changes will be user visible"
                },
                {
                    "name": "NewSprite",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate of the sprite."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate of the sprite."
                        },
                        {
                            "name": "region",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The region to be used to define the sprite's bitmap."
                        },
                        {
                            "name": "z",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The z-coordinate of the sprite."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Creates a new sprite, using an roRegion to define the sprite's bitmap. Position the sprite at coordinate x,y. If z is provided, position the sprite in front of all other sprites with equal or lower z value. Sprites with negative z values are not rendered or displayed on the screen.",
                    "returnDescription": "Returns an [roSprite](/docs/references/brightscript/components/rosprite.md \"roSprite\") object."
                },
                {
                    "name": "NewAnimatedSprite",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate of the sprite."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate of the sprite."
                        },
                        {
                            "name": "regionArray",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The frames to be animated."
                        },
                        {
                            "name": "z",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The z-coordinate of the sprite."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Creates a new sprite that consists of a sequence of frames to be animated. The frames are defined by the regionArray which is an [roArray](/docs/references/brightscript/components/roarray.md \"roArray\") of [roRegions](/docs/references/brightscript/components/roregion.md \"roRegions\"). Position the sprite at coordinate x,y. If z is provided, position the sprite in front of all other sprites with equal or lower z value",
                    "returnDescription": "Returns an [roSprite](/docs/references/brightscript/components/rosprite.md \"roSprite\") object."
                },
                {
                    "name": "AnimationTick",
                    "params": [
                        {
                            "name": "duration",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The number of ms since the last call."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Moves all animated sprites. Sprites will not animate unless you call this function regularly."
                },
                {
                    "name": "ChangeMatchingRegions",
                    "params": [
                        {
                            "name": "oldRegion",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The sprite roRegion to be replaced."
                        },
                        {
                            "name": "newRegion",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The new sprite roRegion to be used."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Provides a global search and replace of sprite [roRegions](/docs/references/brightscript/components/roregion.md \"roRegions\"). Replaces regions that match oldRegion with newRegion"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roCompositor",
                    "description": "The roCompositor allows the composition and animation of multiple roBitmaps and roRegions",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rocompositor.md"
                }
            ]
        },
        "ifDateTime": {
            "name": "ifDateTime",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifdatetime.md",
            "methods": [
                {
                    "name": "Mark",
                    "params": [],
                    "returnType": "Void",
                    "description": "Sets the date/time value to the current UTC date and time."
                },
                {
                    "name": "ToLocalTime",
                    "params": [],
                    "returnType": "Void",
                    "description": "Offsets the date/time value from an assumed UTC date/time to a local date/time using the system time zone setting. This function is not idempotent, and multiple calls will do multiple timezone adjustments to the time yielding an incorrect result."
                },
                {
                    "name": "GetTimeZoneOffset",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the offset in minutes from the system time zone to UTC. For example, if the system time zone is in PDT / UTC-7 the value returned would be 420.",
                    "returnDescription": "Minutes of offset as Integer."
                },
                {
                    "name": "AsSeconds",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the date/time as the number of seconds from the Unix epoch (00:00:00 1/1/1970 GMT).",
                    "returnDescription": "Number of seconds as Integer."
                },
                {
                    "name": "FromSeconds",
                    "params": [
                        {
                            "name": "numSeconds",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The number of seconds from the Unix epoch."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the date/time value using the number of seconds from the Unix epoch."
                },
                {
                    "name": "ToISOString",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns an ISO 8601 representation of the date/time value. As of Roku OS 10.0, this now resolves to milliseconds.",
                    "returnDescription": "ISO 8601 as String, e.g. \"2021-03-25T18:53:03+0000\""
                },
                {
                    "name": "FromISO8601String",
                    "params": [
                        {
                            "name": "dateString",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The ISO-8601 string to be used to set the date and time."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the date/time using a string in the ISO 8601 format. For example \"YYYY-MM-DD HH:MM:SS\" e.g \"2009-01-01 01:00:00.000\" or \"2009-01-01T01:00:00.000\"."
                },
                {
                    "name": "AsDateString",
                    "params": [
                        {
                            "name": "format",
                            "isRequired": true,
                            "default": null,
                            "type": "",
                            "description": ""
                        }
                    ],
                    "returnType": "String",
                    "description": "Returns the date/time formatted string.",
                    "returnDescription": "A dateString corresponding to the specified format."
                },
                {
                    "name": "AsDateStringNoParam",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the date/time in long-date format.",
                    "returnDescription": "A date/time string in long-date format (for example, Tuesday October 9, 2012)"
                },
                {
                    "name": "GetWeekday",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the day of the week.",
                    "returnDescription": "Week value as a String (e.g. \"Monday\")."
                },
                {
                    "name": "GetYear",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Return Value"
                },
                {
                    "name": "GetMonth",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the date/time value's month.",
                    "returnDescription": "Month value as an Integer (1=Jan, 12=Dec)."
                },
                {
                    "name": "GetDayOfMonth",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the date/time value's day of the month.",
                    "returnDescription": "Month value as an Integer (1-31)."
                },
                {
                    "name": "GetHours",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the date/time value's hour within the day.",
                    "returnDescription": "Hour value as an Integer (0-23)"
                },
                {
                    "name": "GetMinutes",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the date/time value's minute within the hour.",
                    "returnDescription": "Minute value as an Integer (0-59)"
                },
                {
                    "name": "GetSeconds",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the date/time value's second within the minute.",
                    "returnDescription": "Second value as an Integer (0-59)."
                },
                {
                    "name": "GetMilliseconds",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the date/time value's millisecond within the second.",
                    "returnDescription": "Millisecond value as an Integer (0-999)."
                },
                {
                    "name": "GetLastDayOfMonth",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the date/time value's last day of the month.",
                    "returnDescription": "Day as an Integer (28-31)"
                },
                {
                    "name": "GetDayOfWeek",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the date/time value's day of week.",
                    "returnDescription": "Day value as an Integer (Sunday=0, Monday=1, ..., Saturday=6)."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roDateTime",
                    "description": "The roDateTime provides an interface to obtain the current date/time for the player and manipulate date/times",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodatetime.md"
                }
            ]
        },
        "ifDeviceInfo": {
            "name": "ifDeviceInfo",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifdeviceinfo.md",
            "methods": [
                {
                    "name": "GetModel",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the model name of the Roku device. See the [Hardware Specification](/docs/specs/hardware.md) for the list of the current, updatable, and legacy Roku models.",
                    "returnDescription": "A five-character alphanumeric string (for example, \"3050X\") ."
                },
                {
                    "name": "GetModelDisplayName",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the model display name of the Roku device.",
                    "returnDescription": "The model display name (for example, \"Roku 2 XD\")"
                },
                {
                    "name": "GetModelType",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns a string describing the type of device. For future compatibility, the caller should by default assume \"STB\" when anything other than described value is returned",
                    "returnDescription": "The device type, which may be one of the following values:"
                },
                {
                    "name": "GetModelDetails",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns detailed information about the device model.",
                    "returnDescription": "An associative array containing the following information about the device model:"
                },
                {
                    "name": "GetFriendlyName",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns a string describing the device that may be used for network device selection. The string is subject to change and should not be used as a persistent key or ID",
                    "returnDescription": "A user-assigned device name or a description of the device such as model name and/or serial number."
                },
                {
                    "name": "GetOSVersion",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an roAssociativeArray containing the **major**, **minor**, **revision**, and **build** numbers of the Roku OS running on the device.",
                    "returnDescription": "An roAssociativeArray containing the following fields:"
                },
                {
                    "name": "GetVersion",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the version number of the device.",
                    "returnDescription": "A 13-character string (for example \"034.08E01185A\"). The third through sixth characters are the major/minor version number (\"4.08\") and the ninth through twelfth are the build number (\"1185\")"
                },
                {
                    "name": "GetDeviceUniqueId",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns a string of 12 zeroes (it no longer returns the unique identifier for the channel on a device).",
                    "returnDescription": "A string of 12 zeros (\"000000000000\")"
                },
                {
                    "name": "GetAdvertisingId",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns a unique identifier for the device. This identifier is persistent but can be reset by the user from the device's Settings menu or by performing a factory reset on the device.",
                    "returnDescription": "A Universally Unique Identifier (UUID) as specified in IETF-RFC 4122 with 36 characters (32 alphanumeric characters and four hyphens). The characters are grouped in the form 8-4-4-4-12, for example \"123e4567-e89b-12d3-a456-426655440000\""
                },
                {
                    "name": "GetRIDA",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns a unique identifier for the device.",
                    "returnDescription": "A Universally Unique Identifier (UUID). This identifier is persistent, but it can be reset by the user from the device's **Settings** menu or by performing a factory reset on the device"
                },
                {
                    "name": "IsAdIdTrackingDisabled",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "If Ad Id tracking is disabled, the identifier returned by GetAdvertisingId() should not be used for Ad targeting",
                    "returnDescription": "Returns true if the user has disabled Ad Id tracking by selecting \"Limit ad tracking\" from the Roku Settings menu, false otherwise."
                },
                {
                    "name": "IsRIDADisabled",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Indicates whether tracking via Roku's ID for Advertisers (RIDA) is disabled on the device.",
                    "returnDescription": "A flag indicating whether RIDA tracking is disabled on the device (RIDA tracking can be disabled by selecting \"Limit ad tracking\" from the **Settings>Privacy>Advertising** menu). If RIDA tracking is disabled, this returns true; false otherwise."
                },
                {
                    "name": "GetClientTrackingId",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns a unique identifier for the device.",
                    "returnDescription": "A unique device identifier. This identifier is different across channels so each channel will get a different identifier when calling this function"
                },
                {
                    "name": "GetChannelClientId",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns a unique identifier for the device. The ID is persistent and cannot be reset. This value can be used to manage or identify devices linked to the channel’s content services.",
                    "returnDescription": "A unique device identifier. This identifier is different across channels so each channel will get a different identifier when calling this function"
                },
                {
                    "name": "GetUserCountryCode",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the ISO 3166-1 (2-letter) country code associated with the user's Roku account.",
                    "returnDescription": "An ISO 3166-1 (2-letter) country code."
                },
                {
                    "name": "GetRandomUUID",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns a randomly generated unique identifier. Each time this function is called, a different identifier is returned",
                    "returnDescription": "A Universally Unique Identifier (UUID) version 4 as specified in IETF-RFC 4122 with 36 characters (32 alphanumeric characters and four hyphens). The characters are grouped in the form 8-4-4-4-12, for example \"123e4567-e89b-12d3-a456-426655440000\""
                },
                {
                    "name": "GetTimeZone",
                    "params": [],
                    "returnType": "String",
                    "description": "Checks for the user's current system time zone setting.",
                    "returnDescription": "A string representing the user's current system time zone setting. For example, this method may return values such as:"
                },
                {
                    "name": "HasFeature",
                    "params": [
                        {
                            "name": "feature",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The feature to be checked, which may be one of the following values:"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Checks if the current device/firmware supports the passed in feature string.",
                    "returnDescription": "A flag indicating whether the current device/firmware supports the passed in feature string."
                },
                {
                    "name": "GetCurrentLocale",
                    "params": [],
                    "returnType": "String",
                    "description": "Gets the current locale value based on the user's language setting.",
                    "returnDescription": "A string representing the current locale based on the user's language setting. The string is an ISO 639-1 (2-letter) language code followed by an underscore and a ISO 3166-1 (2-letter) country code. This may be one of the following values:"
                },
                {
                    "name": "GetCountryCode",
                    "params": [],
                    "returnType": "String",
                    "description": "Checks for the country code of the channel.",
                    "returnDescription": "A value that indicates the Roku Channel Store associated with a user’s Roku account. Typically, the value returned will be an ISO 3166-1 (2-letter) country code representing the country. Alternatively, if the channel owner entered into an additional agreement to have the channel published to a curated [Roku Powered Channel Store](https://www.roku.com/roku-powered) instead of the user country, then a Roku Powered Channel Store Identifier will instead be returned. This may be one of the following values:"
                },
                {
                    "name": "GetPreferredCaptionLanguage",
                    "params": [],
                    "returnType": "String",
                    "description": "Checks the three-letter ISO 639-2 language terminology code of the preferred caption language set on the Roku device.",
                    "returnDescription": "The three-letter ISO 639-2 language terminology code, which may be one of the following values:"
                },
                {
                    "name": "TimeSinceLastKeypress",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Checks for the number of seconds passed since the last remote keypress.",
                    "returnDescription": "The number of seconds since the last remote keypress was received."
                },
                {
                    "name": "GetDrmInfo",
                    "params": [],
                    "returnType": "Object",
                    "description": "Checks for the supported DRM system and its features.",
                    "returnDescription": "An associative array with the supported DRM system and features. For example, a device that supports PlayReady inside a trusted environment with secure stop returns:"
                },
                {
                    "name": "GetDrmInfoEx",
                    "params": [],
                    "returnType": "Object"
                },
                {
                    "name": "GetCaptionsMode",
                    "params": [],
                    "returnType": "String",
                    "description": "Determines whether global captions are turned on or off, or are in instant replay mode.",
                    "returnDescription": "The current global setting for the Mode property, which may be one of the following values:"
                },
                {
                    "name": "SetCaptionsMode",
                    "params": [
                        {
                            "name": "mode",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The current global setting for the Mode property, which may be one of the following values:"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the current global setting for the Mode property.",
                    "returnDescription": "A flag indicating whether the Mode property was successfully set."
                },
                {
                    "name": "GetCaptionsOption",
                    "params": [
                        {
                            "name": "option",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The global setting property to be checked, which may be one of the following values:"
                        }
                    ],
                    "returnType": "String",
                    "description": "Checks the current value of the specified global setting property.",
                    "returnDescription": "The value of the specified global setting property, which may be as follows:"
                },
                {
                    "name": "GetClockFormat",
                    "params": [],
                    "returnType": "String",
                    "description": "Checks whether the system settings for Time (**Setting > System > Time**) is set to a 12 or 24-hour format.",
                    "returnDescription": "The time format:"
                },
                {
                    "name": "EnableAppFocusEvent",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to enable/disable system overlay event notifications."
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Notifies the channel when a system overlay event (such as the [confirm partner button HUD](/docs/developer-program/getting-started/architecture/channel-manifest.md#special-purpose-attributes) or the caption control overlay) is displayed. This notification gives the channel the opportunity to do any processing they may want to when the channel loses or regains focus.",
                    "returnDescription": "A flag indicating whether the system overlay event notifications are enabled (true) or disabled (false)."
                },
                {
                    "name": "EnableScreensaverExitedEvent",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to enable/disable screensaver exit event notifications."
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Notifies the channel when a screensaver exit event occurs. This function enables the sending of an [roDeviceInfoEvent](/docs/references/brightscript/events/rodeviceinfoevent.md) when a user has exited the screensaver.",
                    "returnDescription": "A flag indicating whether screensaver exit event notifications are enabled (true) or disabled (false)."
                },
                {
                    "name": "IsHDMIConnected",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks for an HDMI connection.",
                    "returnDescription": "A flag indicating whether an HDMI connection to a TV has been detected."
                },
                {
                    "name": "EnableLowGeneralMemoryEvent",
                    "params": [
                        {
                            "name": "enabled",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean"
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Notifies the channel when a lowGeneralMemoryLevel event occurs. This function enables the sending of an [roDeviceInfoEvent](/docs/references/brightscript/events/rodeviceinfoevent.md) when a low general memory event occurs.",
                    "returnDescription": "A flag indicating whether lowGeneralMemoryLevel event notifications are enabled (true) or disabled (false)."
                },
                {
                    "name": "GetGeneralMemoryLevel",
                    "params": [],
                    "returnType": "String",
                    "description": "Checks the general memory levels of the channel.",
                    "returnDescription": "Returns the general memory levels of the channel, which may be one of the following values:"
                },
                {
                    "name": "IsStoreDemoMode",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether the device is in demo mode.",
                    "returnDescription": "A flag indicating whether the device is in demo mode."
                },
                {
                    "name": "GetLinkStatus",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks if the device has an active connection.",
                    "returnDescription": "A flag indicating whether the device has an active connection."
                },
                {
                    "name": "EnableLinkStatusEvent",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to enable/disable network connection status event notifications."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Notifies the channel when a network connection status event occurs. This function enables the sending of an [roDeviceInfoEvent](/docs/references/brightscript/events/rodeviceinfoevent.md) when the network connection status changes. To receive events, you must have first called [SetMessagePort](/docs/references/brightscript/interfaces/ifsetmessageport.md) on the roDeviceInfo object specifying the message port that is to receive the events",
                    "returnDescription": "A flag indicating whether network connection status event notifications are enabled (true) or disabled (false)."
                },
                {
                    "name": "GetConnectionType",
                    "params": [],
                    "returnType": "String",
                    "description": "Checks whether the device has a WiFi or wired connection, or if it is not connected through any type of network.",
                    "returnDescription": "The type of internet connection the device is using. This may be one of the following values:"
                },
                {
                    "name": "EnableInternetStatusEvent",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to enable/disable network connection status event notifications."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Notifies the channel when an internet connection status event occurs. This function enables the sending of an [roDeviceInfoEvent](https://developer.roku.com/docs/references/brightscript/events/rodeviceinfoevent.md) when the network connection status changes, as indicated by `roDeviceInfoEvent.internetStatus`. To receive events, the channel must have first called [SetMessagePort](https://developer.roku.com/docs/references/brightscript/interfaces/ifsetmessageport.md) on the roDeviceInfo object specifying the message port that is to receive the events.",
                    "returnDescription": "A flag indicating whether network connection status event notifications are enabled (true) or disabled (false)."
                },
                {
                    "name": "GetInternetStatus",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks the internet connection status of the device.",
                    "returnDescription": "True if the cached internet status shows a connection; false, otherwise."
                },
                {
                    "name": "ForceInternetStatusCheck",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Forces a new internet connection check. A new check will only be initiated if the cached internet status is older than 10 seconds.",
                    "returnDescription": "True indicates only that a new internet check has been initiated; otherwise, false. To get the actual internet connection status, use the [**GetInternetStatus()**](getinternetstatus-as-boolean) method."
                },
                {
                    "name": "GetExternalIp",
                    "params": [],
                    "returnType": "String",
                    "description": "Checks the IP address assigned to the device by your internet service provider (ISP). This IP address is visible to the internet and all other computers outside your local network.",
                    "returnDescription": "The external IP address assigned to the device."
                },
                {
                    "name": "GetIPAddrs",
                    "params": [],
                    "returnType": "Object",
                    "description": "Checks the local IP address of the device. This can be used in conjunction with the ECP (see the External Control Protocol Guide) \"launch\" command (or the \"install\" command for uninstalled channels) to start a different channel from the current channel.",
                    "returnDescription": "An associative array, where each key is the name of a network interface and the value is the IP-address of the interface. Typically, the associative array only contains a single interface."
                },
                {
                    "name": "GetConnectionInfo",
                    "params": [],
                    "returnType": "Object",
                    "description": "Checks for the information associated with the hardware's connection",
                    "returnDescription": "An associative array with the following key-value pairs:"
                },
                {
                    "name": "GetDisplayType",
                    "params": [],
                    "returnType": "String",
                    "description": "Gets the text corresponding to the button selection in the Player Info Settings/Display Type page.",
                    "returnDescription": "The display type, which may be one of the following values:"
                },
                {
                    "name": "GetDisplayMode",
                    "params": [],
                    "returnType": "String",
                    "description": "Checks the UI resolution of the device.",
                    "returnDescription": "The configured graphics layer resolution, which may be one of the following values:"
                },
                {
                    "name": "GetDisplayAspectRatio",
                    "params": [],
                    "returnType": "String",
                    "description": "Checks the aspect ratio for the display screen.",
                    "returnDescription": "The aspect ratio, which may be one of the following values:"
                },
                {
                    "name": "GetDisplaySize",
                    "params": [],
                    "returnType": "Object",
                    "description": "Checks the display size of a screen.",
                    "returnDescription": "An associative array with the screen width and height. Specifically, the keys \"w\" and \"h\" contain the values for the screen width and height respectively, either 720 and 480, or 1280 and 720"
                },
                {
                    "name": "GetVideoMode",
                    "params": [],
                    "returnType": "String",
                    "description": "Checks the video playback resolution.",
                    "returnDescription": "The video playback resolution, which maybe one of the following values:"
                },
                {
                    "name": "GetDisplayProperties",
                    "params": [],
                    "returnType": "Object",
                    "description": "Checks for the display properties of the screen.",
                    "returnDescription": "An associative array with the following key/value pairs for the display properties of the screen:"
                },
                {
                    "name": "GetSupportedGraphicsResolutions",
                    "params": [],
                    "returnType": "Object",
                    "description": "Checks the supported graphics resolutions.",
                    "returnDescription": "A list of associative arrays. Each associative array contains the following key/value pairs for the graphics resolutions:"
                },
                {
                    "name": "CanDecodeVideo",
                    "params": [
                        {
                            "name": "video",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Checks whether the device can decode and play the specified video format.",
                    "returnDescription": "An associative array that includes a flag indicating whether the video format can be played, and the closest video format supported by the device."
                },
                {
                    "name": "GetUIResolution",
                    "params": [],
                    "returnType": "Object",
                    "description": "Checks for the UI resolution of the screen.",
                    "returnDescription": "An associative array with the following key-value pairs describing the current UI resolution:"
                },
                {
                    "name": "GetGraphicsPlatform",
                    "params": [],
                    "returnType": "String",
                    "description": "Checks the graphics platform of the device.",
                    "returnDescription": "The device's graphics platform, which may be one of the following values:"
                },
                {
                    "name": "GetVideoDecodeInfo",
                    "params": [],
                    "returnType": "Object",
                    "description": "See [http://en.wikipedia.org/wiki/Extended\\_display\\_identification\\_data#EIA.2FCEA-861\\_extension\\_block](http://en.wikipedia.org/wiki/Extended_display_identification_data#EIA.2FCEA-861_extension_block) for an explanation of the information returned.",
                    "returnDescription": "An associative array with the EDID (EIA.2FCEA-861) information describing the video display"
                },
                {
                    "name": "EnableCodecCapChangedEvent",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag indicating whether to enable/disable codec change event notifications."
                        }
                    ],
                    "description": "Notifies the channel when the audio or video codec changes. This function enables the sending of an [roDeviceInfoEvent](/docs/references/brightscript/events/rodeviceinfoevent.md) when the codec changes. To receive events, you must have first called [SetMessagePort](/docs/references/brightscript/interfaces/ifsetmessageport.md) on the roDeviceInfo object specifying the message port that is to receive the events",
                    "returnDescription": "A flag indicating whether codec change event notifications are enabled (true) or disabled (false)."
                },
                {
                    "name": "GetAudioOutputChannel",
                    "params": [],
                    "returnType": "String",
                    "description": "Checks for the type of audio output.",
                    "returnDescription": "The selected audio output, which may be one of the following values:"
                },
                {
                    "name": "GetAudioDecodeInfo",
                    "params": [],
                    "returnType": "Object",
                    "description": "Lists each audio decoder supported by the device, with up to four numbers describing the decoder from the EDID SAD (Short Audio Descriptor). Each value is of the form \"::::\"",
                    "returnDescription": "An associative array with EDID (EIA.2FCEA-861) audio decoder information for the device connected to the HDMI port (or the device itself for a Roku TV)."
                },
                {
                    "name": "CanDecodeAudio",
                    "params": [
                        {
                            "name": "audio",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Checks if the device can decode and play the specified audio format.",
                    "returnDescription": "An associative array that includes a flag indicating whether the audio format can be played, and the closest audio format supported by the device."
                },
                {
                    "name": "GetSoundEffectsVolume",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Checks for the user interface sound effects volume level.",
                    "returnDescription": "The UI sounds effects volume as a percentage. A return value of 0 indicates that UI sound effects are muted, and a value of 100 indicates that they are set to the maximum volume level"
                },
                {
                    "name": "IsAudioGuideEnabled",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Checks if the audio guide is enabled.",
                    "returnDescription": "A flag indicating whether the audio guide is enabled."
                },
                {
                    "name": "EnableAudioGuideChangedEvent",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag indicating whether to enable/disable audio guide change event notifications."
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Notifies the channel when the audio guide changes. This function enables the sending of an [roDeviceInfoEvent](/docs/references/brightscript/events/rodeviceinfoevent.md) when the audio guide changes. To receive events, you must have first called [SetMessagePort](/docs/references/brightscript/interfaces/ifsetmessageport.md) on the roDeviceInfo object specifying the message port that is to receive the events",
                    "returnDescription": "A flag indicating whether audio guide change event notifications are enabled (true) or disabled (false)."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roDeviceInfo",
                    "description": "The roDeviceInfo component provides an interface to obtain attributes about the device",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodeviceinfo.md"
                }
            ]
        },
        "ifDeviceCrypto": {
            "name": "ifDeviceCrypto",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifdevicecrypto.md",
            "methods": [],
            "properties": [],
            "implementers": [
                {
                    "name": "roDeviceCrypto",
                    "description": "Encrypts and decrypts data on a device using a key that is unique per channel, device, or model.",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodevicecrypto.md"
                }
            ]
        },
        "ifDouble": {
            "name": "ifDouble",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifdouble.md",
            "methods": [
                {
                    "name": "GetDouble",
                    "params": [],
                    "returnType": "Double",
                    "description": "Gets the double value stored in the calling Double object.",
                    "returnDescription": "The double value stored in the calling Double object."
                },
                {
                    "name": "SetDouble",
                    "params": [
                        {
                            "name": "value",
                            "isRequired": true,
                            "default": null,
                            "type": "Double",
                            "description": "The double value to be set on the calling Double object."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the calling Double object to the specified double value."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roDouble",
                    "description": "roDouble is a legacy object name, corresponding to the intrinsic Double object",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodouble.md"
                }
            ],
            "description": "> Interface equivalent for intrinsic type Double"
        },
        "ifDraw2D": {
            "name": "ifDraw2D",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifdraw2d.md",
            "methods": [
                {
                    "name": "Clear",
                    "params": [
                        {
                            "name": "rgba",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The RGBA color to be used to fill the bitmap."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Clears the bitmap, and fills it with the specified RGBA color."
                },
                {
                    "name": "GetWidth",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Gets the width of the bitmap.",
                    "returnDescription": "The width of the bitmap in pixels."
                },
                {
                    "name": "GetHeight",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Gets the height of the bitmap in pixels.",
                    "returnDescription": "The height of the bitmap in pixels."
                },
                {
                    "name": "GetByteArray",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate of the rectangle."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate of the rectangle."
                        },
                        {
                            "name": "width",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The width of the rectangle."
                        },
                        {
                            "name": "height",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The height of the rectangle."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Gets the RGBA pixel values for the specified rectangle.",
                    "returnDescription": "An roByteArray representing the RGBA pixel values for the specified rectangle."
                },
                {
                    "name": "GetPng",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate of the rectangle."
                        },
                        {
                            "name": "width",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The width of the rectangle."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate of the rectangle."
                        },
                        {
                            "name": "height",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The height of the rectangle."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Gets PNG image data for the specified area of the bitmap. The PNG is in 32-bit RGBA format.",
                    "returnDescription": "An roByteArray object containing PNG image data for the specified area of the bitmap. If the coordinates are out of bounds, or the PNG conversion fails for any reason, then invalid is returned"
                },
                {
                    "name": "GetAlphaEnable",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks if the alpha blending is enabled.",
                    "returnDescription": "A flag indicating whether alpha blending is enabled."
                },
                {
                    "name": "SetAlphaEnable",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether alpha blending is enabled."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables alpha blending when the source bitmap is the destination. The setting of the source bitmap's alpha enable is ignored."
                },
                {
                    "name": "DrawRect",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate of the rectangle."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate of the rectangle."
                        },
                        {
                            "name": "width",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The width of the rectangle."
                        },
                        {
                            "name": "height",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The height of the rectangle."
                        },
                        {
                            "name": "rgba",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The RGBA color to be used to fill the rectangle."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Fills the specified rectangle from left (x), top (y) to right (x + width), bottom (y + height) with the RGBA color."
                },
                {
                    "name": "DrawPoint",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate of the point."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate of the point."
                        },
                        {
                            "name": "size",
                            "isRequired": true,
                            "default": null,
                            "type": "Float",
                            "description": "The size of the point."
                        },
                        {
                            "name": "rgba",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The RGBA color of the point."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Draws a point at (x,y) with the given size and RGBA color."
                },
                {
                    "name": "DrawLine",
                    "params": [
                        {
                            "name": "xStart",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate of the line's start point."
                        },
                        {
                            "name": "yStart",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate of the line's start point."
                        },
                        {
                            "name": "xEnd",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate of the line's end point."
                        },
                        {
                            "name": "yEnd",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate of the line's end point."
                        },
                        {
                            "name": "rgba",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The RGBA color of the line."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Draws a line from (xStart, yStart) to (xEnd, yEnd) with RGBA color."
                },
                {
                    "name": "DrawObject",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate of the source object."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate of the source object."
                        },
                        {
                            "name": "src",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The [roBitmap](/docs/references/brightscript/components/robitmap.md \"roBitmap\") or an [roRegion](/docs/references/brightscript/components/roregion.md \"roRegion\") object to be drawn."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Draws the source object, where src is an [roBitmap](/docs/references/brightscript/components/robitmap.md \"roBitmap\") or an [roRegion](/docs/references/brightscript/components/roregion.md \"roRegion\") object, at position x,y.",
                    "returnDescription": "A flag indicating whether the object was successfully drawn."
                },
                {
                    "name": "DrawScaledObject",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate of the source object."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate of the source object."
                        },
                        {
                            "name": "scaleX",
                            "isRequired": true,
                            "default": null,
                            "type": "Float",
                            "description": "The x direction in which the source object is to be scaled."
                        },
                        {
                            "name": "scaleY",
                            "isRequired": true,
                            "default": null,
                            "type": "Float",
                            "description": "The y direction in which the source object is to be scaled."
                        },
                        {
                            "name": "src",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The [roBitmap](/docs/references/brightscript/components/robitmap.md \"roBitmap\") or an [roRegion](/docs/references/brightscript/components/roregion.md \"roRegion\") object to be drawn."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Draws the source object, where src is an [roBitmap](/docs/references/brightscript/components/robitmap.md \"roBitmap\") or an [roRegion](/docs/references/brightscript/components/roregion.md \"roRegion\") object, at position x,y, scaled in the x direction by scaleX and in the y direction by scaleY. scaleX and scaleY should each be greater than zero and less than one to reduce the object size, or greater than one to increase the object size",
                    "returnDescription": "A flag indicating whether the object was successfully drawn."
                },
                {
                    "name": "DrawScaledObject",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate of the source object."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate of the source object."
                        },
                        {
                            "name": "scaleX",
                            "isRequired": true,
                            "default": null,
                            "type": "Float",
                            "description": "The x direction in which the source object is to be scaled."
                        },
                        {
                            "name": "scaleY",
                            "isRequired": true,
                            "default": null,
                            "type": "Float",
                            "description": "The y direction in which the source object is to be scaled."
                        },
                        {
                            "name": "src",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The [roBitmap](/docs/references/brightscript/components/robitmap.md \"roBitmap\") or an [roRegion](/docs/references/brightscript/components/roregion.md \"roRegion\") object to be drawn."
                        },
                        {
                            "name": "rgba",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The RGBA color of the source object."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Draws the source object, where src is an [roBitmap](/docs/references/brightscript/components/robitmap.md \"roBitmap\") or an [roRegion](/docs/references/brightscript/components/roregion.md \"roRegion\") object, at position x,y, scaled in the x direction by scaleX and in the y direction by scaleY. scaleX and scaleY should each be greater than zero and less than one to reduce the object size, or greater than one to increase the object size.",
                    "returnDescription": "A flag indicating whether the object was successfully drawn."
                },
                {
                    "name": "DrawRotatedObject",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate of the source object."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate of the source object."
                        },
                        {
                            "name": "theta",
                            "isRequired": true,
                            "default": null,
                            "type": "Float",
                            "description": "The position which to rotate the source object. This may be 0, 90, 180, and 270 degrees."
                        },
                        {
                            "name": "src",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The [roBitmap](/docs/references/brightscript/components/robitmap.md \"roBitmap\") or an [roRegion](/docs/references/brightscript/components/roregion.md \"roRegion\") object to be drawn."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Draws the source object, where src is an [roBitmap](/docs/references/brightscript/components/robitmap.md \"roBitmap\") or an [roRegion](/docs/references/brightscript/components/roregion.md \"roRegion\") object, at position x,y rotated by angle theta degrees.",
                    "returnDescription": "A flag indicating whether the object was successfully drawn."
                },
                {
                    "name": "DrawText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be drawn."
                        },
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate of the source object."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate of the source object."
                        },
                        {
                            "name": "rgba",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The color of the text."
                        },
                        {
                            "name": "font",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The [roFont](/docs/references/brightscript/components/rofont.md \"roFont\") object to be used for the text."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Draws the text at position (x,y) using the specified RGBA color and [roFont](/docs/references/brightscript/components/rofont.md \"roFont\") font object. Text is drawn anti-aliased. The background image/color behind the text will show through the spaces and holes in the text. To have the text erase the background, make a call to [DrawRect()](#drawrectx-as-integer-y-as-integer-width-as-integer-height-as-integer-rgba-as-integer-as-void) before calling DrawText(). The size, bold, and italic attributes are specified when creating the [roFont](/docs/references/brightscript/components/rofont.md \"roFont\").",
                    "returnDescription": "A flag indicating whether the object was successfully drawn."
                },
                {
                    "name": "Finish",
                    "params": [],
                    "returnType": "Void",
                    "description": "Realizes the bitmap by finishing all queued draw calls. Until Finish() is called, prior graphics operations may not be user visible. For example, they may be in the graphics display pipeline, or in a server queue."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roBitmap",
                    "description": "The roBitmap component contains image data and provides an interface (ifDraw2D) for drawing",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/robitmap.md"
                },
                {
                    "name": "roRegion",
                    "description": "The roRegion component is used to represent a subsection of a bitmap",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roregion.md"
                },
                {
                    "name": "roScreen",
                    "description": "The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roscreen.md"
                }
            ],
            "description": "Coordinates (x,y) for this interface are based on an origin (0,0) at the top, left. (This is common for 2D drawing APIs, but is different than OpenGL's default coordinate system).\n\nBitmap pixel values and color values are always represented as 32-bit integer RGBA color values. That is, red is in the most significant byte and alpha is in the least significant byte."
        },
        "ifEnum": {
            "name": "ifEnum",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifenum.md",
            "methods": [
                {
                    "name": "Reset",
                    "params": [],
                    "returnType": "Void",
                    "description": "Resets the current position to the first element of the enumeration."
                },
                {
                    "name": "Next",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Increments the position of an enumeration. If the last element of the enumeration is returned, this method sets the current position to indicate that it is now past the end.",
                    "returnDescription": "The value at the current position of the enumeration. If the current position is already past the end (that is, the last element has already been returned by a previous call to this method), \"invalid\" is returned."
                },
                {
                    "name": "IsNext",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether the current position is not past the end of the enumeration.",
                    "returnDescription": "A flag indicating whether the current position is not past the end (true), or is past the end (false)."
                },
                {
                    "name": "IsEmpty",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether the enumeration contains no elements.",
                    "returnDescription": "A flag indicating whether the enumeration contains no elements (true), or contains elements (false)."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roArray",
                    "description": "An array stores an indexed collection of BrightScript objects",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roarray.md"
                },
                {
                    "name": "roAssociativeArray",
                    "description": "An associative array (also known as a map, dictionary or hash table) allows objects to be associated with string keys",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roassociativearray.md"
                },
                {
                    "name": "roByteArray",
                    "description": "The byte array component is used to contain and manipulate an arbitrary array of bytes",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/robytearray.md"
                },
                {
                    "name": "roList",
                    "description": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolist.md"
                },
                {
                    "name": "roMessagePort",
                    "description": "A Message Port is the place messages (events) are sent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/romessageport.md"
                },
                {
                    "name": "roXMLList",
                    "description": "Contains a list of roXML objects",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roxmllist.md"
                }
            ]
        },
        "ifEVPCipher": {
            "name": "ifEVPCipher",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifevpcipher.md",
            "methods": [
                {
                    "name": "Setup",
                    "params": [
                        {
                            "name": "encrypt",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "True for encryption; false for decryption"
                        },
                        {
                            "name": "format",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "Cipher format string, from openssl, listed at roEVPCipher"
                        },
                        {
                            "name": "key",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "A hex-encoded key"
                        },
                        {
                            "name": "iv",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "A hex-encoded initialization vector, which can be an empty string"
                        },
                        {
                            "name": "padding",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "1 to use standard padding; 0 for no padding)"
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Configures and initializes a new cipher context.",
                    "returnDescription": "Returns 0 on success or non-zero on failure."
                },
                {
                    "name": "Reinit",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Reinitializes an existing cipher context. This can be called to reuse an existing [roEVPCipher](/docs/references/brightscript/components/roevpdigest.md \"roEVPCipher\") object to encrypt new data",
                    "returnDescription": "Returns 0 on success or non-zero on failure."
                },
                {
                    "name": "Process",
                    "params": [
                        {
                            "name": "bytes",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An [roByteArray](/docs/references/brightscript/components/robytearray.md) containing data that is encrypted or decrypted."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Processes the included [roByteArray](/docs/references/brightscript/components/robytearray.md) containing encrypted/decrypted data.",
                    "returnDescription": "An [roByteArray](/docs/references/brightscript/components/robytearray.md \"roByteArray\") containing the result."
                },
                {
                    "name": "Update",
                    "params": [
                        {
                            "name": "bytes",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An [roByteArray](/docs/references/brightscript/components/robytearray.md) containing data that is encrypted or decrypted."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Updates the included [roByteArray](/docs/references/brightscript/components/robytearray.md) containing encrypted/decrypted data.",
                    "returnDescription": "An [roByteArray](/docs/references/brightscript/components/robytearray.md \"roByteArray\") containing a subset of the result. Some or all of the result may not be returned until the next call to Update()."
                },
                {
                    "name": "Final",
                    "params": [],
                    "returnType": "Object",
                    "description": "Signals that all data has been submitted by previous calls to Update().",
                    "returnDescription": "The last remaining encrypted or decrypted bytes."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roEVPCipher",
                    "description": "The EVP Cipher component provides an interface to the OpenSSL EVP library of symmetric cipher commands",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roevpdigest.md"
                }
            ]
        },
        "ifEVPDigest": {
            "name": "ifEVPDigest",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifevpdigest.md",
            "methods": [
                {
                    "name": "Setup",
                    "params": [
                        {
                            "name": "digestType",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The supported digest algorithm from openssl, listed at roEVPDigest."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Initializes a new message digest context.",
                    "returnDescription": "Returns 0 on success or non-zero on failure."
                },
                {
                    "name": "Reinit",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Re-initializes an existing message digest context. This can be called to reuse an existing [roEVPDigest](/docs/references/brightscript/components/roevpdigest.md \"roEVPDigest\") object to digest new data.",
                    "returnDescription": "Returns 0 on success or non-zero on failure."
                },
                {
                    "name": "Process",
                    "params": [
                        {
                            "name": "bytes",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An [roByteArray](/docs/references/brightscript/components/robytearray.md) containing digested data"
                        }
                    ],
                    "returnType": "String",
                    "description": "Digests the provided data.",
                    "returnDescription": "A Hex string (Digested array data)."
                },
                {
                    "name": "Update",
                    "params": [
                        {
                            "name": "bytes",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An [roByteArray](/docs/references/brightscript/components/robytearray.md) containing data to be added to the current digest"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds more data to be digested."
                },
                {
                    "name": "Final",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the digest of data passed in by previous calls to [Update()](#updatebytes-as-object-as-void) as a hex string.",
                    "returnDescription": "Hex string (digest of data)"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roEVPDigest",
                    "description": "The EVP Digest component provides an interface to the OpenSSL EVP library of message digest algorithms",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roevpdigest.md"
                }
            ]
        },
        "ifFileSystem": {
            "name": "ifFileSystem",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iffilesystem.md",
            "methods": [
                {
                    "name": "GetVolumeList",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the available volumes on the device.",
                    "returnDescription": "An [roList](/docs/references/brightscript/components/rolist.md \"roList\") containing strings representing the available volumes."
                },
                {
                    "name": "GetDirectoryListing",
                    "params": [
                        {
                            "name": "dirPath",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The directory path from which to get a list of file names."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns the file names in the specified directory path.",
                    "returnDescription": "An [roList](/docs/references/brightscript/components/rolist.md \"roList\") of strings representing the directory listing of names in dirPath."
                },
                {
                    "name": "Find",
                    "params": [
                        {
                            "name": "dirPath",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The directory path from which to get a list of file names."
                        },
                        {
                            "name": "regEx",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The regex to be used to search for files."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns the file names in the specified directory path matching the provided regex.",
                    "returnDescription": "An [roList](/docs/references/brightscript/components/rolist.md \"roList\") of Strings representing the directory listing of names in dirPath that match the regex."
                },
                {
                    "name": "FindRecurse",
                    "params": [
                        {
                            "name": "dirPath",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The directory path from which to get a list of file names."
                        },
                        {
                            "name": "regEx",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The regex to be used to search for files."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns the file names in the specified directory path and any sudirectories matching the provided regex.",
                    "returnDescription": "An [roList](/docs/references/brightscript/components/rolist.md \"roList\") of Strings representing the directory listing of names in dirPath that match the regex. Each item in the list is the name of the file relative to dirPath."
                },
                {
                    "name": "Match",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The directory path from which to get a list of file names."
                        },
                        {
                            "name": "pattern",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The shell-like pattern to be used to search for files. The pattern may contain wildcards such as `*`and `?`."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns the file names in the specified directory path matching the provided shell-like pattern. This method is similar to the [Find()](#finddirpath-as-string-regex-as-string-as-object) method except that it uses shell-like pattern matching rather than regular expression matching.",
                    "returnDescription": "An [roList](/docs/references/brightscript/components/rolist.md \"roList\") of Strings representing the directory listing of names in dirPath that match the shell-like pattern."
                },
                {
                    "name": "Exists",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The directory path to be checked."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Checks if the specified directory path exists on the device.",
                    "returnDescription": "A flag indicating whether the specified path directory exists on the device."
                },
                {
                    "name": "Stat",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The directory path to be checked."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns the keys in the specified directory path.",
                    "returnDescription": "An [roAssociativeArray](/docs/references/brightscript/components/roassociativearray.md \"roAssociativeArray\") containing the following key-value pairs for the specified path:"
                },
                {
                    "name": "GetVolumeInfo",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The external volume for which to get information. This should be specified as the volume name plus a directory separator (for example, \"ext1:/\")."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns information about the specified volume. The function can only be called on external volumes; internal volumes do not return meaningful information.",
                    "returnDescription": "An roAssociativeArray containing the following key-value pairs about the specified external volume:"
                },
                {
                    "name": "CreateDirectory",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The path of the directory to be created."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Creates the directory specified by the path parameter. All directories in path except the last one must already exist; that is, only one directory can be created.",
                    "returnDescription": "A flag indicating whether the path was successfully created."
                },
                {
                    "name": "Delete",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The path of the directory to be deleted."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Permanently removes the file or directory specified by the path parameter. If path is a directory, its contents are recursively removed.",
                    "returnDescription": "A flag indicating whether the path was successfully deleted."
                },
                {
                    "name": "CopyFile",
                    "params": [
                        {
                            "name": "fromPath",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The source path containing the files to be copied."
                        },
                        {
                            "name": "toPath",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The target path to which files are to be copied."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Copies the files from one directory to another.",
                    "returnDescription": "A flag indicating whether the files were successfully copied."
                },
                {
                    "name": "Rename",
                    "params": [
                        {
                            "name": "fromPath",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The current name of the path to be renamed."
                        },
                        {
                            "name": "toPath",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The new name of the path."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Renames the directory.",
                    "returnDescription": "A flag indicating whether the directory was successfully renamed. If the provided target directory (**toPath**) exists, it is not overwritten; instead the operation fails and this method returns false"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roFile System",
                    "description": "The roFilesystem component implements common filesystem inspection and modification routines",
                    "url": "https://developer.roku.com/docs/docs/developer-program/getting-started/architecture/file-system.md"
                }
            ]
        },
        "ifFloat": {
            "name": "ifFloat",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iffloat.md",
            "methods": [
                {
                    "name": "GetFloat",
                    "params": [],
                    "returnType": "Float",
                    "description": "Gets the float value stored in the calling Float object.",
                    "returnDescription": "The float value stored in the calling Float object."
                },
                {
                    "name": "SetFloat",
                    "params": [
                        {
                            "name": "value",
                            "isRequired": true,
                            "default": null,
                            "type": "Float",
                            "description": "The float value to be set on the calling Float object."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the calling Float object to the specified float value."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roFloat",
                    "description": "Object equivalent for intrinsic type 'Float'",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rofloat.md"
                }
            ],
            "description": "Interface equivalent for intrinsic type Float"
        },
        "ifFont": {
            "name": "ifFont",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iffont.md",
            "methods": [
                {
                    "name": "GetOneLineHeight",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the number of pixels from one line to the next when drawing with this font.",
                    "returnDescription": "The number of pixels."
                },
                {
                    "name": "GetOneLineWidth",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The subject text."
                        },
                        {
                            "name": "MaxWidth",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "Generally, the amount of pixels available for rendering on this line."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Returns the number of pixels from one line to the next when drawing with this font. Each glyph and the needed spacing between glyphs is measured.",
                    "returnDescription": "The number of pixels. This will be less than provided MaxWidth."
                },
                {
                    "name": "GetAscent",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the number of pixels of the font ascent.",
                    "returnDescription": "The number of pixels."
                },
                {
                    "name": "GetDescent",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the number of pixels of the font descent.",
                    "returnDescription": "The number of pixels."
                },
                {
                    "name": "GetMaxAdvance",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the font maximum advance width in pixels.",
                    "returnDescription": "The number of pixels."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roFont",
                    "description": "roFont represents a particular font, from a font-family (eg. Arial), with a particular pixel size (e.g 20), and a particular boldness or italicness",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rofont.md"
                }
            ]
        },
        "ifFontMetrics": {
            "name": "ifFontMetrics",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iffontmetrics.md",
            "methods": [
                {
                    "name": "Size",
                    "params": [
                        {
                            "name": "stringToDraw",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string to be drawn."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns the width and height of the **stringToDraw** parameter rendered in the font passed on the CreateObject() call.",
                    "returnDescription": "An [roAssociativeArray](/docs/references/brightscript/components/roassociativearray.md \"roAssociativeArray\") with width and height parameters. The following example demonstrates this:"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roFontMetrics",
                    "description": "The roFontMetrics object allows you to get display size information for a specific font returned by the roFontRegistry.Get() method",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rofontmetrics.md"
                }
            ],
            "description": "> This interface is deprecated. Developers should use [roFont](/docs/references/brightscript/components/rofont.md \"roFont\") methods (GetOneLineHeight and GetOneLineWidth)."
        },
        "ifFontRegistry": {
            "name": "ifFontRegistry",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iffontregistry.md",
            "methods": [
                {
                    "name": "Register",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Registers a font file (.ttf or .otf format). Each font file defines one or more font families (usually one).",
                    "returnDescription": "A flag indicating whether the fonts in the specified file were successfully installed."
                },
                {
                    "name": "GetFamilies",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the names of the font families that have been registered via the [Register()](#registerpath-as-string-as-boolean) method. Each name can be passed as the first parameter to the [GetFont()](#getfontfamily-as-string-size-as-integer-bold-as-boolean-italic-as-boolean-as-object) method.",
                    "returnDescription": "An [roArray](/docs/references/brightscript/components/roarray.md \"roArray\") of strings that represent the names of the font families that have been registered."
                },
                {
                    "name": "GetFont",
                    "params": [
                        {
                            "name": "family",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The font family name."
                        },
                        {
                            "name": "size",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The requested font size, in pixels, not points."
                        },
                        {
                            "name": "bold",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "\"bold\" specifies a font variant that may be (but is not always) supported by the font file."
                        },
                        {
                            "name": "italic",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "\"italic\" specifies a font variant that may be (but is not always) supported by the font file."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns a font from the specified family, selected from the fonts previously registered via the [Register()](#registerpath-as-string-as-boolean) method.",
                    "returnDescription": "An [roFont](/docs/references/brightscript/components/rofont.md \"roFont\") object representing a font from the specified family."
                },
                {
                    "name": "GetDefaultFont",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the system font at its default size. Calling this method is the same as calling the [GetDefaultFont()](#getdefaultfontsize-as-integer-bold-as-boolean-italic-as-boolean-as-object) method with the following syntax: `reg.GetDefaultFont(reg.GetDefaultFontSize(), false, false)`.",
                    "returnDescription": "The system font as its default size."
                },
                {
                    "name": "GetDefaultFont",
                    "params": [
                        {
                            "name": "size",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The requested font size, in pixels, not points."
                        },
                        {
                            "name": "bold",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "\"bold\" specifies a font variant that may be (but is not always) supported by the font file."
                        },
                        {
                            "name": "italic",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "\"italic\" specifies a font variant that may be (but is not always) supported by the font file."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns the system font. The system font is always available, even if the [Register()](#registerpath-as-string-as-boolean) method has not been called",
                    "returnDescription": "An roFont object representing the system font."
                },
                {
                    "name": "GetDefaultFontSize",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the default font size.",
                    "returnDescription": "The default font size."
                },
                {
                    "name": "Get",
                    "params": [
                        {
                            "name": "family",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The font family name."
                        },
                        {
                            "name": "size",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The requested font size, in pixels, not points."
                        },
                        {
                            "name": "bold",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "\"bold\" specifies a font variant that may be (but is not always) supported by the font file."
                        },
                        {
                            "name": "italic",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "\"italic\" specifies a font variant that may be (but is not always) supported by the font file."
                        }
                    ],
                    "returnType": "String",
                    "description": "Returns a valid font string that can be used as the value of the Font content meta-data parameter recognized by the [roImageCanvas](/docs/references/brightscript/components/roimagecanvas.md \"roImageCanvas\") method.",
                    "returnDescription": "A valid font string."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roFontRegistry",
                    "description": "The roFontRegistry object allows you to create roFont objects, either using the default font or using fonts in TrueType or OpenType files packaged with your application",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rofontregistry.md"
                }
            ]
        },
        "ifFunction": {
            "name": "ifFunction",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iffunction.md",
            "methods": [
                {
                    "name": "GetSub",
                    "params": [],
                    "returnType": "Function"
                },
                {
                    "name": "SetSub",
                    "params": [
                        {
                            "name": "value",
                            "isRequired": true,
                            "default": null,
                            "type": "Function"
                        }
                    ],
                    "returnType": "Void"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roFunction",
                    "description": "Object equivalent for intrinsic type Function",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rofunction.md"
                }
            ],
            "description": "Interface equivalent for intrinsic type Function."
        },
        "ifGetMessagePort": {
            "name": "ifGetMessagePort",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgetmessageport.md",
            "methods": [
                {
                    "name": "GetMessagePort",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the message port (if any) currently associated with the object",
                    "returnDescription": "The message port."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roHdmiStatus",
                    "description": "The HDMI status component provides an interface to the current HDMI operational status",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rohdmistatus.md"
                },
                {
                    "name": "roScreen",
                    "description": "The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roscreen.md"
                },
                {
                    "name": "roUrlTransfer",
                    "description": "A roUrlTransfer object transfers data to or from remote servers specified by URLs",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rourltransfer.md"
                },
                {
                    "name": "roTextToSpeech",
                    "description": "The roTextToSpeech component provides text to speech capabilities to applications",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotexttospeech.md"
                }
            ]
        },
        "ifGridScreen": {
            "name": "ifGridScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifgridscreen.md",
            "methods": [
                {
                    "name": "SetupLists",
                    "params": [
                        {
                            "name": "count",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The number of rows to be used in the grid."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the number of rows in the grid. The number of rows must be set before calling other functions to populate grid data."
                },
                {
                    "name": "SetListNames",
                    "params": [
                        {
                            "name": "names",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An roArray of strings containing the titles to be displayed in the grid."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the list of row titles. The first name is displayed for the first row, the second name for the second row, etc. The list should contain as many titles as the number of rows in the grid"
                },
                {
                    "name": "SetListName",
                    "params": [
                        {
                            "name": "rowIndex",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer"
                        },
                        {
                            "name": "name",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the list of row titles. The first name is displayed for the first row, the second name for the second row, and so on. The list should contain as many titles as the number of rows in the grid."
                },
                {
                    "name": "SetContentList",
                    "params": [
                        {
                            "name": "rowIndex",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The row to be updated with the provided content list."
                        },
                        {
                            "name": "contentList",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An roArray of items, where each item is an roAssociativeArray containing the [content metadata](/docs/developer-program/getting-started/architecture/content-metadata.md \"Content Meta-Data\") used to display the item (for example, Title, Description, SDPosterUrl, and HDPosterUrl). See [Content metadata](/docs/developer-program/getting-started/architecture/content-metadata.md \"Content Metadata\") for details."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the content list for the specified row."
                },
                {
                    "name": "SetContentListSubset",
                    "params": [
                        {
                            "name": "rowIndex",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer"
                        },
                        {
                            "name": "contentList",
                            "isRequired": true,
                            "default": null,
                            "type": "Object"
                        },
                        {
                            "name": "offset",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer"
                        },
                        {
                            "name": "length",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Set or update items in the content list for the specified row. Enables performance improvements when dealing with your backend services by asking only for only a screenful worth of data at a time, and then update the rest of the content list content in the background."
                },
                {
                    "name": "SetListOffset",
                    "params": [
                        {
                            "name": "rowIndex",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The row to be updated."
                        },
                        {
                            "name": "itemIndex",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The items within the specified row to be updated."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Changes the current position (both row and column) of the downloading thread in populating image posters of the grid."
                },
                {
                    "name": "SetListVisible",
                    "params": [
                        {
                            "name": "rowIndex",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The row to be updated."
                        },
                        {
                            "name": "visible",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag indicating whether the row is to be made visible."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the visibility of the specified row."
                },
                {
                    "name": "SetFocusedListItem",
                    "params": [
                        {
                            "name": "rowIndex",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The row to be updated."
                        },
                        {
                            "name": "itemIndex",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The items within the specified row to be updated."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Set the focus to the specified row and item."
                },
                {
                    "name": "SetDisplayMode",
                    "params": [
                        {
                            "name": "displayMode",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The mode to be used for displaying images, which maybe one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the mode for displaying images in the grid screen. This allows images to be either scaled to completely fill the poster frame (scale-to-fill) or scaled to fit inside the poster frame (scale-to-fit) while maintaining aspect ratio."
                },
                {
                    "name": "ShowMessage",
                    "params": [
                        {
                            "name": "message",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be displayed in the popup message box."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Displays a semi-transparent popup message box to the user in the center of the screen over the poster screen. This is generally used for error messages."
                },
                {
                    "name": "ClearMessage",
                    "params": [],
                    "returnType": "Void"
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays or refreshes the screen after the initial creation or the state changes.",
                    "returnDescription": "A flag indicating whether the screen is displayed (true)."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void",
                    "description": "Closes the screen and deletes the associated object."
                },
                {
                    "name": "SetGridStyle",
                    "params": [
                        {
                            "name": "style",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The image size, which may be one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the style or theme for displaying images in the grid screen. This allows different appearances of the overall grid for different sized images."
                },
                {
                    "name": "SetListPosterStyles",
                    "params": [
                        {
                            "name": "styles",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The style to be used for the row, which may be one of the following values: landscape, portrait, or square"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the images size and orientation for each row in the grid. This method is used in conjunction with the mixed-apect-ratio grid style."
                },
                {
                    "name": "SetBreadcrumbEnabled",
                    "params": [
                        {
                            "name": "enabled",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Set this flag to true in order to display the breadcrumb text."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables the breadcrumb text specified with [SetBreadcrumbText()](#setbreadcrumbtextlocation1-as-string-location2-as-string-as-void) method to be displayed."
                },
                {
                    "name": "SetBreadcrumbText",
                    "params": [
                        {
                            "name": "Location1",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The first location value."
                        },
                        {
                            "name": "Location2",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The second location value."
                        }
                    ],
                    "returnType": "Void",
                    "description": "If SetBreadcrumbEnabled() is true, display Location1 and Location2 in the right of the overhang."
                },
                {
                    "name": "SetUpBehaviorAtTopRow",
                    "params": [
                        {
                            "name": "behavior",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "Specifies the behavior of the \"up\" key. This may be one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Controls how the remote \"up\" key behaves when it is pressed with the top row selected."
                },
                {
                    "name": "SetLoadingPoster",
                    "params": [
                        {
                            "name": "sdPosterUrl",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The URL of the standard definition poster image to be shown."
                        },
                        {
                            "name": "hdPosterUrl",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The URL of the high definition poster image to be shown."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Specifies the default images to be shown in the grid while the grid screen content is loading."
                },
                {
                    "name": "SetErrorPoster",
                    "params": [
                        {
                            "name": "sdPosterUrl",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The URL of the standard definition poster image to be shown."
                        },
                        {
                            "name": "hdPosterUrl",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The URL of the high definition poster image to be shown."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Specifies the default images to be shown in the grid when the grid screen content fails to load."
                },
                {
                    "name": "SetCounterVisible",
                    "params": [
                        {
                            "name": "visible",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Set this flag to true in order to display the item counter."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Specifies whether the item counter should be displayed. The item counter shows the focused item number and count of items in the row."
                },
                {
                    "name": "SetDescriptionVisible",
                    "params": [
                        {
                            "name": "visible",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Set this flag to true in order to display the description box for the focused item."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Description"
                },
                {
                    "name": "SetFocusRingVisible",
                    "params": [
                        {
                            "name": "visible",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Set this flag to true in order to display the focus ring for the focused item."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Specifies whether the focus ring is displayed for the focused item."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roGridScreen",
                    "description": "The Grid Screen provides a graphical display of poster art from multiple content categories from within a single screen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rogridscreen.md"
                }
            ],
            "description": "> This interface is deprecated.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification."
        },
        "ifHdmiStatus": {
            "name": "ifHdmiStatus",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhdmistatus.md",
            "methods": [
                {
                    "name": "IsConnected",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether the HDMI or MHL output is connected to an HDMI device.",
                    "returnDescription": "A flag indicating whether the HDMI or MHL output is connected to an HDMI device."
                },
                {
                    "name": "GetHdcpVersion",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the version number of the currently established HDCP link.",
                    "returnDescription": "The version number of the HDCP link: 1.4 or 2.2."
                },
                {
                    "name": "IsHdcpActive",
                    "params": [
                        {
                            "name": "version",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The HDCP link version to be checked (for example, \"1.4\" or \"2.2\")."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Checks if the current established HDCP link is the specified version or higher",
                    "returnDescription": "A flag indicating whether the current established HDCP link is the specified `version`."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roHdmiStatus",
                    "description": "The HDMI status component provides an interface to the current HDMI operational status",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rohdmistatus.md"
                }
            ]
        },
        "ifHMAC": {
            "name": "ifHMAC",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhmac.md",
            "methods": [
                {
                    "name": "Setup",
                    "params": [
                        {
                            "name": "digestType",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "Selects one of the supported digest algorithms, as documented in [roEVPDigest](/docs/references/brightscript/components/roevpdigest.md \"roEVPDigest\")."
                        },
                        {
                            "name": "key",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An roByteArray containing the key for the MAC."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Initializes new HMAC context.",
                    "returnDescription": "An integer indicating whether the function succeeded (0) or failed (1)."
                },
                {
                    "name": "Reinit",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Re-initializes an existing HMAC context. This can be called to reuse an existing roHMAC object to authenticate new data.",
                    "returnDescription": "An integer indicating whether the function succeeded (0) or failed (1)."
                },
                {
                    "name": "Process",
                    "params": [
                        {
                            "name": "message",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An [roByteArray](/docs/references/brightscript/components/robytearray.md \"roByteArray\") with the data to be digested."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Digests the data in an array generates a MAC. Calling this method is the same as making the following calls:",
                    "returnDescription": "An [roByteArray](/docs/references/brightscript/components/robytearray.md \"roByteArray\") containing the generated MAC."
                },
                {
                    "name": "Update",
                    "params": [
                        {
                            "name": "partialMesssage",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An [roByteArray](/docs/references/brightscript/components/robytearray.md \"roByteArray\") with the additional data to be digested."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds more data to be digested. The data in the array is added to the current digest."
                },
                {
                    "name": "Final",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an [roByteArray](/docs/references/brightscript/components/robytearray.md \"roByteArray\") containing the final MAC.",
                    "returnDescription": "The final MAC."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roHMAC",
                    "description": "The HMAC component provides an interface to the OpenSSL HMAC functions",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rohmac.md"
                }
            ]
        },
        "ifHttpAgent": {
            "name": "ifHttpAgent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifhttpagent.md",
            "methods": [
                {
                    "name": "AddHeader",
                    "params": [
                        {
                            "name": "name",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the HTTP header to be added to the list of headers."
                        },
                        {
                            "name": "value",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The value of the HTTP header being added."
                        }
                    ],
                    "returnType": "Boolean",
                    "returnDescription": "A flag indicating whether the HTTP header was successfully added."
                },
                {
                    "name": "SetHeaders",
                    "params": [
                        {
                            "name": "nameValueMap",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An associative array containing the HTTP headers and values to be included in the HTTP request."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the HTTP headers to be sent in the HTTP request.",
                    "returnDescription": "A flag indicating whether the HTTP header was successfully set."
                },
                {
                    "name": "InitClientCertificates",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Initializes the object to be sent to the Roku client certificate.",
                    "returnDescription": "A flag indicating whether the object sent to to the Roku client certificate was successfully initialized."
                },
                {
                    "name": "SetCertificatesFile",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The directory path of the .pem file to be used."
                        }
                    ],
                    "returnType": "Boolean",
                    "returnDescription": "A flag indicating whether the certificate was successfully set."
                },
                {
                    "name": "SetCertificatesDepth",
                    "params": [
                        {
                            "name": "depth",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The maximum depth to be used."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the maximum depth of the certificate chain that will be accepted."
                },
                {
                    "name": "EnableCookies",
                    "params": [],
                    "returnType": "Void",
                    "description": "Enables any Set-Cookie headers returned from the request to be interpreted and the resulting cookies to be added to the cookie cache."
                },
                {
                    "name": "GetCookies",
                    "params": [
                        {
                            "name": "domain",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The domain of the cookies to be retrieved. To match all domains, provide an empty string."
                        },
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The path of the cookies to be retrieved."
                        }
                    ],
                    "returnType": "Object",
                    "returnDescription": "An roArray of roAssociativeArrays, where each associative array represents a cookie. The roAssociativeArrays contain the following key-value pairs:"
                },
                {
                    "name": "AddCookies",
                    "params": [
                        {
                            "name": "cookies",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An roArray of roAssociativeArrays, where each associative array represents a cookie to be added. Each associative array must contain the following key-value pairs:"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds the specified cookies to the cookie cache.",
                    "returnDescription": "A flag indicating whether the cookies were successfully added to the cache."
                },
                {
                    "name": "ClearCookies",
                    "params": [],
                    "returnType": "Void",
                    "description": "Removes all cookies from the cookie cache."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roAppManager",
                    "description": "The Application Manager APIs set application level attributes, which mostly affect the look-and-feel of the application",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifappmanager.md"
                },
                {
                    "name": "roAudioPlayer",
                    "description": "The Audio Player object provides the ability to setup the playing of a series of audio streams",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roaudioplayer.md"
                },
                {
                    "name": "roGridScreen",
                    "description": "The Grid Screen provides a graphical display of poster art from multiple content categories from within a single screen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rogridscreen.md"
                },
                {
                    "name": "roImageCanvas",
                    "description": "The roImageCanvas component provides an interface to render graphic elements at specific spots on the screen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roimagecanvas.md"
                },
                {
                    "name": "roListScreen",
                    "description": "The List Screen provides a graphical display of content in a vertical list within a single screen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolistscreen.md"
                },
                {
                    "name": "roParagraphScreen",
                    "description": "The Paragraph Screen provides a way to display text and selection choices to the user",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roparagraphscreen.md"
                },
                {
                    "name": "roPosterScreen",
                    "description": "The Poster Screen provides a graphical display of poster art for content selection or can be used as a submenu to provide hierarchical structure to the application",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roposterscreen.md"
                },
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosgnode.md"
                },
                {
                    "name": "roSlideShow",
                    "description": "The Slide Show screen provides the ability to setup a photo slide show to playback a series of images",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roslideshow.md"
                },
                {
                    "name": "roSpringboardScreen",
                    "description": "The Springboard Screen shows detailed information about an individual piece of content and provides options for actions that may be taken on that content",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rospringboardscreen.md"
                },
                {
                    "name": "roTextScreen",
                    "description": "roTextScreen provides a way of displaying large amounts of scrollable text",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotextscreen.md"
                },
                {
                    "name": "roTextureManager",
                    "description": "The Texture Manager provides a set of API's for managing an roBitmap cache.",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotexturemanager.md"
                },
                {
                    "name": "roTextureRequest",
                    "description": "An roTextureRequest is used to make requests to the roTextureManager",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotexturerequest.md"
                },
                {
                    "name": "roUrlTransfer",
                    "description": "A roUrlTransfer object transfers data to or from remote servers specified by URLs",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rourltransfer.md"
                },
                {
                    "name": "roVideoPlayer",
                    "description": "The roVideoPlayer component implements a video player with more programmatic control, but less user control than the roVideoScreen component",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rovideoplayer.md"
                },
                {
                    "name": "roVideoScreen",
                    "description": "The Video Screen object implements the video playback portion of the user interface",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rovideoscreen.md"
                }
            ],
            "description": "The ifHttpAgent methods modify the way that URLs are accessed"
        },
        "ifImageCanvas": {
            "name": "ifImageCanvas",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifimagecanvas.md",
            "methods": [
                {
                    "name": "AllowUpdates",
                    "params": [
                        {
                            "name": "updatesEnabled",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Set this flag to true in order to enable updates."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Turns updates on or off. Surrounding changes to several layers with AllowUpdates(false) and AllowUpdates(true) calls makes complex display modification atomic. This gives the application protection against the image canvas trying to render a partial update"
                },
                {
                    "name": "SetLayer",
                    "params": [
                        {
                            "name": "zOrder",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "A z-order specifier with higher z-orders closer to the viewer. Negative z-orders are \"behind the display\" and are thus invisible."
                        },
                        {
                            "name": "contentMetaData",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An [roAssociativeArray](/docs/references/brightscript/components/roassociativearray.md \"roAssociativeArray\") ([Content Meta-Data](/docs/developer-program/getting-started/architecture/content-metadata.md \" Content Meta-Data\") objects) representing the information for each image to be displayed on the [roImageCanvas](/docs/references/brightscript/components/roimagecanvas.md \"roImageCanvas\")"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Redraws the screen. Each call to this method replaces the previous content metadata that previously existed at that z-order layer."
                },
                {
                    "name": "SetLayer",
                    "params": [
                        {
                            "name": "zOrder",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "A z-order specifier with higher z-orders closer to the viewer. Negative z-orders are \"behind the display\" and are thus invisible."
                        },
                        {
                            "name": "contentList",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An [roArray](/docs/references/brightscript/components/roarray.md \"roArray\") of [roAssociativeArrays](/docs/references/brightscript/components/roassociativearray.md \"roAssociativeArrays\") representing the information for each image to be displayed on the [roImageCanvas](/docs/references/brightscript/components/roimagecanvas.md \"roImageCanvas\")."
                        }
                    ],
                    "returnType": "Void",
                    "description": "This method is similar to the [SetLayer()](#setlayerzorder-as-integer-contentlist-as-object-as-void) method, except it takes an [roArray](/docs/references/brightscript/components/roarray.md \"roArray\") of [roAssociativeArrays](/docs/references/brightscript/components/roassociativearray.md \"roAssociativeArrays\") instead of just a single [roAssociativeArray](/docs/references/brightscript/components/roassociativearray.md \"roAssociativeArray\") of [Content Meta-Data](/docs/developer-program/getting-started/architecture/content-metadata.md \" Content Meta-Data\")."
                },
                {
                    "name": "SwapLayers",
                    "params": [
                        {
                            "name": "zOrderA",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The current zOrder that is displayed on top."
                        },
                        {
                            "name": "zOrderB",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The new zOrder to be displayed on top."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Swaps the content metadata stored in one zOrder with another. This enables changing the layer that is displayed \"On Top\". This method can be used to swap empty (unspecified) layers"
                },
                {
                    "name": "SetRequireAllImagesToDraw",
                    "params": [
                        {
                            "name": "requireAllImages",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag enabling the **requireAllImages** feature. It is recommended that this flag be disabled (false) for better performance."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Waits to draw the screen until all images in the content-meta-data array are downloaded, decoded, and loaded into memory. There is a large performance penalty for setting this to true"
                },
                {
                    "name": "PurgeCachedImages",
                    "params": [],
                    "returnType": "Void",
                    "description": "Purges the internal cache of all images related to URLs in the current content list. If the content list is empty, then calling this method has no affect."
                },
                {
                    "name": "GetCanvasRect",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the width and height of the image canvas.",
                    "returnDescription": "An roAssociativeArray with names w for width and h for height."
                },
                {
                    "name": "ClearLayer",
                    "params": [
                        {
                            "name": "zOrder",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The layer to be cleared."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Clears all content from a layer (see [SetLayer](#setlayerzorder-as-integer-contentmetadata-as-object-as-void) for the layer definition)."
                },
                {
                    "name": "Clear",
                    "params": [],
                    "returnType": "Void"
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays or refreshes the screen after initial creation or state changes.",
                    "returnDescription": "A flag indicating whether the screen is displayed."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void",
                    "description": "Closes the screen and deletes the associated object. This method is useful for avoiding screen flicker when the display order of your screens does not resemble a stack"
                },
                {
                    "name": "AddButton",
                    "params": [
                        {
                            "name": "id",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID of the button to be added to the screen."
                        },
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title of the button to be added to the screen."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds a button to the specified screen.",
                    "returnDescription": "A flag indicating whether the button was successfully added."
                },
                {
                    "name": "ClearButtons",
                    "params": [],
                    "returnType": "Void",
                    "description": "Clears all of the buttons from the screen and resets the array of buttons back to default with no buttons set."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roImageCanvas",
                    "description": "The roImageCanvas component provides an interface to render graphic elements at specific spots on the screen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roimagecanvas.md"
                }
            ],
            "description": "> This interface is deprecated.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification."
        },
        "ifImageMetaData": {
            "name": "ifImageMetaData",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifimagemetadata.md",
            "methods": [
                {
                    "name": "SetUrl",
                    "params": [
                        {
                            "name": "url",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The URL of the image."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the URL to the image. Only file URLs are supported"
                },
                {
                    "name": "GetMetadata",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns a set of simple and common image metadata",
                    "returnDescription": "An associative array containing the following key-value pairs with image metadata:"
                },
                {
                    "name": "GetThumbnail",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns a thumbnail image if one is embedded in the image metadata and the corresponding associative array with image data. This only generates a thumbnail if one exists.",
                    "returnDescription": "An associative array that with **bytes** and **type** keys with the image data:"
                },
                {
                    "name": "GetRawExif",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns all of the raw EXIF metadata.",
                    "returnDescription": "An associative array with all of the raw EXIF metadata. See the [EXIF section](/docs/references/brightscript/components/roimagemetadata.md#exif-background) for details about EXIF metadata."
                },
                {
                    "name": "GetRawExifTag",
                    "params": [
                        {
                            "name": "ifd",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ifd of the Exif tag."
                        },
                        {
                            "name": "tagnum",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The tag number of the Exif tag."
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Returns the raw data for an Exif tag. The method provides direct access to a specific raw EXIF tag",
                    "returnDescription": "The raw data of an Exif tag. It the Exif tag doesn't exist it returns invalid."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roImageMetadata",
                    "description": "The roImageMetadata component provides developers access to image file metadata included in many .jpg EXIF headers",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roimagemetadata.md"
                }
            ]
        },
        "ifInput": {
            "name": "ifInput",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifinput.md",
            "methods": [
                {
                    "name": "GetMessagePort",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the message port (if any) currently associated with the object.",
                    "returnDescription": "The message port value."
                },
                {
                    "name": "SetMessagePort",
                    "params": [
                        {
                            "name": "port",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The port to be used to receive events."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the roMessagePort to be used to receive events."
                },
                {
                    "name": "EnableTransportEvents",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Registers a channel to receive `roInput transport` events, which are voice commands sent via the Roku remote control, Roku mobile app, or a virtual assistant such as Amazon Alexa or Google Assistant.",
                    "returnDescription": "A flag indicating whether transport event notifications were successfully registered."
                },
                {
                    "name": "EventResponse",
                    "params": [
                        {
                            "name": "roAssociativeArray",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Marks a transport command as handled, unhandled, or handled with an error.",
                    "returnDescription": "A flag indicating whether the event response operation was successful."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roInput",
                    "description": "An roInput object can be used to receive events sent from a network client using the External Control Protocol (ECP), as described in External Control API",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roinput.md"
                }
            ]
        },
        "ifInt": {
            "name": "ifInt",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifint.md",
            "methods": [
                {
                    "name": "GetInt",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Gets the integer value stored in the calling Integer object.",
                    "returnDescription": "The integer value stored in the calling Integer object."
                },
                {
                    "name": "SetInt",
                    "params": [
                        {
                            "name": "value",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The integer value to be set on the calling Integer object."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the calling Integer object to the specified integer value."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roInt",
                    "description": "Object equivalent for intrinsic type Integer",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roint.md"
                }
            ],
            "description": "> Interface equivalent for intrinsic type 'Integer'"
        },
        "ifIntOps": {
            "name": "ifIntOps",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifintops.md",
            "methods": [
                {
                    "name": "ToStr",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the integer value formatted as a decimal string. No leading space is appended for non-negative numbers.",
                    "returnDescription": "A decimal string."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roInt",
                    "description": "Object equivalent for intrinsic type Integer",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roint.md"
                }
            ]
        },
        "ifKeyboardScreen": {
            "name": "ifKeyboardScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifkeyboardscreen.md",
            "methods": [
                {
                    "name": "SetTitle",
                    "params": [
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title to be displayed on the keyboard screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the title for the screen to the specified string."
                },
                {
                    "name": "SetDisplayText",
                    "params": [
                        {
                            "name": "displayText",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The descriptive text to be displayed on the keyboard screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the descriptive text displayed to the user for prompting regarding the required entry."
                },
                {
                    "name": "SetText",
                    "params": [
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The default text to be displayed in the keyboard entry field."
                        }
                    ],
                    "returnType": "String",
                    "returnDescription": "The default text that was set for the keyboard entry field."
                },
                {
                    "name": "GetText",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the current value in the keyboard text entry field.",
                    "returnDescription": "Current value string."
                },
                {
                    "name": "SetMaxLength",
                    "params": [
                        {
                            "name": "maxLen",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The maximum number of characters for text entered into the keyboard screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the maximum length for text entry. The default is 20 characters."
                },
                {
                    "name": "AddButton",
                    "params": [
                        {
                            "name": "id",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID of the button to be added to the keyboard screen."
                        },
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title of the button to be added to the keyboard screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds a button to the screen identified by the title and ID provided. The buttons are displayed at the bottom of the screen and appear in the order added. When the button is pressed, the script will receive an event from the application indicating the ID of the button pressed."
                },
                {
                    "name": "ClearButtons",
                    "params": [],
                    "returnType": "Void",
                    "description": "Removes all buttons from the keyboard screen."
                },
                {
                    "name": "SetSecureText",
                    "params": [
                        {
                            "name": "isSecure",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag indicating whether to obfuscate the text entered into the keyboard screen. If **isSecure** is set to true, the user-entered text is obscured with bullet characters. If false, it is treated as plain text. The default value is false."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Displays user-entered text with bullet characters."
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays or refreshes the screen after creation or state changes.",
                    "returnDescription": "A flag indicating whether the screen was displayed."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roKeyboardScreen",
                    "description": "The Keyboard Screen is designed to allow the user to enter an alpha-numeric string for searching, username/password registration or other purposes",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rokeyboardscreen.md"
                }
            ],
            "description": "> This component is no longer updated and will be deprecated on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification."
        },
        "ifList": {
            "name": "ifList",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iflist.md",
            "methods": [
                {
                    "name": "ResetIndex",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Resets the current index or position in list to the head element.",
                    "returnDescription": "A flag indicating whether the index has been reset."
                },
                {
                    "name": "AddTail",
                    "params": [
                        {
                            "name": "tval",
                            "isRequired": true,
                            "default": null,
                            "type": "Dynamic"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds an element to the tail of the list."
                },
                {
                    "name": "AddHead",
                    "params": [
                        {
                            "name": "tval",
                            "isRequired": true,
                            "default": null,
                            "type": "Dynamic"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds an element to the head of the list."
                },
                {
                    "name": "RemoveIndex",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Removes the entry at the current index or position from the list and increments the index or position in the list.",
                    "returnDescription": "The entry removed from the list. This method returns invalid if the end of the list is reached."
                },
                {
                    "name": "GetIndex",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Gets the entry at current index or position from the list and increments the index or position in the list.",
                    "returnDescription": "The entry retrieved from the list. This method returns invalid if the end of the list is reached."
                },
                {
                    "name": "RemoveTail",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Removes the entry at the tail of the list.",
                    "returnDescription": "The entry removed from the tail of the list."
                },
                {
                    "name": "RemoveHead",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Removes the entry at the head of the list.",
                    "returnDescription": "The entry removed from the head of the list."
                },
                {
                    "name": "GetTail",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Retrieves the entry at the tail of the list.",
                    "returnDescription": "The entry retrieved from the tail of the list."
                },
                {
                    "name": "GetHead",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Retrieves the entry at the head of the list.",
                    "returnDescription": "The entry retrieved from the head of the list."
                },
                {
                    "name": "Count",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the number of elements in the list.",
                    "returnDescription": "The number of elements in the list."
                },
                {
                    "name": "Clear",
                    "params": [],
                    "returnType": "Void"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roList",
                    "description": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolist.md"
                },
                {
                    "name": "roXMLList",
                    "description": "Contains a list of roXML objects",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roxmllist.md"
                }
            ]
        },
        "ifListScreen": {
            "name": "ifListScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iflistscreen.md",
            "methods": [
                {
                    "name": "SetContent",
                    "params": [
                        {
                            "name": "contentList",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An roArray of roAssociativeArrays (Content Meta-Data objects) representing the information for each item to be displayed on screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the list of content to be displayed on the screen. See “Content Meta-Data” for details on the attributes for each element. The screen is responsible for fetching the poster art from the URL’s specified."
                },
                {
                    "name": "AddContent",
                    "params": [
                        {
                            "name": "item",
                            "isRequired": true,
                            "default": null,
                            "type": "Object"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds an item to the end of the list to be displayed on screen."
                },
                {
                    "name": "SetItem",
                    "params": [
                        {
                            "name": "item",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An roAssociativeArray (Content Meta-Data object) representing the information of the item to be updated."
                        },
                        {
                            "name": "index",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The index of the item to be updated. If the index is not within the range of 0 – list size, this function has no effect."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Updates the content of an item in the list."
                },
                {
                    "name": "ClearContent",
                    "params": [],
                    "returnType": "Void",
                    "description": "Clears all the content in the list and displays an empty screen."
                },
                {
                    "name": "RemoveContent",
                    "params": [
                        {
                            "name": "index",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The index of the item to be removed from the list. If the index is not within the range of 0 – list size, this function has no effect."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Removes an item from the list. The screen refreshes immediately if the item is visible"
                },
                {
                    "name": "SetFocusedListItem",
                    "params": [
                        {
                            "name": "index",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The item in the list to be given focus. If the index is not within the range of 0 – list size, this function has no effect."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the focused list item to the given index. If the item is not visible, focus jumps to the item and item becomes visible."
                },
                {
                    "name": "SetHeader",
                    "params": [
                        {
                            "name": "header",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "A one-line text (string) displayed on top of the screen below the overhang."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the header text of the screen. This can be used as an information text for the screen."
                },
                {
                    "name": "SetTitle",
                    "params": [
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title to be displayed on the screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the title of the screen. The title is displayed on the top right corner of the screen on the overhang."
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays or refreshes the screen after initial creation or state changes.",
                    "returnDescription": "A flag indicating whether the screen was displayed."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void",
                    "description": "Closes the screen and deletes the associated object. This is useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
                },
                {
                    "name": "SetBreadcrumbText",
                    "params": [
                        {
                            "name": "breadcrumb1",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        },
                        {
                            "name": "breadcrumb2",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "Void"
                },
                {
                    "name": "SetupBehaviorAtTopRow",
                    "params": [
                        {
                            "name": "behavior",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "Specifies the behavior of the \"up\" key. This may be one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Controls how the remote \"up\" key behaves when it is pressed with the top row selected."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roListScreen",
                    "description": "The List Screen provides a graphical display of content in a vertical list within a single screen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolistscreen.md"
                }
            ],
            "description": "> This interface is deprecated.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification."
        },
        "ifListToArray": {
            "name": "ifListToArray",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iflisttoarray.md",
            "methods": [
                {
                    "name": "ToArray",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an roArray containing the same elements as the list.",
                    "returnDescription": "An element list as an array."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roList",
                    "description": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolist.md"
                },
                {
                    "name": "roXMLList",
                    "description": "Contains a list of roXML objects",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roxmllist.md"
                }
            ]
        },
        "ifLocalization": {
            "name": "ifLocalization",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iflocalization.md",
            "methods": [
                {
                    "name": "GetPluralString",
                    "params": [
                        {
                            "name": "count",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer"
                        },
                        {
                            "name": "zeroString",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        },
                        {
                            "name": "oneString",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        },
                        {
                            "name": "pluralString",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "String",
                    "description": "Replaces \"^n\" in pluralString with count and returns the result.",
                    "returnDescription": "The result of the operation. If count is 0, this returns zeroString. If count is 1, it returns oneString."
                },
                {
                    "name": "GetLocalizedAsset",
                    "params": [
                        {
                            "name": "dirName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of a subdirectory in the directory pkg:/locale/XX\\_YY/ where XX\\_YY is the current language setting."
                        },
                        {
                            "name": "fileName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the file."
                        }
                    ],
                    "returnType": "String",
                    "returnDescription": "An asset path."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roLocalization",
                    "description": "The roLocalization object provides functions to assist in localization",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolocalization.md"
                }
            ]
        },
        "ifLongInt": {
            "name": "ifLongInt",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iflongint.md",
            "methods": [
                {
                    "name": "GetLongInt",
                    "params": [],
                    "returnType": "LongInteger",
                    "description": "Gets the longinteger value stored in the calling Longinteger object.",
                    "returnDescription": "The longinteger value stored in the calling Loninteger object."
                },
                {
                    "name": "SetLongInt",
                    "params": [
                        {
                            "name": "value",
                            "isRequired": true,
                            "default": null,
                            "type": "Longinteger",
                            "description": "The longinteger value to be set on the calling Longinteger object."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the calling Longinteger object to the specified longinteger value."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roLongInteger",
                    "description": "Object equivalent for intrinsic type LongInteger",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolonginteger.md"
                }
            ]
        },
        "ifMessageDialog": {
            "name": "ifMessageDialog",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifmessagedialog.md",
            "methods": [
                {
                    "name": "SetTitle",
                    "params": [
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title to be displayed in the message dialog."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the title for the dialog to the specified string."
                },
                {
                    "name": "SetText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be displayed in the message dialog."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Appends a paragraph with the specified text. The dialog will automatically resize to accommodate the text, up to the limit of available display space."
                },
                {
                    "name": "UpdateText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to replace the last paragraph in the message dialog."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Replaces the last paragraph with the specified text, or appends a paragraph if there is not a prior paragraph. If the last paragraph added was a static paragraph, this function appends a new paragraph."
                },
                {
                    "name": "AddStaticText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be included in the static paragraph."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Appends a static paragraph with the specified text. This static text does not get changed by subsequent calls to the [SetText()](#settexttext-as-string-as-void) or [UpdateText()](#updatetexttext-as-string-as-void) methods."
                },
                {
                    "name": "AddButton",
                    "params": [
                        {
                            "name": "id",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID of the button to be added to the screen."
                        },
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title of the button to be added to the screen."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds a button to the right-justified side of the dialog box. The buttons are at the bottom of the dialog and appear in the order added. When the button is pressed, the script will receive an event from the application indicating the ID of the button pressed.",
                    "returnDescription": "A flag indicating whether the button was successfully added to the screen."
                },
                {
                    "name": "AddLeftButton",
                    "params": [
                        {
                            "name": "id",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID of the button to be added to the screen."
                        },
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title of the button to be added to the screen."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds a button to the left-justified side of the dialog box. The buttons are at the bottom of the dialog and appear in the order added. When the button is pressed, the script will receive an event from the application indicating the ID of the button pressed.",
                    "returnDescription": "A flag indicating whether the button was successfully added to the screen."
                },
                {
                    "name": "UpdateButton",
                    "params": [
                        {
                            "name": "id",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID of the button to be updated."
                        },
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title of the button to be updated."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Updates the title of the specified button.",
                    "returnDescription": "A flag indicating whether the button was successfully updated."
                },
                {
                    "name": "AddButtonSeparator",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Adds horizontal line separating buttons into sections on the dialog.",
                    "returnDescription": "A flag indicating whether the horizontal line was successfully added."
                },
                {
                    "name": "AddRatingButton",
                    "params": [
                        {
                            "name": "id",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer"
                        },
                        {
                            "name": "userRating",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer"
                        },
                        {
                            "name": "aggregateRating",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer"
                        },
                        {
                            "name": "tip",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds a star rating button to the right-justified side of the dialog. The rating is specified as an integer 1-100 which indicates the number of stars (1 to 5) to be displayed, or 0 if unrated. Think of this as a percentage value (for example, <20% = 1 star).",
                    "returnDescription": "A flag indicating whether the star rating button was successfully added."
                },
                {
                    "name": "AddLeftRatingButton",
                    "params": [
                        {
                            "name": "id",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID of the rating button to be added to the dialog."
                        },
                        {
                            "name": "userRating",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The value the user rated the title, while the aggregate Rating represents the total for all users. The userRating takes precedence and determines the color of the buttons if set."
                        },
                        {
                            "name": "aggregateRating",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The overall rating of the title. The aggregateRating may display half-stars"
                        },
                        {
                            "name": "tip",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The tip associated with the rating button."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds a star rating button to the left-justified side of the dialog. The rating is specified as an integer 1-100 which indicates the number of stars (1 to 5) to be displayed, or 0 if unrated. Think of this as a percentage value (for example, <20% = 1 star).",
                    "returnDescription": "A flag indicating whether the star rating button was successfully added."
                },
                {
                    "name": "ShowBusyAnimation",
                    "params": [],
                    "returnType": "Void",
                    "description": "Displays a spinning busy animation to indicate work in progress. This animation continues until the screen is closed."
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays or refreshes the screen after creation or state changes.",
                    "returnDescription": "A flag indicating whether the screen was displayed."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void",
                    "description": "Closes the screen and deletes the associated object. This method is useful for avoiding screen flicker when the display order of your screens does not resemble a stack"
                },
                {
                    "name": "EnableOverlay",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to enable overlays."
                        }
                    ],
                    "returnType": "Void",
                    "description": "With overlay enabled, the background screen is no longer dimmed."
                },
                {
                    "name": "SetMenuTopLeft",
                    "params": [
                        {
                            "name": "topLeft",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying the format of the buttons."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the format of the buttons to top-left justified. Otherwise the format defaults to bottom-right justified."
                },
                {
                    "name": "SetFocusedMenuItem",
                    "params": [
                        {
                            "name": "item",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID of the button to gain focus."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the button to be highlighted. The default is the first button from the top."
                },
                {
                    "name": "EnableBackButton",
                    "params": [
                        {
                            "name": "enableBackButton",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sends an [isScreenClosed()](/docs/references/brightscript/events/romessagedialogevent.md#isscreenclosed-as-boolean) event when the remote control's back button is pressed."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roMessageDialog",
                    "description": "The Message Dialog component is used to display a formatted, multi-line text message to the user",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/romessagedialog.md"
                }
            ],
            "description": "> This component is no longer updated and will be deprecated on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification."
        },
        "ifMessagePort": {
            "name": "ifMessagePort",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifmessageport.md",
            "methods": [
                {
                    "name": "WaitMessage",
                    "params": [
                        {
                            "name": "timeout",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The number of milliseconds to wait for a message. If this parameter is set to 0, this method waits indefinitely for a message, with no timeout."
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Waits until an event object is available or timeout milliseconds have passed.",
                    "returnDescription": "If an event is available, it is returned. If the timeout expires, invalid is returned."
                },
                {
                    "name": "GetMessage",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "If an event object is available, it is returned. Otherwise invalid is returned. The method returns immediately in either case and does not wait.",
                    "returnDescription": "An event object."
                },
                {
                    "name": "PeekMessage",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "This method is similar to the [GetMessage()](#getmessage-as-dynamic) method, but the returned object (if not invalid) remains in the message queue. A later call to [WaitMessage()](#waitmessagetimeout-as-integer-as-dynamic), [GetMessage()](#getmessage-as-dynamic) or PeekMessage() will return the same message.",
                    "returnDescription": "An event object."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roMessagePort",
                    "description": "A Message Port is the place messages (events) are sent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/romessageport.md"
                }
            ]
        },
        "ifMicrophone": {
            "name": "ifMicrophone",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifmicrophone.md",
            "methods": [
                {
                    "name": "CanRecord",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Indicates whether the platform and paired remote control can be requested to open the microphone.",
                    "returnDescription": "A flag indicating whether the microphone can be opened."
                },
                {
                    "name": "SetPrompt",
                    "params": [
                        {
                            "name": "prompt",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be displayed in the system microphone UI."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the text to be displayed in the system microphone UI."
                },
                {
                    "name": "RecordToFile",
                    "params": [
                        {
                            "name": "wavFilePath",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The file path where the WAV file is to be stored."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Opens the microphone and records to create a WAV file at the specified output file path. Only tmp:/ paths are supported.",
                    "returnDescription": "A flag indicating whether the recording was performed and saved successfully."
                },
                {
                    "name": "StartRecording",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Opens the microphone and begins streaming microphone events to the channel. The channel must have called the [SetMessagePort()](/docs/references/brightscript/interfaces/ifsetmessageport.md#setmessageportport-as-object--as-void) method previously.",
                    "returnDescription": "A flag indicating whether the microphone was opened successfully."
                },
                {
                    "name": "StopRecording",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Stops recording and closes the microphone. This method is useful if the microphone was previously opened via the [StartRecording()](#startrecording-as-boolean) method and the channel needs to cancel the current recording prematurely, (for example, the duration limit was reached or an application error).",
                    "returnDescription": "A flag indicating whether the microphone was opened and closed successfully."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roMicrophone",
                    "description": "The roMicrophone API allows channel applications to receive audio data from the user’s microphone-supported remote control device or mobile phone",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/romicrophone.md"
                }
            ]
        },
        "ifOneLineDialog": {
            "name": "ifOneLineDialog",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifonelinedialog.md",
            "methods": [
                {
                    "name": "SetTitle",
                    "params": [
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be displayed on the screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the title to be displayed in the upper right-hand corner of the screen in the overhang area."
                },
                {
                    "name": "ShowBusyAnimation",
                    "params": [],
                    "returnType": "Void",
                    "description": "Displays a spinning busy animation to indicate work in progress is displayed. The animation will continue until the screen is closed."
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays or refreshes the screen after creation or state changes.",
                    "returnDescription": "A flag indicating whether the screen was successfully displayed."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void",
                    "description": "Closes the screen and deletes the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roOneLineDialog",
                    "description": "The One Line Dialog is a special type of dialog optimized for single line text",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roonelinedialog.md"
                }
            ],
            "description": "> This component is no longer updated and will be deprecated on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification."
        },
        "ifParagraphScreen": {
            "name": "ifParagraphScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifparagraphscreen.md",
            "methods": [
                {
                    "name": "AddHeaderText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be added to the header."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds a string of bold, high visibility text to the screen as a header to introduce the subsequent paragraph(s)."
                },
                {
                    "name": "AddParagraph",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The paragraph to be added to the screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds a paragraph of text to the screen. Paragraphs are specified as a single string and they are ordered on the screen in the same order as they are added. Making multiple calls to AddParagraph() will continue to add additional paragraphs of text in order until the screen has been filled. The [roParagraphScreen](/docs/references/brightscript/components/roparagraphscreen.md \"roParagraphScreen\") component handles all text formatting and justification. Spacing is automatically inserted between paragraphs for readability."
                },
                {
                    "name": "AddParagraphAligned",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        },
                        {
                            "name": "alignment",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "Void"
                },
                {
                    "name": "AddButton",
                    "params": [
                        {
                            "name": "id",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID used to uniquely identify the button instance."
                        },
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title of the button."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds a button to the screen. The buttons are displayed in a standard location on the screen and appear in the order added. When the button is pressed, the script will receive an event from the application containing the ID of the button pressed and allowing the script to perform the desired action for that case",
                    "returnDescription": "A flag indicating whether the button was successfully added."
                },
                {
                    "name": "AddGraphic",
                    "params": [
                        {
                            "name": "url",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        },
                        {
                            "name": "displayMode",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds a graphic image to the screen at the current cursor position and centers it. The current cursor position moves as headers, paragraphs, graphics and buttons are added to the screen. The graphic image is displayed unscaled."
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays or refreshes the screen after creation or state changes.",
                    "returnDescription": "A boolean indicating whether the screen was successfully displayed."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void"
                },
                {
                    "name": "SetTitle",
                    "params": [
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title for the screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the title for the screen."
                },
                {
                    "name": "SetBreadcrumbText",
                    "params": [
                        {
                            "name": "location1",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be used for the first location."
                        },
                        {
                            "name": "location2",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be used for the second location."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Specifies the text to be displayed for the title in breadcrumb format."
                },
                {
                    "name": "SetDefaultMenuItem",
                    "params": [
                        {
                            "name": "index",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The index of the button to be highlighted by default. This is the zero-based position of the button in the list of buttons on the screen (not the button id passed to the [AddButton()](#addbuttonid-as-integer-title-as-string--as-boolean) method). The default is the first button (index 0)."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the button to be highlighted when the screen is initially displayed.",
                    "returnDescription": "A flag indicating whether the default menu item was successfully set."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roParagraphScreen",
                    "description": "The Paragraph Screen provides a way to display text and selection choices to the user",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roparagraphscreen.md"
                }
            ],
            "description": "> This component is no longer updated and will be deprecated on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification."
        },
        "ifPath": {
            "name": "ifPath",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifpath.md",
            "methods": [
                {
                    "name": "Change",
                    "params": [
                        {
                            "name": "path",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The new relative or absolute file system path to be used."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Modifies or changes the current path via the specified relative or absolute path.",
                    "returnDescription": "A flag indicating whether the path was successfully changed."
                },
                {
                    "name": "IsValid",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether the current path is valid (the path is correctly formed). This does not check whether the file actually exists.",
                    "returnDescription": "A flag indicating whether the current path is valid."
                },
                {
                    "name": "Split",
                    "params": [],
                    "returnType": "Object",
                    "description": "Return Value",
                    "returnDescription": "An [roAssociativeArray](/docs/references/brightscript/components/roassociativearray.md \"roAssociativeArray\") that contains the following keys:"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roPath",
                    "description": "The roPath component provides developers an easy way to create valid file system paths",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/ropath.md"
                }
            ],
            "description": "| Name | Description |\n| --- | --- |\n| [roPath](/docs/references/brightscript/components/ropath.md \"roPath\") | The roPath component provides developers an easy way to create valid file system paths |"
        },
        "ifPinEntryDialog": {
            "name": "ifPinEntryDialog",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifpinentrydialog.md",
            "methods": [
                {
                    "name": "AddButton",
                    "params": [
                        {
                            "name": "id",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID of the button to be added to the pin entry dialog."
                        },
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be displayed on the button."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds a button to the pin entry dialog, with the specified title displayed on the button. The buttons are aligned at the bottom of the screen and appear in the order added. When a button is pressed, the script will receive an [roPinEntryDialogEvent](/docs/references/brightscript/events/ropinentrydialogevent.md \"roPinEntryDialogEvent\") from the application indicating the ID of the button pressed."
                },
                {
                    "name": "Pin",
                    "params": [],
                    "returnType": "String",
                    "description": "Gets the user-entered PIN.",
                    "returnDescription": "A string containing the PIN entered by the user."
                },
                {
                    "name": "SetNumPinEntryFields",
                    "params": [
                        {
                            "name": "numFields",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The maximum number of digits for the PIN."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the maximum number of digits to be entered and displayed for the PIN."
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Void",
                    "description": "Displays or refreshes the screen after creation or state changes."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void"
                },
                {
                    "name": "SetTitle",
                    "params": [
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be displayed on the pin entry dialog."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the title for the pin entry dialog to the specified string."
                },
                {
                    "name": "EnableBackButton",
                    "params": [
                        {
                            "name": "enableBackButton",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Enables [isScreenClosed()](/docs/references/brightscript/events/ropinentrydialogevent.md#isscreenclosed-as-boolean) events to be sent when the back button is entered."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables the channel to receive an [isScreenClosed()](/docs/references/brightscript/events/ropinentrydialogevent.md#isscreenclosed-as-boolean) event when the back button is entered. By default the [PinEntryDialog](/docs/references/brightscript/components/ropinentrydialog.md) component will not send an [isScreenClosed()](/docs/references/brightscript/events/ropinentrydialogevent.md#isscreenclosed-as-boolean) event so that scripts that did not expect this event will not break"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roPinEntryDialog",
                    "description": "The Pin Entry Dialog is designed to allow the user to enter a numeric PIN for purchasing content",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/ropinentrydialog.md"
                }
            ],
            "description": "> This component is no longer updated and will be deprecated on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification."
        },
        "ifPosterScreen": {
            "name": "ifPosterScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifposterscreen.md",
            "methods": [
                {
                    "name": "SetTitle",
                    "params": [
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be used as the title for the poster screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the title for the poster screen."
                },
                {
                    "name": "SetContentList",
                    "params": [
                        {
                            "name": "contentList",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An [roArray](/docs/references/brightscript/components/roarray.md \"roArray\") of [roAssociativeArrays](/docs/references/brightscript/components/roassociativearray.md \"roAssociativeArrays\") ([Content Meta-Data](/docs/developer-program/getting-started/architecture/content-metadata.md \" Content Meta-Data\") objects) representing the information for each title to be displayed on screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the list of content to be displayed by the screen. The screen is responsible for fetching the poster art from the URLs specified and all user navigation within the list."
                },
                {
                    "name": "GetContentList",
                    "params": [],
                    "returnType": "Object",
                    "description": "Gets the content metadata of each title displayed on the screen. This is the content metadata passed via the [SetContentList()](#setcontentlistcontentlist-as-object-as-void) method.",
                    "returnDescription": "An [roArray](/docs/references/brightscript/components/roarray.md \"roArray\") containing content metadata."
                },
                {
                    "name": "SetListNames",
                    "params": [
                        {
                            "name": "names",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An array of Strings, where each String represents a new category to be displayed at the top. The display order is the same as the order of the categories in the array passed by the caller"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the list of categories to be displayed in the filter banner at the top of the poster screen."
                },
                {
                    "name": "SetListStyle",
                    "params": [
                        {
                            "name": "style",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the display style for the poster screen. Styles allow the poster screen to look differently for different types of content or different usage."
                },
                {
                    "name": "SetListDisplayMode",
                    "params": [
                        {
                            "name": "displayMode",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "Specifies the mode used to display images on the poster screen, which may be one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the mode for displaying images in the poster screen. This allows images to be either scaled to completely fill the poster frame (scale-to-fill) or scaled to fit inside the poster frame (scale-to-fit) while maintaining aspect ratio"
                },
                {
                    "name": "SetFocusedList",
                    "params": [
                        {
                            "name": "itemIndex",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The zero-based index of the item to obtain focus."
                        }
                    ],
                    "returnType": "Void",
                    "description": "The item the in filter banner to be given focus. The selected item is displayed in the center of the filter banner, and it is highlighted to denote that it has focus."
                },
                {
                    "name": "SetFocusedListItem",
                    "params": [
                        {
                            "name": "itemIndex",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The zero-based index of the item to obtain focus."
                        }
                    ],
                    "returnType": "Void"
                },
                {
                    "name": "SetBreadcrumbText",
                    "params": [
                        {
                            "name": "location1",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be used for the first location."
                        },
                        {
                            "name": "location2",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be used for the second location."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Specifies the text to be displayed for the title in breadcrumb format."
                },
                {
                    "name": "SetBreadcrumbEnabled",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether the breadcrumb text is to be displayed on the poster screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Shows or hides the breadcrumb text in the title area."
                },
                {
                    "name": "ShowMessage",
                    "params": [
                        {
                            "name": "message",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be displayed in the popup message box."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Displays a semi-transparent popup message box to the user in the center of the screen over the poster screen. Generally, this is used for error messages."
                },
                {
                    "name": "ClearMessage",
                    "params": [],
                    "returnType": "Void",
                    "description": "Clears the message from the previous [ShowMessage()](/docs/references/brightscript/interfaces/ifposterscreen.md#showmessagemessage-as-string-as-void) method call."
                },
                {
                    "name": "SetAdURL",
                    "params": [
                        {
                            "name": "sdAdURL",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The URL of the standard definition banner ad image (540x60) to be displayed."
                        },
                        {
                            "name": "hdAdURL",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The URL of the high definition banner ad image (728x90) to be displayed."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the URL of the banner ad image to be displayed on the poster screen. This is currently only valid for the \"arced-landscape\" and \"flat-category\" style of poster screens."
                },
                {
                    "name": "SetAdSelectable",
                    "params": [
                        {
                            "name": "isSelectable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying if the user can navigate and move focus to the banner image (true) or if the banner ad is not selectable (false)."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables the banner ad to be selectable. When selected, the screen will receive an [roPosterScreenEvent](/docs/references/brightscript/events/roposterscreenevent.md) and the msg will return true for [isAdSelected()](/docs/references/brightscript/events/roposterscreenevent.md#isadselected-as-boolean)."
                },
                {
                    "name": "SetAdDisplayMode",
                    "params": [
                        {
                            "name": "displayMode",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the scale mode for displaying ad images on the poster screen. The ad display is only available on \"arced-landscape\" and \"flat-category\" list styles."
                },
                {
                    "name": "SetLoadingPoster",
                    "params": [
                        {
                            "name": "sdPosterUrl",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        },
                        {
                            "name": "hdPosterUrl",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Specifies the default images to be shown in the poster screen while the poster screen content is loading"
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays or refreshes the screen after initial creation or state changes.",
                    "returnDescription": "A boolean indicating whether the screen was successfully displayed."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void"
                },
                {
                    "name": "SetFocusToFilterBanner",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether the filter banner is to obtain focus."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the focus to the filter banner."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roPosterScreen",
                    "description": "The Poster Screen provides a graphical display of poster art for content selection or can be used as a submenu to provide hierarchical structure to the application",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roposterscreen.md"
                }
            ],
            "description": "> This component is no longer updated and will be deprecated on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\n| Name | Description |\n| --- | --- |\n| [roPosterScreen](/docs/references/brightscript/components/roposterscreen.md \"roPosterScreen\") | The Poster Screen provides a graphical display of poster art for content selection or can be used as a submenu to provide hierarchical structure to the application |"
        },
        "ifProgramGuide": {
            "name": "ifProgramGuide",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifprogramguide.md",
            "methods": [
                {
                    "name": "GetChannels",
                    "params": [
                        {
                            "name": "id",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The program ID containing the channels to be returned."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns the list of logical channel numbers on which the given program ID can be found."
                },
                {
                    "name": "GetNowNextPrograms",
                    "params": [
                        {
                            "name": "channel",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The channel number for which programs are to be retrieved."
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Returns details about the current and next program on a channel.",
                    "returnDescription": "An roAssociativeArray containing two roArray components: one for the current program and another for the next program on the channel. Each roArray contains the following key/value pairs detailing the program:"
                },
                {
                    "name": "GetVersion",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns an integer which is incremented each time the underlying data in the guide changes.",
                    "returnDescription": "The version number of the program guide."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roProgramGuide",
                    "description": "Represents Electronic Program Guide (EPG) information from the tuner.",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/roprogramguide.md"
                }
            ]
        },
        "ifRegex": {
            "name": "ifRegex",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifregex.md",
            "methods": [
                {
                    "name": "IsMatch",
                    "params": [
                        {
                            "name": "str",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string to be checked."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Checks if a string matches the matching pattern.",
                    "returnDescription": "A flag indicating whether the string matches the matching pattern."
                },
                {
                    "name": "Match",
                    "params": [
                        {
                            "name": "str",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string to be searched for matching substrings."
                        }
                    ],
                    "returnType": "Object",
                    "description": "If the matching pattern contains N parenthetical substrings, the relevant substrings are returned as an array of length N+1, where array\\[0\\] is again the entire match and each additional entry in the array is the match for the corresponding parenthetical expression.",
                    "returnDescription": "An roArray of matched substrings from str. If no match was made, an empty array is returned. If a match was made, the entire match is returned in array\\[0\\]. If there are no parenthetical substrings this is the only entry in the array"
                },
                {
                    "name": "MatchAll",
                    "params": [
                        {
                            "name": "str",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string to be searched for matching substrings."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns all matches of the specific regular expression pattern in the target string.",
                    "returnDescription": "An roArray where the first element is the full matched string and if there are any capture groups those are returned in subsequent array elements"
                },
                {
                    "name": "Replace",
                    "params": [
                        {
                            "name": "str",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string to be searched."
                        },
                        {
                            "name": "replacement",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string to be used to replace matches in source string."
                        }
                    ],
                    "returnType": "String",
                    "description": "Replaces the first occurrence of a matching pattern in str with replacement and returns the result. The replacement may contain numbered back-references to parenthetical substrings.",
                    "returnDescription": "A string with the result of the replace operation."
                },
                {
                    "name": "ReplaceAll",
                    "params": [
                        {
                            "name": "str",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string to be searched."
                        },
                        {
                            "name": "replacement",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string to be used to replace matches in source string."
                        }
                    ],
                    "returnType": "String",
                    "description": "Replaces all occurrences of a matching pattern in str with replacement and returns the result. The replacement may contain numbered back-references to parenthetical substrings.",
                    "returnDescription": "A string with the result of the replace all operation."
                },
                {
                    "name": "Split",
                    "params": [
                        {
                            "name": "str",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string to be split."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Uses the matching pattern as a separator and splits the string on the separator boundaries.",
                    "returnDescription": "An roList of substrings of str that were separated by strings which match the pattern in the CreateObject call. The separator strings are not returned. If no matches were found, the returned list contains a single item with the string unchanged."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roRegex",
                    "description": "The roRegex component provides the powerful regular expression processing of the PCRE library to Brightscript strings",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roregex.md"
                }
            ],
            "description": "> See the PCRE documentation ([http://www.pcre.org/](http://www.pcre.org/)) for documentation on the PCRE library used for regular expression matching. See the [Perlre main page](http://perldoc.perl.org/perlre.html \"Perlre main page\") for complete documentation of the possible regular expressions this library can parse and match. In general, most Perl compatible regular expressions are supported."
        },
        "ifRegion": {
            "name": "ifRegion",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifregion.md",
            "methods": [
                {
                    "name": "GetBitmap",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the roBitmap object of the bitmap to which this region refers. A region is always a section of a bitmap.",
                    "returnDescription": "An roBitmap object of the bitmap."
                },
                {
                    "name": "GetX",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the x coordinate of the region in its bitmap.",
                    "returnDescription": "The x coordinate value"
                },
                {
                    "name": "GetY",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the y coordinate of the region in its bitmap.",
                    "returnDescription": "The y coordinate value"
                },
                {
                    "name": "GetWidth",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the width of the region.",
                    "returnDescription": "The width of the region."
                },
                {
                    "name": "GetHeight",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the height of the region.",
                    "returnDescription": "The height of the region."
                },
                {
                    "name": "Offset",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Dynamic",
                            "description": "The x-coordinate of the region."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Dynamic",
                            "description": "The y-coordinate of the region."
                        },
                        {
                            "name": "w",
                            "isRequired": true,
                            "default": null,
                            "type": "Dynamic",
                            "description": "The width of the region."
                        },
                        {
                            "name": "h",
                            "isRequired": true,
                            "default": null,
                            "type": "Dynamic",
                            "description": "The height of the region."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds the passed parameters x,y, w, and h to the values of those roRegion fields. Respects the wrap setting when adjusting the fields by the offsets."
                },
                {
                    "name": "Set",
                    "params": [
                        {
                            "name": "srcRegion",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An roRegion object."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Initializes the fields of this region to be the same as the values of the fields in the srcRegion."
                },
                {
                    "name": "Copy",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns a newly created copy of the region as a new [roRegion](/docs/references/brightscript/components/roregion.md \"roRegion\") object.",
                    "returnDescription": "An roRegion Object."
                },
                {
                    "name": "SetWrap",
                    "params": [
                        {
                            "name": "wrap",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether wrapping of the region is enabled. If this flag is set to false, the part of the region beyond the bounds of its bitmap is not rendered."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Wraps any part of a region that extends beyond the bounds of its bitmap to the other side of the bitmap and renders it there."
                },
                {
                    "name": "GetWrap",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Returns if the region can be wrapped."
                },
                {
                    "name": "SetTime",
                    "params": [
                        {
                            "name": "time",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The \"frame hold time\" in milliseconds."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the duration of each frame of any animated sprite that uses this region."
                },
                {
                    "name": "GetTime",
                    "params": [],
                    "returnType": "Integer"
                },
                {
                    "name": "SetPretranslation",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The pre-translation x-value."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The pre-translation y-value."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the pre-translation for DrawObject, DrawRotatedObject, and DrawScaledObject."
                },
                {
                    "name": "GetPretranslationX",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the pre-translation x value.",
                    "returnDescription": "The pre-translation x value."
                },
                {
                    "name": "GetPretranslationY",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the pre-translation y value.",
                    "returnDescription": "The pre-translation y value."
                },
                {
                    "name": "SetScaleMode",
                    "params": [
                        {
                            "name": "mode",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The scaling mode, which may be one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the scaling mode used for DrawScaledObject."
                },
                {
                    "name": "GetScaleMode",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the scaling mode.",
                    "returnDescription": "The scaling mode, which may be one of the following values:"
                },
                {
                    "name": "SetCollisionType",
                    "params": [
                        {
                            "name": "collisiontype",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The collision type, which may be one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the type of region to be used for collision tests with this sprite."
                },
                {
                    "name": "GetCollisionType",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the collision type.",
                    "returnDescription": "The collision type, which may be one of the following values:"
                },
                {
                    "name": "SetCollisionRectangle",
                    "params": [
                        {
                            "name": "xOffset",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The offset for the x position of the sprite."
                        },
                        {
                            "name": "yOffset",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The offset for the y position of the sprite."
                        },
                        {
                            "name": "width",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The width of the rectangle."
                        },
                        {
                            "name": "height",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The height of the rectangle."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the collision rectangle used for type-1 collision tests. The upper left corner of the rectangle is the (x,y) position of the sprite plus the specified offsets. The width and height specify the size of the rectangle."
                },
                {
                    "name": "SetCollisionCircle",
                    "params": [
                        {
                            "name": "xOffset",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The offset for the x position of the sprite."
                        },
                        {
                            "name": "yOffset",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The offset for the y position of the sprite."
                        },
                        {
                            "name": "Radius",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The size of the circle."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the collision circle used for type-2 collision tests. The center of the circle is the (x,y) position of the sprite plus the specified offsets. The radius specifies the size of the circle."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roRegion",
                    "description": "The roRegion component is used to represent a subsection of a bitmap",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roregion.md"
                }
            ]
        },
        "ifRegistry": {
            "name": "ifRegistry",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifregistry.md",
            "methods": [
                {
                    "name": "GetSpaceAvailable",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the number of bytes available in the channel application's device registry (16K minus current file size). This function can be used, for example, to check the remaining space and remove older entries before writing newer ones. The following code demonstrates how to do this:",
                    "returnDescription": "An integer representing the the number of bytes available in the device registry."
                },
                {
                    "name": "GetSectionList",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the registry sections on the device.",
                    "returnDescription": "An roList with one entry for each registry section. Each registry section is an roString containing the name of the section. The section itself can be accessed by creating an [roRegistrySection](/docs/references/brightscript/components/roregistrysection.md \"roRegistrySection\") object using that name."
                },
                {
                    "name": "Delete",
                    "params": [
                        {
                            "name": "section",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The registry section to be deleted."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Deletes the specified registry section.",
                    "returnDescription": "A flag indicating whether the registry section was successfully deleted."
                },
                {
                    "name": "Flush",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Flushes the contents of the registry out to persistent storage in order to permanently store a token or other setting on the device.",
                    "returnDescription": "A flag indicating whether the registry was successfully flushed."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roRegistry",
                    "description": "The Registry is an area of non-volatile storage where a small number of persistent settings can be stored",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roregistry.md"
                }
            ]
        },
        "ifRegistrySection": {
            "name": "ifRegistrySection",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifregistrysection.md",
            "methods": [
                {
                    "name": "Read",
                    "params": [
                        {
                            "name": "key",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The key name to be read."
                        }
                    ],
                    "returnType": "String",
                    "description": "Reads and returns the value of the specified key.",
                    "returnDescription": "The value of the key."
                },
                {
                    "name": "ReadMulti",
                    "params": [
                        {
                            "name": "keysArray",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An array of strings containing the key names to be read."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Reads multiple values from the registry.",
                    "returnDescription": "An associative array containing the keys and corresponding values read from the registry."
                },
                {
                    "name": "Write",
                    "params": [
                        {
                            "name": "key",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the key to be updated."
                        },
                        {
                            "name": "value",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The updated value to be written to the specified key."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Replaces the value of the specified key. Does not guarantee a commit to non-volatile storage until an explicit [Flush()](#flush-as-boolean) is done.",
                    "returnDescription": "A flag indicating whether the value of the key was successfully updated."
                },
                {
                    "name": "WriteMulti",
                    "params": [
                        {
                            "name": "roAssociativeArray",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An associative array with key-value pairs to be updated."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Writes multiple values to the registry.",
                    "returnDescription": "A flag indicating whether the values were successfully updated."
                },
                {
                    "name": "Delete",
                    "params": [
                        {
                            "name": "key",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The key to be deleted."
                        }
                    ],
                    "returnType": "Boolean",
                    "returnDescription": "A flag indicating whether the key was successfully deleted."
                },
                {
                    "name": "Exists",
                    "params": [
                        {
                            "name": "key",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The key to be checked."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Checks if the specified key resides in the registry.",
                    "returnDescription": "A flag indicating whether the key is in the registry."
                },
                {
                    "name": "Flush",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Flushes the contents of the registry out to persistent storage in order to permanently store a token or other setting on the device. Developers should explicitly this method after performing a write or series of writes. This method is transactional and all writes between calls to it are atomic.",
                    "returnDescription": "A flag indicating whether the registry was successfully flushed."
                },
                {
                    "name": "GetKeyList",
                    "params": [],
                    "returnType": "Object",
                    "description": "Gets a list of the keys in the registry.",
                    "returnDescription": "An roList containing one entry per registry key in this section."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roRegistrySection",
                    "description": "A Registry Section enables the organization of settings within the registry",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roregistrysection.md"
                }
            ]
        },
        "ifSGScreen": {
            "name": "ifSGScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsgscreen.md",
            "methods": [
                {
                    "name": "GetMessagePort",
                    "params": [],
                    "returnType": "roMessagePort",
                    "description": "Returns the roMessagePort object for the SceneGraph scene.",
                    "returnDescription": "The roMessagePort object."
                },
                {
                    "name": "getGlobalNode",
                    "params": [],
                    "returnType": "roSGNode",
                    "description": "Returns a global reference object for the SceneGraph application.",
                    "returnDescription": "A global reference object."
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Renders the SceneGraph scene defined by the roSGScreen object on the display screen.",
                    "returnDescription": "A flag indicating whether the screen is displayed."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void",
                    "description": "Removes the SceneGraph scene from the display screen."
                },
                {
                    "name": "CreateScene",
                    "params": [
                        {
                            "name": "sceneType",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The sceneType object to be used to create the scene object."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Creates the SceneGraph scene object based on the specified sceneType object.",
                    "returnDescription": "The roSGScene object associated with the screen."
                },
                {
                    "name": "GetScene",
                    "params": [],
                    "returnType": "roSGNode",
                    "description": "The roSGScene object associated with the screen.",
                    "returnDescription": "Typically, the scene created in main.brs by a roSGScreen.CreateScene() call."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSGScreen",
                    "description": "The roSGScreen object is a SceneGraph canvas that displays the contents of a SceneGraph Scene node tree",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosgnode.md"
                }
            ]
        },
        "ifRSA": {
            "name": "ifRSA",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifrsa.md",
            "methods": [
                {
                    "name": "SetPrivateKey",
                    "params": [
                        {
                            "name": "keyFileName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "Specifies the private key to be used for signing. The file name should specify a path, either in the package or a temp path."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Specifies the private key to use for signing."
                },
                {
                    "name": "SetPublicKey",
                    "params": [
                        {
                            "name": "keyFileName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "Specifies the public key to be used for signing. The file name should specify a path, either in the package or a temp path."
                        }
                    ],
                    "returnType": "Integer"
                },
                {
                    "name": "SetDigestAlgorithm",
                    "params": [
                        {
                            "name": "digestAlgorithm",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "An openssl string with the digest to be used. Common digest algorithms are \"sha1\", \"ripemd160\", and \"md5\"."
                        }
                    ],
                    "returnType": "Boolean",
                    "returnDescription": "A flag indicating whether the algorithm was successfully set (true) or the string was not recognized (false)."
                },
                {
                    "name": "Sign",
                    "params": [
                        {
                            "name": "digest",
                            "isRequired": true,
                            "default": null,
                            "type": "roByteArray Object",
                            "description": "The roByteArray to be signed. Errors will be printed in the BrightScript console. If the digest algorithm is not set (using SetDigestAlgorithm) before calling Sign(), the digest is not encapsulated. This would be equivalent to simply calling the openssl function RSA\\_private\\_encrypt()"
                        }
                    ],
                    "returnType": "Object",
                    "description": "Generates a signature based on the specified digest.",
                    "returnDescription": "An roByteArray containing the signature, or invalid if an error occurred. Typical values include the following:"
                },
                {
                    "name": "Verify",
                    "params": [
                        {
                            "name": "digest",
                            "isRequired": true,
                            "default": null,
                            "type": "roByteArray Object",
                            "description": "The digest to be verified."
                        },
                        {
                            "name": "signature",
                            "isRequired": true,
                            "default": null,
                            "type": "roByteArray Object",
                            "description": "The signature to be verified."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Verifies the given digest and signature. Both digest and signature should be roByteArrays. If the digest algorithm is not set (using the [SetDigestAlgorithm](#setdigestalgorithmdigestalgorithm-as-string-as-boolean) method) before calling Verify(), the digest associated with the signature is not expected to be encapsulated. This would be equivalent to simply calling the openssl function RSA\\_public\\_decrypt(signature) and then comparing the result with the digest",
                    "returnDescription": "Indicates the result of the validation. This may be one of the following values:"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roRSA",
                    "description": "The RSA component provides an interface to the OpenSSL RSA library of signing algorithms",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rorsa.md"
                }
            ]
        },
        "ifScreen": {
            "name": "ifScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifscreen.md",
            "methods": [
                {
                    "name": "SwapBuffers",
                    "params": [],
                    "returnType": "Void",
                    "description": "This function first operates the same as a call to [ifDraw2D](/docs/references/brightscript/interfaces/ifdraw2d.md \"ifDraw2D\"), completing all queued drawing operations on the back buffer (draw surface)."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roScreen",
                    "description": "The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roscreen.md"
                }
            ],
            "description": "| Name | Description |\n| --- | --- |\n| [roScreen](/docs/references/brightscript/components/roscreen.md \"roScreen\") | The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from |"
        },
        "ifSearchhistory": {
            "name": "ifSearchhistory",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsearchhistory.md",
            "methods": [
                {
                    "name": "Clear",
                    "params": [],
                    "returnType": "Void",
                    "description": "Clears all elements from the search history."
                },
                {
                    "name": "Push",
                    "params": [
                        {
                            "name": "searchTerm",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The search term to be pushed onto the search history stack."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Pushes a new search term onto the search history stack."
                },
                {
                    "name": "GetAsArray",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the current search history stack.",
                    "returnDescription": "An [roArray](/docs/references/brightscript/components/roarray.md \"roArray\") of Strings with all available search history elements."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSearchHistory",
                    "description": "The Search History object implements the system-wide storage of search terms for use in implementing the roSearchScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosearchhistory.md"
                }
            ],
            "description": "> _This interface is known as ifRoSearchHistory in some Roku OS versions._"
        },
        "ifSearchScreen": {
            "name": "ifSearchScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsearchscreen.md",
            "methods": [
                {
                    "name": "SetSearchTermHeaderText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be displayed for the header in the list are."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the text to be displayed for the header in the list area. This area could contain a list of search terms previously used as a search history or partial results in the case of a progressive disclosure search"
                },
                {
                    "name": "SetSearchButtonText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text label to be displayed on the search button."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the text label to be displayed on the search button. For example \"search\", \"find\", etc."
                },
                {
                    "name": "SetClearButtonText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text label to be displayed on the button at the bottom of the list area"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Set the text label for the button at the bottom of the list area. Example text might be \"clear history\", \"clear results\" or similar"
                },
                {
                    "name": "AddSearchTerm",
                    "params": [
                        {
                            "name": "searchTerm",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The search term to be added."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds an individual value to the search term list."
                },
                {
                    "name": "SetSearchTerms",
                    "params": [
                        {
                            "name": "searchTerms",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An array of string values to be displayed."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the search terms list to the values contained in the array provided."
                },
                {
                    "name": "ClearSearchTerms",
                    "params": [],
                    "returnType": "Void",
                    "description": "Clears all values from the search terms list."
                },
                {
                    "name": "SetBreadcrumbText",
                    "params": [
                        {
                            "name": "location1",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The location 1 name."
                        },
                        {
                            "name": "location2",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The location 2 name."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets a two-part navigational title that shows the current and the previous locations in the application hierarchy (for example, TV – Friends)."
                },
                {
                    "name": "SetBreadcrumbEnabled",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to show (true) or hide (false) the breadcrumb text."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Shows or hides the breadcrumb text in the title area"
                },
                {
                    "name": "SetClearButtonEnabled",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to show (true) or hide (false) the clear button."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Shows or hides the clear button on the keypad."
                },
                {
                    "name": "SetEmptySearchTermsText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be displayed in the search terms box by default."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Displays the default text in the search terms box when no search terms have been entered."
                },
                {
                    "name": "SetSearchText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be displayed in the keyboard search string box."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the keyboard search string box to the specified text."
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays or refreshes the screen after creation or state changes.",
                    "returnDescription": "A flag indicating whether the search screen successfully was displayed."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void",
                    "description": "Closes the screen and deletes the associated object. This is useful for avoiding screen flicker when the display order of your screens does not resemble a stack"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSearchScreen",
                    "description": "The Search Screen provides a standard way to allow users to enter text for searching",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosearchscreen.md"
                }
            ]
        },
        "ifSetMessagePort": {
            "name": "ifSetMessagePort",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsetmessageport.md",
            "methods": [
                {
                    "name": "SetMessagePort",
                    "params": [
                        {
                            "name": "port",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The roMessagePort to be used for screen events."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the [roMessagePort](/docs/references/brightscript/components/romessageport.md \"roMessagePort\") to be used for all events from the screen."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roHdmiStatus",
                    "description": "The HDMI status component provides an interface to the current HDMI operational status",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rohdmistatus.md"
                },
                {
                    "name": "roScreen",
                    "description": "The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roscreen.md"
                },
                {
                    "name": "roUrlTransfer",
                    "description": "A roUrlTransfer object transfers data to or from remote servers specified by URLs. It can perform mutual authentication with a web server",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rourltransfer.md"
                },
                {
                    "name": "roTextToSpeech",
                    "description": "The roTextToSpeech component provides text to speech capabilities to applications",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotexttospeech.md"
                }
            ]
        },
        "ifSGNodeBoundingRect": {
            "name": "ifSGNodeBoundingRect",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsgnodeboundingrect.md",
            "methods": [
                {
                    "name": "boundingRect",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Returns the node bounding rectangle. The bounding rectangle of a node is the axis-aligned rectangle computed by transforming the local bounding rectangle of the node by the node transformation matrix. The resulting rectangle corresponds to the node local bounding rectangle transformed into its parent node local coordinate system.",
                    "returnDescription": "An associative array with the node bounding rectangle."
                },
                {
                    "name": "localBoundingRect",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Returns the node local bounding rectangle. The local bounding rectangle of a node is the axis-aligned rectangle, that includes the union of the bounding rectangle of the geometry of the node, and the bounding rectangles of all of the node children, transformed into the local coordinate system of the node.",
                    "returnDescription": "An associative array with the node local bounding rectangle."
                },
                {
                    "name": "sceneBoundingRect",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Returns the bounding rectangle for scene components (component nodes extended from a [Scene](/docs/references/scenegraph/scene.md \"Scene\") or [OverhangPanelSetScene](/docs/references/scenegraph/sliding-panels-nodes/overhangpanelsetscene.md \"OverhangPanelSetScene\") node class).",
                    "returnDescription": "An associative array with the bounding rectangle."
                },
                {
                    "name": "localSubBoundingRect",
                    "params": [
                        {
                            "name": "itemnumber",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The index of the grid item for the local bounding rectangle to be returned in the following format: _rowindex_\\__itemindex_."
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Returns the local bounding rectangle of this node's identified sub part in the node's local coordinate system. If the subpart does not exist, the node's local bounding rectangle is returned.",
                    "returnDescription": "An associative array with the local bounding rectangle of the node's identified sub part."
                },
                {
                    "name": "subBoundingRect",
                    "params": [
                        {
                            "name": "itemnumber",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The index of the grid item for the local bounding rectangle to be returned in the following format: _rowindex_\\__itemindex_."
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Returns the bounding rectangle of this node's identified sub part, as transformed by this node's transformation matrix, in its parent node's coordinate system. If the subpart does not exist, the node's bounding rectangle is returned.",
                    "returnDescription": "An associative array with the bounding rectangle."
                },
                {
                    "name": "sceneSubBoundingRect",
                    "params": [
                        {
                            "name": "itemnumber",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The index of the grid item for the bounding rectangle to be returned in the following format: _rowindex_\\__itemindex_."
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Returns the bounding rectangle of this node's subpart in its Scene's coordinate system If the subpart does not exist or if the node is not an ancestor of a Scene node, this will return the node's bounding rectangle.",
                    "returnDescription": "An associative array with the bounding rectangle."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosgnode.md"
                }
            ],
            "description": "The ifSGNodeBoundingRect interface can be used to query the bounding rectangle of subject node. The ifSGNodeBoundingRect interface methods return a node bounding rectangle as an associative array with four elements:\n\n| Name | Value |\n| --- | --- |\n| x | x-coordinate of the origin of the bounding rectangle |\n| y | y-coordinate of the origin of the bounding rectangle |\n| width | width of the bounding rectangle |\n| height | height of the bounding rectangle |\n\n> These methods return the bounding rectangle dimensions and location of component objects at the time they are called. If they are called before an object is fully constructed, such as before all graphical images have been loaded, they will return the dimensions and location at the time of the call, which may not be the correct values for placing the component object properly. To ensure that your screen has the component objects located as you intended, make sure you call these methods after the component object is fully constructed. For example, if the component object relies on loading graphical images to construct its appearance, it is best to use these methods as part of an observer callback function triggered by the image loading field events, such as the loadStatus field of the Poster node."
        },
        "ifSGNodeChildren": {
            "name": "ifSGNodeChildren",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsgnodechildren.md",
            "methods": [
                {
                    "name": "createChild",
                    "params": [
                        {
                            "name": "nodeType",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The node class to be created."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Creates a child node of type nodeType, and adds the new node to the end of the subject node list of children.",
                    "returnDescription": "The child node that was created."
                },
                {
                    "name": "removeChildIndex",
                    "params": [
                        {
                            "name": "index",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The position in the tree of the child node to be removed."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "If the subject node has a child node in the index position, removes that child node from the subject node list of children.",
                    "returnDescription": "A flag indicating whether the child node that was successfully removed."
                },
                {
                    "name": "getChild",
                    "params": [
                        {
                            "name": "index",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The index of the child node to be retrieved."
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Returns the child node specified by the index.",
                    "returnDescription": "The child node at the index position; otherwise, \"invalid\"."
                },
                {
                    "name": "getParent",
                    "params": [],
                    "returnType": "roSGNode",
                    "description": "Returns the parent node of a node has been added to a list of children.",
                    "returnDescription": "The parent node; otherwise, \"invalid\"."
                },
                {
                    "name": "getChildCount",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the current number of children in the subject node list of children. This is always a non-negative number.",
                    "returnDescription": "The number of child nodes in the tree."
                },
                {
                    "name": "appendChildren",
                    "params": [
                        {
                            "name": "child",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Appends an array of children nodes to the subject node.",
                    "returnDescription": "A flag indicating whether the children nodes were successfully appended."
                },
                {
                    "name": "insertChildren",
                    "params": [
                        {
                            "name": "child",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Inserts an array of child nodes to the subject node, starting at a specific position.",
                    "returnDescription": "A flag indicating whether the children nodes were successfully inserted."
                },
                {
                    "name": "removeChildren",
                    "params": [
                        {
                            "name": "child",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Removes an array of child nodes from the subject node.",
                    "returnDescription": "A flag indicating whether the children nodes were successfully removed."
                },
                {
                    "name": "removeChildrenIndex",
                    "params": [
                        {
                            "name": "num",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Removes a specific number of child nodes from the subject node starting at a specific position.",
                    "returnDescription": "A flag indicating whether the children nodes were successfully removed."
                },
                {
                    "name": "replaceChildren",
                    "params": [
                        {
                            "name": "child",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Replaces the child nodes in the subject node, starting at the position specified by index, with new child nodes specified by child\\_nodes",
                    "returnDescription": "A flag indicating whether the children nodes were successfully replaced."
                },
                {
                    "name": "getChildren",
                    "params": [
                        {
                            "name": "num",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Retrieves a specific number of child nodes from the subject node, starting at a specific position.",
                    "returnDescription": "An roArray containing the child nodes retrieved. If num\\_children is -1, all the child nodes are returned."
                },
                {
                    "name": "createChildren",
                    "params": [
                        {
                            "name": "num",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Creates a specific number of new child nodes of a specific type or extended type.",
                    "returnDescription": "An roArray containing the new child nodes created."
                },
                {
                    "name": "getScene",
                    "params": [],
                    "returnType": "roSGNode",
                    "description": "Returns the node's root Scene. This returns a valid Scene even if the node is not parented.",
                    "returnDescription": "The node's root Scene."
                },
                {
                    "name": "getAll",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an array with every existing node created by the currently running channel.",
                    "returnDescription": "An roArray with the all the existing nodes created by the channel."
                },
                {
                    "name": "getRoots",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an array with every existing node without a parent created by the currently running channel."
                },
                {
                    "name": "getRootsMeta",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an array with every existing node without a parent created by the currently running channel.",
                    "returnDescription": "An roArray with every existing node without a parent created by the currently running channel."
                },
                {
                    "name": "getAllMeta",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an array with every existing node created by the currently running channel (similar to the [getAll()](#getall-as-object) method) organized as an XML forest of trees according to the usual parent-child node relationship. Cycles are handled with a reference entry in the tree rather than indefinite recursion.",
                    "returnDescription": "An roArray of strings with the all the existing nodes created by the channel."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosgnode.md"
                }
            ],
            "description": "The ifSGNodeChildren interface allows querying and manipulation of nodes in a SceneGraph node tree, such as creating new nodes, placing them at certain positions in the tree, and removing them."
        },
        "ifSGNodeDict": {
            "name": "ifSGNodeDict",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsgnodedict.md",
            "methods": [
                {
                    "name": "findNode",
                    "params": [
                        {
                            "name": "name",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the node to be retrieved."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns the node that is a descendant of the nearest component ancestor of the subject node (possibly the subject node itself) and whose id field is set to name. The search for the descendant node is a breadth-first search that includes child nodes in nodes that are declared as custom components defined in other XML component files. These together allow finding siblings and cousins of a node within the context of a component. If a node with the specified name is not found, an invalid object is returned",
                    "returnDescription": "The node that is a descendant of the nearest component ancestor of the subject node."
                },
                {
                    "name": "subtype",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the subtype of the subject node as specified when it was created.",
                    "returnDescription": "The subtype of the subject node."
                },
                {
                    "name": "parentSubtype",
                    "params": [
                        {
                            "name": "nodeType",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The node type of the parent node."
                        }
                    ],
                    "returnType": "String",
                    "description": "Returns the subtype of the parent of the nodeType in the SceneGraph node class hierarchy.",
                    "returnDescription": "The subtype of the parent node."
                },
                {
                    "name": "isSubtype",
                    "params": [
                        {
                            "name": "nodeType",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The node type of the subject node."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Checks whether the subtype of the subject node is a descendant of the subtype nodeType in the SceneGraph node class hierarchy.",
                    "returnDescription": "A flag indicating whether the subtype of the subject node is a descendant of the subtype nodeType."
                },
                {
                    "name": "isSameNode",
                    "params": [
                        {
                            "name": "RoSGNode",
                            "isRequired": true,
                            "default": null,
                            "type": "Object"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Checks whether a specific roSGNode refers to the same SceneGraph node object as the subject node.",
                    "returnDescription": "A flag indicating whether the nodes refer to the same SceneGraph node object."
                },
                {
                    "name": "clone",
                    "params": [
                        {
                            "name": "isDeepCopy",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean"
                        }
                    ],
                    "returnType": "Object",
                    "returnDescription": "A node tree."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosgnode.md"
                }
            ],
            "description": "The ifSGNodeDict interface allows you access information about the nodes in a SceneGraph node tree, and find and return a node with a specific ID."
        },
        "ifSGNodeField": {
            "name": "ifSGNodeField",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsgnodefield.md",
            "methods": [
                {
                    "name": "setField",
                    "params": [
                        {
                            "name": "fieldName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the field to be updated."
                        },
                        {
                            "name": "value",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The updated value for the field."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the value of a subject node field. This will fail and stop script execution if the value is not of the appropriate type.",
                    "returnDescription": "A flag indicating whether the field was successfully updated."
                },
                {
                    "name": "observeField",
                    "params": [
                        {
                            "name": "fieldName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the field to be monitored."
                        },
                        {
                            "name": "functionName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the method to be executed when the value of the field changes."
                        }
                    ],
                    "description": "Calls a function when a field of the subject node changes. The function called must be in the scope of the current component.",
                    "returnDescription": "A flag indicating whether the value of the field being monitored changes."
                },
                {
                    "name": "observeField",
                    "params": [
                        {
                            "name": "fieldName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the field to be monitored."
                        },
                        {
                            "name": "port",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The [roMessagePort](/docs/references/brightscript/components/romessageport.md \"roMessagePort\") to receive a [roSGNodeEvent](/docs/references/brightscript/components/rosgnode.md \"roSGNodeEvent\") message when the value of the field changes."
                        }
                    ],
                    "description": "This overloaded form sends an [roSGNodeEvent](/docs/references/brightscript/components/rosgnode.md \"roSGNodeEvent\") message to the [roMessagePort](/docs/references/brightscript/components/romessageport.md \"roMessagePort\") identified by port when the subject node field identified by fieldName changes value.",
                    "returnDescription": "A flag indicating whether the value of the field being monitored changes."
                },
                {
                    "name": "queueFields",
                    "params": [
                        {
                            "name": "queueNode",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag enabling queuing on the node."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Makes subsequent operations on the node fields to queue on the node itself rather than on the [Scene](/docs/references/scenegraph/scene.md \"Scene\") node render thread. This prevents the operations from being executed immediately.",
                    "returnDescription": "A flag indicating the current state of **queueNode**."
                },
                {
                    "name": "addFields",
                    "params": [
                        {
                            "name": "fields",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An roAssociativeArray containing key-value pairs for the fields to be added."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds the field(s) and corresponding field value(s) defined as key-value pair(s) in the associative array fields to the subject node. The types of the added fields are determined by the values which correspond to the allowable types for an `<interface>` field.",
                    "returnDescription": "A flag indicating whether the fields have been successfully added."
                },
                {
                    "name": "getField",
                    "params": [
                        {
                            "name": "fieldName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the field to be retrieved."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns the appropriately-typed value from the specified field of the subject node.",
                    "returnDescription": "A typed value."
                },
                {
                    "name": "addField",
                    "params": [
                        {
                            "name": "fieldName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the field to be added."
                        },
                        {
                            "name": "type",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The type of the field to be added."
                        },
                        {
                            "name": "alwayNotify",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Specifies whether observers of the field are triggered when the field value is updated to the same or new value (true), or only when the field changes to a new value (false)."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds a field with the specified name and type to the subject node. The added field is initialized to the default value for the type.",
                    "returnDescription": "A flag indicating whether the field have been successfully added."
                },
                {
                    "name": "getFieldType",
                    "params": [
                        {
                            "name": "fieldName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the field to have its type retrieved."
                        }
                    ],
                    "returnType": "String",
                    "description": "Returns the type of a specific field of the subject node.",
                    "returnDescription": "The field type."
                },
                {
                    "name": "setFields",
                    "params": [
                        {
                            "name": "fields",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An roAssociativeArray containing key-value pairs for the fields to be updated."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the values for one or more fields.",
                    "returnDescription": "A flag indicating whether the fields have been successfully updated."
                },
                {
                    "name": "removeFields",
                    "params": [
                        {
                            "name": "fieldNames",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An roArray containing the names of the fields to be removed."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Removes one or more fields from the subject node.",
                    "returnDescription": "A flag indicating whether the fields have been successfully removed."
                },
                {
                    "name": "unobserveFieldScoped",
                    "params": [
                        {
                            "name": "fieldName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the field to no longer be monitored."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Removes the connection between the observing component and the observed node's field.",
                    "returnDescription": "A flag indicating whether this operation was successful."
                },
                {
                    "name": "removeField",
                    "params": [
                        {
                            "name": "fieldName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the field to be removed."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Removes a field from the subject node. Fields defined in [content metadata](/docs/developer-program/getting-started/architecture/content-metadata.md \" Content Meta-Data\") and the related SceneGraph node class metadata bindings can be removed, but will be dynamically re-added at any time they are explicitly accessed.",
                    "returnDescription": "A flag indicating whether the field has been successfully removed."
                },
                {
                    "name": "observeFieldScoped",
                    "params": [
                        {
                            "name": "fieldName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the field to be monitored."
                        },
                        {
                            "name": "functionName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the method to be executed when the value of the field changes."
                        }
                    ],
                    "description": "Sets up a connection between the observed node's field and the current component from which this call is made. This method is similar to the [observeField()](/docs/references/brightscript/interfaces/ifsgnodefield.md#observefieldfieldname-as-string-functionname-as-string-as-boolean \"observeField(fieldName as String, functionName as String)\") method.",
                    "returnDescription": "A flag indicating whether the value of the field has changed."
                },
                {
                    "name": "observeFieldScoped",
                    "params": [
                        {
                            "name": "fieldName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the field to be monitored."
                        },
                        {
                            "name": "port",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The [roMessagePort](/docs/references/brightscript/components/romessageport.md \"roMessagePort\") to receive a [roSGNodeEvent](/docs/references/brightscript/components/rosgnode.md \"roSGNodeEvent\") message when the value of the field changes."
                        }
                    ],
                    "description": "Sets up a connection between the observed node's field and the current component from which this call is made. This method is similar to the [observeField()](/docs/references/brightscript/interfaces/ifsgnodefield.md#observefieldfieldname-as-string-functionname-as-string-as-boolean \"observeField(fieldName as String, functionName as String)\") method.",
                    "returnDescription": "A flag indicating whether the value of the field has changed."
                },
                {
                    "name": "unobserveField",
                    "params": [
                        {
                            "name": "fieldName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the field to no longer be monitored."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Removes the previously established connections between the subject node field identified by fieldName and any callback functions or message ports.",
                    "returnDescription": "A flag indicating whether this operation was successful."
                },
                {
                    "name": "getFields",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the names and values of all the fields in the node.",
                    "returnDescription": "An roAssociativeArray containing key-value pairs with the element names and values."
                },
                {
                    "name": "hasField",
                    "params": [
                        {
                            "name": "fieldName",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the field to be checked for whether it exists in the node."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Checks whether a field exists in the node.",
                    "returnDescription": "A flag indicating whether the subject node has a field whose name exactly matches fieldName, or whose fully lowercase analog is identical to that of fieldName."
                },
                {
                    "name": "getFieldTypes",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the names and types of all the fields in the node.",
                    "returnDescription": "An roAssociativeArray containing key-value pairs with the element names and types."
                },
                {
                    "name": "threadinfo",
                    "params": [],
                    "returnType": "Object",
                    "description": "A runtime debugging method for helping minimize Rendezvous spread. This method can be called on any node from any thread.",
                    "returnDescription": "An roAssociatveArray with the following information:"
                },
                {
                    "name": "signalBeacon",
                    "params": [
                        {
                            "name": "beacon",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Signals start and/or stop points for measuring channel launch and Electronic Program Grid (EPG) launch times.",
                    "returnDescription": "When you fire a launch event, the system will return an integer indicating the result of its signaling:"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosgnode.md"
                }
            ],
            "description": "The ifSGNodeField interface allows querying, getting, setting, and performing other similar manipulation operations on Scene Graph node fields. This interface also allows you to set and unset event observers on a subject node field."
        },
        "ifSGNodeFocus": {
            "name": "ifSGNodeFocus",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsgnodefocus.md",
            "methods": [
                {
                    "name": "setFocus",
                    "params": [
                        {
                            "name": "on",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "True = Sets the current remote control focus to the subject node. This also automatically removes focus from the node on which it was previously set."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the current remote control focus to the subject node.",
                    "returnDescription": "A flag indicating whether focus on the subject node has successfully been updated."
                },
                {
                    "name": "hasFocus",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether the subject node has the remote control focus.",
                    "returnDescription": "A flag indicating whether the subject node has the remote control focus."
                },
                {
                    "name": "isInFocusChain",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether the subject node or any of its descendants in the SceneGraph node tree have remote control focus.",
                    "returnDescription": "A flag indicating whether the subject node or any of its descendants in the SceneGraph node tree have the remote control focus."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosgnode.md"
                }
            ],
            "description": "The ifSGNodeFocus interface is used to query and manipulate the remote control focus of the nodes in a SceneGraph node tree."
        },
        "ifSGNodeHttpAgentAccess": {
            "name": "ifSGNodeHttpAgentAccess",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsgnodehttpagentaccess.md",
            "methods": [
                {
                    "name": "getHttpAgent",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the roHttpAgent object for the node.",
                    "returnDescription": "The roHttpAgent object for the node, which may be one of the following:"
                },
                {
                    "name": "setHttpAgent",
                    "params": [
                        {
                            "name": "HTTP",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "returnDescription": "A flag indicating whether the roHttpAgent object was successfully set."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSGNode",
                    "description": "The roSGNode object is the BrightScript equivalent of SceneGraph XML file node creation",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosgnode.md"
                }
            ],
            "description": "The ifSGNodeHttpAgentAccess interface allows you to get an [roHttpAgent](/docs/references/brightscript/components/rohttpagent.md \"roHttpAgent\") object from a SceneGraph node, and set an roHttpAgent object for a nod"
        },
        "ifSlideshow": {
            "name": "ifSlideshow",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifslideshow.md",
            "methods": [
                {
                    "name": "SetContentList",
                    "params": [
                        {
                            "name": "contentList",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An [roArray](/docs/references/brightscript/components/roarray.md \"roArray\") of [roAssociativeArrays](/docs/references/brightscript/components/roassociativearray.md \"roAssociativeArrays\") ([Content Meta-Data](/docs/developer-program/getting-started/architecture/content-metadata.md \"Content Meta-Data\") objects) representing the information for each title to be displayed on screen"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Set the content to be played by the slide show."
                },
                {
                    "name": "AddContent",
                    "params": [
                        {
                            "name": "contentItem",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The content metadata item to be added to the slideshow list."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Add a new [content metadata](/docs/developer-program/getting-started/architecture/content-metadata.md \"Content Meta-Data\") item to the end of the content list for the slide show."
                },
                {
                    "name": "ClearContent",
                    "params": [],
                    "returnType": "Void",
                    "description": "Clears all content from the content list."
                },
                {
                    "name": "CountButtons",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the count of all the buttons added to the slide show screen.",
                    "returnDescription": "The button count value."
                },
                {
                    "name": "SetNext",
                    "params": [
                        {
                            "name": "item",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The zero-based index of the item in the content list."
                        },
                        {
                            "name": "isImmediate",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Forces an immediate update to the slideshow."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Makes the SlideShow object queue a specific slide up as the next slide."
                },
                {
                    "name": "SetPeriod",
                    "params": [
                        {
                            "name": "seconds",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The number of seconds that each slide is displayed."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Specifies the number of seconds that each slide is displayed."
                },
                {
                    "name": "SetTextOverlayHoldTime",
                    "params": [
                        {
                            "name": "milliseconds",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The number of milliseconds to display the text overlay. If this is set to 0, the overlay is off."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Defines the number of milliseconds to display the text overlay for each slide."
                },
                {
                    "name": "Pause",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Puts the slide show into pause mode. Setting the player to pause mode if it is not in play mode generates in error.",
                    "returnDescription": "A flag that indicates whether the slide show was successfully set to pause mode."
                },
                {
                    "name": "Resume",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Puts the slide show into play mode starting from the pause point. Setting the player to play mode when it is not in pause mode generates in error.",
                    "returnDescription": "A flag that indicates whether the slide show was successfully set to pause mode."
                },
                {
                    "name": "SetTextOverlayIsVisible",
                    "params": [
                        {
                            "name": "IsVisible",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether the overlay is displayed."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Displays the overlay. This method is OR'd with the overlay hold time; therefore, even if **IsVisible** is false, the overlay is displayed during the slide's overlay hold time."
                },
                {
                    "name": "AddButton",
                    "params": [
                        {
                            "name": "id",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID used to uniquely identify the button instance."
                        },
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title used for the button."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds a button to the screen. The buttons are displayed in a standard location on the screen and appear in the order added. When the button is pressed, the script will receive an event from the application containing the ID of the button pressed",
                    "returnDescription": "A flag indicating whether the button was successfully added."
                },
                {
                    "name": "AddRatingButton",
                    "params": [
                        {
                            "name": "id",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID used to uniquely identify the rating button instance."
                        },
                        {
                            "name": "rating",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "A value between 1-100 that represents the number of stars (1 to 5) to be displayed. Essentially this a percentage value: <20% = 1 star."
                        }
                    ],
                    "returnType": "Boolean",
                    "returnDescription": "A flag indicating whether the rating button was successfully added."
                },
                {
                    "name": "ClearButtons",
                    "params": [],
                    "returnType": "Void"
                },
                {
                    "name": "SetUnderscan",
                    "params": [
                        {
                            "name": "percentage",
                            "isRequired": true,
                            "default": null,
                            "type": "Float",
                            "description": "The percentage to be used to reduce the image size."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Set the percentage to reduce the image size by to compensate for monitor overscan (for example, 2.5 for 2.5%)."
                },
                {
                    "name": "SetDisplayMode",
                    "params": [
                        {
                            "name": "displayMode",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The display mode, which may be one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the mode for displaying slideshow images. This allows images to be either scaled to completely fill the screen (scale-to-fill) or scaled to fit inside the screen (scale-to-fit) while maintaining aspect ratio."
                },
                {
                    "name": "SetMaxUpscale",
                    "params": [
                        {
                            "name": "maxUpscale",
                            "isRequired": true,
                            "default": null,
                            "type": "Float",
                            "description": "The maximum scale factor to be used."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Set the maximum scale factor for scale-to-fill, zoom-to-fill, and photo-fit modes."
                },
                {
                    "name": "GetMaxUpscale",
                    "params": [],
                    "returnType": "Float",
                    "description": "Retrieves the maximum scale factor.",
                    "returnDescription": "The scale factor."
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays or refreshes the screen after creation or state changes.",
                    "returnDescription": "A flag indicating whether the screen was successfully displayed."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void",
                    "description": "Closes the screens and delete the associated object. This is useful for avoiding screen flicker when the display order of your screens does not resemble a stack"
                },
                {
                    "name": "SetBorderColor",
                    "params": [
                        {
                            "name": "color",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The HTML hex color value to be used as the border."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the border color used as the background around the slide."
                },
                {
                    "name": "SetLoop",
                    "params": [
                        {
                            "name": "loop",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to loop through all the slides."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Makes the slideshow loop through all the slides."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSlideShow",
                    "description": "The Slide Show screen provides the ability to setup a photo slide show to playback a series of images",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roslideshow.md"
                }
            ],
            "description": "> This interface is deprecated.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification."
        },
        "ifSocket": {
            "name": "ifSocket",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocket.md",
            "methods": [
                {
                    "name": "Send",
                    "params": [
                        {
                            "name": "data",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "A [roByteArray](/docs/references/brightscript/components/robytearray.md \"roByteArray\") containing the data to be sent."
                        },
                        {
                            "name": "startIndex",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The index of the byte array from which to start sending data."
                        },
                        {
                            "name": "length",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The amount of data to be sent to the socket."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Sends up to length bytes of data to the socket.",
                    "returnDescription": "The number of bytes sent."
                },
                {
                    "name": "SendStr",
                    "params": [
                        {
                            "name": "data",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "A string containing the data to be sent."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Sends the whole string to the socket, if possible.",
                    "returnDescription": "The number of bytes sent."
                },
                {
                    "name": "Receive",
                    "params": [
                        {
                            "name": "data",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "A [roByteArray](/docs/references/brightscript/components/robytearray.md \"roByteArray\") containing the data to be stored."
                        },
                        {
                            "name": "startIndex",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The index of the byte array from which to start reading data."
                        },
                        {
                            "name": "length",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The amount of data to be read from the socket."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Reads data from the socket.",
                    "returnDescription": "The number of bytes read."
                },
                {
                    "name": "ReceiveStr",
                    "params": [
                        {
                            "name": "length",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The amount of data to be read from the socket."
                        }
                    ],
                    "returnType": "String",
                    "returnDescription": "The received byte length string. If no bytes are received, the string is empty."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void"
                },
                {
                    "name": "SetAddress",
                    "params": [
                        {
                            "name": "sockAddr",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An roSocketAddress."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the address using a BSD bind() call",
                    "returnDescription": "A flag indicating whether the address was successfully set."
                },
                {
                    "name": "GetAddress",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the roSocketAddress object bound to this socket.",
                    "returnDescription": "roSocketAddress Object."
                },
                {
                    "name": "SetSendToAddress",
                    "params": [
                        {
                            "name": "sockAddr",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An roSocketAddress."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the remote address for next message to be sent.",
                    "returnDescription": "A flag indicating whether the address was successfully stored as the first half of underlying BSD sendto() call."
                },
                {
                    "name": "GetSendToAddress",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the roSocketAddress for the remote address of the next message to be sent. This method can also be used to return the remote address on newly accepted sockets.",
                    "returnDescription": "The roSocketAddress for the remote address of the next message to be sent."
                },
                {
                    "name": "GetReceivedFromAddress",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the roSocketAddress for the remote address of the last message received via the [receive()](#receivedata-as-object-startindex-as-integer-length-as-integer-as-integer) method. This method can also be used to return the remote address on newly accepted sockets.",
                    "returnDescription": "The roSocketAddress for the remote address of the last message received."
                },
                {
                    "name": "GetCountRcvBuf",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the number of bytes in the receive buffer.",
                    "returnDescription": "Number of bytes."
                },
                {
                    "name": "GetCountSendBuf",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the number of bytes in the send buffer.",
                    "returnDescription": "Number of bytes."
                },
                {
                    "name": "Status",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Indicates whether the last operation was successful.",
                    "returnDescription": "This method returns 0 if the last operation was successful or an error number if it failed."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roDataGramSocket",
                    "description": "The roDataGramSocket component enables Brightscript apps to send and receive UDP packets",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodatagramsocket.md"
                },
                {
                    "name": "roStreamSocket",
                    "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rostreamsocket.md"
                }
            ]
        },
        "ifSocketAddress": {
            "name": "ifSocketAddress",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketaddress.md",
            "methods": [
                {
                    "name": "SetAddress",
                    "params": [
                        {
                            "name": "address",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string consists of a hostname, optionally followed by a colon and a decimal port number. The hostname may be either dotted quad (such as \"192.168.1.120\") or a DNS name (such as \"roku.com\"). If a name is given, a DNS lookup is performed to convert it to dotted quad. Use IsAddressValid() to determine the result of the DNS lookup. Example: \"192.168.1.120:8888\" or \"roku.com\"."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the IPV4 address.",
                    "returnDescription": "A flag indicating whether the IPV4 address was successfully set."
                },
                {
                    "name": "GetAddress",
                    "params": [],
                    "returnType": "String",
                    "returnDescription": "The IPV4 address."
                },
                {
                    "name": "SetHostName",
                    "params": [
                        {
                            "name": "hostname",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The hostname to be used."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the hostname. The port number is unchanged.",
                    "returnDescription": "A flag indicating whether the hostname was successfully set."
                },
                {
                    "name": "GetHostName",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the hostname.",
                    "returnDescription": "The hostname."
                },
                {
                    "name": "SetPort",
                    "params": [
                        {
                            "name": "port",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The port number to be used."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the port number. The hostname is unchanged.",
                    "returnDescription": "A flag indicating whether the port number was successfully set."
                },
                {
                    "name": "GetPort",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the port number.",
                    "returnDescription": "The port number."
                },
                {
                    "name": "IsAddressValid",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether the component contains a valid IP address.",
                    "returnDescription": "A flag indicating whether the component contains a valid IP address."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSocketAddress",
                    "description": "The roSocketAddress is used by the roStreamSocket and roDataGramSocket components for TCP and UDP traffic respectively",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosocketaddress.md"
                }
            ]
        },
        "ifSocketAsync": {
            "name": "ifSocketAsync",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketasync.md",
            "methods": [
                {
                    "name": "IsReadable",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether underlying select determines non-blocking read is possible.",
                    "returnDescription": "A flag indicating whether underlying select determines non-blocking read is possible."
                },
                {
                    "name": "IsWritable",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether underlying select determines non-blocking write is possible.",
                    "returnDescription": "A flag indicating whether underlying select determines non-blocking write is possible."
                },
                {
                    "name": "IsException",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether underlying select determines non-blocking read of OOB data is possible.",
                    "returnDescription": "A flag indicating whether underlying select determines non-blocking read of OOB data is possible."
                },
                {
                    "name": "NotifyReadable",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether roSocketEvent events are to be sent when the underlying socket becomes readable."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables roSocketEvent events to be sent via the message port when the underlying socket becomes readable."
                },
                {
                    "name": "NotifyWritable",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether roSocketEvent events are to be sent when the underlying socket becomes writable."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables roSocketEvent events to be sent via the message port when the underlying socket becomes writable."
                },
                {
                    "name": "NotifyException",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether roSocketEvent events are to be sent when the underlying socket gets an exception or OOB data."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables roSocketEvent events to be sent via the message port when the underlying socket gets an exception or OOB data."
                },
                {
                    "name": "GetID",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns a unique identifier that can be compared to the value returned by the [roSocketEvent.getSocketID()](/docs/references/brightscript/events/rosocketevent.md#getsocketid-as-integer) method to match the underlying socket to receive the event."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roDataGramSocket",
                    "description": "The roDataGramSocket component enables Brightscript apps to send and receive UDP packets",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodatagramsocket.md"
                },
                {
                    "name": "roStreamSocket",
                    "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rostreamsocket.md"
                }
            ],
            "description": "The ifSocketAsync interface provides asynchronous socket features that utilize a full-featured select loop in the Roku OS that communicates to the application using a BrightScript [roMessagePort](/docs/references/brightscript/components/romessageport.md \"roMessagePort\"). This interface is valid on roStreamSocket and roDataGramSocket objects that were assigned a BrightScript port via SetMessagePort()."
        },
        "ifSocketCastOption": {
            "name": "ifSocketCastOption",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketcastoption.md",
            "methods": [
                {
                    "name": "GetBroadcast",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether broadcast messages may be sent or received.",
                    "returnDescription": "A flag indicating whether broadcast messages may be sent or received."
                },
                {
                    "name": "SetBroadcast",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether broadcast messages may be sent or received."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Enables broadcast messages to be sent or received.",
                    "returnDescription": "A flag indicating whether this operation succeeded."
                },
                {
                    "name": "JoinGroup",
                    "params": [
                        {
                            "name": "ipAddress",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An [roSocketAddress](/docs/references/brightscript/components/rostreamsocket.md \"roSocketAddress\") representing the group to be joined. IPV4 multicast addresses are in the range of 224.0.0.0 through 239.255.255.255."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Joins a specific multicast group.",
                    "returnDescription": "A flag indicating whether this operation was successful."
                },
                {
                    "name": "DropGroup",
                    "params": [
                        {
                            "name": "ipAddress",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An [roSocketAddress](/docs/references/brightscript/components/rostreamsocket.md \"roSocketAddress\") representing the group to leave. IPV4 multicast addresses are in the range of 224.0.0.0 through 239.255.255.255."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Drops out of a specific multicast group.",
                    "returnDescription": "A flag indicating whether this operation was successful."
                },
                {
                    "name": "GetMulticastLoop",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether multicast messages are enabled for local loopback.",
                    "returnDescription": "A flag indicating whether multicast messages are enabled for local loopback. If this flag is true, multicast message sent locally are to be received locally."
                },
                {
                    "name": "SetMulticastLoop",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether local loopback of multicast messages; otherwise do not send or receive broadcast messages."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Enables local loopback of multicast messages.",
                    "returnDescription": "A flag indicating whether this operation was successful."
                },
                {
                    "name": "GetMulticastTTL",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the TTL integer value for multicast messages. This is the number of hops a packet is allowed before a router drops the packet.",
                    "returnDescription": "The multicast messages value."
                },
                {
                    "name": "SetMulticastTTL",
                    "params": [
                        {
                            "name": "ttl",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The number of hops a packet is allowed before a router drops the packet"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the TTL integer value for multicast messages.",
                    "returnDescription": "A flag indicating whether the TTL value was successfully set."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roDataGramSocket",
                    "description": "The roDataGramSocket component enables Brightscript apps to send and receive UDP packets",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodatagramsocket.md"
                }
            ]
        },
        "ifSocketConnection": {
            "name": "ifSocketConnection",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketconnection.md",
            "methods": [
                {
                    "name": "Listen",
                    "params": [
                        {
                            "name": "backlog",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The limit for the queue of incoming connections"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Puts the socket into the listen state.",
                    "returnDescription": "A flag indicating whether listening can be done (generally, if bound address is valid)."
                },
                {
                    "name": "IsListening",
                    "params": [],
                    "returnType": "Boolean",
                    "returnDescription": "A flag indicating whether the [listen()](#listenbacklog-as-integer-as-boolean) method has been successfully called on this socket."
                },
                {
                    "name": "Connect",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Establishes a connection.",
                    "returnDescription": "A flag indicating whether a socket connection has successfully been created. The connection might still not be complete if the socket is non-blocking"
                },
                {
                    "name": "Accept",
                    "params": [],
                    "returnType": "Object",
                    "description": "Accepts incoming requests.",
                    "returnDescription": "An roStreamSocket if the connection is pending; invalid otherwise. Use status to distinguish among success (eSuccess() or isConnected()), not ready (eOK()), and error."
                },
                {
                    "name": "IsConnected",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether a [connect](#connect-as-boolean) or [accept](#accept-as-object) function has been completed on this socket.",
                    "returnDescription": "A flag indicating whether a connection has been established or accepted on this socket."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roStreamSocket",
                    "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rostreamsocket.md"
                }
            ]
        },
        "ifSocketConnectionoption": {
            "name": "ifSocketConnectionoption",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketconnectionoption.md",
            "methods": [
                {
                    "name": "GetKeepAlive",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether keep alive is set. If keep alive is set, occasional no-data packets are sent to keep the connection alive.",
                    "returnDescription": "A flag indicating whether keep alive is set."
                },
                {
                    "name": "SetKeepAlive",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether keep alive is enabled."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sends no-data packets to keep the connection alive.",
                    "returnDescription": "A flag indicating whether keep alive was successfully set."
                },
                {
                    "name": "GetLinger",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the max time in seconds that the socket close() blocks to allow send data to be flushed in synchronous mode.",
                    "returnDescription": "The max time in seconds."
                },
                {
                    "name": "SetLinger",
                    "params": [
                        {
                            "name": "time",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The max time."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the max time in seconds that the socket close() blocks to allow send data to be flushed in synchronous mode.",
                    "returnDescription": "A flag indicating whether the linger was successfully set."
                },
                {
                    "name": "GetMaxSeg",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the max TCP segment size.",
                    "returnDescription": "The segment size."
                },
                {
                    "name": "SetMaxSeg",
                    "params": [
                        {
                            "name": "time",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The max TCP segment size."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the max TCP segment size.",
                    "returnDescription": "A flag indicating whether the max TCP segment size was successfully set."
                },
                {
                    "name": "GetNoDelay",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether the no delay property is enabled on the socket. This means that data is sent as soon as it is available rather than once there is enough data to fill a segment.",
                    "returnDescription": "A flag indicating whether the no delay property is enabled."
                },
                {
                    "name": "SetNoDelay",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether the no delay property is enabled."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Enables the no delay property on the socket. This means that data is sent as soon as it is available rather than once there is enough data to fill a segment.",
                    "returnDescription": "A flag indicating whether the no delay property was successfully set."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roStreamSocket",
                    "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rostreamsocket.md"
                }
            ]
        },
        "ifSocketConnectionstatus": {
            "name": "ifSocketConnectionstatus",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketconnectionstatus.md",
            "methods": [
                {
                    "name": "eConnAborted",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether a connection aborted error (ECONNABORTED) has occurred.",
                    "returnDescription": "A flag indicating whether an ECONNABORTED error has occurred."
                },
                {
                    "name": "eConnRefused",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether a connection refused (ECONNREFUSED) has occurred.",
                    "returnDescription": "A flag indicating whether an ECONNREFUSED error has occurred."
                },
                {
                    "name": "eConnReset",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether a connection reset error (ECONNRESET) has occurred.",
                    "returnDescription": "A flag indicating whether an ECONNRESET error has occurred."
                },
                {
                    "name": "eIsConn",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether an is connected error (EISCONN) has occurred.",
                    "returnDescription": "A flag indicating whether an EISCONN error has occurred."
                },
                {
                    "name": "eNotConn",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether a not connected error (ENOTCONN) has occurred.",
                    "returnDescription": "A flag indicating whether an ENOTCONN error has occurred."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roStreamSocket",
                    "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rostreamsocket.md"
                }
            ]
        },
        "ifSocketOption": {
            "name": "ifSocketOption",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketoption.md",
            "methods": [
                {
                    "name": "GetTTL",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the TTL (Time To Live) value for all IP packets on the socket.",
                    "returnDescription": "The TTL value."
                },
                {
                    "name": "SetTTL",
                    "params": [
                        {
                            "name": "ttl",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The TTL value to be used for IP packets on the socket."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the TTL value for all IP packets on the socket.",
                    "returnDescription": "A flag indicating whether the TTL was successfully set."
                },
                {
                    "name": "GetReuseAddr",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether an address that has been previously assigned can be immediately reassigned.",
                    "returnDescription": "A flag indicating whether the previously assigned address can be reassigned."
                },
                {
                    "name": "SetReuseAddr",
                    "params": [
                        {
                            "name": "reuse",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether the address can be reused."
                        }
                    ],
                    "returnType": "Dynamic",
                    "description": "Enables a previously assigned address to be immediately reassigned.",
                    "returnDescription": "A flag indicating whether the reuse address feature was successfully set."
                },
                {
                    "name": "GetOOBInline",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether Out Of Bounds (OOB) data is read inline with regular data.",
                    "returnDescription": "A flag indicating whether OOB data is read inline with regular data."
                },
                {
                    "name": "SetOOBInline",
                    "params": [
                        {
                            "name": "inline",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether OOB data is read inline."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Enables Out Of Bounds (OOB) data to be read inline with regular data.",
                    "returnDescription": "A flag indicating whether the OOB inline data feature was successfully set."
                },
                {
                    "name": "GetSendBuf",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the current send buffer size.",
                    "returnDescription": "The buffer size."
                },
                {
                    "name": "SetSendBuf",
                    "params": [
                        {
                            "name": "size",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The send buffer size to be used."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the current send buffer size."
                },
                {
                    "name": "GetRcvBuf",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the current receive buffer size.",
                    "returnDescription": "The buffer size."
                },
                {
                    "name": "SetRcvBuf",
                    "params": [
                        {
                            "name": "size",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The receive buffer size to be used."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the current receive buffer size."
                },
                {
                    "name": "GetSendTimeout",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the current send timeout.",
                    "returnDescription": "The number of seconds for the send timeout."
                },
                {
                    "name": "SetSendTimeout",
                    "params": [
                        {
                            "name": "timeout",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The number of seconds for the send timeout."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the current send timeout (in seconds).",
                    "returnDescription": "A flag indicating whether the send timeout was successfully set."
                },
                {
                    "name": "GetReceiveTimeout",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the current receive timeout.",
                    "returnDescription": "The number of seconds for the receive timeout."
                },
                {
                    "name": "SetReceiveTimeout",
                    "params": [
                        {
                            "name": "timeout",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The number of seconds for the receive timeout."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the current receive timeout (in seconds).",
                    "returnDescription": "A flag indicating whether the receive timeout was successfully set."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roDataGramSocket",
                    "description": "The roDataGramSocket component enables Brightscript apps to send and receive UDP packets",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodatagramsocket.md"
                },
                {
                    "name": "roStreamSocket",
                    "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rostreamsocket.md"
                }
            ]
        },
        "ifSocketStatus": {
            "name": "ifSocketStatus",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsocketstatus.md",
            "methods": [
                {
                    "name": "eAgain",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether an EAGAIN error has occurred.",
                    "returnDescription": "A flag indicating whether an EAGAIN error has occurred."
                },
                {
                    "name": "eAlready",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether an EALREADY error has occurred.",
                    "returnDescription": "A flag indicating whether an EALREADY error has occurred."
                },
                {
                    "name": "eBadAddr",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether an EBADADDR error has occurred.",
                    "returnDescription": "A flag indicating whether an EBADADDR error has occurred."
                },
                {
                    "name": "eDestAddrReq",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether an EDESTADDRREQ error has occurred.",
                    "returnDescription": "A flag indicating whether an EDESTADDRREQ error has occurred."
                },
                {
                    "name": "eHostUnreach",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether an EHOSTUNREACH error has occurred.",
                    "returnDescription": "A flag indicating whether an EHOSTUNREACH error has occurred."
                },
                {
                    "name": "eInvalid",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether an EINVALID error has occurred.",
                    "returnDescription": "A flag indicating whether an EINVALID error has occurred."
                },
                {
                    "name": "eInProgress",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether an EINPROGRESS error has occurred.",
                    "returnDescription": "A flag indicating whether an EINPROGRESS error has occurred."
                },
                {
                    "name": "eWouldBlock",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether an EWOULDBLOCK error has occurred.",
                    "returnDescription": "A flag indicating whether an EWOULDBLOCK error has occurred."
                },
                {
                    "name": "eSuccess",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "eOK",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether there is no hard error, but possibly one of the following async conditions: EAGAIN, EALREADY, EINPROGRESS, EWOULDBLOCK.",
                    "returnDescription": "A flag indicating whether an EOK error has occurred."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roDataGramSocket",
                    "description": "The roDataGramSocket component enables Brightscript apps to send and receive UDP packets",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodatagramsocket.md"
                },
                {
                    "name": "roStreamSocket",
                    "description": "The roStreamSocket component enables BrightScript apps to accept and connect to TCP streams as well as send and receive data with them",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rostreamsocket.md"
                }
            ]
        },
        "ifSourceIdentity": {
            "name": "ifSourceIdentity",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsourceidentity.md",
            "methods": [
                {
                    "name": "GetSourceIdentity",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the ID currently associated with this source (event generating) or event object",
                    "returnDescription": "The ID value of the source or event object."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roChannelStoreEvent",
                    "description": "The roChannelStore sends an roChannelStoreEvent in response to a call to any of several Get",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rochannelstoreevent.md"
                },
                {
                    "name": "roUrlEvent",
                    "description": "The roUrlTransfer component sends the roUrlEvent",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rourlevent.md"
                }
            ]
        },
        "ifSpringboardScreen": {
            "name": "ifSpringboardScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifspringboardscreen.md",
            "methods": [
                {
                    "name": "SetContent",
                    "params": [
                        {
                            "name": "content",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "A [content metadata](/docs/developer-program/getting-started/architecture/content-metadata.md \" Content Meta-Data\") object (an [roAssociativeArray](/docs/references/brightscript/components/roassociativearray.md \"roAssociativeArray\")) describing the attributes for the title."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the content to be displayed on the Springboard Screen."
                },
                {
                    "name": "SetDescriptionStyle",
                    "params": [
                        {
                            "name": "style",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The screen style, which may be one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Description"
                },
                {
                    "name": "SetProgressIndicatorEnabled",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to display a progress indicator for audio content."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Displays a progress indicator. This is only applicable if the content type is audio (ContentType == audio)."
                },
                {
                    "name": "SetProgressIndicator",
                    "params": [
                        {
                            "name": "progress",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The amount of progress that has been completed."
                        },
                        {
                            "name": "max",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The maximum size of the operation."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the progress indicator to be progress/max complete."
                },
                {
                    "name": "AddButton",
                    "params": [
                        {
                            "name": "buttonID",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID used to uniquely identify the button instance."
                        },
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title of the button."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds a button to the screen. The buttons are displayed in a standard location on the screen and appear in the order added. When the button is pressed, the script will receive an event from the application containing the ID of the button pressed and allowing the script to perform the desired action for that case.",
                    "returnDescription": "A flag indicating whether the button was successfully added."
                },
                {
                    "name": "AddThumbsUpDownButton",
                    "params": [
                        {
                            "name": "buttonID",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID used to uniquely identify the button instance."
                        },
                        {
                            "name": "thumbRating",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The rating, which determines how the button appears on the screen. This may be one of the following values:"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds a thumbs up/down button to the screen. This is a special type of button that is displayed in the standard location on the screen and appears in the order added sequenced with other buttons. When the button is pressed, the script will receive an event from the application indicating containing the ID of the button pressed and allowing the script to perform the desired action for that case.",
                    "returnDescription": "A flag indicating whether the button was successfully added."
                },
                {
                    "name": "AddThumbsUpDownButtonWithTips",
                    "params": [
                        {
                            "name": "buttonID",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID used to uniquely identify the button instance."
                        },
                        {
                            "name": "thumbRating",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The rating, which determines how the button appears on the screen. This may be one of the following values:"
                        },
                        {
                            "name": "tipText",
                            "isRequired": true,
                            "default": null,
                            "type": "Object"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds a thumbs up/down button with tip text to the screen. This is a special type of button that is displayed in the standard location on the screen and appears in the order added sequenced with other buttons. When the button is pressed, the script will receive an event from the application indicating containing the ID of the button pressed and allowing the script to perform the desired action for that case.",
                    "returnDescription": "A flag indicating whether the button was successfully added."
                },
                {
                    "name": "AddRatingButton",
                    "params": [
                        {
                            "name": "buttonID",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The ID used to uniquely identify the button instance."
                        },
                        {
                            "name": "userRating",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "A value between 1-100 that represents the number of stars that the user rated the content. A value of 1-20 corresponds to 1 star, 21-40 corresponds to 2 stars, etc."
                        },
                        {
                            "name": "aggregateRating",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The total average rating from all users. Half-stars maybe displayed for this rating."
                        }
                    ],
                    "returnType": "Boolean"
                },
                {
                    "name": "SetStaticRatingEnabled",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to display static rating stars."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the display of the static rating stars on or off."
                },
                {
                    "name": "ClearButtons",
                    "params": [],
                    "returnType": "Void",
                    "description": "Clears all of the buttons from the screen and resets the array of buttons back to default with no buttons set."
                },
                {
                    "name": "SetBreadcrumbText",
                    "params": [
                        {
                            "name": "location1",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be used for breadcrumb 1."
                        },
                        {
                            "name": "location2",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be used for breadcrumb 2."
                        }
                    ],
                    "returnType": "Void"
                },
                {
                    "name": "SetBreadcrumbEnabled",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to display the breadcrumb text."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Shows or hides the breadcrumb text in the title area."
                },
                {
                    "name": "PrefetchPoster",
                    "params": [
                        {
                            "name": "sdPosterURL",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The URL of the standard definition poster image."
                        },
                        {
                            "name": "hdPosterURL",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The URL of the high definition poster image."
                        }
                    ],
                    "returnType": "Voidmet",
                    "description": "Allows the screen to pre-fetch the poster images before the screen is displayed as a display optimization technique. This is useful when doing left-right navigation between springboard screens. The pre-fetch is done, loading the image cache and then the screen is displayed."
                },
                {
                    "name": "AllowUpdates",
                    "params": [
                        {
                            "name": "allow",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to refresh the display."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Refreshes the display. When adding multiple buttons to the springboard dynamically, you may want to defer screen updates temporarily to avoid flashing. For example, call AllowUpdates(false), add several buttons, and then call AllowUpdates(true) to refresh the display."
                },
                {
                    "name": "CountButtons",
                    "params": [],
                    "returnType": "Integer"
                },
                {
                    "name": "AllowNavLeft",
                    "params": [
                        {
                            "name": "allow",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "True = Pressing LEFT sends an roSpringboardScreenEvent /isRemoteKeyPressed() event to the screen's message port."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables navigating LEFT on the springboard screen (it is enabled by default)."
                },
                {
                    "name": "AllowNavRight",
                    "params": [
                        {
                            "name": "allow",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "True = Pressing RIGHT sends an roSpringboardScreenEvent /isRemoteKeyPressed() event to the screen's message port."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables navigating RIGHT on the springboard screen (it is enabled by default)."
                },
                {
                    "name": "AllowNavRewind",
                    "params": [
                        {
                            "name": "allow",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "True = Pressing REWIND sends an roSpringboardScreenEvent /isRemoteKeyPressed() event to the screen's message port."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables the rewind remote event to be sent to the script (it is enabled by default)."
                },
                {
                    "name": "AllowNavFastForward",
                    "params": [
                        {
                            "name": "allow",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "True = Pressing FAST FORWARD sends an roSpringboardScreenEvent /isRemoteKeyPressed() event to the screen's message port."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables the fast forward remote event to be sent to the script (it is enabled by default)."
                },
                {
                    "name": "SetPosterStyle",
                    "params": [
                        {
                            "name": "style",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The display style, which enables the override of the screen type to one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the display style for the springboard screen. The default style is dependent on the content type of the poster."
                },
                {
                    "name": "SetAdURL",
                    "params": [
                        {
                            "name": "sdAdURL",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The URL of the standard definition banner ad image (540x60)."
                        },
                        {
                            "name": "hdAdURL",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The URL of the high definition banner ad image (728x90)."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the URL of the banner ad image to be displayed on the springboard screen. This is currently only valid for the \"video\" style of springboard screen."
                },
                {
                    "name": "SetAdSelectable",
                    "params": [
                        {
                            "name": "selectable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether the banner ad is selectable."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the banner ad to be selectable or display-only (by default, it is not selectable)."
                },
                {
                    "name": "SetAdDisplayMode",
                    "params": [
                        {
                            "name": "displayMode",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The scale mode to be used, which may be one of the following values:"
                        }
                    ],
                    "returnType": "Void"
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays or refreshes the screen after initial creation or state changes.",
                    "returnDescription": "A flag indicating whether the screen was refreshed."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void",
                    "description": "Closes the screen and deletes the associated object. This is useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
                },
                {
                    "name": "SetTitle",
                    "params": [
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The title to be displayed on the screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the title for the screen."
                },
                {
                    "name": "UseStableFocus",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Keeps the highlighted button the same on subsequent calls to Show() method. Typically, you will keep this setting disabled, which it is by default. This is because when navigating through springboards (using the left and right arrows), the user will want the top button to be highlighted."
                },
                {
                    "name": "SetDisplayMode",
                    "params": [
                        {
                            "name": "displayMode",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The display mode, which may be one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the mode for displaying slideshow images. This allows images to be either scaled to completely fill the screen (scale-to-fill) or scaled to fit inside the screen (scale-to-fit) while maintaining aspect ratio."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSpringboardScreen",
                    "description": "The Springboard Screen shows detailed information about an individual piece of content and provides options for actions that may be taken on that content",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rospringboardscreen.md"
                }
            ],
            "description": "> This interface is deprecated.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification."
        },
        "ifSprite": {
            "name": "ifSprite",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsprite.md",
            "methods": [
                {
                    "name": "MoveTo",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate to which the sprite is to be moved."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate to which the sprite is to be moved."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Move the sprite to a new set of coordinates."
                },
                {
                    "name": "MoveOffset",
                    "params": [
                        {
                            "name": "xOffset",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The offset from the current x-coordinate to be used."
                        },
                        {
                            "name": "yOffset",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The offset from the current y-coordinate to be used."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Move the sprite to a new position based on offsets to the current position."
                },
                {
                    "name": "GetX",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the x-coordinate of the sprite.",
                    "returnDescription": "The x-coordinate of the sprite."
                },
                {
                    "name": "GetY",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the y-coordinate of the sprite.",
                    "returnDescription": "The y-coordinate of the sprite."
                },
                {
                    "name": "SetZ",
                    "params": [
                        {
                            "name": "z",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The z value to be used for the sprite."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the z value of the sprite. The z value defines the order in which sprites are drawn. Sprites with higher z values are drawn after (in front of) sprites with lower z values. The default z value is 0."
                },
                {
                    "name": "GetZ",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the z value of the sprite.",
                    "returnDescription": "The z value of the sprite."
                },
                {
                    "name": "SetDrawableFlag",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether the sprite is drawable:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets whether this sprite is drawable or just used for collision tests. An undrawable sprite can be used to define a region in the background that needs collision testing. It can also be used as an auxiliary collision region for a more complex sprite defined in another sprite."
                },
                {
                    "name": "GetDrawableFlag",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether the sprite is drawable.",
                    "returnDescription": "A flag indicating whether the sprite is drawable."
                },
                {
                    "name": "SetMemberFlags",
                    "params": [
                        {
                            "name": "flags",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "Enables \"levels\" of collision detection, as only sprites with a member flag bit that matches a collidable flag bit will be checked for collisions. The default value is 1."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Defines the sprite membership though flags. The flags are used with CollidableFlags to define which sprites are allowed to collide."
                },
                {
                    "name": "GetMemberFlags",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the value of member flags variable.",
                    "returnDescription": "The value of the member flag variable."
                },
                {
                    "name": "SetCollidableFlags",
                    "params": [
                        {
                            "name": "flags",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The bits to be set for determining which sprites to check for collisions. The default value is 1."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets bits to determine which sprites will be checked for collisions. The sprites that are checked must have the corresponding bits sets in their MemberFlags."
                },
                {
                    "name": "GetCollidableFlags",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the value of collidable flags variable.",
                    "returnDescription": "The value of the flag variable."
                },
                {
                    "name": "SetRegion",
                    "params": [
                        {
                            "name": "region",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The roRegion object to be used as the region for the sprite."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the region of the sprite to the passed roRegion object. If one already is set, it is replaced."
                },
                {
                    "name": "GetRegion",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an roRegion object that specifies the region of a bitmap that is the sprite's display graphic.",
                    "returnDescription": "roRegion object."
                },
                {
                    "name": "OffsetRegion",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate for the bitmap."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate for the bitmap."
                        },
                        {
                            "name": "width",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The width of the bitmap."
                        },
                        {
                            "name": "height",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The height of the bitmap."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adjusts the part of an [roRegion](/docs/references/brightscript/components/roregion.md \"roRegion\")'s bitmap that is being displayed as the sprite. Wrap is taken into consideration."
                },
                {
                    "name": "SetData",
                    "params": [
                        {
                            "name": "data",
                            "isRequired": true,
                            "default": null,
                            "type": "Dynamic",
                            "description": "The user-defined data to be associated with the sprite."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Associates user-defined data with the sprite. The data can be any type including intrinsic types or objects."
                },
                {
                    "name": "GetData",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Returns any user data associated with the sprite previously set via the [SetData()](#setdatadata-as-dynamic-as-void) method.",
                    "returnDescription": "Any user-defined data associated with the sprite. Returns invalid if there is no user data associated with this sprite."
                },
                {
                    "name": "CheckCollision",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the first [roSprite](/docs/references/brightscript/components/rosprite.md \"roSprite\") that this sprite collides with.",
                    "returnDescription": "An roSprite object. If there are no collisions, this method returns invalid."
                },
                {
                    "name": "CheckMultipleCollisions",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an roArray of all roSprite objects this sprite collides sprites. The collision area is the entire sprite's bounding box, and the sprites must actually be overlapped to detect a collision. That is, if a fast moving sprite moves \"through\" another sprite without actually overlapping when this call is made, no collision is detected.",
                    "returnDescription": "roArray of colliding sprites. If there are no collisions, this method returns invalid."
                },
                {
                    "name": "Remove",
                    "params": [],
                    "returnType": "Void",
                    "description": "Removes the sprite from the managing roComposite object and deletes the sprite."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSprite",
                    "description": "This component is associated with a managing roCompositor object",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosprite.md"
                }
            ]
        },
        "ifString": {
            "name": "ifString",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifstring.md",
            "methods": [
                {
                    "name": "GetString",
                    "params": [],
                    "returnType": "String",
                    "description": "Gets the string value stored in the calling String object.",
                    "returnDescription": "The string value stored in the calling String object."
                },
                {
                    "name": "SetString",
                    "params": [
                        {
                            "name": "value",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string value to be set on the calling String object."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the calling String object to the specified string value."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roChannelStoreEvent",
                    "description": "The roChannelStore sends an roChannelStoreEvent in response to a call to any of several Get",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rochannelstoreevent.md"
                },
                {
                    "name": "roPath",
                    "description": "The roPath component provides developers an easy way to create valid file system paths",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/ropath.md"
                },
                {
                    "name": "roString",
                    "description": "Object equivalent for intrinsic type 'String'",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rostring.md"
                },
                {
                    "name": "roUrlEvent",
                    "description": "The roUrlTransfer component sends the roUrlEvent component",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rourlevent.md"
                }
            ]
        },
        "ifStringOps": {
            "name": "ifStringOps",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifstringops.md",
            "methods": [
                {
                    "name": "SetString",
                    "params": [
                        {
                            "name": "s",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The source string to be used for setting the roString object."
                        },
                        {
                            "name": "len",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The first number of characters in the source string to which the roString object is to be set."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the roString object to the specified first set of characters of the provided string."
                },
                {
                    "name": "AppendString",
                    "params": [
                        {
                            "name": "s",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The source string to be used for appending characters to the roString object."
                        },
                        {
                            "name": "len",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The first number of characters in the source string to append to the roString object."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Appends the specified first set of characters of the provided string to the end of the roString object."
                },
                {
                    "name": "Len",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the number of characters in the string.",
                    "returnDescription": "Number of characters."
                },
                {
                    "name": "Left",
                    "params": [
                        {
                            "name": "len",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The first number of characters in the roString object to be retrieved."
                        }
                    ],
                    "returnType": "String",
                    "description": "Returns a string consisting of the first len characters of the string.",
                    "returnDescription": "The string generated by the method."
                },
                {
                    "name": "Right",
                    "params": [
                        {
                            "name": "len",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The last number of characters in the roString object to be retrieved."
                        }
                    ],
                    "returnType": "String",
                    "description": "Returns a string consisting of the last len characters of the string.",
                    "returnDescription": "The string generated by the method."
                },
                {
                    "name": "Mid",
                    "params": [
                        {
                            "name": "start",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Returns a string consisting of the last characters of the string, starting at the zero-based start\\_index.",
                    "returnDescription": "The string generated by the method."
                },
                {
                    "name": "Mid",
                    "params": [
                        {
                            "name": "start",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Returns a string consisting of num\\_chars characters of the string, starting at the zero-based start\\_index. If there are fewer than num\\_chars in the string after start\\_index, returns the remaining characters in the string."
                },
                {
                    "name": "Instr",
                    "params": [
                        {
                            "name": "substring",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The substring within the roString object to be returned."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Returns the zero-based index of the first occurrence of substring in the string. If the substring does not occur in the string, this method returns -1",
                    "returnDescription": "The index of the first instance of the substring within the string."
                },
                {
                    "name": "Instr",
                    "params": [
                        {
                            "name": "start",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Returns the zero-based index of the first occurrence of substring in the string, starting at the specified zero-based start\\_index. If the substring does not occur in the string after start\\_index, returns -1",
                    "returnDescription": "The index of the first instance of the substring within the string, based on the specified starting position."
                },
                {
                    "name": "Trim",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the string with any leading and trailing whitespace characters (space, TAB, LF, CR, VT, FF, NO-BREAK SPACE, et al) removed.",
                    "returnDescription": "The trimmed string."
                },
                {
                    "name": "ToInt",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the value of the string interpreted as a decimal number.",
                    "returnDescription": "The decimal number representation of the string."
                },
                {
                    "name": "ToFloat",
                    "params": [],
                    "returnType": "Float",
                    "description": "Returns the value of the string interpreted as a floating point number.",
                    "returnDescription": "The floating point number representation of the string."
                },
                {
                    "name": "Tokenize",
                    "params": [
                        {
                            "name": "delim",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "A set of characters which are treated as delimiters. A sequence of two or more contiguous delimiters in the string is treated as a single delimiter."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Splits the string into separate substrings separated by a single delimiter character.",
                    "returnDescription": "An roList containing the each of the substrings. The delimiters are not returned."
                },
                {
                    "name": "Split",
                    "params": [
                        {
                            "name": "separator",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The delimiter to be used to parse the roString object."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Splits the input string using the separator string as a delimiter. An empty separator string indicates to split the string by character.",
                    "returnDescription": "An array of the split token strings (not including the delimiter)."
                },
                {
                    "name": "GetEntityEncode",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the string with the following characters replaced with their corresponding HTML entity encoding sequences below:",
                    "returnDescription": "The encoded string."
                },
                {
                    "name": "Escape",
                    "params": [],
                    "returnType": "String",
                    "description": "URL encodes the specified string per [RFC 3986](https://www.ietf.org/rfc/rfc3986.txt \"RFC 3986\") and returns the encoded string. Non-ASCII characters are encoded as UTF-8 escape sequences. This functionality is essentially the same as roUrlTransfer.Escape, but without the overhead of creating a roUrlTransfer object.",
                    "returnDescription": "The URL-encoded version of the specified string."
                },
                {
                    "name": "Unescape",
                    "params": [],
                    "returnType": "String",
                    "description": "URL decodes the specified string per [RFC 3986](https://www.ietf.org/rfc/rfc3986.txt \"RFC 3986\") and returns the decoded string.",
                    "returnDescription": "The URL-decoded string."
                },
                {
                    "name": "EncodeUri",
                    "params": [],
                    "returnType": "String",
                    "description": "Encodes the specified string with escape sequences for reserved Uniform Resource Identifier (URI) characters. Non-ASCII characters are encoded as UTF-8 escape sequences.",
                    "returnDescription": "The provided string encoded as a Uniform Resource Identifier (URI)."
                },
                {
                    "name": "DecodeUri",
                    "params": [],
                    "returnType": "String",
                    "description": "Decodes the specified string with escape sequences for reserved Uniform Resource Identifier (URI) characters. If the escaped string includes invalid escape sequences, the decode will fail and an empty string will be returned.",
                    "returnDescription": "An unencoded version of the provided encoded Uniform Resource Identifier (URI)."
                },
                {
                    "name": "EncodeUriComponent",
                    "params": [],
                    "returnType": "String",
                    "description": "Encodes the specified string with escape sequences for reserved Uniform Resource Identifier (URI) component characters.",
                    "returnDescription": "The provided string encoded as a Uniform Resource Identifier (URI)."
                },
                {
                    "name": "DecodeUriComponent",
                    "params": [],
                    "returnType": "String",
                    "description": "Decodes the specified string with escape sequences for reserved Uniform Resource Identifier (URI) component characters. If the escaped string includes invalid escape sequences, the decode will fail and an empty string will be returned.",
                    "returnDescription": "An unencoded version of the provided encoded Uniform Resource Identifier (URI)."
                },
                {
                    "name": "StartsWith",
                    "params": [
                        {
                            "name": "matchString",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "Boolean",
                    "returnDescription": "A flag indicating whether a matching substring was found."
                },
                {
                    "name": "StartsWith",
                    "params": [
                        {
                            "name": "matchString",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        },
                        {
                            "name": "matchPos",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer"
                        }
                    ],
                    "returnType": "Boolean",
                    "returnDescription": "A flag indicating whether a matching substring was found."
                },
                {
                    "name": "EndsWith",
                    "params": [
                        {
                            "name": "matchString",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "Boolean",
                    "returnDescription": "A flag indicating whether a matching substring was found."
                },
                {
                    "name": "EndsWith",
                    "params": [
                        {
                            "name": "matchString",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        },
                        {
                            "name": "length",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer"
                        }
                    ],
                    "returnType": "Boolean",
                    "returnDescription": "A flag indicating whether a matching substring was found."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roString",
                    "description": "Object equivalent for intrinsic type 'String'",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rostring.md"
                }
            ]
        },
        "ifSystemLog": {
            "name": "ifSystemLog",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifsystemlog.md",
            "methods": [
                {
                    "name": "EnableType",
                    "params": [
                        {
                            "name": "logType",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The logType to be enabled, which may be one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables log message of type logType. When a log type is enabled, system log messages of that type are sent to the message port that was set using SetMessagePort()."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSystemLog",
                    "description": "The roSystemLog component enables the application to receive events from the Roku Streaming Player that are intended for reporting errors and trends, rather than trigger a response to a user action",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosystemlog.md"
                }
            ]
        },
        "ifTextScreen": {
            "name": "ifTextScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftextscreen.md",
            "methods": [
                {
                    "name": "SetTitle",
                    "params": [
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be displayed in the overhang."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the title for the screen, which appears in the overhang"
                },
                {
                    "name": "SetBreadcrumbText",
                    "params": [
                        {
                            "name": "location1",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The previous location in the application hierarchy."
                        },
                        {
                            "name": "location2",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The current location in the application hierarchy."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Breadcrumbs allow the application to display a two-part navigational title that shows the previous and current locations in the application hierarchy (e.g. TV – Friends)."
                },
                {
                    "name": "SetHeaderText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text for the header that will be displayed above the main text body"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds a string of bold, high visibility text to the screen as a header to appear above the main body of text. Multiple calls to this method are ignored"
                },
                {
                    "name": "SetText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text for the main screen."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the main text of the screen. The roTextScreen handles all text formatting and justification. Multiple calls to this method are ignored"
                },
                {
                    "name": "AddText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be appended to the main text on the screen"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds text to the main text of the screen. The text is appended to the end of any existing text"
                },
                {
                    "name": "AddButton",
                    "params": [
                        {
                            "name": "id",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The unique ID to be assigned to the button instance"
                        },
                        {
                            "name": "title",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be used to identify the button instance"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Adds a button to the screen, which is displayed in a standard location on the screen and appears in the order added. When the button is pressed, the script will receive an event from the application containing the ID of the button pressed and allowing the script to perform the desired action for that case.",
                    "returnDescription": "A flag indicating whether the button was successfully added."
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays or refreshes the screen after initial creation or state changes.",
                    "returnDescription": "A flag indicating whether the screen was successfully refreshed."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void",
                    "description": "Closes the screen and deletes the associated object. This is useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roTextScreen",
                    "description": "roTextScreen provides a way of displaying large amounts of scrollable text",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotextscreen.md"
                }
            ],
            "description": "> This component is no longer updated and will be deprecated on January 1st, 2019.Beginning July 1st, 2017, any new channels using this component will be rejected during certification.Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification."
        },
        "ifTextToSpeech": {
            "name": "ifTextToSpeech",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftexttospeech.md",
            "methods": [
                {
                    "name": "Say",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The UTF8 text to be spoken."
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Returns an ID for the spoken string to notify observer callbacks about a specific spoken string.",
                    "returnDescription": "The ID for the spoken string."
                },
                {
                    "name": "Silence",
                    "params": [
                        {
                            "name": "duration",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The amount of time to suppress application background sound"
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Causes text to speech to continue to suppress any application background sound for the amount of time specified by `duration`.",
                    "returnDescription": "The duration for the speech suppression."
                },
                {
                    "name": "Flush",
                    "params": [],
                    "returnType": "Void",
                    "description": "Interrupts and stops any current text to speech spoken string, to be used when the channel does not want to the text to speech to continue."
                },
                {
                    "name": "IsEnabled",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Checks whether text-to-speech is enabled. Text-to-speech may be enabled or disabled for various technical reasons (for example, on some platforms, text-to-speech may only be enabled once in connected mode). This is not affected by the state of any of its clients. In particular, it does not depend on whether a CVAA compliant accessibility feature is enabled or not.",
                    "returnDescription": "A flag indicating whether text-to-speech is enabled."
                },
                {
                    "name": "GetAvailableLanguages",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an array containing the current list of languages available for text-to-speech.",
                    "returnDescription": "A list of languages."
                },
                {
                    "name": "SetLanguage",
                    "params": [
                        {
                            "name": "name",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text-to-speech language to be used."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the language specified by `name` for text to speech, from one of the available languages returned by the [GetAvailableLanguages()](#getavailablelanguages-as-object) method."
                },
                {
                    "name": "GetLanguage",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the name of the currently-selected text-to-speech language.",
                    "returnDescription": "The language name."
                },
                {
                    "name": "GetAvailableVoices",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns an array containing the current list of voices available for text-to-speech.",
                    "returnDescription": "A list of voices."
                },
                {
                    "name": "SetVoice",
                    "params": [
                        {
                            "name": "name",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The available text-to-speech voice to be used"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the voice specified by name for text to speech, from one of the available voices returned by the [GetAvailableVoices()](#getavailablevoices-as-object) method."
                },
                {
                    "name": "GetVoice",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the currently-selected voice.",
                    "returnDescription": "The selected voice."
                },
                {
                    "name": "GetVolume",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the volume at which text is spoken. The value ranges from 0 for muted to 1000 for the highest volume. The default value is 1000.",
                    "returnDescription": "The volume."
                },
                {
                    "name": "SetVolume",
                    "params": [
                        {
                            "name": "volume",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The volume at which text is spoken. The value ranges from 0 for muted to 1000 for the highest volume. The default value is 1000."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the volume at which text is spoken."
                },
                {
                    "name": "GetRate",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the rate at which text is spoken. The value ranges from -40 to 200 with a default value of 0.",
                    "returnDescription": "The rate."
                },
                {
                    "name": "SetRate",
                    "params": [
                        {
                            "name": "rate",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The rate at which text is to be spoken. The possible values range from -40 to 200."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the rate at which text is spoken."
                },
                {
                    "name": "GetPitch",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the pitch at which text is spoken. The possible values range from -60 to +60.",
                    "returnDescription": "The pitch."
                },
                {
                    "name": "SetPitch",
                    "params": [
                        {
                            "name": "pitch",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The pitch at which text is to be spoken. The possible values range from -60 to +60."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the pitch at which text is spoken."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roTextToSpeech",
                    "description": "The roTextToSpeech component provides text to speech capabilities to applications",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotexttospeech.md"
                }
            ],
            "description": "> Please note this component is only available on the following devices: Roku Streaming Stick (3600X), Roku Express (3700X) and Express+ (3710X), Roku Premiere (4620X) and Premiere+ (4630X), Roku Ultra (4640X), and any Roku TV running Roku OS version 7.2 and later."
        },
        "ifTextureManager": {
            "name": "ifTextureManager",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftexturemanager.md",
            "methods": [
                {
                    "name": "RequestTexture",
                    "params": [
                        {
                            "name": "req",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The roTextureRequest"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Makes a request for an roBitmap with the attributes specified by the roTextureRequest. The roTextureManager will pass an roTextureRequestEvent to the message port when completed."
                },
                {
                    "name": "CancelRequest",
                    "params": [
                        {
                            "name": "req",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The previoulsy passed roTextureRequest to be cancelled."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Cancels the request specified by req, which should be an roTextureRequest previously passed to the [RequestTexture()](#requesttexturereq-as-object-as-void) method."
                },
                {
                    "name": "UnloadBitmap",
                    "params": [
                        {
                            "name": "url",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The URL of the bitmap to be removed from the roTextureManager"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Removes a bitmap from the roTextureManager with the specified URL."
                },
                {
                    "name": "Cleanup",
                    "params": [],
                    "returnType": "Void",
                    "description": "Removes all bitmaps from the roTextureManager."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roTextureManager",
                    "description": "The Texture Manager provides a set of API's for managing an roBitmap cache",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotexturemanager.md"
                }
            ]
        },
        "ifTextureRequest": {
            "name": "ifTextureRequest",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftexturerequest.md",
            "methods": [
                {
                    "name": "GetId",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns a unique id for the request."
                },
                {
                    "name": "GetState",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the state of the request.",
                    "returnDescription": "The state value, which may be one of the following:"
                },
                {
                    "name": "SetAsync",
                    "params": [
                        {
                            "name": "async",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "The method used to send the request: asynchronous (true) or synchronous (false)."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the request to be either asynchronous (true) or synchronous (false). The default is asynchronous"
                },
                {
                    "name": "SetSize",
                    "params": [
                        {
                            "name": "width",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The width of the roBitmap."
                        },
                        {
                            "name": "height",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The height of the roBitmap."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the desired size of the roBitmap. The default is to return a bitmap in its native size."
                },
                {
                    "name": "SetScaleMode",
                    "params": [
                        {
                            "name": "mode",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The scaling mode to be used, which may be one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the scaling mode to be used."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roTextureRequest",
                    "description": "An roTextureRequest is used to make requests to the roTextureManager",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotexturerequest.md"
                }
            ]
        },
        "ifTimeSpan": {
            "name": "ifTimeSpan",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftimespan.md",
            "methods": [
                {
                    "name": "Mark",
                    "params": [],
                    "returnType": "Void",
                    "description": "Sets the \"Mark\" point to the current time. The Mark point is also automatically set to the current time when an roTimespan object is created."
                },
                {
                    "name": "TotalMilliseconds",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the total number of milliseconds from the \"Mark\" point to the current time.",
                    "returnDescription": "The number of milliseconds."
                },
                {
                    "name": "TotalSeconds",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the total number of seconds from the \"Mark\" point to the current time.",
                    "returnDescription": "The number of seconds."
                },
                {
                    "name": "GetSecondsToISO8601Date",
                    "params": [
                        {
                            "name": "date",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Parses the ISO8601 date (e.g. 2008-11-29T14:54:02.171) and returns the number of seconds from now (not the \"Mark\" point) until the specified date/time.",
                    "returnDescription": "The number of seconds."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roTimespan",
                    "description": "The Timespan object provides an interface to a simple timer for tracking the duration of activities",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotimespan.md"
                }
            ]
        },
        "ifToStr": {
            "name": "ifToStr",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/iftostr.md",
            "methods": [
                {
                    "name": "ToStr",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the value as a string.",
                    "returnDescription": "The string."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roBoolean",
                    "description": "Object equivalent for intrinsic type Boolean",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roboolean.md"
                },
                {
                    "name": "roDouble",
                    "description": "Object equivalent for intrinsic type 'Double'",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodouble.md"
                },
                {
                    "name": "roFloat",
                    "description": "Object equivalent for intrinsic type 'Float'",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rofloat.md"
                },
                {
                    "name": "roFunction",
                    "description": "Object equivalent for intrinsic type Function",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rofunction.md"
                },
                {
                    "name": "roInt",
                    "description": "Object equivalent for intrinsic type Integer",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roint.md"
                },
                {
                    "name": "roInvalid",
                    "description": "Object equivalent for intrinsic type 'Invalid'",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roinvalid.md"
                },
                {
                    "name": "roLongInteger",
                    "description": "Object equivalent for intrinsic type LongInteger",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolonginteger.md"
                },
                {
                    "name": "roString",
                    "description": "Object equivalent for intrinsic type 'String'",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rostring.md"
                }
            ]
        },
        "ifUrlTransfer": {
            "name": "ifUrlTransfer",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifurltransfer.md",
            "methods": [
                {
                    "name": "GetIdentity",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns a unique number for this object that can be used to identify whether events originated from this object. The value can be any arbitrary value as assigned by the Roku OS, and should only be used for comparison purposes. For example, the value should not be used as an array index. For use as a look-up key, one option would be to use `GetIdentity().ToStr()` as an associative array key.",
                    "returnDescription": "A unique number for the object."
                },
                {
                    "name": "SetUrl",
                    "params": [
                        {
                            "name": "url",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The URL to be used for the transfer request"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the URL to use for the transfer request."
                },
                {
                    "name": "GetUrl",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the current URL.",
                    "returnDescription": "The URL."
                },
                {
                    "name": "SetRequest",
                    "params": [
                        {
                            "name": "req",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The request method to be used"
                        }
                    ],
                    "description": "Changes the request method from the normal GET, HEAD or POST to the value passed as a string."
                },
                {
                    "name": "GetRequest",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the current request method.",
                    "returnDescription": "The request method."
                },
                {
                    "name": "GetToString",
                    "params": [],
                    "returnType": "String",
                    "description": "Connects to the remote service as specified in the URL and returns the response body as a string. This function waits for the transfer to complete and it may block for a long time. This calls discards the headers and response codes. If that information is required, use the [AsyncGetToString()](#asyncgettostring-as-boolean) method.",
                    "returnDescription": "The response body."
                },
                {
                    "name": "GetToFile",
                    "params": [
                        {
                            "name": "filename",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The file on the Roku device's filesystem to which the response body is to be written"
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Connect to the remote service as specified in the URL and write the response body to a file on the Roku device's filesystem. This function does not return until the exchange is complete and may block for a long time. The HTTP response code from the server is returned. It is not possible to access any of the response headers. If this information is required use the [AsyncGetToFile()](#asyncgettofilefilename-as-string-as-boolean) method instead.",
                    "returnDescription": "The HTTP response code."
                },
                {
                    "name": "AsyncGetToString",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Starts a GET request to a server, but does not wait for the transfer to complete.",
                    "returnDescription": "A flag indicating whether the request was issued."
                },
                {
                    "name": "AsyncGetToFile",
                    "params": [
                        {
                            "name": "filename",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The file on the Roku device's filesystem to which the response body is to be written"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Starts a transfer without waiting for it to complete, similar to the [AsyncGetToString()](#asyncgettostring-as-boolean) method. However, the response body will be written to a file on the device's filesystem instead of being returned in a String object.",
                    "returnDescription": "A flag indicating whether the request was issued."
                },
                {
                    "name": "Head",
                    "params": [],
                    "returnType": "Dynamic",
                    "description": "Synchronously performs an HTTP HEAD request and returns an [roUrlTransfer](/docs/references/brightscript/interfaces/ifurltransfer.md \"roUrlTransfer\") object.",
                    "returnDescription": "An [roUrlTransfer](/docs/references/brightscript/interfaces/ifurltransfer.md \"roUrlTransfer\") object. If a catastrophic failure occurs (for example, an asynchronous operation is already active), invalid is returned"
                },
                {
                    "name": "AsyncHead",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Begins an HTTP HEAD request without waiting for it to complete. When the HEAD completes, an [roUrlEvent](/docs/references/brightscript/events/rourlevent.md \"roUrlEvent\") will be sent to the message port associated with the object. If false is returned then the request could not be issued and no events will be delivered.",
                    "returnDescription": "A flag indicating whether the request was issued."
                },
                {
                    "name": "PostFromString",
                    "params": [
                        {
                            "name": "request",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The POST request to be sent"
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Uses the HTTP POST method to send the supplied string to the current URL. The HTTP response code is returned. Any response body is discarded",
                    "returnDescription": "The HTTP response code."
                },
                {
                    "name": "PostFromFile",
                    "params": [
                        {
                            "name": "filename",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The file containing the POST request to be sent"
                        }
                    ],
                    "returnType": "Integer",
                    "description": "Uses the HTTP POST method to send the contents of the specified file to the current URL. The HTTP response code is returned. Any response body is discarded",
                    "returnDescription": "The HTTP response code."
                },
                {
                    "name": "AsyncPostFromString",
                    "params": [
                        {
                            "name": "request",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The POST request to be sent asynchronously"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Uses the HTTP POST method to send the supplied string to the current URL. When the POST request completes, an [roUrlTransfer](/docs/references/brightscript/interfaces/ifurltransfer.md \"roUrlTransfer\") will be sent to the message port associated with the object. If false is returned then the request could not be issued and no events will be delivered.",
                    "returnDescription": "A flag indicating whether the request was issued."
                },
                {
                    "name": "AsyncPostFromFile",
                    "params": [
                        {
                            "name": "filename",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The file containing the POST request to be sent asynchronously"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Uses the HTTP POST method to send the contents of the specified file to the current URL. When the POST request completes, an [roUrlTransfer](/docs/references/brightscript/interfaces/ifurltransfer.md \"roUrlTransfer\") will be sent to the message port associated with the object. If false is returned then the request could not be issued and no events will be delivered.",
                    "returnDescription": "A flag indicating whether the request was issued."
                },
                {
                    "name": "AsyncPostFromFileToFile",
                    "params": [
                        {
                            "name": "fromFile",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The file containing the POST request to be sent asynchronously"
                        },
                        {
                            "name": "toFile",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The file on the Roku device's filesystem to which the response body is to be written"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Uses the HTTP POST method to send the contents of the specified file (fromFile) to the current URL. When the POST request completes successfully, an [roUrlTransfer](/docs/references/brightscript/interfaces/ifurltransfer.md \"roUrlTransfer\") will be sent to the message port associated with the object. If false is returned then the request could not be issued and no events will be delivered. This function is the same as AsyncPostFromFile, except that the HTTP response is written to the file specified by the toFile parameter.",
                    "returnDescription": "A flag indicating whether the request was issued."
                },
                {
                    "name": "AsyncCancel",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "RetainBodyOnError",
                    "params": [
                        {
                            "name": "retain",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to return the response body when there is an HTTP error response code."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Returns the body of the response even if the HTTP status code indicates that an error occurred.",
                    "returnDescription": "A flag indicating whether the operation was successful."
                },
                {
                    "name": "SetUserAndPassword",
                    "params": [
                        {
                            "name": "user",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The user name to be authenticated"
                        },
                        {
                            "name": "password",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The password to be authenticated"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Enables HTTP authentication using the specified user name and password.",
                    "returnDescription": "A flag indicating whether the operation was successful."
                },
                {
                    "name": "SetMinimumTransferRate",
                    "params": [
                        {
                            "name": "bytes",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Terminates the transfer automatically if the transfer rate drops below the specified rate (bytes\\_per\\_second) over a specific interval (period\\_in\\_seconds).",
                    "returnDescription": "A flag indicating whether the operation was successful."
                },
                {
                    "name": "GetFailureReason",
                    "params": [],
                    "returnType": "String",
                    "description": "If any of the `roUrlEvent` functions indicate failure then this function may provide more information regarding the failure.",
                    "returnDescription": "Failure reason."
                },
                {
                    "name": "EnableEncodings",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Enables gzip encoding of transfers",
                    "returnDescription": "A flag indicating whether this operation was successful."
                },
                {
                    "name": "Escape",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string to be URL-encoded"
                        }
                    ],
                    "returnType": "String",
                    "description": "URL encodes the specified string per [RFC 3986](https://www.ietf.org/rfc/rfc3986.txt \"RFC 3986\") and return the encoded string",
                    "returnDescription": "The URL-encoded string."
                },
                {
                    "name": "Unescape",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The string to be URL-decoded"
                        }
                    ],
                    "returnType": "String",
                    "description": "Decodes the specified string per [RFC 3986](https://www.ietf.org/rfc/rfc3986.txt \"RFC 3986\") and returns the unencoded string.",
                    "returnDescription": "The decoded string."
                },
                {
                    "name": "UrlEncode",
                    "params": [
                        {
                            "name": "url",
                            "isRequired": true,
                            "default": null,
                            "type": "String"
                        }
                    ],
                    "returnType": "String",
                    "description": "URL encodes the specified string per RFC 3986 and return the encoded string",
                    "returnDescription": "The encoded string."
                },
                {
                    "name": "EnableResume",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to automatically resume `AsyncGetToFile` and `GetToFile` requests"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Enables automatic resumption of `AsyncGetToFile` and `GetToFile` requests",
                    "returnDescription": "A flag indicating whether the operation was successful."
                },
                {
                    "name": "EnablePeerVerification",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to verify a certificate has a chain-of-trust up to a valid root certificate"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Verifies that the certificate has a chain of trust up to a valid root certificate using CURLOPT\\_SSL\\_VERIFYPEER.",
                    "returnDescription": "A flag indicating whether the operation was successful."
                },
                {
                    "name": "EnableHostVerification",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to verify a certificate belonging to the host."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Verifies that the certificate belongs to the host using CURLOPT\\_SSL\\_VERIFYHOST.",
                    "returnDescription": "A flag indicating whether the operation was successful."
                },
                {
                    "name": "EnableFreshConnection",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying whether to enable fresh connections."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Enables a fresh connection using CURLOPT\\_FRESH\\_CONNECT.",
                    "returnDescription": "A flag indicating whether the operation was successful."
                },
                {
                    "name": "SetHttpVersion",
                    "params": [
                        {
                            "name": "version",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The http version to be used (for example, \"http2\" for HTTP/2). `\"AUTO\"` is the default value, which causes the roUrlTransfer connection to auto-negotiate HTTP/1.x or HTTP/2, depending on the agreement reached by client and server."
                        }
                    ],
                    "returnType": "Void",
                    "description": "An optional function that enables HTTP/2 support. If version is set to `\"http2\"`, HTTP/2 will be used for all underlying transfers."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roUrlTransfer",
                    "description": "A roUrlTransfer object transfers data to or from remote servers specified by URLs. It can perform mutual authentication with a web server",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rourltransfer.md"
                }
            ]
        },
        "ifVideoPlayer": {
            "name": "ifVideoPlayer",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifvideoplayer.md",
            "methods": [
                {
                    "name": "SetContentList",
                    "params": [
                        {
                            "name": "contentList",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An [roArray](/docs/references/brightscript/components/roarray.md \"roArray\") of [roAssociativeArray](/docs/references/brightscript/components/roassociativearray.md \"roAssociativeArray\") ([Content Meta-Data](/docs/developer-program/getting-started/architecture/content-metadata.md \" Content Meta-Data\") objects) representing the information for each stream to be played."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the content to be played by the roVideoPlayer."
                },
                {
                    "name": "AddContent",
                    "params": [
                        {
                            "name": "contentItem",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The [content metadata](/docs/developer-program/getting-started/architecture/content-metadata.md \" Content Meta-Data\") item to be added to the content list."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds a new [Content Meta-Data](/docs/developer-program/getting-started/architecture/content-metadata.md \" Content Meta-Data\") item to the end of the content list for the roVideoPlayer. roVideoPlayer playback buffers on each Content item transition."
                },
                {
                    "name": "ClearContent",
                    "params": [],
                    "returnType": "Void",
                    "description": "Clears all content from the roVideoPlayer. If the player is currently playing, it stops. Next, the current player position is reset so the next time the [Play()](#play-as-boolean) method is called, playback starts at the first item of the content list (unless the [Seek()](#seekoffsetms-as-integer-as-boolean) method is called prior to Play())."
                },
                {
                    "name": "PreBuffer",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Begins downloading and buffering of a video that may be selected by a user. This method can be used to reduce buffering delays after a user has selected a video for playback. It is typically called when the user is in the roSpringboardScreen (or equivalent), anticipating that the user will select a video on the springboard screen for download.",
                    "returnDescription": "A flag indicating whether the operation was successful."
                },
                {
                    "name": "Play",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Puts the roVideoPlayer object into play mode starting at the beginning of the content list. This will stop any currently playing Content List.",
                    "returnDescription": "A flag indicating whether the operation was successful."
                },
                {
                    "name": "Stop",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Stops playback and resets the seek position; keeps the player’s current position unchanged.",
                    "returnDescription": "A flag indicating whether the operation was successful."
                },
                {
                    "name": "Pause",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Puts the roVideoPlayer object into pause mode. If the player is already in pause mode, this will generate an error.",
                    "returnDescription": "A flag indicating whether the operation was successful."
                },
                {
                    "name": "Resume",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Puts the roVideoPlayer object into play mode starting from the pause point. This method must be called when the roVideoPlayer object is in pause mode; otherwise, it will generate an error.",
                    "returnDescription": "A flag indicating whether the operation was successful."
                },
                {
                    "name": "SetLoop",
                    "params": [
                        {
                            "name": "loop",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Enables the automatic replaying of the content list."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Automatically replays the content list. This method buffers on every loop to the beginning of the content list."
                },
                {
                    "name": "SetNext",
                    "params": [
                        {
                            "name": "item",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The unique ID of the content item to be played next."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the next item in the Content List to be played."
                },
                {
                    "name": "Seek",
                    "params": [
                        {
                            "name": "offsetMs",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The number of milliseconds to offset the playback of the current content item."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the start point of playback for the current video to a specific offset."
                },
                {
                    "name": "SetPositionNotificationPeriod",
                    "params": [
                        {
                            "name": "period",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The notification period for receiving playback position events in seconds. Notification events sent to the script specify the position in seconds relative to the beginning of the stream. If the value is 0, position notifications are never sent. The default value is 0."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the interval to receive playback position events from the roVideoPlayer."
                },
                {
                    "name": "SetCGMS",
                    "params": [
                        {
                            "name": "level",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The level to which CGMS is set. This may be one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets CGMS (Copy Guard Management System) on analog outputs to the desired level."
                },
                {
                    "name": "SetDestinationRect",
                    "params": [
                        {
                            "name": "rect",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The parameters of the target display window, which include the x and y coordinates, width, and height {x:Integer, y:Integer, w:Integer, h:Integer}"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the target display window for the video."
                },
                {
                    "name": "SetDestinationRect",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x coordinate of the target display window."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y coordinate of the target display window."
                        },
                        {
                            "name": "w",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The width of the target display window."
                        },
                        {
                            "name": "h",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The height coordinate of the target display window."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the target display window for the video. This is similar to the [SetDestinationRect()](#setdestinationrectrect-as-object-as-void) function except that the values are specified as separate parameters."
                },
                {
                    "name": "SetMaxVideoDecodeResolution",
                    "params": [
                        {
                            "name": "width",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The maximum height required by your video."
                        },
                        {
                            "name": "height",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The maximum width required by your video."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the max resolution required by your video."
                },
                {
                    "name": "GetPlaybackDuration",
                    "params": [],
                    "returnType": "Integer",
                    "description": "Returns the duration of the video, in seconds. This information may not be available until after the video starts playing.",
                    "returnDescription": "The duration of the video. A value of 0 is returned if the duration is unknown."
                },
                {
                    "name": "GetAudioTracks",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the audio tracks contained in the current stream.",
                    "returnDescription": "An roArray, where each element in the array represents a single audio track that contains the following attributes: ${getaudiotracksvalues}"
                },
                {
                    "name": "ChangeAudioTrack",
                    "params": [
                        {
                            "name": "trackID",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The audio track identifier returned by GetAudioTracks()."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Changes the currently playing audio track. For content with multiple audio tracks, the current track can be selected programmatically using this function."
                },
                {
                    "name": "SetTimedMetaDataForKeys",
                    "params": [
                        {
                            "name": "keys",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Specifies the timedMetaData keys that the BrightScript channel is interested in receiving from the timedMetaData event."
                },
                {
                    "name": "GetCaptionRenderer",
                    "params": [],
                    "returnType": "Object",
                    "description": "This method returns the [roCaptionRenderer](/docs/references/brightscript/components/rocaptionrenderer.md \"roCaptionRenderer\") instance associated with this roVideoPlayer.",
                    "returnDescription": "The [roCaptionRenderer](/docs/references/brightscript/components/rocaptionrenderer.md \"roCaptionRenderer\") instance associated with this roVideoPlayer."
                },
                {
                    "name": "SetMacrovisionLevel",
                    "params": [
                        {
                            "name": "level",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer"
                        }
                    ],
                    "returnType": "Void"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roVideoPlayer",
                    "description": "The roVideoPlayer component implements a video player with more programmatic control, but less user control than the roVideoScreen component",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rovideoplayer.md"
                }
            ]
        },
        "ifVideoScreen": {
            "name": "ifVideoScreen",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifvideoscreen.md",
            "methods": [
                {
                    "name": "SetContent",
                    "params": [
                        {
                            "name": "content",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "An [roAssociativeArray](/docs/references/brightscript/components/roassociativearray.md \"roAssociativeArray\") describing the attributes ([Content Meta-Data](/docs/developer-program/getting-started/architecture/content-metadata.md \" Content Meta-Data\")) for the title."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the content to be played in the [roVideoScreen](/docs/references/brightscript/components/rovideoscreen.md \"roVideoScreen\"). You can call this method while playing video, and it will use the new data (release date, length, and title) when showing the program info in the Heads Up Display (HUD)."
                },
                {
                    "name": "SetPositionNotificationPeriod",
                    "params": [
                        {
                            "name": "period",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The notification period for receiving playback position events in seconds. Notification events sent to the script specify the position in seconds relative to the beginning of the stream. If the value is 0, position notifications are never sent. The default value is 0."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the interval for receiving playback position events from the roVideoScreen object."
                },
                {
                    "name": "SetPreviewMode",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "A flag specifying to turn preview mode on (true) or off (false)."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets preview mode on/off. In preview mode, trick play operations (fast forward and rewind) are disabled."
                },
                {
                    "name": "SetCGMS",
                    "params": [
                        {
                            "name": "level",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The level to which CGMS is set. This may be one of the following values:"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets CGMS (Copy Guard Management System) on analog outputs to the desired level."
                },
                {
                    "name": "Show",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Displays/refreshes the screen after creation or state changes.",
                    "returnDescription": "A flag indicating whether the screen was successfully refreshed."
                },
                {
                    "name": "Close",
                    "params": [],
                    "returnType": "Void"
                },
                {
                    "name": "Pause",
                    "params": [],
                    "returnType": "Void",
                    "description": "Pauses the video."
                },
                {
                    "name": "Resume",
                    "params": [],
                    "returnType": "Void",
                    "description": "Resumes the video."
                },
                {
                    "name": "PreBuffer",
                    "params": [],
                    "returnType": "Boolean",
                    "description": "Begins downloading and buffering of a video that may be selected by a user. This can be used to reduce buffering delays after a user has selected a video for playback. A typical use would be to call PreBuffer() when the user is in the roSpringboardScreen (or equivalent), anticipating that the user will select a video on the springboard screen for download.",
                    "returnDescription": "A flag indicating whether the operation was successful."
                },
                {
                    "name": "Seek",
                    "params": [
                        {
                            "name": "milliSeconds",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The number of milliseconds to offset the playback of the current content item."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Sets the start point of playback for the current video to a specific offset.",
                    "returnDescription": "A flag indicating whether the seek operation was successful."
                },
                {
                    "name": "SetDestinationRect",
                    "params": [
                        {
                            "name": "rect",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The parameters of the target display window, which include the x and y coordinates, width, and height {x:Integer, y:Integer, w:Integer, h:Integer}"
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the target display window for the video."
                },
                {
                    "name": "SetDestinationRect",
                    "params": [
                        {
                            "name": "x",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The x-coordinate of the rectangle."
                        },
                        {
                            "name": "y",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The y-coordinate of the rectangle."
                        },
                        {
                            "name": "w",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The width of the rectangle."
                        },
                        {
                            "name": "h",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The height of the rectangle."
                        }
                    ],
                    "description": "Sets the target display window for the video. This is an alternate way to call the **SetDestinationRectangle()** method with each parameter passed separately instead of in an Associative Array."
                },
                {
                    "name": "SetMaxVideoDecodeResolution",
                    "params": [
                        {
                            "name": "width",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The maximum height required by your video."
                        },
                        {
                            "name": "height",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer",
                            "description": "The maximum width required by your video."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the max resolution required by your video."
                },
                {
                    "name": "SetMacrovisionLevel",
                    "params": [
                        {
                            "name": "level",
                            "isRequired": true,
                            "default": null,
                            "type": "Integer"
                        }
                    ],
                    "returnType": "Void"
                },
                {
                    "name": "SetLoop",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Specifies the player to start playing a content item from the beginning as soon as the item has been completed. The default is false."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables the player to start again from the beginning immediately after finishing a content item."
                },
                {
                    "name": "EnableTrickPlay",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Specifies the player to use trick play mode during playback."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables [trickplay mode](/docs/developer-program/media-playback/trick-mode.md) during playback. Trickplay mode provides visual feedback during playback operations such as forward and rewind by displaying the timestamp of the content being seeked."
                },
                {
                    "name": "SetTimedMetaDataForKeys",
                    "params": [
                        {
                            "name": "keys",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Specifies the timedMetaData keys that the BrightScript channel is interested in receiving from the timedMetaData event."
                },
                {
                    "name": "SetGuidedTrickPlay",
                    "params": [
                        {
                            "name": "enable",
                            "isRequired": true,
                            "default": null,
                            "type": "Boolean",
                            "description": "Specifies the player to use guided trickplay mode during playback. By default guided trickplay mode is disabled."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Enables guided trickplay mode (the channel takes control of resuming playback after trickplay). This means that the roVideoScreen object no longer resumes playback automatically, but instead waits for an acknowledgment from the channel."
                },
                {
                    "name": "ResumeAck",
                    "params": [
                        {
                            "name": "Integer",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Acknowledges the previously generated resume request event with a trickplay ID. When roVideoScreen receives this message, it will resume playback unless a more recent trickplay session has started. In the latter case, the ResumeAck message is ignored and playback is not resumed."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roVideoScreen",
                    "description": "The Video Screen object implements the video playback portion of the user interface",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rovideoscreen.md"
                }
            ],
            "description": "> This interface is deprecated.Beginning July 1st, 2017, any new channels using this component will be rejected during certification.Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification."
        },
        "ifXMLElement": {
            "name": "ifXMLElement",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifxmlelement.md",
            "methods": [
                {
                    "name": "Parse",
                    "params": [
                        {
                            "name": "xml",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The XML string to be parsed"
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Parses a string of XML.",
                    "returnDescription": "A flag indicating whether the operation was successful. In that case, other methods below can then be used to extract information about the parsed element."
                },
                {
                    "name": "GetBody",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the body of the element. If the element contains child elements, `GetBody()` returns an [roXMLList](/docs/references/brightscript/components/roxmllist.md \"roXMLList\") representing those elements, like GetChildElements(). If there are no children but the element contains text, `GetBody()` returns an [roString](/docs/references/brightscript/components/rostring.md \"roString\") like `GetText()`. If the element is empty, `GetBody()` returns invalid.",
                    "returnDescription": "Object body."
                },
                {
                    "name": "GetAttributes",
                    "params": [],
                    "returnType": "Object",
                    "description": "Returns the XML attributes of the element.",
                    "returnDescription": "An associative array representing the XML attributes of the element."
                },
                {
                    "name": "GetName",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns the name of the element.",
                    "returnDescription": "Element name."
                },
                {
                    "name": "GetText",
                    "params": [],
                    "returnType": "String",
                    "description": "Returns any text contained in the element. This returns immediate body text only (for example, it does not include text from child elements).",
                    "returnDescription": "The text in the element."
                },
                {
                    "name": "GetChildElements",
                    "params": [],
                    "returnType": "Object",
                    "description": "If this element contains any child elements, this method returns an [roXMLList](/docs/references/brightscript/components/roxmllist.md \"roXMLList\") representing those elements. If there are no child elements, returns invalid.",
                    "returnDescription": "An element list."
                },
                {
                    "name": "GetChildNodes",
                    "params": [],
                    "returnType": "Object",
                    "description": "If this element contains any child elements, this method returns an [roList](/docs/references/brightscript/components/rolist.md \"roList\") representing those elements. If there are no child elements, returns invalid. The difference between this function and `GetChildElements()` is that `GetChildNodes()` handles the case of mixed XML content, i.e., content with both child elements and text such as: Child TextMore Text. In this case `GetChildNodes()` called with the top level as an argument would return an roList with two elements. The first element would be an `roXMLElement` containing the information about. The second would be an `roString` containing \"More Text\".",
                    "returnDescription": "An element list."
                },
                {
                    "name": "GetNamedElements",
                    "params": [
                        {
                            "name": "name",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The parent element containing the child elements to be listed. Matching of the parent element name is case-sensitive."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns an [roXMLList](/docs/references/brightscript/components/roxmllist.md \"roXMLList\") representing all child elements of this element whose case-sensitive name is specified. If only one element matches the name, an roXMLList containing one element is returned. If no elements match, an empty roXMLList is returned.",
                    "returnDescription": "An element list."
                },
                {
                    "name": "GetNamedElementsCi",
                    "params": [
                        {
                            "name": "name",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The parent element containing the child elements to be listed. Matching of the parent element name is case-sensitive."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns an [roXMLList](/docs/references/brightscript/components/roxmllist.md \"roXMLList\") representing all child elements of this element whose case-insensitive name is specified. If only one element matches the name, an roXMLList containing one element is returned. If no elements match, an empty roXMLList is returned.",
                    "returnDescription": "An element list."
                },
                {
                    "name": "IsName",
                    "params": [
                        {
                            "name": "name",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The element name to be verified."
                        }
                    ],
                    "returnType": "Boolean",
                    "description": "Checks whether the element has the specified name.",
                    "returnDescription": "A flag indicating whether the element has the specified name."
                },
                {
                    "name": "HasAttribute",
                    "params": [
                        {
                            "name": "attr",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The element attribute to be verified."
                        }
                    ],
                    "returnType": "Boolean",
                    "returnDescription": "A flag indicating whether the element has the specified attribute."
                },
                {
                    "name": "SetBody",
                    "params": [
                        {
                            "name": "body",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The string to be used to set the element text."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the element text from the specified string"
                },
                {
                    "name": "AddBodyElement",
                    "params": [],
                    "returnType": "Object",
                    "description": "Adds a new unnamed/empty child element and returns it. This should generally be followed by a call to the [SetName()](#setnamename-as-string-as-void) method of the child element. Alternatively, the [AddElement()](#addelementname-as-string-as-object) or [AddElementWidthBody()](#addelementwithbodyname-as-string-body-as-object-as-object) method can be used to combine this step with additional construction into one call.",
                    "returnDescription": "Object value."
                },
                {
                    "name": "AddElement",
                    "params": [
                        {
                            "name": "name",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the child element to be added."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Adds a new child element with the specified name and returns the new element.",
                    "returnDescription": "The new element added."
                },
                {
                    "name": "AddElementWithBody",
                    "params": [
                        {
                            "name": "name",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the child element to be added."
                        },
                        {
                            "name": "body",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The text of the child element to be added (via the body string)."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Adds a new child element with the specified name and text from the specified body string, and returns the new element.",
                    "returnDescription": "The new element added."
                },
                {
                    "name": "AddText",
                    "params": [
                        {
                            "name": "text",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The text to be added to the element."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds text to the element."
                },
                {
                    "name": "AddAttribute",
                    "params": [
                        {
                            "name": "attr",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the attribute to be added to the element."
                        },
                        {
                            "name": "value",
                            "isRequired": true,
                            "default": null,
                            "type": "Object",
                            "description": "The value of the attribute being added to the element."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Adds an attribute value to the element. If an attribute of the same name already exists it is replaced. XML attribute order is not preserved."
                },
                {
                    "name": "SetName",
                    "params": [
                        {
                            "name": "name",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The name of the element."
                        }
                    ],
                    "returnType": "Void",
                    "description": "Sets the name of the element."
                },
                {
                    "name": "GenXML",
                    "params": [
                        {
                            "name": "gen",
                            "isRequired": true,
                            "default": null
                        }
                    ],
                    "description": "Serializes the element to XML document text.",
                    "returnDescription": "A serialized string."
                },
                {
                    "name": "GenXMLHdr",
                    "params": [
                        {
                            "name": "hdr",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "Specify the header with which the output begins."
                        }
                    ],
                    "returnType": "String",
                    "description": "Serializes the element to XML document text. The specified header is used to begin the output (for example, as a custom XML declaration).",
                    "returnDescription": "A serialized string."
                },
                {
                    "name": "Clear",
                    "params": [],
                    "returnType": "Void",
                    "description": "Removes all attributes and children from the element, as well as setting the name to empty."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roXMLElement",
                    "description": "roXMLElement is used to contain an XML tree",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roxmlelement.md"
                }
            ]
        },
        "ifXMLList": {
            "name": "ifXMLList",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/interfaces/ifxmllist.md",
            "methods": [
                {
                    "name": "GetNamedElements",
                    "params": [
                        {
                            "name": "name",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The XML element to be used to find matches."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns a new XMLList that contains all roXMLElements that matched the passed in name (case-sensitive matching is used). This is the same as using the dot operator on an roXMLList.",
                    "returnDescription": "An XMLList that contains the matches."
                },
                {
                    "name": "GetNamedElementsCi",
                    "params": [
                        {
                            "name": "name",
                            "isRequired": true,
                            "default": null,
                            "type": "String",
                            "description": "The XML element to be used to find matches."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Returns a new XMLList that contains all roXMLElements that matched the passed in name (case-insensitive matching is used). This is the same as using the dot operator on an roXMLList.",
                    "returnDescription": "An XMLList that contains the matches."
                },
                {
                    "name": "Simplify",
                    "params": [],
                    "returnType": "Object",
                    "description": "If the list contains exactly one item, this function returns that item. Otherwise, it returns itself.",
                    "returnDescription": "The object item."
                },
                {
                    "name": "GetAttributes",
                    "params": [],
                    "returnType": "Object",
                    "description": "If the list contains exactly one item, this function returns the attributes of that item. Otherwise it returns invalid.",
                    "returnDescription": "The object item."
                },
                {
                    "name": "GetText",
                    "params": [],
                    "returnType": "String",
                    "description": "If the list contains exactly one item, this function returns the text of that item. Otherwise, it returns an empty string.",
                    "returnDescription": "The object string."
                },
                {
                    "name": "GetChildElements",
                    "params": [],
                    "returnType": "Object",
                    "description": "If the list contains exactly one item, this function returns the child elements of that item. Otherwise it returns invalid.",
                    "returnDescription": "The object item."
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roXMLList",
                    "description": "Contains a list of roXML objects",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roxmllist.md"
                }
            ]
        }
    },
    "events": {
        "roAudioPlayerEvent": {
            "name": "roAudioPlayerEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/roaudioplayerevent.md",
            "methods": [
                {
                    "name": "isListItemSelected",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isStatusMessage",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isFullResult",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isPaused",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isResumed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isPartialResult",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRequestFailed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isTimedMetaData",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRequestSucceeded",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roAudioPlayer",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roaudioplayer.md"
                }
            ],
            "description": "The roAudioPlayer sends the roAudioPlayerEvent with the following predicates that indicate its valid event types:"
        },
        "roCaptionRendererEvent": {
            "name": "roCaptionRendererEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rocaptionrendererevent.md",
            "methods": [
                {
                    "name": "isCaptionUpdateRequest",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isCaptionText",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roCaptionRenderer",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rocaptionrenderer.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nroCaptionRenderer events are sent by the roCaptionRenderer to notify a BrightScript channel when caption data needs to be rendered. Specifically, one of two events, isCaptionText and isUpdateCaptionRequest, will be fired depending on the mode that the caption renderer is in. The mode is set by calling the [ifCaptionRenderer.SetMode()](/docs/references/brightscript/interfaces/ifcaptionrenderer.md#setmodemode-as-integer-as-void \"ifCaptionRenderer.SetMode()\") function.\n\n| Mode | Event |\n| --- | --- |\n| 1 | isCaptionUpdateRequest |\n| 2 | isCaptionText |"
        },
        "roCECStatusEvent": {
            "name": "roCECStatusEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rocecstatusevent.md",
            "methods": [
                {
                    "name": "isActiveSource",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [],
            "description": "_Available since Roku OS 8_\n\nThis event determines the active source status for set boxes. Channels subscribing to the `roCECStatusEvent` will be notified when the active-source status of the device changes per the CEC message traffic.\n\nTo use the roCECStatusEvent, follow the steps below:\n\n1.  Connect a Roku STB to a TV which transmits and receives CEC messages\n2.  Select the HDMI input to which the STB is connected\n3.  Switch away and then back to the STB's HDMI input",
            "availableSince": "8"
        },
        "roChannelStoreEvent": {
            "name": "roChannelStoreEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rochannelstoreevent.md",
            "methods": [
                {
                    "name": "isRequestSucceeded",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRequestFailed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRequestInterrupted",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roChannelStore",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rochannelstore.md"
                }
            ],
            "description": "The roChannelStore sends an roChannelStoreEvent in response to a call to any of several Get\\* methods in [ifChannelStore](/docs/references/brightscript/interfaces/ifchannelstore.md \"ifChannelStore\"). The following predicates indicate its valid event types:"
        },
        "roCodeRegistrationScreenEvent": {
            "name": "roCodeRegistrationScreenEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rocoderegistrationscreenevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isButtonPressed",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roCodeRegistrationScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rocoderegistrationscreen.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roCodeRegistrationScreen sends the roCodeRegistrationScreenEvent with the following predicates that indicate its valid event types:"
        },
        "roDeviceInfoEvent": {
            "name": "roDeviceInfoEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rodeviceinfoevent.md",
            "methods": [
                {
                    "name": "isStatusMessage",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isCaptionModeChanged",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roDeviceInfo",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodeviceinfo.md"
                }
            ],
            "description": "_Available since Roku OS 8_\n\nThe roDeviceInfo component sends the roDeviceInfoEvent with the following predicates that indicate its valid event types:",
            "availableSince": "8"
        },
        "roFileSystemEvent": {
            "name": "roFileSystemEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rofilesystemevent.md",
            "methods": [
                {
                    "name": "isStorageDeviceAdded",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isStorageDeviceRemoved",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roFileSystem",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rofilesystem.md"
                }
            ],
            "description": "The roFileSystem component sends the roFileSystemEvent with the following predicates that indicate its valid event types:"
        },
        "roGridScreenEvent": {
            "name": "roGridScreenEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rogridscreenevent.md",
            "methods": [
                {
                    "name": "isListItemSelected",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isListItemFocused",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRemoteKeyPressed",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roGridScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rogridscreen.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.Beginning July 1st, 2017, any new channels using this component will be rejected during certification.Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roGridScreen sends the roGridScreenEvent with the following predicates that indicate its valid event types:"
        },
        "roHdmiHotPlugEvent": {
            "name": "roHdmiHotPlugEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rohdmihotplugevent.md",
            "methods": [
                {
                    "name": "isHdmiHotPlug",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [],
            "description": "The roHdmiStatus sends the roHdmiHotPlugEvent with the following predicates that indicate its valid event types:"
        },
        "roHdmiStatusEvent": {
            "name": "roHdmiStatusEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rohdmistatusevent.md",
            "methods": [
                {
                    "name": "isHdmiStatus",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [],
            "description": "The roHdmiStatus sends the roHdmiStatusEvent with the following predicates that indicate its valid event types:"
        },
        "roImageCanvasEvent": {
            "name": "roImageCanvasEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/roimagecanvasevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isButtonPressed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRemoteKeyPressed",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roImageCanvas",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roimagecanvas.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roImageCanvas sends the roImageCanvasEvent with the following predicates that indicate its valid event types:"
        },
        "roInputEvent": {
            "name": "roInputEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/roinputevent.md",
            "methods": [
                {
                    "name": "isInput",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "GetInfo",
                    "params": [],
                    "returnType": "Object"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roInput",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roinput.md"
                }
            ],
            "description": "The roInput component sends the roInputEvent with the following predicates that indicate its valid event types:"
        },
        "roKeyboardScreenEvent": {
            "name": "roKeyboardScreenEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rokeyboardscreenevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isButtonPressed",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roKeyboardScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rokeyboardscreen.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roKeyboardScreen sends the roKeyboardScreenEvent with the following predicates that indicate its valid event types:"
        },
        "roListScreenEvent": {
            "name": "roListScreenEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rolistscreenevent.md",
            "methods": [
                {
                    "name": "isListItemSelected",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isListItemFocused",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRemoteKeyPressed",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roListScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rolistscreen.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roListScreen sends the roListScreenEvent with the following predicates that indicate its valid event types:"
        },
        "roMessageDialogEvent": {
            "name": "roMessageDialogEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/romessagedialogevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isButtonPressed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isButtonInfo",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roMessageDialog",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/romessagedialog.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roMessageDialog sends the roMessageDialogEvent with the following predicates that indicate its valid event types:"
        },
        "roMicrophoneEvent": {
            "name": "roMicrophoneEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/romicrophoneevent.md",
            "methods": [
                {
                    "name": "IsRecordingDone",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "IsRecordingInfo",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roMicrophone",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/romicrophone.md"
                }
            ],
            "description": "The [roMicrophone](/docs/references/brightscript/components/romicrophone.md \"roMicrophone\") component sends the `roMicrophoneEvent` with the following predicates that indicate its valid event types:"
        },
        "roOneLineDialogEvent": {
            "name": "roOneLineDialogEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/roonelinedialogevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roOneLineDialog",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roonelinedialog.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nSends the roOneLineDialogEvent with the following predicates that indicate its valid event types:"
        },
        "roParagraphScreenEvent": {
            "name": "roParagraphScreenEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/roparagraphscreenevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isButtonPressed",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roParagraphScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roparagraphscreen.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roParagraphScreen sends the roParagraphScreenEvent with the following predicates that indicate its valid event types:"
        },
        "roPinEntryDialogEvent": {
            "name": "roPinEntryDialogEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/ropinentrydialogevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isButtonPressed",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roPinEntryDialog",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/ropinentrydialog.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roPinEntryDialog sends the roPinEntryDialogEvent with the following predicates that indicate its valid event types:"
        },
        "roPosterScreenEvent": {
            "name": "roPosterScreenEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/roposterscreenevent.md",
            "methods": [
                {
                    "name": "isListItemSelected",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isListFocused",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isAdSelected",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isListItemFocused",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isListItemInfo",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRemoteKeyPressed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isListSelected",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roPosterScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roposterscreen.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.Beginning July 1st, 2017, any new channels using this component will be rejected during certification.Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roPosterScreen sends the roPosterScreenEvent with the following predicates that indicate its valid event types:"
        },
        "roSearchScreenEvent": {
            "name": "roSearchScreenEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rosearchscreenevent.md",
            "methods": [
                {
                    "name": "IsFullResult",
                    "params": [],
                    "returnType": "Dynamic"
                },
                {
                    "name": "IsScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "IsCleared",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "IsButtonInfo",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "IsPartialResult",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSearchScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosearchscreen.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roSearchScreen sends the roSearchScreenEvent with the following predicates that indicate its valid event types:"
        },
        "roSGNodeEvent": {
            "name": "roSGNodeEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rosgnodeevent.md",
            "methods": [
                {
                    "name": "getData",
                    "params": [],
                    "returnType": "Dynamic"
                },
                {
                    "name": "getField",
                    "params": [],
                    "returnType": "Dynamic"
                },
                {
                    "name": "getRoSGNode",
                    "params": [],
                    "returnType": "Dynamic"
                },
                {
                    "name": "getNode",
                    "params": [],
                    "returnType": "Dynamic"
                },
                {
                    "name": "getInfo",
                    "params": [],
                    "returnType": "Object"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSGNode",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosgnode.md"
                }
            ],
            "description": "An roSGNode object sends roSGNodeEvent messages to a specified port when changes occur in nodes. An roSGNodeEvent is also sent as the argument of field observer callback functions. Both of these cases allow a SceneGraph application to respond to events. roSGNodeEvent supports the following methods."
        },
        "roSGScreenEvent": {
            "name": "roSGScreenEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rosgscreenevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSGScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rosgscreen.md"
                }
            ],
            "description": "**roSGScreenEvents** are events sent to a scene graph **roSGScreen** by the framework. Other than when notifying the channel's main BrightScript thread that the screen is being closed, and thus that the channel should be terminated, channels do not generally handle these events."
        },
        "roSlideShowEvent": {
            "name": "roSlideShowEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/roslideshowevent.md",
            "methods": [
                {
                    "name": "isPaused",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isResumed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRequestFailed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isPlaybackPosition",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isButtonPressed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRemoteKeyPressed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRequestSucceeded",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRequestInterrupted",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSlideShow",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roslideshow.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roSlideShow sends the roSlideShowEvent with the following predicates that indicate its valid event types:"
        },
        "roSocketEvent": {
            "name": "roSocketEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rosocketevent.md",
            "methods": [
                {
                    "name": "GetSocketID",
                    "params": [],
                    "returnType": "Integer"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roDataGramSocket",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rodatagramsocket.md"
                },
                {
                    "name": "roStreamSocket",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rostreamsocket.md"
                }
            ],
            "description": "An roStreamSocket or roDataGramSocket object sends the roSocketEvent to indicate a change in the status of the socket. The socket must enable specific event notifications via the notify methods of ifSocketAsync."
        },
        "roSpringboardScreenEvent": {
            "name": "roSpringboardScreenEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rospringboardscreenevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isButtonPressed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRemoteKeyPressed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isButtonInfo",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roSpringboardScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rospringboardscreen.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roSpringboardScreen sends the roSpringboardScreenEvent with the following predicates that indicate its valid event types:"
        },
        "roSystemLogEvent": {
            "name": "roSystemLogEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rosystemlogevent.md",
            "methods": [
                {
                    "name": "GetInfo",
                    "params": [],
                    "returnType": "Object"
                }
            ],
            "properties": [],
            "implementers": [],
            "description": "roSystemLogEvents are sent when enabled via [roSystemLog](/docs/references/brightscript/components/rosystemlog.md \"roSystemLog\"). roSystemLogEvent has the following method:"
        },
        "roTextScreenEvent": {
            "name": "roTextScreenEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rotextscreenevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isButtonPressed",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roTextScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotextscreen.md"
                }
            ],
            "description": "> This component is deprecated and will be removed from Roku OS on January 1st, 2019.\n> \n> Beginning July 1st, 2017, any new channels using this component will be rejected during certification.\n> \n> Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roTextScreen sends the roTextScreenEvent with the following predicates that indicate its valid event types:"
        },
        "roTextToSpeechEvent": {
            "name": "roTextToSpeechEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rotexttospeechevent.md",
            "methods": [
                {
                    "name": "GetData",
                    "params": [],
                    "returnType": "Integer"
                },
                {
                    "name": "GetInfo",
                    "params": [],
                    "returnType": "Object"
                },
                {
                    "name": "GetIndex",
                    "params": [],
                    "returnType": "Integer"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roTextToSpeech",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotexttospeech.md"
                }
            ],
            "description": "> Please note this component is only available on the following devices: Roku Streaming Stick (3600X), Roku Express (3700X) and Express+ (3710X), Roku Premiere (4620X) and Premiere+ (4630X), Roku Ultra (4640X), and any Roku TV running Roku OS version 7.2 and later.\nThe [roTextToSpeech](/docs/references/brightscript/components/rotexttospeech.md \"roTextToSpeech\") component sends the roTextToSpeechEvent with the following predicates that indicate its valid event types."
        },
        "roTextureRequestEvent": {
            "name": "roTextureRequestEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rotexturerequestevent.md",
            "methods": [
                {
                    "name": "GetId",
                    "params": [],
                    "returnType": "Integer"
                },
                {
                    "name": "GetState",
                    "params": [],
                    "returnType": "Integer"
                },
                {
                    "name": "GetURI",
                    "params": [],
                    "returnType": "String"
                },
                {
                    "name": "GetBitmap",
                    "params": [],
                    "returnType": "Object"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roTextureManager",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rotexturemanager.md"
                }
            ],
            "description": "The [roTextureManager](/docs/references/brightscript/components/rotexturemanager.md \"roTextureManager\") sends the roTextureRequestEvent after completing a request."
        },
        "roUniversalControlEvent": {
            "name": "roUniversalControlEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rouniversalcontrolevent.md",
            "methods": [
                {
                    "name": "GetInt",
                    "params": [],
                    "returnType": "Integer"
                },
                {
                    "name": "GetKey",
                    "params": [],
                    "returnType": "Integer"
                },
                {
                    "name": "GetRemoteID",
                    "params": [],
                    "returnType": "String"
                },
                {
                    "name": "GetID",
                    "params": [],
                    "returnType": "Integer"
                },
                {
                    "name": "IsPress",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "GetChar",
                    "params": [],
                    "returnType": "Integer"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/roscreen.md"
                }
            ],
            "description": "The roScreen object sends the roUniversalControlEvent with the following related methods. If an app constrains the events processed to just the roUniversalControlEvent, the app will work with any controller. The GetID(), GetChar(), GetKey(), and IsPress() methods can be used instead of parsing the GetInt() return value to more effectively distinguish between remote control and keyboard key presses, and the key press and release events."
        },
        "roUrlEvent": {
            "name": "roUrlEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rourlevent.md",
            "methods": [
                {
                    "name": "GetInt",
                    "params": [],
                    "returnType": "Integer"
                },
                {
                    "name": "GetResponseCode",
                    "params": [],
                    "returnType": "Integer"
                },
                {
                    "name": "GetFailureReason",
                    "params": [],
                    "returnType": "String"
                },
                {
                    "name": "GetString",
                    "params": [],
                    "returnType": "String"
                },
                {
                    "name": "GetSourceIdentity",
                    "params": [],
                    "returnType": "Integer"
                },
                {
                    "name": "GetResponseHeaders",
                    "params": [],
                    "returnType": "Object"
                },
                {
                    "name": "GetTargetIpAddress",
                    "params": [],
                    "returnType": "String"
                },
                {
                    "name": "GetResponseHeadersArray",
                    "params": [],
                    "returnType": "Object"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roUrlTransfer",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rourltransfer.md"
                }
            ],
            "description": "The roUrlTransfer component sends the roUrlEvent with the following methods:"
        },
        "roVideoPlayerEvent": {
            "name": "roVideoPlayerEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rovideoplayerevent.md",
            "methods": [
                {
                    "name": "isPaused",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isListItemSelected",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isFormatDetected",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRequestFailed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isSegmentDownloadStarted",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isStreamStarted",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isStatusMessage",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isFullResult",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isResumed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isCaptionModeChanged",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isTimedMetaData",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isPlaybackPosition",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "GetIndex",
                    "params": [],
                    "returnType": "Integer"
                },
                {
                    "name": "GetInfo",
                    "params": [],
                    "returnType": "Object"
                },
                {
                    "name": "isStreamSegmentInfo",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isDownloadSegmentInfo",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isRequestSucceeded",
                    "params": [],
                    "returnType": "Boolean"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roVideoPlayer",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rovideoplayer.md"
                }
            ],
            "description": "The roVideoPlayer sends the roVideoPlayerEvent with the following predicates that indicate its valid event types:"
        },
        "roVideoScreenEvent": {
            "name": "roVideoScreenEvent",
            "url": "https://developer.roku.com/docs/docs/references/brightscript/events/rovideoscreenevent.md",
            "methods": [
                {
                    "name": "isScreenClosed",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isPartialResult",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "isResumeRequest",
                    "params": [],
                    "returnType": "Boolean"
                },
                {
                    "name": "GetData",
                    "params": [],
                    "returnType": "Integer"
                },
                {
                    "name": "GetIndex",
                    "params": [],
                    "returnType": "Integer"
                }
            ],
            "properties": [],
            "implementers": [
                {
                    "name": "roVideoScreen",
                    "url": "https://developer.roku.com/docs/docs/references/brightscript/components/rovideoscreen.md"
                }
            ],
            "description": "> This component is deprecated.Beginning July 1st, 2017, any new channels using this component will be rejected during certification.Beginning January 1st, 2018, any updates to existing channels using this component will be rejected during certification.\nThe roVideoScreen sends the roVideoScreenEvent with the same predicates as in [roVideoPlayerEvent](/docs/references/brightscript/events/rovideoplayerevent.md \"roVideoPlayerEvent\"). In addition to the events listed in roVideoPlayerEvent, the following events are also supported:"
        }
    }
}