{
    "title": "JSON schema for bsconfig.json configuration files",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "dependencies": {
        "deploy": [
            "host",
            "password"
        ]
    },
    "properties": {
        "extends": {
            "description": "Relative or absolute path to another bsconfig.json file that this file should use as a base and then override. Prefix with a question mark (?) to prevent throwing an exception if the file does not exist.",
            "type": "string"
        },
        "cwd": {
            "description": "A path that will be used to override the current working directory",
            "type": "string"
        },
        "rootDir": {
            "description": "The root directory of your Roku project. Defaults to the current working directory (or cwd property)",
            "type": "string"
        },
        "files": {
            "description": "The list of files that should be used in this project. Supports globs. Optionally, you can specify an object with `src` and `dest` properties to move files from one location into a different destination location",
            "default": [
                "manifest",
                "source/**/*.*",
                "components/**/*.*",
                "images/**/*.*"
            ],
            "items": {
                "anyOf": [
                    {
                        "type": "string",
                        "description": "A file path or file glob"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "src": {
                                "anyOf": [
                                    {
                                        "type": "string",
                                        "description": "A file path or glob pattern of source file(s)"
                                    },
                                    {
                                        "type": "array",
                                        "description": "An array of file path or globs",
                                        "items": {
                                            "type": "string",
                                            "description": "A file path or glob pattern of source file(s)"
                                        }
                                    }
                                ]
                            },
                            "dest": {
                                "type": "string",
                                "description": "The destination for the file(s) found in 'src'"
                            }
                        },
                        "required": [
                            "src",
                            "dest"
                        ]
                    }
                ]
            }
        },
        "outFile": {
            "description": "The path where the output zip or package should be placed. This includes the filename. Defaults to \"./out/package\"",
            "type": "string"
        },
        "createPackage": {
            "description": "Creates a zip package. Defaults to true. This setting is ignored when deploy is enabled.",
            "type": "boolean"
        },
        "sourceMap": {
            "description": "Enables generating sourcemap files, which allow debugging tools to show the original source code while running the emitted files.",
            "type": "boolean",
            "default": false
        },
        "copyToStaging": {
            "description": "If true, the files are copied to staging. This setting is ignored when deploy is enabled or if createPackage is enabled",
            "type": "boolean"
        },
        "watch": {
            "description": "If true, the server will keep running and will watch and recompile on every file change",
            "type": "boolean",
            "default": false
        },
        "deploy": {
            "description": "If true, after a successful buld, the project will be deployed to the roku specified in host",
            "type": "boolean"
        },
        "host": {
            "description": "The host of the Roku that the package will be deploy to",
            "type": "string"
        },
        "username": {
            "description": "The username to use when deploying to a Roku device",
            "type": "string"
        },
        "password": {
            "description": " The password to use when deploying to a Roku device",
            "type": "string"
        },
        "retainStagingFolder": {
            "type": "boolean",
            "description": "Prevent the staging folder from being deleted after the deployment package is created.  This is helpful for troubleshooting why your package isn't being created the way you expected.",
            "default": false
        },
        "stagingFolderPath": {
            "type": "string",
            "description": "The path to the staging folder (where all files are copied before creating the zip package)"
        },
        "ignoreErrorCodes": {
            "description": "A list of error codes the compiler should NOT emit, even if encountered.",
            "type": "array",
            "deprecated": true,
            "deprecationMessage": "Deprecated. Use `diagnosticFilters` instead.",
            "items": {
                "anyOf": [
                    {
                        "type": "number",
                        "description": "A BrighterScript error code that will be ignored during compile"
                    }
                ]
            }
        },
        "emitFullPaths": {
            "description": "Emit full paths to files when printing diagnostics to the console.",
            "type": "boolean",
            "default": false
        },
        "emitDefinitions": {
            "description": "Emit type definition files (`d.bs`) during transpile",
            "type": "boolean",
            "default": false
        },
        "diagnosticFilters": {
            "description": "A collection of filters used to hide diagnostics for certain files",
            "type": "array",
            "items": {
                "anyOf": [
                    {
                        "type": "number",
                        "description": "The code of a diagnostic that should be filtered from all files"
                    },
                    {
                        "type": "string",
                        "description": "A file path relative to rootDir, an absolute path, or a file glob pointing to file(s) you wish to filter diagnostics from."
                    },
                    {
                        "type": "object",
                        "description": "A file path relative to rootDir, an absolute path, or a file glob pointing to file(s) you wish to filter diagnostics from.",
                        "properties": {
                            "src": {
                                "type": "string",
                                "description": "A file path relative to rootDir, an absolute path, or a file glob pointing to file(s) you wish to filter diagnostics from."
                            },
                            "codes": {
                                "type": "array",
                                "description": "A list of codes of diagnostics that should be filtered out from the files matched in 'src'`. If omitted, all error codes are used",
                                "items": {
                                    "anyOf": [
                                        {
                                            "type": [
                                                "number",
                                                "string"
                                            ],
                                            "description": "A code of diagnostics that should be filtered out from the files matched in 'src'"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                ]
            }
        },
        "plugins": {
            "description": "A list of node scripts or npm modules to add extra diagnostics or transform the AST.",
            "type": "array",
            "items": {
                "anyOf": [
                    {
                        "type": "string",
                        "description": "a path to a node script or an npm module to load dynamically"
                    }
                ]
            }
        },
        "require": {
            "description": "A list of scripts or modules to pass to node's `require()` on startup. This is useful for doing things like ts-node registration",
            "type": "array",
            "items": {
                "anyOf": [
                    {
                        "type": "string",
                        "description": "a path to a node script or an npm module to load dynamically at startup."
                    }
                ]
            }
        },
        "autoImportComponentScript": {
            "description": "When enabled, every xml component will search for a .bs or .brs file with the same name in the same folder, and add it as a script import if found. Disabled by default",
            "type": "boolean",
            "default": false
        },
        "logLevel": {
            "description": "The amount of detail that should be printed to the console",
            "type": "string",
            "default": "log",
            "enum": [
                "error",
                "warn",
                "log",
                "info",
                "debug",
                "trace"
            ]
        },
        "sourceRoot": {
            "description": "Override the root directory path where debugger should locate the source files. The location will be embedded in the source map to help debuggers locate the original source files. This only applies to files found within rootDir. This is useful when you want to preprocess files before passing them to BrighterScript, and want a debugger to open the original files. This option also affects the `SOURCE_FILE_PATH` and `SOURCE_LOCATION` source literals.",
            "type": "string"
        },
        "diagnosticLevel": {
            "description": "Specify what diagnostic levels are printed to the console. This has no effect on what diagnostics are reported in the LanguageServer. Defaults to 'warn'",
            "type": "string",
            "default": "log",
            "enum": [
                "hint",
                "info",
                "warn",
                "error"
            ]
        },
        "allowBrighterScriptInBrightScript": {
            "description": "Allow brighterscript features (classes, interfaces, etc...) to be included in BrightScript (`.brs`) files, and force those files to be transpiled.",
            "type": "boolean",
            "default": false
        }
    }
}